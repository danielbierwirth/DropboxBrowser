///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>

#import "DBSerializableProtocol.h"

@class DBCOMMONPathRoot;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - API Object

///
/// The `PathRoot` union.
///
/// This class implements the `DBSerializable` protocol (serialize and
/// deserialize instance methods), which is required for all Obj-C SDK API route
/// objects.
///
@interface DBCOMMONPathRoot : NSObject <DBSerializable, NSCopying>

#pragma mark - Instance fields

/// The `DBCOMMONPathRootTag` enum type represents the possible tag states with
/// which the `DBCOMMONPathRoot` union can exist.
typedef NS_ENUM(NSInteger, DBCOMMONPathRootTag) {
  /// Paths are relative to the authenticating user's home directory, whether
  /// or not that user belongs to a team.
  DBCOMMONPathRootHome,

  /// Paths are relative to the authenticating team member's home directory.
  /// (This results in :field:`PathRootError.invalid' if the user does not
  /// belong to a team.)
  DBCOMMONPathRootMemberHome,

  /// Paths are relative to the given team directory. (This results in
  /// `invalid` in `DBCOMMONPathRootError` if the user is not a member of the
  /// team associated with that path root id.)
  DBCOMMONPathRootTeam,

  /// Paths are relative to the user's home directory. (This results in
  /// `invalid` in `DBCOMMONPathRootError` if the belongs to a team.)
  DBCOMMONPathRootUserHome,

  /// Paths are relative to given shared folder id (This results in
  /// `noPermission` in `DBCOMMONPathRootError` if you don't have access to
  /// this shared folder.)
  DBCOMMONPathRootSharedFolder,

  /// (no description).
  DBCOMMONPathRootOther,

};

/// Represents the union's current tag state.
@property (nonatomic, readonly) DBCOMMONPathRootTag tag;

/// Paths are relative to the given team directory. (This results in `invalid`
/// in `DBCOMMONPathRootError` if the user is not a member of the team
/// associated with that path root id.) @note Ensure the `isTeam` method returns
/// true before accessing, otherwise a runtime exception will be raised.
@property (nonatomic, readonly, copy) NSString *team;

/// Paths are relative to given shared folder id (This results in `noPermission`
/// in `DBCOMMONPathRootError` if you don't have access to  this shared folder.)
/// @note Ensure the `isSharedFolder` method returns true before accessing,
/// otherwise a runtime exception will be raised.
@property (nonatomic, readonly, copy) NSString *sharedFolder;

#pragma mark - Constructors

///
/// Initializes union class with tag state of "home".
///
/// Description of the "home" tag state: Paths are relative to the
/// authenticating user's home directory, whether or not that user belongs to a
/// team.
///
/// @return An initialized instance.
///
- (instancetype)initWithHome;

///
/// Initializes union class with tag state of "member_home".
///
/// Description of the "member_home" tag state: Paths are relative to the
/// authenticating team member's home directory. (This results in
/// :field:`PathRootError.invalid' if the user does not belong to a team.)
///
/// @return An initialized instance.
///
- (instancetype)initWithMemberHome;

///
/// Initializes union class with tag state of "team".
///
/// Description of the "team" tag state: Paths are relative to the given team
/// directory. (This results in `invalid` in `DBCOMMONPathRootError` if the user
/// is not a member of the team associated with that path root id.)
///
/// @param team Paths are relative to the given team directory. (This results in
/// `invalid` in `DBCOMMONPathRootError` if the user is not a member of the team
/// associated with that path root id.)
///
/// @return An initialized instance.
///
- (instancetype)initWithTeam:(NSString *)team;

///
/// Initializes union class with tag state of "user_home".
///
/// Description of the "user_home" tag state: Paths are relative to the user's
/// home directory. (This results in `invalid` in `DBCOMMONPathRootError` if the
/// belongs to a team.)
///
/// @return An initialized instance.
///
- (instancetype)initWithUserHome;

///
/// Initializes union class with tag state of "shared_folder".
///
/// Description of the "shared_folder" tag state: Paths are relative to given
/// shared folder id (This results in `noPermission` in `DBCOMMONPathRootError`
/// if you don't have access to  this shared folder.)
///
/// @param sharedFolder Paths are relative to given shared folder id (This
/// results in `noPermission` in `DBCOMMONPathRootError` if you don't have
/// access to  this shared folder.)
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedFolder:(NSString *)sharedFolder;

///
/// Initializes union class with tag state of "other".
///
/// @return An initialized instance.
///
- (instancetype)initWithOther;

- (instancetype)init NS_UNAVAILABLE;

#pragma mark - Tag state methods

///
/// Retrieves whether the union's current tag state has value "home".
///
/// @return Whether the union's current tag state has value "home".
///
- (BOOL)isHome;

///
/// Retrieves whether the union's current tag state has value "member_home".
///
/// @return Whether the union's current tag state has value "member_home".
///
- (BOOL)isMemberHome;

///
/// Retrieves whether the union's current tag state has value "team".
///
/// @note Call this method and ensure it returns true before accessing the
/// `team` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "team".
///
- (BOOL)isTeam;

///
/// Retrieves whether the union's current tag state has value "user_home".
///
/// @return Whether the union's current tag state has value "user_home".
///
- (BOOL)isUserHome;

///
/// Retrieves whether the union's current tag state has value "shared_folder".
///
/// @note Call this method and ensure it returns true before accessing the
/// `sharedFolder` property, otherwise a runtime exception will be thrown.
///
/// @return Whether the union's current tag state has value "shared_folder".
///
- (BOOL)isSharedFolder;

///
/// Retrieves whether the union's current tag state has value "other".
///
/// @return Whether the union's current tag state has value "other".
///
- (BOOL)isOther;

///
/// Retrieves string value of union's current tag state.
///
/// @return A human-readable string representing the union's current tag state.
///
- (NSString *)tagName;

@end

#pragma mark - Serializer Object

///
/// The serialization class for the `DBCOMMONPathRoot` union.
///
@interface DBCOMMONPathRootSerializer : NSObject

///
/// Serializes `DBCOMMONPathRoot` instances.
///
/// @param instance An instance of the `DBCOMMONPathRoot` API object.
///
/// @return A json-compatible dictionary representation of the
/// `DBCOMMONPathRoot` API object.
///
+ (NSDictionary *)serialize:(DBCOMMONPathRoot *)instance;

///
/// Deserializes `DBCOMMONPathRoot` instances.
///
/// @param dict A json-compatible dictionary representation of the
/// `DBCOMMONPathRoot` API object.
///
/// @return An instantiation of the `DBCOMMONPathRoot` object.
///
+ (DBCOMMONPathRoot *)deserialize:(NSDictionary *)dict;

@end

NS_ASSUME_NONNULL_END
