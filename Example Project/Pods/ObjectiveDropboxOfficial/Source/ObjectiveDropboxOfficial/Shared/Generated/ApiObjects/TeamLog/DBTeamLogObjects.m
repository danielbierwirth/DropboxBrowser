///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

/// Arguments, results, and errors for the `TeamLog` namespace.

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccessMethodLogInfo.h"
#import "DBTEAMLOGApiSessionLogInfo.h"
#import "DBTEAMLOGSessionLogInfo.h"
#import "DBTEAMLOGWebSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccessMethodLogInfo

@synthesize endUser = _endUser;
@synthesize signInAs = _signInAs;
@synthesize contentManager = _contentManager;
@synthesize adminConsole = _adminConsole;
@synthesize api = _api;

#pragma mark - Constructors

- (instancetype)initWithEndUser:(DBTEAMLOGSessionLogInfo *)endUser {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoEndUser;
    _endUser = endUser;
  }
  return self;
}

- (instancetype)initWithSignInAs:(DBTEAMLOGWebSessionLogInfo *)signInAs {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoSignInAs;
    _signInAs = signInAs;
  }
  return self;
}

- (instancetype)initWithContentManager:(DBTEAMLOGWebSessionLogInfo *)contentManager {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoContentManager;
    _contentManager = contentManager;
  }
  return self;
}

- (instancetype)initWithAdminConsole:(DBTEAMLOGWebSessionLogInfo *)adminConsole {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoAdminConsole;
    _adminConsole = adminConsole;
  }
  return self;
}

- (instancetype)initWithApi:(DBTEAMLOGApiSessionLogInfo *)api {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoApi;
    _api = api;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGSessionLogInfo *)endUser {
  if (![self isEndUser]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAccessMethodLogInfoEndUser, but was %@.", [self tagName]];
  }
  return _endUser;
}

- (DBTEAMLOGWebSessionLogInfo *)signInAs {
  if (![self isSignInAs]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAccessMethodLogInfoSignInAs, but was %@.", [self tagName]];
  }
  return _signInAs;
}

- (DBTEAMLOGWebSessionLogInfo *)contentManager {
  if (![self isContentManager]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGAccessMethodLogInfoContentManager, but was %@.", [self tagName]];
  }
  return _contentManager;
}

- (DBTEAMLOGWebSessionLogInfo *)adminConsole {
  if (![self isAdminConsole]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAccessMethodLogInfoAdminConsole, but was %@.", [self tagName]];
  }
  return _adminConsole;
}

- (DBTEAMLOGApiSessionLogInfo *)api {
  if (![self isApi]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAccessMethodLogInfoApi, but was %@.", [self tagName]];
  }
  return _api;
}

#pragma mark - Tag state methods

- (BOOL)isEndUser {
  return _tag == DBTEAMLOGAccessMethodLogInfoEndUser;
}

- (BOOL)isSignInAs {
  return _tag == DBTEAMLOGAccessMethodLogInfoSignInAs;
}

- (BOOL)isContentManager {
  return _tag == DBTEAMLOGAccessMethodLogInfoContentManager;
}

- (BOOL)isAdminConsole {
  return _tag == DBTEAMLOGAccessMethodLogInfoAdminConsole;
}

- (BOOL)isApi {
  return _tag == DBTEAMLOGAccessMethodLogInfoApi;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAccessMethodLogInfoOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAccessMethodLogInfoEndUser:
    return @"DBTEAMLOGAccessMethodLogInfoEndUser";
  case DBTEAMLOGAccessMethodLogInfoSignInAs:
    return @"DBTEAMLOGAccessMethodLogInfoSignInAs";
  case DBTEAMLOGAccessMethodLogInfoContentManager:
    return @"DBTEAMLOGAccessMethodLogInfoContentManager";
  case DBTEAMLOGAccessMethodLogInfoAdminConsole:
    return @"DBTEAMLOGAccessMethodLogInfoAdminConsole";
  case DBTEAMLOGAccessMethodLogInfoApi:
    return @"DBTEAMLOGAccessMethodLogInfoApi";
  case DBTEAMLOGAccessMethodLogInfoOther:
    return @"DBTEAMLOGAccessMethodLogInfoOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGAccessMethodLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGAccessMethodLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccessMethodLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAccessMethodLogInfoEndUser:
    result = prime * result + [self.endUser hash];
  case DBTEAMLOGAccessMethodLogInfoSignInAs:
    result = prime * result + [self.signInAs hash];
  case DBTEAMLOGAccessMethodLogInfoContentManager:
    result = prime * result + [self.contentManager hash];
  case DBTEAMLOGAccessMethodLogInfoAdminConsole:
    result = prime * result + [self.adminConsole hash];
  case DBTEAMLOGAccessMethodLogInfoApi:
    result = prime * result + [self.api hash];
  case DBTEAMLOGAccessMethodLogInfoOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccessMethodLogInfo:other];
}

- (BOOL)isEqualToAccessMethodLogInfo:(DBTEAMLOGAccessMethodLogInfo *)anAccessMethodLogInfo {
  if (self == anAccessMethodLogInfo) {
    return YES;
  }
  if (self.tag != anAccessMethodLogInfo.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAccessMethodLogInfoEndUser:
    return [self.endUser isEqual:anAccessMethodLogInfo.endUser];
  case DBTEAMLOGAccessMethodLogInfoSignInAs:
    return [self.signInAs isEqual:anAccessMethodLogInfo.signInAs];
  case DBTEAMLOGAccessMethodLogInfoContentManager:
    return [self.contentManager isEqual:anAccessMethodLogInfo.contentManager];
  case DBTEAMLOGAccessMethodLogInfoAdminConsole:
    return [self.adminConsole isEqual:anAccessMethodLogInfo.adminConsole];
  case DBTEAMLOGAccessMethodLogInfoApi:
    return [self.api isEqual:anAccessMethodLogInfo.api];
  case DBTEAMLOGAccessMethodLogInfoOther:
    return [[self tagName] isEqual:[anAccessMethodLogInfo tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccessMethodLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGAccessMethodLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isEndUser]) {
    jsonDict[@"end_user"] = [[DBTEAMLOGSessionLogInfoSerializer serialize:valueObj.endUser] mutableCopy];
    jsonDict[@".tag"] = @"end_user";
  } else if ([valueObj isSignInAs]) {
    jsonDict[@"sign_in_as"] = [[DBTEAMLOGWebSessionLogInfoSerializer serialize:valueObj.signInAs] mutableCopy];
    jsonDict[@".tag"] = @"sign_in_as";
  } else if ([valueObj isContentManager]) {
    jsonDict[@"content_manager"] =
        [[DBTEAMLOGWebSessionLogInfoSerializer serialize:valueObj.contentManager] mutableCopy];
    jsonDict[@".tag"] = @"content_manager";
  } else if ([valueObj isAdminConsole]) {
    jsonDict[@"admin_console"] = [[DBTEAMLOGWebSessionLogInfoSerializer serialize:valueObj.adminConsole] mutableCopy];
    jsonDict[@".tag"] = @"admin_console";
  } else if ([valueObj isApi]) {
    jsonDict[@"api"] = [[DBTEAMLOGApiSessionLogInfoSerializer serialize:valueObj.api] mutableCopy];
    jsonDict[@".tag"] = @"api";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGAccessMethodLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"end_user"]) {
    DBTEAMLOGSessionLogInfo *endUser = [DBTEAMLOGSessionLogInfoSerializer deserialize:valueDict[@"end_user"]];
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithEndUser:endUser];
  } else if ([tag isEqualToString:@"sign_in_as"]) {
    DBTEAMLOGWebSessionLogInfo *signInAs = [DBTEAMLOGWebSessionLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithSignInAs:signInAs];
  } else if ([tag isEqualToString:@"content_manager"]) {
    DBTEAMLOGWebSessionLogInfo *contentManager = [DBTEAMLOGWebSessionLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithContentManager:contentManager];
  } else if ([tag isEqualToString:@"admin_console"]) {
    DBTEAMLOGWebSessionLogInfo *adminConsole = [DBTEAMLOGWebSessionLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithAdminConsole:adminConsole];
  } else if ([tag isEqualToString:@"api"]) {
    DBTEAMLOGApiSessionLogInfo *api = [DBTEAMLOGApiSessionLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithApi:api];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureChangeAvailabilityDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureChangeAvailabilityDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureChangeAvailabilityDetails:other];
}

- (BOOL)isEqualToAccountCaptureChangeAvailabilityDetails:
    (DBTEAMLOGAccountCaptureChangeAvailabilityDetails *)anAccountCaptureChangeAvailabilityDetails {
  if (self == anAccountCaptureChangeAvailabilityDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGAccountCaptureChangeAvailabilityDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGAccountCaptureChangeAvailabilityDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGAccountCaptureChangeAvailabilityDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureChangePolicyDetails.h"
#import "DBTEAMLOGAccountCapturePolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGAccountCapturePolicy *)dNewValue
                    previousValue:(DBTEAMLOGAccountCapturePolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGAccountCapturePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureChangePolicyDetails:other];
}

- (BOOL)isEqualToAccountCaptureChangePolicyDetails:
    (DBTEAMLOGAccountCaptureChangePolicyDetails *)anAccountCaptureChangePolicyDetails {
  if (self == anAccountCaptureChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:anAccountCaptureChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:anAccountCaptureChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGAccountCaptureChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGAccountCapturePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGAccountCapturePolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGAccountCaptureChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGAccountCapturePolicy *dNewValue =
      [DBTEAMLOGAccountCapturePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGAccountCapturePolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGAccountCapturePolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGAccountCaptureChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureMigrateAccountDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureMigrateAccountDetails

#pragma mark - Constructors

- (instancetype)initWithDomainName:(NSArray<NSString *> *)domainName {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](domainName);

  self = [super init];
  if (self) {
    _domainName = domainName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureMigrateAccountDetails:other];
}

- (BOOL)isEqualToAccountCaptureMigrateAccountDetails:
    (DBTEAMLOGAccountCaptureMigrateAccountDetails *)anAccountCaptureMigrateAccountDetails {
  if (self == anAccountCaptureMigrateAccountDetails) {
    return YES;
  }
  if (![self.domainName isEqual:anAccountCaptureMigrateAccountDetails.domainName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGAccountCaptureMigrateAccountDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_name"] = [DBArraySerializer serialize:valueObj.domainName
                                                withBlock:^id(id elem0) {
                                                  return elem0;
                                                }];

  return jsonDict;
}

+ (DBTEAMLOGAccountCaptureMigrateAccountDetails *)deserialize:(NSDictionary *)valueDict {
  NSArray<NSString *> *domainName = [DBArraySerializer deserialize:valueDict[@"domain_name"]
                                                         withBlock:^id(id elem0) {
                                                           return elem0;
                                                         }];

  return [[DBTEAMLOGAccountCaptureMigrateAccountDetails alloc] initWithDomainName:domainName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCapturePolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCapturePolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCapturePolicyDisabled;
  }
  return self;
}

- (instancetype)initWithInvitedUsers {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCapturePolicyInvitedUsers;
  }
  return self;
}

- (instancetype)initWithAllUsers {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCapturePolicyAllUsers;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCapturePolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGAccountCapturePolicyDisabled;
}

- (BOOL)isInvitedUsers {
  return _tag == DBTEAMLOGAccountCapturePolicyInvitedUsers;
}

- (BOOL)isAllUsers {
  return _tag == DBTEAMLOGAccountCapturePolicyAllUsers;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAccountCapturePolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAccountCapturePolicyDisabled:
    return @"DBTEAMLOGAccountCapturePolicyDisabled";
  case DBTEAMLOGAccountCapturePolicyInvitedUsers:
    return @"DBTEAMLOGAccountCapturePolicyInvitedUsers";
  case DBTEAMLOGAccountCapturePolicyAllUsers:
    return @"DBTEAMLOGAccountCapturePolicyAllUsers";
  case DBTEAMLOGAccountCapturePolicyOther:
    return @"DBTEAMLOGAccountCapturePolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGAccountCapturePolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGAccountCapturePolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccountCapturePolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAccountCapturePolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGAccountCapturePolicyInvitedUsers:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGAccountCapturePolicyAllUsers:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGAccountCapturePolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCapturePolicy:other];
}

- (BOOL)isEqualToAccountCapturePolicy:(DBTEAMLOGAccountCapturePolicy *)anAccountCapturePolicy {
  if (self == anAccountCapturePolicy) {
    return YES;
  }
  if (self.tag != anAccountCapturePolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAccountCapturePolicyDisabled:
    return [[self tagName] isEqual:[anAccountCapturePolicy tagName]];
  case DBTEAMLOGAccountCapturePolicyInvitedUsers:
    return [[self tagName] isEqual:[anAccountCapturePolicy tagName]];
  case DBTEAMLOGAccountCapturePolicyAllUsers:
    return [[self tagName] isEqual:[anAccountCapturePolicy tagName]];
  case DBTEAMLOGAccountCapturePolicyOther:
    return [[self tagName] isEqual:[anAccountCapturePolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCapturePolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGAccountCapturePolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isInvitedUsers]) {
    jsonDict[@".tag"] = @"invited_users";
  } else if ([valueObj isAllUsers]) {
    jsonDict[@".tag"] = @"all_users";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGAccountCapturePolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGAccountCapturePolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"invited_users"]) {
    return [[DBTEAMLOGAccountCapturePolicy alloc] initWithInvitedUsers];
  } else if ([tag isEqualToString:@"all_users"]) {
    return [[DBTEAMLOGAccountCapturePolicy alloc] initWithAllUsers];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAccountCapturePolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAccountCapturePolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureRelinquishAccountDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureRelinquishAccountDetails

#pragma mark - Constructors

- (instancetype)initWithDomainName:(NSArray<NSString *> *)domainName {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](domainName);

  self = [super init];
  if (self) {
    _domainName = domainName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureRelinquishAccountDetails:other];
}

- (BOOL)isEqualToAccountCaptureRelinquishAccountDetails:
    (DBTEAMLOGAccountCaptureRelinquishAccountDetails *)anAccountCaptureRelinquishAccountDetails {
  if (self == anAccountCaptureRelinquishAccountDetails) {
    return YES;
  }
  if (![self.domainName isEqual:anAccountCaptureRelinquishAccountDetails.domainName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGAccountCaptureRelinquishAccountDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_name"] = [DBArraySerializer serialize:valueObj.domainName
                                                withBlock:^id(id elem0) {
                                                  return elem0;
                                                }];

  return jsonDict;
}

+ (DBTEAMLOGAccountCaptureRelinquishAccountDetails *)deserialize:(NSDictionary *)valueDict {
  NSArray<NSString *> *domainName = [DBArraySerializer deserialize:valueDict[@"domain_name"]
                                                         withBlock:^id(id elem0) {
                                                           return elem0;
                                                         }];

  return [[DBTEAMLOGAccountCaptureRelinquishAccountDetails alloc] initWithDomainName:domainName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGActorLogInfo.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGResellerLogInfo.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGActorLogInfo

@synthesize user = _user;
@synthesize admin = _admin;
@synthesize app = _app;
@synthesize reseller = _reseller;

#pragma mark - Constructors

- (instancetype)initWithUser:(DBTEAMLOGUserLogInfo *)user {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoUser;
    _user = user;
  }
  return self;
}

- (instancetype)initWithAdmin:(DBTEAMLOGUserLogInfo *)admin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoAdmin;
    _admin = admin;
  }
  return self;
}

- (instancetype)initWithApp:(DBTEAMLOGAppLogInfo *)app {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoApp;
    _app = app;
  }
  return self;
}

- (instancetype)initWithReseller:(DBTEAMLOGResellerLogInfo *)reseller {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoReseller;
    _reseller = reseller;
  }
  return self;
}

- (instancetype)initWithDropbox {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoDropbox;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGUserLogInfo *)user {
  if (![self isUser]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGActorLogInfoUser, but was %@.", [self tagName]];
  }
  return _user;
}

- (DBTEAMLOGUserLogInfo *)admin {
  if (![self isAdmin]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGActorLogInfoAdmin, but was %@.", [self tagName]];
  }
  return _admin;
}

- (DBTEAMLOGAppLogInfo *)app {
  if (![self isApp]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGActorLogInfoApp, but was %@.", [self tagName]];
  }
  return _app;
}

- (DBTEAMLOGResellerLogInfo *)reseller {
  if (![self isReseller]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGActorLogInfoReseller, but was %@.", [self tagName]];
  }
  return _reseller;
}

#pragma mark - Tag state methods

- (BOOL)isUser {
  return _tag == DBTEAMLOGActorLogInfoUser;
}

- (BOOL)isAdmin {
  return _tag == DBTEAMLOGActorLogInfoAdmin;
}

- (BOOL)isApp {
  return _tag == DBTEAMLOGActorLogInfoApp;
}

- (BOOL)isReseller {
  return _tag == DBTEAMLOGActorLogInfoReseller;
}

- (BOOL)isDropbox {
  return _tag == DBTEAMLOGActorLogInfoDropbox;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGActorLogInfoOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGActorLogInfoUser:
    return @"DBTEAMLOGActorLogInfoUser";
  case DBTEAMLOGActorLogInfoAdmin:
    return @"DBTEAMLOGActorLogInfoAdmin";
  case DBTEAMLOGActorLogInfoApp:
    return @"DBTEAMLOGActorLogInfoApp";
  case DBTEAMLOGActorLogInfoReseller:
    return @"DBTEAMLOGActorLogInfoReseller";
  case DBTEAMLOGActorLogInfoDropbox:
    return @"DBTEAMLOGActorLogInfoDropbox";
  case DBTEAMLOGActorLogInfoOther:
    return @"DBTEAMLOGActorLogInfoOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGActorLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGActorLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGActorLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGActorLogInfoUser:
    result = prime * result + [self.user hash];
  case DBTEAMLOGActorLogInfoAdmin:
    result = prime * result + [self.admin hash];
  case DBTEAMLOGActorLogInfoApp:
    result = prime * result + [self.app hash];
  case DBTEAMLOGActorLogInfoReseller:
    result = prime * result + [self.reseller hash];
  case DBTEAMLOGActorLogInfoDropbox:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGActorLogInfoOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToActorLogInfo:other];
}

- (BOOL)isEqualToActorLogInfo:(DBTEAMLOGActorLogInfo *)anActorLogInfo {
  if (self == anActorLogInfo) {
    return YES;
  }
  if (self.tag != anActorLogInfo.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGActorLogInfoUser:
    return [self.user isEqual:anActorLogInfo.user];
  case DBTEAMLOGActorLogInfoAdmin:
    return [self.admin isEqual:anActorLogInfo.admin];
  case DBTEAMLOGActorLogInfoApp:
    return [self.app isEqual:anActorLogInfo.app];
  case DBTEAMLOGActorLogInfoReseller:
    return [self.reseller isEqual:anActorLogInfo.reseller];
  case DBTEAMLOGActorLogInfoDropbox:
    return [[self tagName] isEqual:[anActorLogInfo tagName]];
  case DBTEAMLOGActorLogInfoOther:
    return [[self tagName] isEqual:[anActorLogInfo tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGActorLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGActorLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUser]) {
    jsonDict[@"user"] = [[DBTEAMLOGUserLogInfoSerializer serialize:valueObj.user] mutableCopy];
    jsonDict[@".tag"] = @"user";
  } else if ([valueObj isAdmin]) {
    jsonDict[@"admin"] = [[DBTEAMLOGUserLogInfoSerializer serialize:valueObj.admin] mutableCopy];
    jsonDict[@".tag"] = @"admin";
  } else if ([valueObj isApp]) {
    jsonDict[@"app"] = [[DBTEAMLOGAppLogInfoSerializer serialize:valueObj.app] mutableCopy];
    jsonDict[@".tag"] = @"app";
  } else if ([valueObj isReseller]) {
    jsonDict[@"reseller"] = [[DBTEAMLOGResellerLogInfoSerializer serialize:valueObj.reseller] mutableCopy];
    jsonDict[@".tag"] = @"reseller";
  } else if ([valueObj isDropbox]) {
    jsonDict[@".tag"] = @"dropbox";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGActorLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user"]) {
    DBTEAMLOGUserLogInfo *user = [DBTEAMLOGUserLogInfoSerializer deserialize:valueDict[@"user"]];
    return [[DBTEAMLOGActorLogInfo alloc] initWithUser:user];
  } else if ([tag isEqualToString:@"admin"]) {
    DBTEAMLOGUserLogInfo *admin = [DBTEAMLOGUserLogInfoSerializer deserialize:valueDict[@"admin"]];
    return [[DBTEAMLOGActorLogInfo alloc] initWithAdmin:admin];
  } else if ([tag isEqualToString:@"app"]) {
    DBTEAMLOGAppLogInfo *app = [DBTEAMLOGAppLogInfoSerializer deserialize:valueDict[@"app"]];
    return [[DBTEAMLOGActorLogInfo alloc] initWithApp:app];
  } else if ([tag isEqualToString:@"reseller"]) {
    DBTEAMLOGResellerLogInfo *reseller = [DBTEAMLOGResellerLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGActorLogInfo alloc] initWithReseller:reseller];
  } else if ([tag isEqualToString:@"dropbox"]) {
    return [[DBTEAMLOGActorLogInfo alloc] initWithDropbox];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGActorLogInfo alloc] initWithOther];
  } else {
    return [[DBTEAMLOGActorLogInfo alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAllowDownloadDisabledDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAllowDownloadDisabledDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGAllowDownloadDisabledDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGAllowDownloadDisabledDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAllowDownloadDisabledDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAllowDownloadDisabledDetails:other];
}

- (BOOL)isEqualToAllowDownloadDisabledDetails:(DBTEAMLOGAllowDownloadDisabledDetails *)anAllowDownloadDisabledDetails {
  if (self == anAllowDownloadDisabledDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAllowDownloadDisabledDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGAllowDownloadDisabledDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGAllowDownloadDisabledDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGAllowDownloadDisabledDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAllowDownloadEnabledDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAllowDownloadEnabledDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGAllowDownloadEnabledDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGAllowDownloadEnabledDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAllowDownloadEnabledDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAllowDownloadEnabledDetails:other];
}

- (BOOL)isEqualToAllowDownloadEnabledDetails:(DBTEAMLOGAllowDownloadEnabledDetails *)anAllowDownloadEnabledDetails {
  if (self == anAllowDownloadEnabledDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAllowDownloadEnabledDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGAllowDownloadEnabledDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGAllowDownloadEnabledDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGAllowDownloadEnabledDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGApiSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGApiSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithRequestId:(NSString *)requestId {

  self = [super init];
  if (self) {
    _requestId = requestId;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGApiSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGApiSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGApiSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.requestId hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToApiSessionLogInfo:other];
}

- (BOOL)isEqualToApiSessionLogInfo:(DBTEAMLOGApiSessionLogInfo *)anApiSessionLogInfo {
  if (self == anApiSessionLogInfo) {
    return YES;
  }
  if (![self.requestId isEqual:anApiSessionLogInfo.requestId]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGApiSessionLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGApiSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"request_id"] = valueObj.requestId;

  return jsonDict;
}

+ (DBTEAMLOGApiSessionLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *requestId = valueDict[@"request_id"];

  return [[DBTEAMLOGApiSessionLogInfo alloc] initWithRequestId:requestId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLinkTeamDetails.h"
#import "DBTEAMLOGAppLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppLinkTeamDetails

#pragma mark - Constructors

- (instancetype)initWithAppInfo:(DBTEAMLOGAppLogInfo *)appInfo {

  self = [super init];
  if (self) {
    _appInfo = appInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGAppLinkTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGAppLinkTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAppLinkTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.appInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppLinkTeamDetails:other];
}

- (BOOL)isEqualToAppLinkTeamDetails:(DBTEAMLOGAppLinkTeamDetails *)anAppLinkTeamDetails {
  if (self == anAppLinkTeamDetails) {
    return YES;
  }
  if (![self.appInfo isEqual:anAppLinkTeamDetails.appInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppLinkTeamDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGAppLinkTeamDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"app_info"] = [DBTEAMLOGAppLogInfoSerializer serialize:valueObj.appInfo];

  return jsonDict;
}

+ (DBTEAMLOGAppLinkTeamDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGAppLogInfo *appInfo = [DBTEAMLOGAppLogInfoSerializer deserialize:valueDict[@"app_info"]];

  return [[DBTEAMLOGAppLinkTeamDetails alloc] initWithAppInfo:appInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLinkUserDetails.h"
#import "DBTEAMLOGAppLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppLinkUserDetails

#pragma mark - Constructors

- (instancetype)initWithAppInfo:(DBTEAMLOGAppLogInfo *)appInfo {

  self = [super init];
  if (self) {
    _appInfo = appInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGAppLinkUserDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGAppLinkUserDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAppLinkUserDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.appInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppLinkUserDetails:other];
}

- (BOOL)isEqualToAppLinkUserDetails:(DBTEAMLOGAppLinkUserDetails *)anAppLinkUserDetails {
  if (self == anAppLinkUserDetails) {
    return YES;
  }
  if (![self.appInfo isEqual:anAppLinkUserDetails.appInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppLinkUserDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGAppLinkUserDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"app_info"] = [DBTEAMLOGAppLogInfoSerializer serialize:valueObj.appInfo];

  return jsonDict;
}

+ (DBTEAMLOGAppLinkUserDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGAppLogInfo *appInfo = [DBTEAMLOGAppLogInfoSerializer deserialize:valueDict[@"app_info"]];

  return [[DBTEAMLOGAppLinkUserDetails alloc] initWithAppInfo:appInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGTeamLinkedAppLogInfo.h"
#import "DBTEAMLOGUserLinkedAppLogInfo.h"
#import "DBTEAMLOGUserOrTeamLinkedAppLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppLogInfo

#pragma mark - Constructors

- (instancetype)initWithAppId:(NSString *)appId displayName:(NSString *)displayName {

  self = [super init];
  if (self) {
    _appId = appId;
    _displayName = displayName;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithAppId:nil displayName:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGAppLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGAppLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAppLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.appId) {
    result = prime * result + [self.appId hash];
  }
  if (self.displayName) {
    result = prime * result + [self.displayName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppLogInfo:other];
}

- (BOOL)isEqualToAppLogInfo:(DBTEAMLOGAppLogInfo *)anAppLogInfo {
  if (self == anAppLogInfo) {
    return YES;
  }
  if (self.appId) {
    if (![self.appId isEqual:anAppLogInfo.appId]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:anAppLogInfo.displayName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGAppLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.appId) {
    jsonDict[@"app_id"] = valueObj.appId;
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }

  if ([valueObj isKindOfClass:[DBTEAMLOGUserOrTeamLinkedAppLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGUserOrTeamLinkedAppLogInfoSerializer serialize:(DBTEAMLOGUserOrTeamLinkedAppLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"userOrTeamLinkedApp";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGUserLinkedAppLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGUserLinkedAppLogInfoSerializer serialize:(DBTEAMLOGUserLinkedAppLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"userLinkedApp";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGTeamLinkedAppLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGTeamLinkedAppLogInfoSerializer serialize:(DBTEAMLOGTeamLinkedAppLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"teamLinkedApp";
  }

  return jsonDict;
}

+ (DBTEAMLOGAppLogInfo *)deserialize:(NSDictionary *)valueDict {
  if ([valueDict[@".tag"] isEqualToString:@"userOrTeamLinkedApp"]) {
    return [DBTEAMLOGUserOrTeamLinkedAppLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"userLinkedApp"]) {
    return [DBTEAMLOGUserLinkedAppLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"teamLinkedApp"]) {
    return [DBTEAMLOGTeamLinkedAppLogInfoSerializer deserialize:valueDict];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGAppUnlinkTeamDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppUnlinkTeamDetails

#pragma mark - Constructors

- (instancetype)initWithAppInfo:(DBTEAMLOGAppLogInfo *)appInfo {

  self = [super init];
  if (self) {
    _appInfo = appInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGAppUnlinkTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGAppUnlinkTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAppUnlinkTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.appInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppUnlinkTeamDetails:other];
}

- (BOOL)isEqualToAppUnlinkTeamDetails:(DBTEAMLOGAppUnlinkTeamDetails *)anAppUnlinkTeamDetails {
  if (self == anAppUnlinkTeamDetails) {
    return YES;
  }
  if (![self.appInfo isEqual:anAppUnlinkTeamDetails.appInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppUnlinkTeamDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGAppUnlinkTeamDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"app_info"] = [DBTEAMLOGAppLogInfoSerializer serialize:valueObj.appInfo];

  return jsonDict;
}

+ (DBTEAMLOGAppUnlinkTeamDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGAppLogInfo *appInfo = [DBTEAMLOGAppLogInfoSerializer deserialize:valueDict[@"app_info"]];

  return [[DBTEAMLOGAppUnlinkTeamDetails alloc] initWithAppInfo:appInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGAppUnlinkUserDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppUnlinkUserDetails

#pragma mark - Constructors

- (instancetype)initWithAppInfo:(DBTEAMLOGAppLogInfo *)appInfo {

  self = [super init];
  if (self) {
    _appInfo = appInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGAppUnlinkUserDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGAppUnlinkUserDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAppUnlinkUserDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.appInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppUnlinkUserDetails:other];
}

- (BOOL)isEqualToAppUnlinkUserDetails:(DBTEAMLOGAppUnlinkUserDetails *)anAppUnlinkUserDetails {
  if (self == anAppUnlinkUserDetails) {
    return YES;
  }
  if (![self.appInfo isEqual:anAppUnlinkUserDetails.appInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppUnlinkUserDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGAppUnlinkUserDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"app_info"] = [DBTEAMLOGAppLogInfoSerializer serialize:valueObj.appInfo];

  return jsonDict;
}

+ (DBTEAMLOGAppUnlinkUserDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGAppLogInfo *appInfo = [DBTEAMLOGAppLogInfoSerializer deserialize:valueDict[@"app_info"]];

  return [[DBTEAMLOGAppUnlinkUserDetails alloc] initWithAppInfo:appInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAssetLogInfo.h"
#import "DBTEAMLOGFileLogInfo.h"
#import "DBTEAMLOGFolderLogInfo.h"
#import "DBTEAMLOGPaperDocumentLogInfo.h"
#import "DBTEAMLOGPaperFolderLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGAssetLogInfo

@synthesize file = _file;
@synthesize folder = _folder;
@synthesize paperDocument = _paperDocument;
@synthesize paperFolder = _paperFolder;

#pragma mark - Constructors

- (instancetype)initWithFile:(DBTEAMLOGFileLogInfo *)file {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAssetLogInfoFile;
    _file = file;
  }
  return self;
}

- (instancetype)initWithFolder:(DBTEAMLOGFolderLogInfo *)folder {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAssetLogInfoFolder;
    _folder = folder;
  }
  return self;
}

- (instancetype)initWithPaperDocument:(DBTEAMLOGPaperDocumentLogInfo *)paperDocument {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAssetLogInfoPaperDocument;
    _paperDocument = paperDocument;
  }
  return self;
}

- (instancetype)initWithPaperFolder:(DBTEAMLOGPaperFolderLogInfo *)paperFolder {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAssetLogInfoPaperFolder;
    _paperFolder = paperFolder;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAssetLogInfoOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGFileLogInfo *)file {
  if (![self isFile]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAssetLogInfoFile, but was %@.", [self tagName]];
  }
  return _file;
}

- (DBTEAMLOGFolderLogInfo *)folder {
  if (![self isFolder]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAssetLogInfoFolder, but was %@.", [self tagName]];
  }
  return _folder;
}

- (DBTEAMLOGPaperDocumentLogInfo *)paperDocument {
  if (![self isPaperDocument]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAssetLogInfoPaperDocument, but was %@.", [self tagName]];
  }
  return _paperDocument;
}

- (DBTEAMLOGPaperFolderLogInfo *)paperFolder {
  if (![self isPaperFolder]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAssetLogInfoPaperFolder, but was %@.", [self tagName]];
  }
  return _paperFolder;
}

#pragma mark - Tag state methods

- (BOOL)isFile {
  return _tag == DBTEAMLOGAssetLogInfoFile;
}

- (BOOL)isFolder {
  return _tag == DBTEAMLOGAssetLogInfoFolder;
}

- (BOOL)isPaperDocument {
  return _tag == DBTEAMLOGAssetLogInfoPaperDocument;
}

- (BOOL)isPaperFolder {
  return _tag == DBTEAMLOGAssetLogInfoPaperFolder;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAssetLogInfoOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAssetLogInfoFile:
    return @"DBTEAMLOGAssetLogInfoFile";
  case DBTEAMLOGAssetLogInfoFolder:
    return @"DBTEAMLOGAssetLogInfoFolder";
  case DBTEAMLOGAssetLogInfoPaperDocument:
    return @"DBTEAMLOGAssetLogInfoPaperDocument";
  case DBTEAMLOGAssetLogInfoPaperFolder:
    return @"DBTEAMLOGAssetLogInfoPaperFolder";
  case DBTEAMLOGAssetLogInfoOther:
    return @"DBTEAMLOGAssetLogInfoOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGAssetLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGAssetLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGAssetLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAssetLogInfoFile:
    result = prime * result + [self.file hash];
  case DBTEAMLOGAssetLogInfoFolder:
    result = prime * result + [self.folder hash];
  case DBTEAMLOGAssetLogInfoPaperDocument:
    result = prime * result + [self.paperDocument hash];
  case DBTEAMLOGAssetLogInfoPaperFolder:
    result = prime * result + [self.paperFolder hash];
  case DBTEAMLOGAssetLogInfoOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAssetLogInfo:other];
}

- (BOOL)isEqualToAssetLogInfo:(DBTEAMLOGAssetLogInfo *)anAssetLogInfo {
  if (self == anAssetLogInfo) {
    return YES;
  }
  if (self.tag != anAssetLogInfo.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAssetLogInfoFile:
    return [self.file isEqual:anAssetLogInfo.file];
  case DBTEAMLOGAssetLogInfoFolder:
    return [self.folder isEqual:anAssetLogInfo.folder];
  case DBTEAMLOGAssetLogInfoPaperDocument:
    return [self.paperDocument isEqual:anAssetLogInfo.paperDocument];
  case DBTEAMLOGAssetLogInfoPaperFolder:
    return [self.paperFolder isEqual:anAssetLogInfo.paperFolder];
  case DBTEAMLOGAssetLogInfoOther:
    return [[self tagName] isEqual:[anAssetLogInfo tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAssetLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGAssetLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isFile]) {
    jsonDict[@"file"] = [[DBTEAMLOGFileLogInfoSerializer serialize:valueObj.file] mutableCopy];
    jsonDict[@".tag"] = @"file";
  } else if ([valueObj isFolder]) {
    jsonDict[@"folder"] = [[DBTEAMLOGFolderLogInfoSerializer serialize:valueObj.folder] mutableCopy];
    jsonDict[@".tag"] = @"folder";
  } else if ([valueObj isPaperDocument]) {
    jsonDict[@"paper_document"] =
        [[DBTEAMLOGPaperDocumentLogInfoSerializer serialize:valueObj.paperDocument] mutableCopy];
    jsonDict[@".tag"] = @"paper_document";
  } else if ([valueObj isPaperFolder]) {
    jsonDict[@"paper_folder"] = [[DBTEAMLOGPaperFolderLogInfoSerializer serialize:valueObj.paperFolder] mutableCopy];
    jsonDict[@".tag"] = @"paper_folder";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGAssetLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"file"]) {
    DBTEAMLOGFileLogInfo *file = [DBTEAMLOGFileLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAssetLogInfo alloc] initWithFile:file];
  } else if ([tag isEqualToString:@"folder"]) {
    DBTEAMLOGFolderLogInfo *folder = [DBTEAMLOGFolderLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAssetLogInfo alloc] initWithFolder:folder];
  } else if ([tag isEqualToString:@"paper_document"]) {
    DBTEAMLOGPaperDocumentLogInfo *paperDocument = [DBTEAMLOGPaperDocumentLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAssetLogInfo alloc] initWithPaperDocument:paperDocument];
  } else if ([tag isEqualToString:@"paper_folder"]) {
    DBTEAMLOGPaperFolderLogInfo *paperFolder = [DBTEAMLOGPaperFolderLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAssetLogInfo alloc] initWithPaperFolder:paperFolder];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAssetLogInfo alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAssetLogInfo alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCollectionShareDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGCollectionShareDetails

#pragma mark - Constructors

- (instancetype)initWithAlbumName:(NSString *)albumName {

  self = [super init];
  if (self) {
    _albumName = albumName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGCollectionShareDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGCollectionShareDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGCollectionShareDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.albumName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCollectionShareDetails:other];
}

- (BOOL)isEqualToCollectionShareDetails:(DBTEAMLOGCollectionShareDetails *)aCollectionShareDetails {
  if (self == aCollectionShareDetails) {
    return YES;
  }
  if (![self.albumName isEqual:aCollectionShareDetails.albumName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCollectionShareDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGCollectionShareDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"album_name"] = valueObj.albumName;

  return jsonDict;
}

+ (DBTEAMLOGCollectionShareDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *albumName = valueDict[@"album_name"];

  return [[DBTEAMLOGCollectionShareDetails alloc] initWithAlbumName:albumName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGConfidentiality.h"

#pragma mark - API Object

@implementation DBTEAMLOGConfidentiality

#pragma mark - Constructors

- (instancetype)initWithConfidential {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGConfidentialityConfidential;
  }
  return self;
}

- (instancetype)initWithNonConfidential {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGConfidentialityNonConfidential;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGConfidentialityOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isConfidential {
  return _tag == DBTEAMLOGConfidentialityConfidential;
}

- (BOOL)isNonConfidential {
  return _tag == DBTEAMLOGConfidentialityNonConfidential;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGConfidentialityOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGConfidentialityConfidential:
    return @"DBTEAMLOGConfidentialityConfidential";
  case DBTEAMLOGConfidentialityNonConfidential:
    return @"DBTEAMLOGConfidentialityNonConfidential";
  case DBTEAMLOGConfidentialityOther:
    return @"DBTEAMLOGConfidentialityOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGConfidentialitySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGConfidentialitySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGConfidentialitySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGConfidentialityConfidential:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGConfidentialityNonConfidential:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGConfidentialityOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToConfidentiality:other];
}

- (BOOL)isEqualToConfidentiality:(DBTEAMLOGConfidentiality *)aConfidentiality {
  if (self == aConfidentiality) {
    return YES;
  }
  if (self.tag != aConfidentiality.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGConfidentialityConfidential:
    return [[self tagName] isEqual:[aConfidentiality tagName]];
  case DBTEAMLOGConfidentialityNonConfidential:
    return [[self tagName] isEqual:[aConfidentiality tagName]];
  case DBTEAMLOGConfidentialityOther:
    return [[self tagName] isEqual:[aConfidentiality tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGConfidentialitySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGConfidentiality *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isConfidential]) {
    jsonDict[@".tag"] = @"confidential";
  } else if ([valueObj isNonConfidential]) {
    jsonDict[@".tag"] = @"non_confidential";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGConfidentiality *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"confidential"]) {
    return [[DBTEAMLOGConfidentiality alloc] initWithConfidential];
  } else if ([tag isEqualToString:@"non_confidential"]) {
    return [[DBTEAMLOGConfidentiality alloc] initWithNonConfidential];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGConfidentiality alloc] initWithOther];
  } else {
    return [[DBTEAMLOGConfidentiality alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGContextLogInfo.h"
#import "DBTEAMLOGNonTeamMemberLogInfo.h"
#import "DBTEAMLOGTeamMemberLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGContextLogInfo

@synthesize teamMember = _teamMember;
@synthesize nonTeamMember = _nonTeamMember;

#pragma mark - Constructors

- (instancetype)initWithTeamMember:(DBTEAMLOGTeamMemberLogInfo *)teamMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContextLogInfoTeamMember;
    _teamMember = teamMember;
  }
  return self;
}

- (instancetype)initWithNonTeamMember:(DBTEAMLOGNonTeamMemberLogInfo *)nonTeamMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContextLogInfoNonTeamMember;
    _nonTeamMember = nonTeamMember;
  }
  return self;
}

- (instancetype)initWithTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContextLogInfoTeam;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContextLogInfoOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGTeamMemberLogInfo *)teamMember {
  if (![self isTeamMember]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGContextLogInfoTeamMember, but was %@.", [self tagName]];
  }
  return _teamMember;
}

- (DBTEAMLOGNonTeamMemberLogInfo *)nonTeamMember {
  if (![self isNonTeamMember]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGContextLogInfoNonTeamMember, but was %@.", [self tagName]];
  }
  return _nonTeamMember;
}

#pragma mark - Tag state methods

- (BOOL)isTeamMember {
  return _tag == DBTEAMLOGContextLogInfoTeamMember;
}

- (BOOL)isNonTeamMember {
  return _tag == DBTEAMLOGContextLogInfoNonTeamMember;
}

- (BOOL)isTeam {
  return _tag == DBTEAMLOGContextLogInfoTeam;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGContextLogInfoOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGContextLogInfoTeamMember:
    return @"DBTEAMLOGContextLogInfoTeamMember";
  case DBTEAMLOGContextLogInfoNonTeamMember:
    return @"DBTEAMLOGContextLogInfoNonTeamMember";
  case DBTEAMLOGContextLogInfoTeam:
    return @"DBTEAMLOGContextLogInfoTeam";
  case DBTEAMLOGContextLogInfoOther:
    return @"DBTEAMLOGContextLogInfoOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGContextLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGContextLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGContextLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGContextLogInfoTeamMember:
    result = prime * result + [self.teamMember hash];
  case DBTEAMLOGContextLogInfoNonTeamMember:
    result = prime * result + [self.nonTeamMember hash];
  case DBTEAMLOGContextLogInfoTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGContextLogInfoOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToContextLogInfo:other];
}

- (BOOL)isEqualToContextLogInfo:(DBTEAMLOGContextLogInfo *)aContextLogInfo {
  if (self == aContextLogInfo) {
    return YES;
  }
  if (self.tag != aContextLogInfo.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGContextLogInfoTeamMember:
    return [self.teamMember isEqual:aContextLogInfo.teamMember];
  case DBTEAMLOGContextLogInfoNonTeamMember:
    return [self.nonTeamMember isEqual:aContextLogInfo.nonTeamMember];
  case DBTEAMLOGContextLogInfoTeam:
    return [[self tagName] isEqual:[aContextLogInfo tagName]];
  case DBTEAMLOGContextLogInfoOther:
    return [[self tagName] isEqual:[aContextLogInfo tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGContextLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGContextLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTeamMember]) {
    jsonDict[@"team_member"] = [[DBTEAMLOGTeamMemberLogInfoSerializer serialize:valueObj.teamMember] mutableCopy];
    jsonDict[@".tag"] = @"team_member";
  } else if ([valueObj isNonTeamMember]) {
    jsonDict[@"non_team_member"] =
        [[DBTEAMLOGNonTeamMemberLogInfoSerializer serialize:valueObj.nonTeamMember] mutableCopy];
    jsonDict[@".tag"] = @"non_team_member";
  } else if ([valueObj isTeam]) {
    jsonDict[@".tag"] = @"team";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGContextLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"team_member"]) {
    DBTEAMLOGTeamMemberLogInfo *teamMember = [DBTEAMLOGTeamMemberLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGContextLogInfo alloc] initWithTeamMember:teamMember];
  } else if ([tag isEqualToString:@"non_team_member"]) {
    DBTEAMLOGNonTeamMemberLogInfo *nonTeamMember = [DBTEAMLOGNonTeamMemberLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGContextLogInfo alloc] initWithNonTeamMember:nonTeamMember];
  } else if ([tag isEqualToString:@"team"]) {
    return [[DBTEAMLOGContextLogInfo alloc] initWithTeam];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGContextLogInfo alloc] initWithOther];
  } else {
    return [[DBTEAMLOGContextLogInfo alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCreateFolderDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGCreateFolderDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGCreateFolderDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGCreateFolderDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGCreateFolderDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCreateFolderDetails:other];
}

- (BOOL)isEqualToCreateFolderDetails:(DBTEAMLOGCreateFolderDetails *)aCreateFolderDetails {
  if (self == aCreateFolderDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCreateFolderDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGCreateFolderDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGCreateFolderDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGCreateFolderDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDataPlacementRestrictionChangePolicyDetails.h"
#import "DBTEAMLOGPlacementRestriction.h"

#pragma mark - API Object

@implementation DBTEAMLOGDataPlacementRestrictionChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(DBTEAMLOGPlacementRestriction *)previousValue
                            dNewValue:(DBTEAMLOGPlacementRestriction *)dNewValue {

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDataPlacementRestrictionChangePolicyDetails:other];
}

- (BOOL)isEqualToDataPlacementRestrictionChangePolicyDetails:
    (DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *)aDataPlacementRestrictionChangePolicyDetails {
  if (self == aDataPlacementRestrictionChangePolicyDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aDataPlacementRestrictionChangePolicyDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aDataPlacementRestrictionChangePolicyDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = [DBTEAMLOGPlacementRestrictionSerializer serialize:valueObj.previousValue];
  jsonDict[@"new_value"] = [DBTEAMLOGPlacementRestrictionSerializer serialize:valueObj.dNewValue];

  return jsonDict;
}

+ (DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGPlacementRestriction *previousValue =
      [DBTEAMLOGPlacementRestrictionSerializer deserialize:valueDict[@"previous_value"]];
  DBTEAMLOGPlacementRestriction *dNewValue =
      [DBTEAMLOGPlacementRestrictionSerializer deserialize:valueDict[@"new_value"]];

  return [[DBTEAMLOGDataPlacementRestrictionChangePolicyDetails alloc] initWithPreviousValue:previousValue
                                                                                   dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails.h"
#import "DBTEAMLOGPlacementRestriction.h"

#pragma mark - API Object

@implementation DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithPlacementRestriction:(DBTEAMLOGPlacementRestriction *)placementRestriction {

  self = [super init];
  if (self) {
    _placementRestriction = placementRestriction;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.placementRestriction hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDataPlacementRestrictionSatisfyPolicyDetails:other];
}

- (BOOL)isEqualToDataPlacementRestrictionSatisfyPolicyDetails:
    (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *)aDataPlacementRestrictionSatisfyPolicyDetails {
  if (self == aDataPlacementRestrictionSatisfyPolicyDetails) {
    return YES;
  }
  if (![self.placementRestriction isEqual:aDataPlacementRestrictionSatisfyPolicyDetails.placementRestriction]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"placement_restriction"] =
      [DBTEAMLOGPlacementRestrictionSerializer serialize:valueObj.placementRestriction];

  return jsonDict;
}

+ (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGPlacementRestriction *placementRestriction =
      [DBTEAMLOGPlacementRestrictionSerializer deserialize:valueDict[@"placement_restriction"]];

  return
      [[DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails alloc] initWithPlacementRestriction:placementRestriction];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDesktopSessionLogInfo.h"
#import "DBTEAMLOGMobileSessionLogInfo.h"
#import "DBTEAMLOGSessionLogInfo.h"
#import "DBTEAMLOGWebSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithSessionId:(NSString *)sessionId {

  self = [super init];
  if (self) {
    _sessionId = sessionId;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSessionId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sessionId) {
    result = prime * result + [self.sessionId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSessionLogInfo:other];
}

- (BOOL)isEqualToSessionLogInfo:(DBTEAMLOGSessionLogInfo *)aSessionLogInfo {
  if (self == aSessionLogInfo) {
    return YES;
  }
  if (self.sessionId) {
    if (![self.sessionId isEqual:aSessionLogInfo.sessionId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSessionLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sessionId) {
    jsonDict[@"session_id"] = valueObj.sessionId;
  }

  if ([valueObj isKindOfClass:[DBTEAMLOGWebSessionLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGWebSessionLogInfoSerializer serialize:(DBTEAMLOGWebSessionLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"web";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGDesktopSessionLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGDesktopSessionLogInfoSerializer serialize:(DBTEAMLOGDesktopSessionLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"desktop";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGMobileSessionLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGMobileSessionLogInfoSerializer serialize:(DBTEAMLOGMobileSessionLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"mobile";
  }

  return jsonDict;
}

+ (DBTEAMLOGSessionLogInfo *)deserialize:(NSDictionary *)valueDict {
  if ([valueDict[@".tag"] isEqualToString:@"web"]) {
    return [DBTEAMLOGWebSessionLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"desktop"]) {
    return [DBTEAMLOGDesktopSessionLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"mobile"]) {
    return [DBTEAMLOGMobileSessionLogInfoSerializer deserialize:valueDict];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDesktopSessionLogInfo.h"
#import "DBTEAMLOGSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDesktopSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithSessionId:(NSString *)sessionId {

  self = [super initWithSessionId:sessionId];
  if (self) {
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSessionId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDesktopSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDesktopSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDesktopSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sessionId) {
    result = prime * result + [self.sessionId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDesktopSessionLogInfo:other];
}

- (BOOL)isEqualToDesktopSessionLogInfo:(DBTEAMLOGDesktopSessionLogInfo *)aDesktopSessionLogInfo {
  if (self == aDesktopSessionLogInfo) {
    return YES;
  }
  if (self.sessionId) {
    if (![self.sessionId isEqual:aDesktopSessionLogInfo.sessionId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDesktopSessionLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDesktopSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sessionId) {
    jsonDict[@"session_id"] = valueObj.sessionId;
  }

  return jsonDict;
}

+ (DBTEAMLOGDesktopSessionLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *sessionId = valueDict[@"session_id"] ?: nil;

  return [[DBTEAMLOGDesktopSessionLogInfo alloc] initWithSessionId:sessionId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails.h"
#import "DBTEAMLOGDeviceApprovalsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGDeviceApprovalsPolicy *)dNewValue
                    previousValue:(DBTEAMLOGDeviceApprovalsPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeDesktopPolicyDetails:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeDesktopPolicyDetails:
    (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *)aDeviceApprovalsChangeDesktopPolicyDetails {
  if (self == aDeviceApprovalsChangeDesktopPolicyDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aDeviceApprovalsChangeDesktopPolicyDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aDeviceApprovalsChangeDesktopPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBTEAMLOGDeviceApprovalsPolicySerializer serialize:valueObj.dNewValue];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGDeviceApprovalsPolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGDeviceApprovalsPolicy *dNewValue =
      valueDict[@"new_value"] ? [DBTEAMLOGDeviceApprovalsPolicySerializer deserialize:valueDict[@"new_value"]] : nil;
  DBTEAMLOGDeviceApprovalsPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGDeviceApprovalsPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails alloc] initWithDNewValue:dNewValue
                                                                         previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails.h"
#import "DBTEAMLOGDeviceApprovalsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGDeviceApprovalsPolicy *)dNewValue
                    previousValue:(DBTEAMLOGDeviceApprovalsPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeMobilePolicyDetails:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeMobilePolicyDetails:
    (DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *)aDeviceApprovalsChangeMobilePolicyDetails {
  if (self == aDeviceApprovalsChangeMobilePolicyDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aDeviceApprovalsChangeMobilePolicyDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aDeviceApprovalsChangeMobilePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBTEAMLOGDeviceApprovalsPolicySerializer serialize:valueObj.dNewValue];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGDeviceApprovalsPolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGDeviceApprovalsPolicy *dNewValue =
      valueDict[@"new_value"] ? [DBTEAMLOGDeviceApprovalsPolicySerializer deserialize:valueDict[@"new_value"]] : nil;
  DBTEAMLOGDeviceApprovalsPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGDeviceApprovalsPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails alloc] initWithDNewValue:dNewValue
                                                                        previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeOverageActionDetails.h"
#import "DBTEAMLOGDeviceApprovalsRolloutPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeOverageActionDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGDeviceApprovalsRolloutPolicy *)dNewValue
                    previousValue:(DBTEAMLOGDeviceApprovalsRolloutPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeOverageActionDetails:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeOverageActionDetails:
    (DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *)aDeviceApprovalsChangeOverageActionDetails {
  if (self == aDeviceApprovalsChangeOverageActionDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aDeviceApprovalsChangeOverageActionDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aDeviceApprovalsChangeOverageActionDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBTEAMLOGDeviceApprovalsRolloutPolicySerializer serialize:valueObj.dNewValue];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGDeviceApprovalsRolloutPolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGDeviceApprovalsRolloutPolicy *dNewValue =
      valueDict[@"new_value"] ? [DBTEAMLOGDeviceApprovalsRolloutPolicySerializer deserialize:valueDict[@"new_value"]]
                              : nil;
  DBTEAMLOGDeviceApprovalsRolloutPolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGDeviceApprovalsRolloutPolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGDeviceApprovalsChangeOverageActionDetails alloc] initWithDNewValue:dNewValue
                                                                         previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails.h"
#import "DBTEAMLOGDeviceUnlinkPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGDeviceUnlinkPolicy *)dNewValue
                    previousValue:(DBTEAMLOGDeviceUnlinkPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeUnlinkActionDetails:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeUnlinkActionDetails:
    (DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *)aDeviceApprovalsChangeUnlinkActionDetails {
  if (self == aDeviceApprovalsChangeUnlinkActionDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aDeviceApprovalsChangeUnlinkActionDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aDeviceApprovalsChangeUnlinkActionDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBTEAMLOGDeviceUnlinkPolicySerializer serialize:valueObj.dNewValue];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGDeviceUnlinkPolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGDeviceUnlinkPolicy *dNewValue =
      valueDict[@"new_value"] ? [DBTEAMLOGDeviceUnlinkPolicySerializer deserialize:valueDict[@"new_value"]] : nil;
  DBTEAMLOGDeviceUnlinkPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGDeviceUnlinkPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails alloc] initWithDNewValue:dNewValue
                                                                        previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsPolicy

#pragma mark - Constructors

- (instancetype)initWithUnlimited {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsPolicyUnlimited;
  }
  return self;
}

- (instancetype)initWithZero {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsPolicyZero;
  }
  return self;
}

- (instancetype)initWithOne {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsPolicyOne;
  }
  return self;
}

- (instancetype)initWithTwo {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsPolicyTwo;
  }
  return self;
}

- (instancetype)initWithThree {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsPolicyThree;
  }
  return self;
}

- (instancetype)initWithFour {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsPolicyFour;
  }
  return self;
}

- (instancetype)initWithFive {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsPolicyFive;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isUnlimited {
  return _tag == DBTEAMLOGDeviceApprovalsPolicyUnlimited;
}

- (BOOL)isZero {
  return _tag == DBTEAMLOGDeviceApprovalsPolicyZero;
}

- (BOOL)isOne {
  return _tag == DBTEAMLOGDeviceApprovalsPolicyOne;
}

- (BOOL)isTwo {
  return _tag == DBTEAMLOGDeviceApprovalsPolicyTwo;
}

- (BOOL)isThree {
  return _tag == DBTEAMLOGDeviceApprovalsPolicyThree;
}

- (BOOL)isFour {
  return _tag == DBTEAMLOGDeviceApprovalsPolicyFour;
}

- (BOOL)isFive {
  return _tag == DBTEAMLOGDeviceApprovalsPolicyFive;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGDeviceApprovalsPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGDeviceApprovalsPolicyUnlimited:
    return @"DBTEAMLOGDeviceApprovalsPolicyUnlimited";
  case DBTEAMLOGDeviceApprovalsPolicyZero:
    return @"DBTEAMLOGDeviceApprovalsPolicyZero";
  case DBTEAMLOGDeviceApprovalsPolicyOne:
    return @"DBTEAMLOGDeviceApprovalsPolicyOne";
  case DBTEAMLOGDeviceApprovalsPolicyTwo:
    return @"DBTEAMLOGDeviceApprovalsPolicyTwo";
  case DBTEAMLOGDeviceApprovalsPolicyThree:
    return @"DBTEAMLOGDeviceApprovalsPolicyThree";
  case DBTEAMLOGDeviceApprovalsPolicyFour:
    return @"DBTEAMLOGDeviceApprovalsPolicyFour";
  case DBTEAMLOGDeviceApprovalsPolicyFive:
    return @"DBTEAMLOGDeviceApprovalsPolicyFive";
  case DBTEAMLOGDeviceApprovalsPolicyOther:
    return @"DBTEAMLOGDeviceApprovalsPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceApprovalsPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceApprovalsPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGDeviceApprovalsPolicyUnlimited:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceApprovalsPolicyZero:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceApprovalsPolicyOne:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceApprovalsPolicyTwo:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceApprovalsPolicyThree:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceApprovalsPolicyFour:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceApprovalsPolicyFive:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceApprovalsPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsPolicy:other];
}

- (BOOL)isEqualToDeviceApprovalsPolicy:(DBTEAMLOGDeviceApprovalsPolicy *)aDeviceApprovalsPolicy {
  if (self == aDeviceApprovalsPolicy) {
    return YES;
  }
  if (self.tag != aDeviceApprovalsPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGDeviceApprovalsPolicyUnlimited:
    return [[self tagName] isEqual:[aDeviceApprovalsPolicy tagName]];
  case DBTEAMLOGDeviceApprovalsPolicyZero:
    return [[self tagName] isEqual:[aDeviceApprovalsPolicy tagName]];
  case DBTEAMLOGDeviceApprovalsPolicyOne:
    return [[self tagName] isEqual:[aDeviceApprovalsPolicy tagName]];
  case DBTEAMLOGDeviceApprovalsPolicyTwo:
    return [[self tagName] isEqual:[aDeviceApprovalsPolicy tagName]];
  case DBTEAMLOGDeviceApprovalsPolicyThree:
    return [[self tagName] isEqual:[aDeviceApprovalsPolicy tagName]];
  case DBTEAMLOGDeviceApprovalsPolicyFour:
    return [[self tagName] isEqual:[aDeviceApprovalsPolicy tagName]];
  case DBTEAMLOGDeviceApprovalsPolicyFive:
    return [[self tagName] isEqual:[aDeviceApprovalsPolicy tagName]];
  case DBTEAMLOGDeviceApprovalsPolicyOther:
    return [[self tagName] isEqual:[aDeviceApprovalsPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsPolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceApprovalsPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUnlimited]) {
    jsonDict[@".tag"] = @"unlimited";
  } else if ([valueObj isZero]) {
    jsonDict[@".tag"] = @"zero";
  } else if ([valueObj isOne]) {
    jsonDict[@".tag"] = @"one";
  } else if ([valueObj isTwo]) {
    jsonDict[@".tag"] = @"two";
  } else if ([valueObj isThree]) {
    jsonDict[@".tag"] = @"three";
  } else if ([valueObj isFour]) {
    jsonDict[@".tag"] = @"four";
  } else if ([valueObj isFive]) {
    jsonDict[@".tag"] = @"five";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGDeviceApprovalsPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"unlimited"]) {
    return [[DBTEAMLOGDeviceApprovalsPolicy alloc] initWithUnlimited];
  } else if ([tag isEqualToString:@"zero"]) {
    return [[DBTEAMLOGDeviceApprovalsPolicy alloc] initWithZero];
  } else if ([tag isEqualToString:@"one"]) {
    return [[DBTEAMLOGDeviceApprovalsPolicy alloc] initWithOne];
  } else if ([tag isEqualToString:@"two"]) {
    return [[DBTEAMLOGDeviceApprovalsPolicy alloc] initWithTwo];
  } else if ([tag isEqualToString:@"three"]) {
    return [[DBTEAMLOGDeviceApprovalsPolicy alloc] initWithThree];
  } else if ([tag isEqualToString:@"four"]) {
    return [[DBTEAMLOGDeviceApprovalsPolicy alloc] initWithFour];
  } else if ([tag isEqualToString:@"five"]) {
    return [[DBTEAMLOGDeviceApprovalsPolicy alloc] initWithFive];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGDeviceApprovalsPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGDeviceApprovalsPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsRolloutPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsRolloutPolicy

#pragma mark - Constructors

- (instancetype)initWithRemoveOldest {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsRolloutPolicyRemoveOldest;
  }
  return self;
}

- (instancetype)initWithRemoveAll {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsRolloutPolicyRemoveAll;
  }
  return self;
}

- (instancetype)initWithAddException {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsRolloutPolicyAddException;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsRolloutPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isRemoveOldest {
  return _tag == DBTEAMLOGDeviceApprovalsRolloutPolicyRemoveOldest;
}

- (BOOL)isRemoveAll {
  return _tag == DBTEAMLOGDeviceApprovalsRolloutPolicyRemoveAll;
}

- (BOOL)isAddException {
  return _tag == DBTEAMLOGDeviceApprovalsRolloutPolicyAddException;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGDeviceApprovalsRolloutPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGDeviceApprovalsRolloutPolicyRemoveOldest:
    return @"DBTEAMLOGDeviceApprovalsRolloutPolicyRemoveOldest";
  case DBTEAMLOGDeviceApprovalsRolloutPolicyRemoveAll:
    return @"DBTEAMLOGDeviceApprovalsRolloutPolicyRemoveAll";
  case DBTEAMLOGDeviceApprovalsRolloutPolicyAddException:
    return @"DBTEAMLOGDeviceApprovalsRolloutPolicyAddException";
  case DBTEAMLOGDeviceApprovalsRolloutPolicyOther:
    return @"DBTEAMLOGDeviceApprovalsRolloutPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsRolloutPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceApprovalsRolloutPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceApprovalsRolloutPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGDeviceApprovalsRolloutPolicyRemoveOldest:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceApprovalsRolloutPolicyRemoveAll:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceApprovalsRolloutPolicyAddException:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceApprovalsRolloutPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsRolloutPolicy:other];
}

- (BOOL)isEqualToDeviceApprovalsRolloutPolicy:(DBTEAMLOGDeviceApprovalsRolloutPolicy *)aDeviceApprovalsRolloutPolicy {
  if (self == aDeviceApprovalsRolloutPolicy) {
    return YES;
  }
  if (self.tag != aDeviceApprovalsRolloutPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGDeviceApprovalsRolloutPolicyRemoveOldest:
    return [[self tagName] isEqual:[aDeviceApprovalsRolloutPolicy tagName]];
  case DBTEAMLOGDeviceApprovalsRolloutPolicyRemoveAll:
    return [[self tagName] isEqual:[aDeviceApprovalsRolloutPolicy tagName]];
  case DBTEAMLOGDeviceApprovalsRolloutPolicyAddException:
    return [[self tagName] isEqual:[aDeviceApprovalsRolloutPolicy tagName]];
  case DBTEAMLOGDeviceApprovalsRolloutPolicyOther:
    return [[self tagName] isEqual:[aDeviceApprovalsRolloutPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsRolloutPolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceApprovalsRolloutPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isRemoveOldest]) {
    jsonDict[@".tag"] = @"remove_oldest";
  } else if ([valueObj isRemoveAll]) {
    jsonDict[@".tag"] = @"remove_all";
  } else if ([valueObj isAddException]) {
    jsonDict[@".tag"] = @"add_exception";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGDeviceApprovalsRolloutPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"remove_oldest"]) {
    return [[DBTEAMLOGDeviceApprovalsRolloutPolicy alloc] initWithRemoveOldest];
  } else if ([tag isEqualToString:@"remove_all"]) {
    return [[DBTEAMLOGDeviceApprovalsRolloutPolicy alloc] initWithRemoveAll];
  } else if ([tag isEqualToString:@"add_exception"]) {
    return [[DBTEAMLOGDeviceApprovalsRolloutPolicy alloc] initWithAddException];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGDeviceApprovalsRolloutPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGDeviceApprovalsRolloutPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceChangeIpDesktopDetails.h"
#import "DBTEAMLOGDeviceLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceChangeIpDesktopDetails

#pragma mark - Constructors

- (instancetype)initWithDeviceInfo:(DBTEAMLOGDeviceLogInfo *)deviceInfo {

  self = [super init];
  if (self) {
    _deviceInfo = deviceInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.deviceInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceChangeIpDesktopDetails:other];
}

- (BOOL)isEqualToDeviceChangeIpDesktopDetails:(DBTEAMLOGDeviceChangeIpDesktopDetails *)aDeviceChangeIpDesktopDetails {
  if (self == aDeviceChangeIpDesktopDetails) {
    return YES;
  }
  if (![self.deviceInfo isEqual:aDeviceChangeIpDesktopDetails.deviceInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceChangeIpDesktopDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"device_info"] = [DBTEAMLOGDeviceLogInfoSerializer serialize:valueObj.deviceInfo];

  return jsonDict;
}

+ (DBTEAMLOGDeviceChangeIpDesktopDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGDeviceLogInfo *deviceInfo = [DBTEAMLOGDeviceLogInfoSerializer deserialize:valueDict[@"device_info"]];

  return [[DBTEAMLOGDeviceChangeIpDesktopDetails alloc] initWithDeviceInfo:deviceInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceChangeIpMobileDetails.h"
#import "DBTEAMLOGDeviceLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceChangeIpMobileDetails

#pragma mark - Constructors

- (instancetype)initWithDeviceInfo:(DBTEAMLOGDeviceLogInfo *)deviceInfo {

  self = [super init];
  if (self) {
    _deviceInfo = deviceInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceChangeIpMobileDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceChangeIpMobileDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceChangeIpMobileDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.deviceInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceChangeIpMobileDetails:other];
}

- (BOOL)isEqualToDeviceChangeIpMobileDetails:(DBTEAMLOGDeviceChangeIpMobileDetails *)aDeviceChangeIpMobileDetails {
  if (self == aDeviceChangeIpMobileDetails) {
    return YES;
  }
  if (![self.deviceInfo isEqual:aDeviceChangeIpMobileDetails.deviceInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceChangeIpMobileDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceChangeIpMobileDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"device_info"] = [DBTEAMLOGDeviceLogInfoSerializer serialize:valueObj.deviceInfo];

  return jsonDict;
}

+ (DBTEAMLOGDeviceChangeIpMobileDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGDeviceLogInfo *deviceInfo = [DBTEAMLOGDeviceLogInfoSerializer deserialize:valueDict[@"device_info"]];

  return [[DBTEAMLOGDeviceChangeIpMobileDetails alloc] initWithDeviceInfo:deviceInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceChangeIpWebDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceChangeIpWebDetails

#pragma mark - Constructors

- (instancetype)initWithUserAgent:(NSString *)userAgent {

  self = [super init];
  if (self) {
    _userAgent = userAgent;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceChangeIpWebDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceChangeIpWebDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceChangeIpWebDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.userAgent hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceChangeIpWebDetails:other];
}

- (BOOL)isEqualToDeviceChangeIpWebDetails:(DBTEAMLOGDeviceChangeIpWebDetails *)aDeviceChangeIpWebDetails {
  if (self == aDeviceChangeIpWebDetails) {
    return YES;
  }
  if (![self.userAgent isEqual:aDeviceChangeIpWebDetails.userAgent]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceChangeIpWebDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceChangeIpWebDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"user_agent"] = valueObj.userAgent;

  return jsonDict;
}

+ (DBTEAMLOGDeviceChangeIpWebDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *userAgent = valueDict[@"user_agent"];

  return [[DBTEAMLOGDeviceChangeIpWebDetails alloc] initWithUserAgent:userAgent];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkFailDetails.h"
#import "DBTEAMLOGDeviceLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkFailDetails

#pragma mark - Constructors

- (instancetype)initWithDeviceInfo:(DBTEAMLOGDeviceLogInfo *)deviceInfo numFailures:(NSNumber *)numFailures {

  self = [super init];
  if (self) {
    _deviceInfo = deviceInfo;
    _numFailures = numFailures;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.deviceInfo hash];
  result = prime * result + [self.numFailures hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceDeleteOnUnlinkFailDetails:other];
}

- (BOOL)isEqualToDeviceDeleteOnUnlinkFailDetails:
    (DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *)aDeviceDeleteOnUnlinkFailDetails {
  if (self == aDeviceDeleteOnUnlinkFailDetails) {
    return YES;
  }
  if (![self.deviceInfo isEqual:aDeviceDeleteOnUnlinkFailDetails.deviceInfo]) {
    return NO;
  }
  if (![self.numFailures isEqual:aDeviceDeleteOnUnlinkFailDetails.numFailures]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"device_info"] = [DBTEAMLOGDeviceLogInfoSerializer serialize:valueObj.deviceInfo];
  jsonDict[@"num_failures"] = valueObj.numFailures;

  return jsonDict;
}

+ (DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGDeviceLogInfo *deviceInfo = [DBTEAMLOGDeviceLogInfoSerializer deserialize:valueDict[@"device_info"]];
  NSNumber *numFailures = valueDict[@"num_failures"];

  return [[DBTEAMLOGDeviceDeleteOnUnlinkFailDetails alloc] initWithDeviceInfo:deviceInfo numFailures:numFailures];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails.h"
#import "DBTEAMLOGDeviceLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails

#pragma mark - Constructors

- (instancetype)initWithDeviceInfo:(DBTEAMLOGDeviceLogInfo *)deviceInfo {

  self = [super init];
  if (self) {
    _deviceInfo = deviceInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.deviceInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceDeleteOnUnlinkSuccessDetails:other];
}

- (BOOL)isEqualToDeviceDeleteOnUnlinkSuccessDetails:
    (DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *)aDeviceDeleteOnUnlinkSuccessDetails {
  if (self == aDeviceDeleteOnUnlinkSuccessDetails) {
    return YES;
  }
  if (![self.deviceInfo isEqual:aDeviceDeleteOnUnlinkSuccessDetails.deviceInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"device_info"] = [DBTEAMLOGDeviceLogInfoSerializer serialize:valueObj.deviceInfo];

  return jsonDict;
}

+ (DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGDeviceLogInfo *deviceInfo = [DBTEAMLOGDeviceLogInfoSerializer deserialize:valueDict[@"device_info"]];

  return [[DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails alloc] initWithDeviceInfo:deviceInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceLinkFailDetails.h"
#import "DBTEAMLOGDeviceType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceLinkFailDetails

#pragma mark - Constructors

- (instancetype)initWithDeviceType:(DBTEAMLOGDeviceType *)deviceType {

  self = [super init];
  if (self) {
    _deviceType = deviceType;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceLinkFailDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceLinkFailDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceLinkFailDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.deviceType hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceLinkFailDetails:other];
}

- (BOOL)isEqualToDeviceLinkFailDetails:(DBTEAMLOGDeviceLinkFailDetails *)aDeviceLinkFailDetails {
  if (self == aDeviceLinkFailDetails) {
    return YES;
  }
  if (![self.deviceType isEqual:aDeviceLinkFailDetails.deviceType]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceLinkFailDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceLinkFailDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"device_type"] = [DBTEAMLOGDeviceTypeSerializer serialize:valueObj.deviceType];

  return jsonDict;
}

+ (DBTEAMLOGDeviceLinkFailDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGDeviceType *deviceType = [DBTEAMLOGDeviceTypeSerializer deserialize:valueDict[@"device_type"]];

  return [[DBTEAMLOGDeviceLinkFailDetails alloc] initWithDeviceType:deviceType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceLinkSuccessDetails.h"
#import "DBTEAMLOGDeviceLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceLinkSuccessDetails

#pragma mark - Constructors

- (instancetype)initWithDeviceInfo:(DBTEAMLOGDeviceLogInfo *)deviceInfo appVersion:(NSString *)appVersion {

  self = [super init];
  if (self) {
    _deviceInfo = deviceInfo;
    _appVersion = appVersion;
  }
  return self;
}

- (instancetype)initWithDeviceInfo:(DBTEAMLOGDeviceLogInfo *)deviceInfo {
  return [self initWithDeviceInfo:deviceInfo appVersion:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceLinkSuccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceLinkSuccessDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceLinkSuccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.deviceInfo hash];
  if (self.appVersion) {
    result = prime * result + [self.appVersion hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceLinkSuccessDetails:other];
}

- (BOOL)isEqualToDeviceLinkSuccessDetails:(DBTEAMLOGDeviceLinkSuccessDetails *)aDeviceLinkSuccessDetails {
  if (self == aDeviceLinkSuccessDetails) {
    return YES;
  }
  if (![self.deviceInfo isEqual:aDeviceLinkSuccessDetails.deviceInfo]) {
    return NO;
  }
  if (self.appVersion) {
    if (![self.appVersion isEqual:aDeviceLinkSuccessDetails.appVersion]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceLinkSuccessDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceLinkSuccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"device_info"] = [DBTEAMLOGDeviceLogInfoSerializer serialize:valueObj.deviceInfo];
  if (valueObj.appVersion) {
    jsonDict[@"app_version"] = valueObj.appVersion;
  }

  return jsonDict;
}

+ (DBTEAMLOGDeviceLinkSuccessDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGDeviceLogInfo *deviceInfo = [DBTEAMLOGDeviceLogInfoSerializer deserialize:valueDict[@"device_info"]];
  NSString *appVersion = valueDict[@"app_version"] ?: nil;

  return [[DBTEAMLOGDeviceLinkSuccessDetails alloc] initWithDeviceInfo:deviceInfo appVersion:appVersion];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceLogInfo

#pragma mark - Constructors

- (instancetype)initWithDeviceId:(NSString *)deviceId
                     displayName:(NSString *)displayName
                    isEmmManaged:(NSNumber *)isEmmManaged
                        platform:(NSString *)platform
                      macAddress:(NSString *)macAddress
                       osVersion:(NSString *)osVersion
                      deviceType:(NSString *)deviceType
                       ipAddress:(NSString *)ipAddress
                    lastActivity:(NSString *)lastActivity {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil
                                              maxLength:nil
                                                pattern:@"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$"]](ipAddress);

  self = [super init];
  if (self) {
    _deviceId = deviceId;
    _displayName = displayName;
    _isEmmManaged = isEmmManaged;
    _platform = platform;
    _macAddress = macAddress;
    _osVersion = osVersion;
    _deviceType = deviceType;
    _ipAddress = ipAddress;
    _lastActivity = lastActivity;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDeviceId:nil
                    displayName:nil
                   isEmmManaged:nil
                       platform:nil
                     macAddress:nil
                      osVersion:nil
                     deviceType:nil
                      ipAddress:nil
                   lastActivity:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.deviceId) {
    result = prime * result + [self.deviceId hash];
  }
  if (self.displayName) {
    result = prime * result + [self.displayName hash];
  }
  if (self.isEmmManaged) {
    result = prime * result + [self.isEmmManaged hash];
  }
  if (self.platform) {
    result = prime * result + [self.platform hash];
  }
  if (self.macAddress) {
    result = prime * result + [self.macAddress hash];
  }
  if (self.osVersion) {
    result = prime * result + [self.osVersion hash];
  }
  if (self.deviceType) {
    result = prime * result + [self.deviceType hash];
  }
  if (self.ipAddress) {
    result = prime * result + [self.ipAddress hash];
  }
  if (self.lastActivity) {
    result = prime * result + [self.lastActivity hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceLogInfo:other];
}

- (BOOL)isEqualToDeviceLogInfo:(DBTEAMLOGDeviceLogInfo *)aDeviceLogInfo {
  if (self == aDeviceLogInfo) {
    return YES;
  }
  if (self.deviceId) {
    if (![self.deviceId isEqual:aDeviceLogInfo.deviceId]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aDeviceLogInfo.displayName]) {
      return NO;
    }
  }
  if (self.isEmmManaged) {
    if (![self.isEmmManaged isEqual:aDeviceLogInfo.isEmmManaged]) {
      return NO;
    }
  }
  if (self.platform) {
    if (![self.platform isEqual:aDeviceLogInfo.platform]) {
      return NO;
    }
  }
  if (self.macAddress) {
    if (![self.macAddress isEqual:aDeviceLogInfo.macAddress]) {
      return NO;
    }
  }
  if (self.osVersion) {
    if (![self.osVersion isEqual:aDeviceLogInfo.osVersion]) {
      return NO;
    }
  }
  if (self.deviceType) {
    if (![self.deviceType isEqual:aDeviceLogInfo.deviceType]) {
      return NO;
    }
  }
  if (self.ipAddress) {
    if (![self.ipAddress isEqual:aDeviceLogInfo.ipAddress]) {
      return NO;
    }
  }
  if (self.lastActivity) {
    if (![self.lastActivity isEqual:aDeviceLogInfo.lastActivity]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.deviceId) {
    jsonDict[@"device_id"] = valueObj.deviceId;
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }
  if (valueObj.isEmmManaged) {
    jsonDict[@"is_emm_managed"] = valueObj.isEmmManaged;
  }
  if (valueObj.platform) {
    jsonDict[@"platform"] = valueObj.platform;
  }
  if (valueObj.macAddress) {
    jsonDict[@"mac_address"] = valueObj.macAddress;
  }
  if (valueObj.osVersion) {
    jsonDict[@"os_version"] = valueObj.osVersion;
  }
  if (valueObj.deviceType) {
    jsonDict[@"device_type"] = valueObj.deviceType;
  }
  if (valueObj.ipAddress) {
    jsonDict[@"ip_address"] = valueObj.ipAddress;
  }
  if (valueObj.lastActivity) {
    jsonDict[@"last_activity"] = valueObj.lastActivity;
  }

  return jsonDict;
}

+ (DBTEAMLOGDeviceLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *deviceId = valueDict[@"device_id"] ?: nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;
  NSNumber *isEmmManaged = valueDict[@"is_emm_managed"] ?: nil;
  NSString *platform = valueDict[@"platform"] ?: nil;
  NSString *macAddress = valueDict[@"mac_address"] ?: nil;
  NSString *osVersion = valueDict[@"os_version"] ?: nil;
  NSString *deviceType = valueDict[@"device_type"] ?: nil;
  NSString *ipAddress = valueDict[@"ip_address"] ?: nil;
  NSString *lastActivity = valueDict[@"last_activity"] ?: nil;

  return [[DBTEAMLOGDeviceLogInfo alloc] initWithDeviceId:deviceId
                                              displayName:displayName
                                             isEmmManaged:isEmmManaged
                                                 platform:platform
                                               macAddress:macAddress
                                                osVersion:osVersion
                                               deviceType:deviceType
                                                ipAddress:ipAddress
                                             lastActivity:lastActivity];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceManagementDisabledDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceManagementDisabledDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceManagementDisabledDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceManagementDisabledDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceManagementDisabledDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceManagementDisabledDetails:other];
}

- (BOOL)isEqualToDeviceManagementDisabledDetails:
    (DBTEAMLOGDeviceManagementDisabledDetails *)aDeviceManagementDisabledDetails {
  if (self == aDeviceManagementDisabledDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceManagementDisabledDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceManagementDisabledDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGDeviceManagementDisabledDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDeviceManagementDisabledDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceManagementEnabledDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceManagementEnabledDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceManagementEnabledDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceManagementEnabledDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceManagementEnabledDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceManagementEnabledDetails:other];
}

- (BOOL)isEqualToDeviceManagementEnabledDetails:
    (DBTEAMLOGDeviceManagementEnabledDetails *)aDeviceManagementEnabledDetails {
  if (self == aDeviceManagementEnabledDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceManagementEnabledDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceManagementEnabledDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGDeviceManagementEnabledDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDeviceManagementEnabledDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceType

#pragma mark - Constructors

- (instancetype)initWithMobile {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceTypeMobile;
  }
  return self;
}

- (instancetype)initWithDesktop {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceTypeDesktop;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isMobile {
  return _tag == DBTEAMLOGDeviceTypeMobile;
}

- (BOOL)isDesktop {
  return _tag == DBTEAMLOGDeviceTypeDesktop;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGDeviceTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGDeviceTypeMobile:
    return @"DBTEAMLOGDeviceTypeMobile";
  case DBTEAMLOGDeviceTypeDesktop:
    return @"DBTEAMLOGDeviceTypeDesktop";
  case DBTEAMLOGDeviceTypeOther:
    return @"DBTEAMLOGDeviceTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGDeviceTypeMobile:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceTypeDesktop:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceTypeOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceType:other];
}

- (BOOL)isEqualToDeviceType:(DBTEAMLOGDeviceType *)aDeviceType {
  if (self == aDeviceType) {
    return YES;
  }
  if (self.tag != aDeviceType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGDeviceTypeMobile:
    return [[self tagName] isEqual:[aDeviceType tagName]];
  case DBTEAMLOGDeviceTypeDesktop:
    return [[self tagName] isEqual:[aDeviceType tagName]];
  case DBTEAMLOGDeviceTypeOther:
    return [[self tagName] isEqual:[aDeviceType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceTypeSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isMobile]) {
    jsonDict[@".tag"] = @"mobile";
  } else if ([valueObj isDesktop]) {
    jsonDict[@".tag"] = @"desktop";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGDeviceType *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"mobile"]) {
    return [[DBTEAMLOGDeviceType alloc] initWithMobile];
  } else if ([tag isEqualToString:@"desktop"]) {
    return [[DBTEAMLOGDeviceType alloc] initWithDesktop];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGDeviceType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGDeviceType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceLogInfo.h"
#import "DBTEAMLOGDeviceUnlinkDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceUnlinkDetails

#pragma mark - Constructors

- (instancetype)initWithDeviceInfo:(DBTEAMLOGDeviceLogInfo *)deviceInfo deleteData:(NSNumber *)deleteData {

  self = [super init];
  if (self) {
    _deviceInfo = deviceInfo;
    _deleteData = deleteData;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceUnlinkDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceUnlinkDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceUnlinkDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.deviceInfo hash];
  result = prime * result + [self.deleteData hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceUnlinkDetails:other];
}

- (BOOL)isEqualToDeviceUnlinkDetails:(DBTEAMLOGDeviceUnlinkDetails *)aDeviceUnlinkDetails {
  if (self == aDeviceUnlinkDetails) {
    return YES;
  }
  if (![self.deviceInfo isEqual:aDeviceUnlinkDetails.deviceInfo]) {
    return NO;
  }
  if (![self.deleteData isEqual:aDeviceUnlinkDetails.deleteData]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceUnlinkDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceUnlinkDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"device_info"] = [DBTEAMLOGDeviceLogInfoSerializer serialize:valueObj.deviceInfo];
  jsonDict[@"delete_data"] = valueObj.deleteData;

  return jsonDict;
}

+ (DBTEAMLOGDeviceUnlinkDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGDeviceLogInfo *deviceInfo = [DBTEAMLOGDeviceLogInfoSerializer deserialize:valueDict[@"device_info"]];
  NSNumber *deleteData = valueDict[@"delete_data"];

  return [[DBTEAMLOGDeviceUnlinkDetails alloc] initWithDeviceInfo:deviceInfo deleteData:deleteData];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceUnlinkPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceUnlinkPolicy

#pragma mark - Constructors

- (instancetype)initWithRemove {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceUnlinkPolicyRemove;
  }
  return self;
}

- (instancetype)initWithKeep {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceUnlinkPolicyKeep;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceUnlinkPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isRemove {
  return _tag == DBTEAMLOGDeviceUnlinkPolicyRemove;
}

- (BOOL)isKeep {
  return _tag == DBTEAMLOGDeviceUnlinkPolicyKeep;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGDeviceUnlinkPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGDeviceUnlinkPolicyRemove:
    return @"DBTEAMLOGDeviceUnlinkPolicyRemove";
  case DBTEAMLOGDeviceUnlinkPolicyKeep:
    return @"DBTEAMLOGDeviceUnlinkPolicyKeep";
  case DBTEAMLOGDeviceUnlinkPolicyOther:
    return @"DBTEAMLOGDeviceUnlinkPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDeviceUnlinkPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDeviceUnlinkPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDeviceUnlinkPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGDeviceUnlinkPolicyRemove:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceUnlinkPolicyKeep:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGDeviceUnlinkPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceUnlinkPolicy:other];
}

- (BOOL)isEqualToDeviceUnlinkPolicy:(DBTEAMLOGDeviceUnlinkPolicy *)aDeviceUnlinkPolicy {
  if (self == aDeviceUnlinkPolicy) {
    return YES;
  }
  if (self.tag != aDeviceUnlinkPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGDeviceUnlinkPolicyRemove:
    return [[self tagName] isEqual:[aDeviceUnlinkPolicy tagName]];
  case DBTEAMLOGDeviceUnlinkPolicyKeep:
    return [[self tagName] isEqual:[aDeviceUnlinkPolicy tagName]];
  case DBTEAMLOGDeviceUnlinkPolicyOther:
    return [[self tagName] isEqual:[aDeviceUnlinkPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceUnlinkPolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDeviceUnlinkPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isRemove]) {
    jsonDict[@".tag"] = @"remove";
  } else if ([valueObj isKeep]) {
    jsonDict[@".tag"] = @"keep";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGDeviceUnlinkPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"remove"]) {
    return [[DBTEAMLOGDeviceUnlinkPolicy alloc] initWithRemove];
  } else if ([tag isEqualToString:@"keep"]) {
    return [[DBTEAMLOGDeviceUnlinkPolicy alloc] initWithKeep];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGDeviceUnlinkPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGDeviceUnlinkPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDisabledDomainInvitesDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDisabledDomainInvitesDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDisabledDomainInvitesDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDisabledDomainInvitesDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDisabledDomainInvitesDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDisabledDomainInvitesDetails:other];
}

- (BOOL)isEqualToDisabledDomainInvitesDetails:(DBTEAMLOGDisabledDomainInvitesDetails *)aDisabledDomainInvitesDetails {
  if (self == aDisabledDomainInvitesDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDisabledDomainInvitesDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDisabledDomainInvitesDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGDisabledDomainInvitesDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDisabledDomainInvitesDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesApproveRequestToJoinTeamDetails:other];
}

- (BOOL)isEqualToDomainInvitesApproveRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *)aDomainInvitesApproveRequestToJoinTeamDetails {
  if (self == aDomainInvitesApproveRequestToJoinTeamDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesDeclineRequestToJoinTeamDetails:other];
}

- (BOOL)isEqualToDomainInvitesDeclineRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *)aDomainInvitesDeclineRequestToJoinTeamDetails {
  if (self == aDomainInvitesDeclineRequestToJoinTeamDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesEmailExistingUsersDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesEmailExistingUsersDetails

#pragma mark - Constructors

- (instancetype)initWithDomainName:(NSArray<NSString *> *)domainName numRecipients:(NSNumber *)numRecipients {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](domainName);

  self = [super init];
  if (self) {
    _domainName = domainName;
    _numRecipients = numRecipients;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainName hash];
  result = prime * result + [self.numRecipients hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesEmailExistingUsersDetails:other];
}

- (BOOL)isEqualToDomainInvitesEmailExistingUsersDetails:
    (DBTEAMLOGDomainInvitesEmailExistingUsersDetails *)aDomainInvitesEmailExistingUsersDetails {
  if (self == aDomainInvitesEmailExistingUsersDetails) {
    return YES;
  }
  if (![self.domainName isEqual:aDomainInvitesEmailExistingUsersDetails.domainName]) {
    return NO;
  }
  if (![self.numRecipients isEqual:aDomainInvitesEmailExistingUsersDetails.numRecipients]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDomainInvitesEmailExistingUsersDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_name"] = [DBArraySerializer serialize:valueObj.domainName
                                                withBlock:^id(id elem0) {
                                                  return elem0;
                                                }];
  jsonDict[@"num_recipients"] = valueObj.numRecipients;

  return jsonDict;
}

+ (DBTEAMLOGDomainInvitesEmailExistingUsersDetails *)deserialize:(NSDictionary *)valueDict {
  NSArray<NSString *> *domainName = [DBArraySerializer deserialize:valueDict[@"domain_name"]
                                                         withBlock:^id(id elem0) {
                                                           return elem0;
                                                         }];
  NSNumber *numRecipients = valueDict[@"num_recipients"];

  return [[DBTEAMLOGDomainInvitesEmailExistingUsersDetails alloc] initWithDomainName:domainName
                                                                       numRecipients:numRecipients];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesRequestToJoinTeamDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesRequestToJoinTeamDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesRequestToJoinTeamDetails:other];
}

- (BOOL)isEqualToDomainInvitesRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *)aDomainInvitesRequestToJoinTeamDetails {
  if (self == aDomainInvitesRequestToJoinTeamDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDomainInvitesRequestToJoinTeamDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesSetInviteNewUserPrefToNoDetails:other];
}

- (BOOL)isEqualToDomainInvitesSetInviteNewUserPrefToNoDetails:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *)aDomainInvitesSetInviteNewUserPrefToNoDetails {
  if (self == aDomainInvitesSetInviteNewUserPrefToNoDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesSetInviteNewUserPrefToYesDetails:other];
}

- (BOOL)isEqualToDomainInvitesSetInviteNewUserPrefToYesDetails:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *)aDomainInvitesSetInviteNewUserPrefToYesDetails {
  if (self == aDomainInvitesSetInviteNewUserPrefToYesDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainVerificationAddDomainFailDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainVerificationAddDomainFailDetails

#pragma mark - Constructors

- (instancetype)initWithDomainNames:(NSArray<NSString *> *)domainNames
                 verificationMethod:(NSString *)verificationMethod {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](domainNames);

  self = [super init];
  if (self) {
    _domainNames = domainNames;
    _verificationMethod = verificationMethod;
  }
  return self;
}

- (instancetype)initWithDomainNames:(NSArray<NSString *> *)domainNames {
  return [self initWithDomainNames:domainNames verificationMethod:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainNames hash];
  if (self.verificationMethod) {
    result = prime * result + [self.verificationMethod hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainVerificationAddDomainFailDetails:other];
}

- (BOOL)isEqualToDomainVerificationAddDomainFailDetails:
    (DBTEAMLOGDomainVerificationAddDomainFailDetails *)aDomainVerificationAddDomainFailDetails {
  if (self == aDomainVerificationAddDomainFailDetails) {
    return YES;
  }
  if (![self.domainNames isEqual:aDomainVerificationAddDomainFailDetails.domainNames]) {
    return NO;
  }
  if (self.verificationMethod) {
    if (![self.verificationMethod isEqual:aDomainVerificationAddDomainFailDetails.verificationMethod]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDomainVerificationAddDomainFailDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_names"] = [DBArraySerializer serialize:valueObj.domainNames
                                                 withBlock:^id(id elem0) {
                                                   return elem0;
                                                 }];
  if (valueObj.verificationMethod) {
    jsonDict[@"verification_method"] = valueObj.verificationMethod;
  }

  return jsonDict;
}

+ (DBTEAMLOGDomainVerificationAddDomainFailDetails *)deserialize:(NSDictionary *)valueDict {
  NSArray<NSString *> *domainNames = [DBArraySerializer deserialize:valueDict[@"domain_names"]
                                                          withBlock:^id(id elem0) {
                                                            return elem0;
                                                          }];
  NSString *verificationMethod = valueDict[@"verification_method"] ?: nil;

  return [[DBTEAMLOGDomainVerificationAddDomainFailDetails alloc] initWithDomainNames:domainNames
                                                                   verificationMethod:verificationMethod];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainVerificationAddDomainSuccessDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainVerificationAddDomainSuccessDetails

#pragma mark - Constructors

- (instancetype)initWithDomainNames:(NSArray<NSString *> *)domainNames
                 verificationMethod:(NSString *)verificationMethod {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](domainNames);

  self = [super init];
  if (self) {
    _domainNames = domainNames;
    _verificationMethod = verificationMethod;
  }
  return self;
}

- (instancetype)initWithDomainNames:(NSArray<NSString *> *)domainNames {
  return [self initWithDomainNames:domainNames verificationMethod:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainNames hash];
  if (self.verificationMethod) {
    result = prime * result + [self.verificationMethod hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainVerificationAddDomainSuccessDetails:other];
}

- (BOOL)isEqualToDomainVerificationAddDomainSuccessDetails:
    (DBTEAMLOGDomainVerificationAddDomainSuccessDetails *)aDomainVerificationAddDomainSuccessDetails {
  if (self == aDomainVerificationAddDomainSuccessDetails) {
    return YES;
  }
  if (![self.domainNames isEqual:aDomainVerificationAddDomainSuccessDetails.domainNames]) {
    return NO;
  }
  if (self.verificationMethod) {
    if (![self.verificationMethod isEqual:aDomainVerificationAddDomainSuccessDetails.verificationMethod]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDomainVerificationAddDomainSuccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_names"] = [DBArraySerializer serialize:valueObj.domainNames
                                                 withBlock:^id(id elem0) {
                                                   return elem0;
                                                 }];
  if (valueObj.verificationMethod) {
    jsonDict[@"verification_method"] = valueObj.verificationMethod;
  }

  return jsonDict;
}

+ (DBTEAMLOGDomainVerificationAddDomainSuccessDetails *)deserialize:(NSDictionary *)valueDict {
  NSArray<NSString *> *domainNames = [DBArraySerializer deserialize:valueDict[@"domain_names"]
                                                          withBlock:^id(id elem0) {
                                                            return elem0;
                                                          }];
  NSString *verificationMethod = valueDict[@"verification_method"] ?: nil;

  return [[DBTEAMLOGDomainVerificationAddDomainSuccessDetails alloc] initWithDomainNames:domainNames
                                                                      verificationMethod:verificationMethod];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainVerificationRemoveDomainDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainVerificationRemoveDomainDetails

#pragma mark - Constructors

- (instancetype)initWithDomainNames:(NSArray<NSString *> *)domainNames {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](domainNames);

  self = [super init];
  if (self) {
    _domainNames = domainNames;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainNames hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainVerificationRemoveDomainDetails:other];
}

- (BOOL)isEqualToDomainVerificationRemoveDomainDetails:
    (DBTEAMLOGDomainVerificationRemoveDomainDetails *)aDomainVerificationRemoveDomainDetails {
  if (self == aDomainVerificationRemoveDomainDetails) {
    return YES;
  }
  if (![self.domainNames isEqual:aDomainVerificationRemoveDomainDetails.domainNames]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGDomainVerificationRemoveDomainDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_names"] = [DBArraySerializer serialize:valueObj.domainNames
                                                 withBlock:^id(id elem0) {
                                                   return elem0;
                                                 }];

  return jsonDict;
}

+ (DBTEAMLOGDomainVerificationRemoveDomainDetails *)deserialize:(NSDictionary *)valueDict {
  NSArray<NSString *> *domainNames = [DBArraySerializer deserialize:valueDict[@"domain_names"]
                                                          withBlock:^id(id elem0) {
                                                            return elem0;
                                                          }];

  return [[DBTEAMLOGDomainVerificationRemoveDomainDetails alloc] initWithDomainNames:domainNames];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmAddExceptionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmAddExceptionDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGEmmAddExceptionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGEmmAddExceptionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmAddExceptionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmAddExceptionDetails:other];
}

- (BOOL)isEqualToEmmAddExceptionDetails:(DBTEAMLOGEmmAddExceptionDetails *)anEmmAddExceptionDetails {
  if (self == anEmmAddExceptionDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmAddExceptionDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGEmmAddExceptionDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGEmmAddExceptionDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEmmAddExceptionDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmChangePolicyDetails.h"
#import "DBTEAMLOGOptionalChangePolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGOptionalChangePolicy *)dNewValue
                    previousValue:(DBTEAMLOGOptionalChangePolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGOptionalChangePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGEmmChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGEmmChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmChangePolicyDetails:other];
}

- (BOOL)isEqualToEmmChangePolicyDetails:(DBTEAMLOGEmmChangePolicyDetails *)anEmmChangePolicyDetails {
  if (self == anEmmChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:anEmmChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:anEmmChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGEmmChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGOptionalChangePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGOptionalChangePolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGEmmChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGOptionalChangePolicy *dNewValue =
      [DBTEAMLOGOptionalChangePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGOptionalChangePolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGOptionalChangePolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGEmmChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmCreateExceptionsReportDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmCreateExceptionsReportDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmCreateExceptionsReportDetails:other];
}

- (BOOL)isEqualToEmmCreateExceptionsReportDetails:
    (DBTEAMLOGEmmCreateExceptionsReportDetails *)anEmmCreateExceptionsReportDetails {
  if (self == anEmmCreateExceptionsReportDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGEmmCreateExceptionsReportDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGEmmCreateExceptionsReportDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEmmCreateExceptionsReportDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmCreateUsageReportDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmCreateUsageReportDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGEmmCreateUsageReportDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGEmmCreateUsageReportDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmCreateUsageReportDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmCreateUsageReportDetails:other];
}

- (BOOL)isEqualToEmmCreateUsageReportDetails:(DBTEAMLOGEmmCreateUsageReportDetails *)anEmmCreateUsageReportDetails {
  if (self == anEmmCreateUsageReportDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmCreateUsageReportDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGEmmCreateUsageReportDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGEmmCreateUsageReportDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEmmCreateUsageReportDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmLoginSuccessDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmLoginSuccessDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGEmmLoginSuccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGEmmLoginSuccessDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmLoginSuccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmLoginSuccessDetails:other];
}

- (BOOL)isEqualToEmmLoginSuccessDetails:(DBTEAMLOGEmmLoginSuccessDetails *)anEmmLoginSuccessDetails {
  if (self == anEmmLoginSuccessDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmLoginSuccessDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGEmmLoginSuccessDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGEmmLoginSuccessDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEmmLoginSuccessDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmRefreshAuthTokenDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmRefreshAuthTokenDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmRefreshAuthTokenDetails:other];
}

- (BOOL)isEqualToEmmRefreshAuthTokenDetails:(DBTEAMLOGEmmRefreshAuthTokenDetails *)anEmmRefreshAuthTokenDetails {
  if (self == anEmmRefreshAuthTokenDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGEmmRefreshAuthTokenDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGEmmRefreshAuthTokenDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEmmRefreshAuthTokenDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmRemoveExceptionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmRemoveExceptionDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGEmmRemoveExceptionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGEmmRemoveExceptionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEmmRemoveExceptionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmRemoveExceptionDetails:other];
}

- (BOOL)isEqualToEmmRemoveExceptionDetails:(DBTEAMLOGEmmRemoveExceptionDetails *)anEmmRemoveExceptionDetails {
  if (self == anEmmRemoveExceptionDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmRemoveExceptionDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGEmmRemoveExceptionDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGEmmRemoveExceptionDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEmmRemoveExceptionDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnableDisableChangePolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGEnableDisableChangePolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEnableDisableChangePolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEnableDisableChangePolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEnableDisableChangePolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGEnableDisableChangePolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGEnableDisableChangePolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGEnableDisableChangePolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGEnableDisableChangePolicyDisabled:
    return @"DBTEAMLOGEnableDisableChangePolicyDisabled";
  case DBTEAMLOGEnableDisableChangePolicyEnabled:
    return @"DBTEAMLOGEnableDisableChangePolicyEnabled";
  case DBTEAMLOGEnableDisableChangePolicyOther:
    return @"DBTEAMLOGEnableDisableChangePolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGEnableDisableChangePolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEnableDisableChangePolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGEnableDisableChangePolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEnableDisableChangePolicyEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEnableDisableChangePolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEnableDisableChangePolicy:other];
}

- (BOOL)isEqualToEnableDisableChangePolicy:(DBTEAMLOGEnableDisableChangePolicy *)anEnableDisableChangePolicy {
  if (self == anEnableDisableChangePolicy) {
    return YES;
  }
  if (self.tag != anEnableDisableChangePolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGEnableDisableChangePolicyDisabled:
    return [[self tagName] isEqual:[anEnableDisableChangePolicy tagName]];
  case DBTEAMLOGEnableDisableChangePolicyEnabled:
    return [[self tagName] isEqual:[anEnableDisableChangePolicy tagName]];
  case DBTEAMLOGEnableDisableChangePolicyOther:
    return [[self tagName] isEqual:[anEnableDisableChangePolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEnableDisableChangePolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGEnableDisableChangePolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGEnableDisableChangePolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGEnableDisableChangePolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGEnableDisableChangePolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGEnableDisableChangePolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGEnableDisableChangePolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnabledDomainInvitesDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEnabledDomainInvitesDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGEnabledDomainInvitesDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGEnabledDomainInvitesDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEnabledDomainInvitesDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEnabledDomainInvitesDetails:other];
}

- (BOOL)isEqualToEnabledDomainInvitesDetails:(DBTEAMLOGEnabledDomainInvitesDetails *)anEnabledDomainInvitesDetails {
  if (self == anEnabledDomainInvitesDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEnabledDomainInvitesDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGEnabledDomainInvitesDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGEnabledDomainInvitesDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEnabledDomainInvitesDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEventCategory.h"

#pragma mark - API Object

@implementation DBTEAMLOGEventCategory

#pragma mark - Constructors

- (instancetype)initWithAccountCapture {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryAccountCapture;
  }
  return self;
}

- (instancetype)initWithAdministration {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryAdministration;
  }
  return self;
}

- (instancetype)initWithApps {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryApps;
  }
  return self;
}

- (instancetype)initWithAuthentication {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryAuthentication;
  }
  return self;
}

- (instancetype)initWithComments {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryComments;
  }
  return self;
}

- (instancetype)initWithContentAccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryContentAccess;
  }
  return self;
}

- (instancetype)initWithDevices {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryDevices;
  }
  return self;
}

- (instancetype)initWithDeviceApprovals {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryDeviceApprovals;
  }
  return self;
}

- (instancetype)initWithDomains {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryDomains;
  }
  return self;
}

- (instancetype)initWithEmm {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryEmm;
  }
  return self;
}

- (instancetype)initWithErrors {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryErrors;
  }
  return self;
}

- (instancetype)initWithFiles {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryFiles;
  }
  return self;
}

- (instancetype)initWithFileOperations {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryFileOperations;
  }
  return self;
}

- (instancetype)initWithFileRequests {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryFileRequests;
  }
  return self;
}

- (instancetype)initWithGroups {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryGroups;
  }
  return self;
}

- (instancetype)initWithLogins {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryLogins;
  }
  return self;
}

- (instancetype)initWithMembers {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryMembers;
  }
  return self;
}

- (instancetype)initWithPaper {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryPaper;
  }
  return self;
}

- (instancetype)initWithPasswords {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryPasswords;
  }
  return self;
}

- (instancetype)initWithReports {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryReports;
  }
  return self;
}

- (instancetype)initWithSessions {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategorySessions;
  }
  return self;
}

- (instancetype)initWithSharedFiles {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategorySharedFiles;
  }
  return self;
}

- (instancetype)initWithSharedFolders {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategorySharedFolders;
  }
  return self;
}

- (instancetype)initWithSharedLinks {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategorySharedLinks;
  }
  return self;
}

- (instancetype)initWithSharing {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategorySharing;
  }
  return self;
}

- (instancetype)initWithSharingPolicies {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategorySharingPolicies;
  }
  return self;
}

- (instancetype)initWithSso {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategorySso;
  }
  return self;
}

- (instancetype)initWithTeamFolders {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryTeamFolders;
  }
  return self;
}

- (instancetype)initWithTeamPolicies {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryTeamPolicies;
  }
  return self;
}

- (instancetype)initWithTeamProfile {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryTeamProfile;
  }
  return self;
}

- (instancetype)initWithTfa {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryTfa;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAccountCapture {
  return _tag == DBTEAMLOGEventCategoryAccountCapture;
}

- (BOOL)isAdministration {
  return _tag == DBTEAMLOGEventCategoryAdministration;
}

- (BOOL)isApps {
  return _tag == DBTEAMLOGEventCategoryApps;
}

- (BOOL)isAuthentication {
  return _tag == DBTEAMLOGEventCategoryAuthentication;
}

- (BOOL)isComments {
  return _tag == DBTEAMLOGEventCategoryComments;
}

- (BOOL)isContentAccess {
  return _tag == DBTEAMLOGEventCategoryContentAccess;
}

- (BOOL)isDevices {
  return _tag == DBTEAMLOGEventCategoryDevices;
}

- (BOOL)isDeviceApprovals {
  return _tag == DBTEAMLOGEventCategoryDeviceApprovals;
}

- (BOOL)isDomains {
  return _tag == DBTEAMLOGEventCategoryDomains;
}

- (BOOL)isEmm {
  return _tag == DBTEAMLOGEventCategoryEmm;
}

- (BOOL)isErrors {
  return _tag == DBTEAMLOGEventCategoryErrors;
}

- (BOOL)isFiles {
  return _tag == DBTEAMLOGEventCategoryFiles;
}

- (BOOL)isFileOperations {
  return _tag == DBTEAMLOGEventCategoryFileOperations;
}

- (BOOL)isFileRequests {
  return _tag == DBTEAMLOGEventCategoryFileRequests;
}

- (BOOL)isGroups {
  return _tag == DBTEAMLOGEventCategoryGroups;
}

- (BOOL)isLogins {
  return _tag == DBTEAMLOGEventCategoryLogins;
}

- (BOOL)isMembers {
  return _tag == DBTEAMLOGEventCategoryMembers;
}

- (BOOL)isPaper {
  return _tag == DBTEAMLOGEventCategoryPaper;
}

- (BOOL)isPasswords {
  return _tag == DBTEAMLOGEventCategoryPasswords;
}

- (BOOL)isReports {
  return _tag == DBTEAMLOGEventCategoryReports;
}

- (BOOL)isSessions {
  return _tag == DBTEAMLOGEventCategorySessions;
}

- (BOOL)isSharedFiles {
  return _tag == DBTEAMLOGEventCategorySharedFiles;
}

- (BOOL)isSharedFolders {
  return _tag == DBTEAMLOGEventCategorySharedFolders;
}

- (BOOL)isSharedLinks {
  return _tag == DBTEAMLOGEventCategorySharedLinks;
}

- (BOOL)isSharing {
  return _tag == DBTEAMLOGEventCategorySharing;
}

- (BOOL)isSharingPolicies {
  return _tag == DBTEAMLOGEventCategorySharingPolicies;
}

- (BOOL)isSso {
  return _tag == DBTEAMLOGEventCategorySso;
}

- (BOOL)isTeamFolders {
  return _tag == DBTEAMLOGEventCategoryTeamFolders;
}

- (BOOL)isTeamPolicies {
  return _tag == DBTEAMLOGEventCategoryTeamPolicies;
}

- (BOOL)isTeamProfile {
  return _tag == DBTEAMLOGEventCategoryTeamProfile;
}

- (BOOL)isTfa {
  return _tag == DBTEAMLOGEventCategoryTfa;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGEventCategoryOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGEventCategoryAccountCapture:
    return @"DBTEAMLOGEventCategoryAccountCapture";
  case DBTEAMLOGEventCategoryAdministration:
    return @"DBTEAMLOGEventCategoryAdministration";
  case DBTEAMLOGEventCategoryApps:
    return @"DBTEAMLOGEventCategoryApps";
  case DBTEAMLOGEventCategoryAuthentication:
    return @"DBTEAMLOGEventCategoryAuthentication";
  case DBTEAMLOGEventCategoryComments:
    return @"DBTEAMLOGEventCategoryComments";
  case DBTEAMLOGEventCategoryContentAccess:
    return @"DBTEAMLOGEventCategoryContentAccess";
  case DBTEAMLOGEventCategoryDevices:
    return @"DBTEAMLOGEventCategoryDevices";
  case DBTEAMLOGEventCategoryDeviceApprovals:
    return @"DBTEAMLOGEventCategoryDeviceApprovals";
  case DBTEAMLOGEventCategoryDomains:
    return @"DBTEAMLOGEventCategoryDomains";
  case DBTEAMLOGEventCategoryEmm:
    return @"DBTEAMLOGEventCategoryEmm";
  case DBTEAMLOGEventCategoryErrors:
    return @"DBTEAMLOGEventCategoryErrors";
  case DBTEAMLOGEventCategoryFiles:
    return @"DBTEAMLOGEventCategoryFiles";
  case DBTEAMLOGEventCategoryFileOperations:
    return @"DBTEAMLOGEventCategoryFileOperations";
  case DBTEAMLOGEventCategoryFileRequests:
    return @"DBTEAMLOGEventCategoryFileRequests";
  case DBTEAMLOGEventCategoryGroups:
    return @"DBTEAMLOGEventCategoryGroups";
  case DBTEAMLOGEventCategoryLogins:
    return @"DBTEAMLOGEventCategoryLogins";
  case DBTEAMLOGEventCategoryMembers:
    return @"DBTEAMLOGEventCategoryMembers";
  case DBTEAMLOGEventCategoryPaper:
    return @"DBTEAMLOGEventCategoryPaper";
  case DBTEAMLOGEventCategoryPasswords:
    return @"DBTEAMLOGEventCategoryPasswords";
  case DBTEAMLOGEventCategoryReports:
    return @"DBTEAMLOGEventCategoryReports";
  case DBTEAMLOGEventCategorySessions:
    return @"DBTEAMLOGEventCategorySessions";
  case DBTEAMLOGEventCategorySharedFiles:
    return @"DBTEAMLOGEventCategorySharedFiles";
  case DBTEAMLOGEventCategorySharedFolders:
    return @"DBTEAMLOGEventCategorySharedFolders";
  case DBTEAMLOGEventCategorySharedLinks:
    return @"DBTEAMLOGEventCategorySharedLinks";
  case DBTEAMLOGEventCategorySharing:
    return @"DBTEAMLOGEventCategorySharing";
  case DBTEAMLOGEventCategorySharingPolicies:
    return @"DBTEAMLOGEventCategorySharingPolicies";
  case DBTEAMLOGEventCategorySso:
    return @"DBTEAMLOGEventCategorySso";
  case DBTEAMLOGEventCategoryTeamFolders:
    return @"DBTEAMLOGEventCategoryTeamFolders";
  case DBTEAMLOGEventCategoryTeamPolicies:
    return @"DBTEAMLOGEventCategoryTeamPolicies";
  case DBTEAMLOGEventCategoryTeamProfile:
    return @"DBTEAMLOGEventCategoryTeamProfile";
  case DBTEAMLOGEventCategoryTfa:
    return @"DBTEAMLOGEventCategoryTfa";
  case DBTEAMLOGEventCategoryOther:
    return @"DBTEAMLOGEventCategoryOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGEventCategorySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGEventCategorySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEventCategorySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGEventCategoryAccountCapture:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryAdministration:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryApps:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryAuthentication:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryComments:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryContentAccess:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryDevices:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryDeviceApprovals:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryDomains:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryEmm:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryErrors:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryFiles:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryFileOperations:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryFileRequests:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryGroups:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryLogins:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryMembers:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryPaper:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryPasswords:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryReports:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategorySessions:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategorySharedFiles:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategorySharedFolders:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategorySharedLinks:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategorySharing:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategorySharingPolicies:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategorySso:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryTeamFolders:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryTeamPolicies:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryTeamProfile:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryTfa:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventCategoryOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEventCategory:other];
}

- (BOOL)isEqualToEventCategory:(DBTEAMLOGEventCategory *)anEventCategory {
  if (self == anEventCategory) {
    return YES;
  }
  if (self.tag != anEventCategory.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGEventCategoryAccountCapture:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryAdministration:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryApps:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryAuthentication:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryComments:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryContentAccess:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryDevices:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryDeviceApprovals:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryDomains:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryEmm:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryErrors:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryFiles:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryFileOperations:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryFileRequests:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryGroups:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryLogins:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryMembers:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryPaper:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryPasswords:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryReports:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategorySessions:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategorySharedFiles:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategorySharedFolders:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategorySharedLinks:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategorySharing:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategorySharingPolicies:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategorySso:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryTeamFolders:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryTeamPolicies:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryTeamProfile:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryTfa:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryOther:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEventCategorySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGEventCategory *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccountCapture]) {
    jsonDict[@".tag"] = @"account_capture";
  } else if ([valueObj isAdministration]) {
    jsonDict[@".tag"] = @"administration";
  } else if ([valueObj isApps]) {
    jsonDict[@".tag"] = @"apps";
  } else if ([valueObj isAuthentication]) {
    jsonDict[@".tag"] = @"authentication";
  } else if ([valueObj isComments]) {
    jsonDict[@".tag"] = @"comments";
  } else if ([valueObj isContentAccess]) {
    jsonDict[@".tag"] = @"content_access";
  } else if ([valueObj isDevices]) {
    jsonDict[@".tag"] = @"devices";
  } else if ([valueObj isDeviceApprovals]) {
    jsonDict[@".tag"] = @"device_approvals";
  } else if ([valueObj isDomains]) {
    jsonDict[@".tag"] = @"domains";
  } else if ([valueObj isEmm]) {
    jsonDict[@".tag"] = @"emm";
  } else if ([valueObj isErrors]) {
    jsonDict[@".tag"] = @"errors";
  } else if ([valueObj isFiles]) {
    jsonDict[@".tag"] = @"files";
  } else if ([valueObj isFileOperations]) {
    jsonDict[@".tag"] = @"file_operations";
  } else if ([valueObj isFileRequests]) {
    jsonDict[@".tag"] = @"file_requests";
  } else if ([valueObj isGroups]) {
    jsonDict[@".tag"] = @"groups";
  } else if ([valueObj isLogins]) {
    jsonDict[@".tag"] = @"logins";
  } else if ([valueObj isMembers]) {
    jsonDict[@".tag"] = @"members";
  } else if ([valueObj isPaper]) {
    jsonDict[@".tag"] = @"paper";
  } else if ([valueObj isPasswords]) {
    jsonDict[@".tag"] = @"passwords";
  } else if ([valueObj isReports]) {
    jsonDict[@".tag"] = @"reports";
  } else if ([valueObj isSessions]) {
    jsonDict[@".tag"] = @"sessions";
  } else if ([valueObj isSharedFiles]) {
    jsonDict[@".tag"] = @"shared_files";
  } else if ([valueObj isSharedFolders]) {
    jsonDict[@".tag"] = @"shared_folders";
  } else if ([valueObj isSharedLinks]) {
    jsonDict[@".tag"] = @"shared_links";
  } else if ([valueObj isSharing]) {
    jsonDict[@".tag"] = @"sharing";
  } else if ([valueObj isSharingPolicies]) {
    jsonDict[@".tag"] = @"sharing_policies";
  } else if ([valueObj isSso]) {
    jsonDict[@".tag"] = @"sso";
  } else if ([valueObj isTeamFolders]) {
    jsonDict[@".tag"] = @"team_folders";
  } else if ([valueObj isTeamPolicies]) {
    jsonDict[@".tag"] = @"team_policies";
  } else if ([valueObj isTeamProfile]) {
    jsonDict[@".tag"] = @"team_profile";
  } else if ([valueObj isTfa]) {
    jsonDict[@".tag"] = @"tfa";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGEventCategory *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"account_capture"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithAccountCapture];
  } else if ([tag isEqualToString:@"administration"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithAdministration];
  } else if ([tag isEqualToString:@"apps"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithApps];
  } else if ([tag isEqualToString:@"authentication"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithAuthentication];
  } else if ([tag isEqualToString:@"comments"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithComments];
  } else if ([tag isEqualToString:@"content_access"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithContentAccess];
  } else if ([tag isEqualToString:@"devices"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithDevices];
  } else if ([tag isEqualToString:@"device_approvals"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithDeviceApprovals];
  } else if ([tag isEqualToString:@"domains"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithDomains];
  } else if ([tag isEqualToString:@"emm"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithEmm];
  } else if ([tag isEqualToString:@"errors"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithErrors];
  } else if ([tag isEqualToString:@"files"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithFiles];
  } else if ([tag isEqualToString:@"file_operations"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithFileOperations];
  } else if ([tag isEqualToString:@"file_requests"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithFileRequests];
  } else if ([tag isEqualToString:@"groups"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithGroups];
  } else if ([tag isEqualToString:@"logins"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithLogins];
  } else if ([tag isEqualToString:@"members"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithMembers];
  } else if ([tag isEqualToString:@"paper"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithPaper];
  } else if ([tag isEqualToString:@"passwords"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithPasswords];
  } else if ([tag isEqualToString:@"reports"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithReports];
  } else if ([tag isEqualToString:@"sessions"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithSessions];
  } else if ([tag isEqualToString:@"shared_files"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithSharedFiles];
  } else if ([tag isEqualToString:@"shared_folders"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithSharedFolders];
  } else if ([tag isEqualToString:@"shared_links"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithSharedLinks];
  } else if ([tag isEqualToString:@"sharing"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithSharing];
  } else if ([tag isEqualToString:@"sharing_policies"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithSharingPolicies];
  } else if ([tag isEqualToString:@"sso"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithSso];
  } else if ([tag isEqualToString:@"team_folders"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithTeamFolders];
  } else if ([tag isEqualToString:@"team_policies"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithTeamPolicies];
  } else if ([tag isEqualToString:@"team_profile"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithTeamProfile];
  } else if ([tag isEqualToString:@"tfa"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithTfa];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithOther];
  } else {
    return [[DBTEAMLOGEventCategory alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureChangeAvailabilityDetails.h"
#import "DBTEAMLOGAccountCaptureChangePolicyDetails.h"
#import "DBTEAMLOGAccountCaptureMigrateAccountDetails.h"
#import "DBTEAMLOGAccountCaptureRelinquishAccountDetails.h"
#import "DBTEAMLOGAllowDownloadDisabledDetails.h"
#import "DBTEAMLOGAllowDownloadEnabledDetails.h"
#import "DBTEAMLOGAppLinkTeamDetails.h"
#import "DBTEAMLOGAppLinkUserDetails.h"
#import "DBTEAMLOGAppUnlinkTeamDetails.h"
#import "DBTEAMLOGAppUnlinkUserDetails.h"
#import "DBTEAMLOGCollectionShareDetails.h"
#import "DBTEAMLOGCreateFolderDetails.h"
#import "DBTEAMLOGDataPlacementRestrictionChangePolicyDetails.h"
#import "DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails.h"
#import "DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails.h"
#import "DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails.h"
#import "DBTEAMLOGDeviceApprovalsChangeOverageActionDetails.h"
#import "DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails.h"
#import "DBTEAMLOGDeviceChangeIpDesktopDetails.h"
#import "DBTEAMLOGDeviceChangeIpMobileDetails.h"
#import "DBTEAMLOGDeviceChangeIpWebDetails.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkFailDetails.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails.h"
#import "DBTEAMLOGDeviceLinkFailDetails.h"
#import "DBTEAMLOGDeviceLinkSuccessDetails.h"
#import "DBTEAMLOGDeviceManagementDisabledDetails.h"
#import "DBTEAMLOGDeviceManagementEnabledDetails.h"
#import "DBTEAMLOGDeviceUnlinkDetails.h"
#import "DBTEAMLOGDisabledDomainInvitesDetails.h"
#import "DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails.h"
#import "DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails.h"
#import "DBTEAMLOGDomainInvitesEmailExistingUsersDetails.h"
#import "DBTEAMLOGDomainInvitesRequestToJoinTeamDetails.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails.h"
#import "DBTEAMLOGDomainVerificationAddDomainFailDetails.h"
#import "DBTEAMLOGDomainVerificationAddDomainSuccessDetails.h"
#import "DBTEAMLOGDomainVerificationRemoveDomainDetails.h"
#import "DBTEAMLOGEmmAddExceptionDetails.h"
#import "DBTEAMLOGEmmChangePolicyDetails.h"
#import "DBTEAMLOGEmmCreateExceptionsReportDetails.h"
#import "DBTEAMLOGEmmCreateUsageReportDetails.h"
#import "DBTEAMLOGEmmLoginSuccessDetails.h"
#import "DBTEAMLOGEmmRefreshAuthTokenDetails.h"
#import "DBTEAMLOGEmmRemoveExceptionDetails.h"
#import "DBTEAMLOGEnabledDomainInvitesDetails.h"
#import "DBTEAMLOGEventDetails.h"
#import "DBTEAMLOGExtendedVersionHistoryChangePolicyDetails.h"
#import "DBTEAMLOGFileAddCommentDetails.h"
#import "DBTEAMLOGFileAddDetails.h"
#import "DBTEAMLOGFileCommentsChangePolicyDetails.h"
#import "DBTEAMLOGFileCopyDetails.h"
#import "DBTEAMLOGFileDeleteDetails.h"
#import "DBTEAMLOGFileDownloadDetails.h"
#import "DBTEAMLOGFileEditDetails.h"
#import "DBTEAMLOGFileGetCopyReferenceDetails.h"
#import "DBTEAMLOGFileLikeCommentDetails.h"
#import "DBTEAMLOGFileMoveDetails.h"
#import "DBTEAMLOGFilePermanentlyDeleteDetails.h"
#import "DBTEAMLOGFilePreviewDetails.h"
#import "DBTEAMLOGFileRenameDetails.h"
#import "DBTEAMLOGFileRequestAddDeadlineDetails.h"
#import "DBTEAMLOGFileRequestChangeFolderDetails.h"
#import "DBTEAMLOGFileRequestChangeTitleDetails.h"
#import "DBTEAMLOGFileRequestCloseDetails.h"
#import "DBTEAMLOGFileRequestCreateDetails.h"
#import "DBTEAMLOGFileRequestReceiveFileDetails.h"
#import "DBTEAMLOGFileRequestRemoveDeadlineDetails.h"
#import "DBTEAMLOGFileRequestSendDetails.h"
#import "DBTEAMLOGFileRequestsChangePolicyDetails.h"
#import "DBTEAMLOGFileRequestsEmailsEnabledDetails.h"
#import "DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails.h"
#import "DBTEAMLOGFileRestoreDetails.h"
#import "DBTEAMLOGFileRevertDetails.h"
#import "DBTEAMLOGFileRollbackChangesDetails.h"
#import "DBTEAMLOGFileSaveCopyReferenceDetails.h"
#import "DBTEAMLOGFileUnlikeCommentDetails.h"
#import "DBTEAMLOGGoogleSsoChangePolicyDetails.h"
#import "DBTEAMLOGGroupAddExternalIdDetails.h"
#import "DBTEAMLOGGroupAddMemberDetails.h"
#import "DBTEAMLOGGroupChangeExternalIdDetails.h"
#import "DBTEAMLOGGroupChangeManagementTypeDetails.h"
#import "DBTEAMLOGGroupChangeMemberRoleDetails.h"
#import "DBTEAMLOGGroupCreateDetails.h"
#import "DBTEAMLOGGroupDeleteDetails.h"
#import "DBTEAMLOGGroupDescriptionUpdatedDetails.h"
#import "DBTEAMLOGGroupJoinPolicyUpdatedDetails.h"
#import "DBTEAMLOGGroupMovedDetails.h"
#import "DBTEAMLOGGroupRemoveExternalIdDetails.h"
#import "DBTEAMLOGGroupRemoveMemberDetails.h"
#import "DBTEAMLOGGroupRenameDetails.h"
#import "DBTEAMLOGGroupUserManagementChangePolicyDetails.h"
#import "DBTEAMLOGLogoutDetails.h"
#import "DBTEAMLOGMemberAddNameDetails.h"
#import "DBTEAMLOGMemberChangeEmailDetails.h"
#import "DBTEAMLOGMemberChangeMembershipTypeDetails.h"
#import "DBTEAMLOGMemberChangeNameDetails.h"
#import "DBTEAMLOGMemberChangeRoleDetails.h"
#import "DBTEAMLOGMemberInviteDetails.h"
#import "DBTEAMLOGMemberJoinDetails.h"
#import "DBTEAMLOGMemberLeaveDetails.h"
#import "DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails.h"
#import "DBTEAMLOGMemberRecoverDetails.h"
#import "DBTEAMLOGMemberRequestsChangePolicyDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsAddExceptionDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsChangePolicyDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsChangeStatusDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails.h"
#import "DBTEAMLOGMemberSuggestDetails.h"
#import "DBTEAMLOGMemberSuggestionsChangePolicyDetails.h"
#import "DBTEAMLOGMemberSuspendDetails.h"
#import "DBTEAMLOGMemberTransferAccountContentsDetails.h"
#import "DBTEAMLOGMemberUnsuspendDetails.h"
#import "DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails.h"
#import "DBTEAMLOGMissingDetails.h"
#import "DBTEAMLOGNetworkControlChangePolicyDetails.h"
#import "DBTEAMLOGNoteAclInviteOnlyDetails.h"
#import "DBTEAMLOGNoteAclLinkDetails.h"
#import "DBTEAMLOGNoteAclTeamLinkDetails.h"
#import "DBTEAMLOGNoteShareReceiveDetails.h"
#import "DBTEAMLOGNoteSharedDetails.h"
#import "DBTEAMLOGOpenNoteSharedDetails.h"
#import "DBTEAMLOGPaperChangeDeploymentPolicyDetails.h"
#import "DBTEAMLOGPaperChangeMemberPolicyDetails.h"
#import "DBTEAMLOGPaperChangePolicyDetails.h"
#import "DBTEAMLOGPaperContentAddMemberDetails.h"
#import "DBTEAMLOGPaperContentAddToFolderDetails.h"
#import "DBTEAMLOGPaperContentArchiveDetails.h"
#import "DBTEAMLOGPaperContentChangeSubscriptionDetails.h"
#import "DBTEAMLOGPaperContentCreateDetails.h"
#import "DBTEAMLOGPaperContentPermanentlyDeleteDetails.h"
#import "DBTEAMLOGPaperContentRemoveFromFolderDetails.h"
#import "DBTEAMLOGPaperContentRemoveMemberDetails.h"
#import "DBTEAMLOGPaperContentRenameDetails.h"
#import "DBTEAMLOGPaperContentRestoreDetails.h"
#import "DBTEAMLOGPaperDocAddCommentDetails.h"
#import "DBTEAMLOGPaperDocChangeMemberRoleDetails.h"
#import "DBTEAMLOGPaperDocChangeSharingPolicyDetails.h"
#import "DBTEAMLOGPaperDocDeleteCommentDetails.h"
#import "DBTEAMLOGPaperDocDeletedDetails.h"
#import "DBTEAMLOGPaperDocDownloadDetails.h"
#import "DBTEAMLOGPaperDocEditCommentDetails.h"
#import "DBTEAMLOGPaperDocEditDetails.h"
#import "DBTEAMLOGPaperDocFollowedDetails.h"
#import "DBTEAMLOGPaperDocMentionDetails.h"
#import "DBTEAMLOGPaperDocRequestAccessDetails.h"
#import "DBTEAMLOGPaperDocResolveCommentDetails.h"
#import "DBTEAMLOGPaperDocRevertDetails.h"
#import "DBTEAMLOGPaperDocSlackShareDetails.h"
#import "DBTEAMLOGPaperDocTeamInviteDetails.h"
#import "DBTEAMLOGPaperDocUnresolveCommentDetails.h"
#import "DBTEAMLOGPaperDocViewDetails.h"
#import "DBTEAMLOGPaperEnabledUsersGroupAdditionDetails.h"
#import "DBTEAMLOGPaperEnabledUsersGroupRemovalDetails.h"
#import "DBTEAMLOGPaperExternalViewAllowDetails.h"
#import "DBTEAMLOGPaperExternalViewDefaultTeamDetails.h"
#import "DBTEAMLOGPaperExternalViewForbidDetails.h"
#import "DBTEAMLOGPaperFolderDeletedDetails.h"
#import "DBTEAMLOGPaperFolderFollowedDetails.h"
#import "DBTEAMLOGPaperFolderTeamInviteDetails.h"
#import "DBTEAMLOGPasswordChangeDetails.h"
#import "DBTEAMLOGPasswordLoginFailDetails.h"
#import "DBTEAMLOGPasswordLoginSuccessDetails.h"
#import "DBTEAMLOGPasswordResetAllDetails.h"
#import "DBTEAMLOGPasswordResetDetails.h"
#import "DBTEAMLOGPermanentDeleteChangePolicyDetails.h"
#import "DBTEAMLOGRemoveLogoutUrlDetails.h"
#import "DBTEAMLOGRemoveSsoUrlDetails.h"
#import "DBTEAMLOGResellerSupportSessionEndDetails.h"
#import "DBTEAMLOGResellerSupportSessionStartDetails.h"
#import "DBTEAMLOGSfAddGroupDetails.h"
#import "DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails.h"
#import "DBTEAMLOGSfExternalInviteWarnDetails.h"
#import "DBTEAMLOGSfInviteGroupDetails.h"
#import "DBTEAMLOGSfNestDetails.h"
#import "DBTEAMLOGSfTeamDeclineDetails.h"
#import "DBTEAMLOGSfTeamGrantAccessDetails.h"
#import "DBTEAMLOGSfTeamInviteChangeRoleDetails.h"
#import "DBTEAMLOGSfTeamInviteDetails.h"
#import "DBTEAMLOGSfTeamJoinDetails.h"
#import "DBTEAMLOGSfTeamJoinFromOobLinkDetails.h"
#import "DBTEAMLOGSfTeamUninviteDetails.h"
#import "DBTEAMLOGSharedContentAddInviteesDetails.h"
#import "DBTEAMLOGSharedContentAddLinkExpiryDetails.h"
#import "DBTEAMLOGSharedContentAddLinkPasswordDetails.h"
#import "DBTEAMLOGSharedContentAddMemberDetails.h"
#import "DBTEAMLOGSharedContentChangeDownloadsPolicyDetails.h"
#import "DBTEAMLOGSharedContentChangeInviteeRoleDetails.h"
#import "DBTEAMLOGSharedContentChangeLinkAudienceDetails.h"
#import "DBTEAMLOGSharedContentChangeLinkExpiryDetails.h"
#import "DBTEAMLOGSharedContentChangeLinkPasswordDetails.h"
#import "DBTEAMLOGSharedContentChangeMemberRoleDetails.h"
#import "DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails.h"
#import "DBTEAMLOGSharedContentClaimInvitationDetails.h"
#import "DBTEAMLOGSharedContentCopyDetails.h"
#import "DBTEAMLOGSharedContentDownloadDetails.h"
#import "DBTEAMLOGSharedContentRelinquishMembershipDetails.h"
#import "DBTEAMLOGSharedContentRemoveInviteeDetails.h"
#import "DBTEAMLOGSharedContentRemoveLinkExpiryDetails.h"
#import "DBTEAMLOGSharedContentRemoveLinkPasswordDetails.h"
#import "DBTEAMLOGSharedContentRemoveMemberDetails.h"
#import "DBTEAMLOGSharedContentRequestAccessDetails.h"
#import "DBTEAMLOGSharedContentUnshareDetails.h"
#import "DBTEAMLOGSharedContentViewDetails.h"
#import "DBTEAMLOGSharedFolderChangeConfidentialityDetails.h"
#import "DBTEAMLOGSharedFolderChangeLinkPolicyDetails.h"
#import "DBTEAMLOGSharedFolderChangeMemberManagementPolicyDetails.h"
#import "DBTEAMLOGSharedFolderChangeMemberPolicyDetails.h"
#import "DBTEAMLOGSharedFolderCreateDetails.h"
#import "DBTEAMLOGSharedFolderMountDetails.h"
#import "DBTEAMLOGSharedFolderTransferOwnershipDetails.h"
#import "DBTEAMLOGSharedFolderUnmountDetails.h"
#import "DBTEAMLOGSharedNoteOpenedDetails.h"
#import "DBTEAMLOGSharingChangeFolderJoinPolicyDetails.h"
#import "DBTEAMLOGSharingChangeLinkPolicyDetails.h"
#import "DBTEAMLOGSharingChangeMemberPolicyDetails.h"
#import "DBTEAMLOGShmodelAppCreateDetails.h"
#import "DBTEAMLOGShmodelCreateDetails.h"
#import "DBTEAMLOGShmodelDisableDetails.h"
#import "DBTEAMLOGShmodelFbShareDetails.h"
#import "DBTEAMLOGShmodelGroupShareDetails.h"
#import "DBTEAMLOGShmodelRemoveExpirationDetails.h"
#import "DBTEAMLOGShmodelSetExpirationDetails.h"
#import "DBTEAMLOGShmodelTeamCopyDetails.h"
#import "DBTEAMLOGShmodelTeamDownloadDetails.h"
#import "DBTEAMLOGShmodelTeamShareDetails.h"
#import "DBTEAMLOGShmodelTeamViewDetails.h"
#import "DBTEAMLOGShmodelVisibilityPasswordDetails.h"
#import "DBTEAMLOGShmodelVisibilityPublicDetails.h"
#import "DBTEAMLOGShmodelVisibilityTeamOnlyDetails.h"
#import "DBTEAMLOGSignInAsSessionEndDetails.h"
#import "DBTEAMLOGSignInAsSessionStartDetails.h"
#import "DBTEAMLOGSmartSyncChangePolicyDetails.h"
#import "DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails.h"
#import "DBTEAMLOGSsoChangeCertDetails.h"
#import "DBTEAMLOGSsoChangeLoginUrlDetails.h"
#import "DBTEAMLOGSsoChangeLogoutUrlDetails.h"
#import "DBTEAMLOGSsoChangePolicyDetails.h"
#import "DBTEAMLOGSsoChangeSamlIdentityModeDetails.h"
#import "DBTEAMLOGSsoLoginFailDetails.h"
#import "DBTEAMLOGTeamActivityCreateReportDetails.h"
#import "DBTEAMLOGTeamFolderChangeStatusDetails.h"
#import "DBTEAMLOGTeamFolderCreateDetails.h"
#import "DBTEAMLOGTeamFolderDowngradeDetails.h"
#import "DBTEAMLOGTeamFolderPermanentlyDeleteDetails.h"
#import "DBTEAMLOGTeamFolderRenameDetails.h"
#import "DBTEAMLOGTeamMergeDetails.h"
#import "DBTEAMLOGTeamProfileAddLogoDetails.h"
#import "DBTEAMLOGTeamProfileChangeLogoDetails.h"
#import "DBTEAMLOGTeamProfileChangeNameDetails.h"
#import "DBTEAMLOGTeamProfileRemoveLogoDetails.h"
#import "DBTEAMLOGTfaAddBackupPhoneDetails.h"
#import "DBTEAMLOGTfaAddSecurityKeyDetails.h"
#import "DBTEAMLOGTfaChangeBackupPhoneDetails.h"
#import "DBTEAMLOGTfaChangePolicyDetails.h"
#import "DBTEAMLOGTfaChangeStatusDetails.h"
#import "DBTEAMLOGTfaRemoveBackupPhoneDetails.h"
#import "DBTEAMLOGTfaRemoveSecurityKeyDetails.h"
#import "DBTEAMLOGTfaResetDetails.h"
#import "DBTEAMLOGTwoAccountChangePolicyDetails.h"
#import "DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails.h"
#import "DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEventDetails

@synthesize memberChangeMembershipTypeDetails = _memberChangeMembershipTypeDetails;
@synthesize memberPermanentlyDeleteAccountContentsDetails = _memberPermanentlyDeleteAccountContentsDetails;
@synthesize memberSpaceLimitsChangeStatusDetails = _memberSpaceLimitsChangeStatusDetails;
@synthesize memberTransferAccountContentsDetails = _memberTransferAccountContentsDetails;
@synthesize paperEnabledUsersGroupAdditionDetails = _paperEnabledUsersGroupAdditionDetails;
@synthesize paperEnabledUsersGroupRemovalDetails = _paperEnabledUsersGroupRemovalDetails;
@synthesize paperExternalViewAllowDetails = _paperExternalViewAllowDetails;
@synthesize paperExternalViewDefaultTeamDetails = _paperExternalViewDefaultTeamDetails;
@synthesize paperExternalViewForbidDetails = _paperExternalViewForbidDetails;
@synthesize sfExternalInviteWarnDetails = _sfExternalInviteWarnDetails;
@synthesize teamMergeDetails = _teamMergeDetails;
@synthesize appLinkTeamDetails = _appLinkTeamDetails;
@synthesize appLinkUserDetails = _appLinkUserDetails;
@synthesize appUnlinkTeamDetails = _appUnlinkTeamDetails;
@synthesize appUnlinkUserDetails = _appUnlinkUserDetails;
@synthesize deviceChangeIpDesktopDetails = _deviceChangeIpDesktopDetails;
@synthesize deviceChangeIpMobileDetails = _deviceChangeIpMobileDetails;
@synthesize deviceChangeIpWebDetails = _deviceChangeIpWebDetails;
@synthesize deviceDeleteOnUnlinkFailDetails = _deviceDeleteOnUnlinkFailDetails;
@synthesize deviceDeleteOnUnlinkSuccessDetails = _deviceDeleteOnUnlinkSuccessDetails;
@synthesize deviceLinkFailDetails = _deviceLinkFailDetails;
@synthesize deviceLinkSuccessDetails = _deviceLinkSuccessDetails;
@synthesize deviceManagementDisabledDetails = _deviceManagementDisabledDetails;
@synthesize deviceManagementEnabledDetails = _deviceManagementEnabledDetails;
@synthesize deviceUnlinkDetails = _deviceUnlinkDetails;
@synthesize emmRefreshAuthTokenDetails = _emmRefreshAuthTokenDetails;
@synthesize accountCaptureChangeAvailabilityDetails = _accountCaptureChangeAvailabilityDetails;
@synthesize accountCaptureMigrateAccountDetails = _accountCaptureMigrateAccountDetails;
@synthesize accountCaptureRelinquishAccountDetails = _accountCaptureRelinquishAccountDetails;
@synthesize disabledDomainInvitesDetails = _disabledDomainInvitesDetails;
@synthesize domainInvitesApproveRequestToJoinTeamDetails = _domainInvitesApproveRequestToJoinTeamDetails;
@synthesize domainInvitesDeclineRequestToJoinTeamDetails = _domainInvitesDeclineRequestToJoinTeamDetails;
@synthesize domainInvitesEmailExistingUsersDetails = _domainInvitesEmailExistingUsersDetails;
@synthesize domainInvitesRequestToJoinTeamDetails = _domainInvitesRequestToJoinTeamDetails;
@synthesize domainInvitesSetInviteNewUserPrefToNoDetails = _domainInvitesSetInviteNewUserPrefToNoDetails;
@synthesize domainInvitesSetInviteNewUserPrefToYesDetails = _domainInvitesSetInviteNewUserPrefToYesDetails;
@synthesize domainVerificationAddDomainFailDetails = _domainVerificationAddDomainFailDetails;
@synthesize domainVerificationAddDomainSuccessDetails = _domainVerificationAddDomainSuccessDetails;
@synthesize domainVerificationRemoveDomainDetails = _domainVerificationRemoveDomainDetails;
@synthesize enabledDomainInvitesDetails = _enabledDomainInvitesDetails;
@synthesize createFolderDetails = _createFolderDetails;
@synthesize fileAddDetails = _fileAddDetails;
@synthesize fileCopyDetails = _fileCopyDetails;
@synthesize fileDeleteDetails = _fileDeleteDetails;
@synthesize fileDownloadDetails = _fileDownloadDetails;
@synthesize fileEditDetails = _fileEditDetails;
@synthesize fileGetCopyReferenceDetails = _fileGetCopyReferenceDetails;
@synthesize fileMoveDetails = _fileMoveDetails;
@synthesize filePermanentlyDeleteDetails = _filePermanentlyDeleteDetails;
@synthesize filePreviewDetails = _filePreviewDetails;
@synthesize fileRenameDetails = _fileRenameDetails;
@synthesize fileRestoreDetails = _fileRestoreDetails;
@synthesize fileRevertDetails = _fileRevertDetails;
@synthesize fileRollbackChangesDetails = _fileRollbackChangesDetails;
@synthesize fileSaveCopyReferenceDetails = _fileSaveCopyReferenceDetails;
@synthesize fileRequestAddDeadlineDetails = _fileRequestAddDeadlineDetails;
@synthesize fileRequestChangeFolderDetails = _fileRequestChangeFolderDetails;
@synthesize fileRequestChangeTitleDetails = _fileRequestChangeTitleDetails;
@synthesize fileRequestCloseDetails = _fileRequestCloseDetails;
@synthesize fileRequestCreateDetails = _fileRequestCreateDetails;
@synthesize fileRequestReceiveFileDetails = _fileRequestReceiveFileDetails;
@synthesize fileRequestRemoveDeadlineDetails = _fileRequestRemoveDeadlineDetails;
@synthesize fileRequestSendDetails = _fileRequestSendDetails;
@synthesize groupAddExternalIdDetails = _groupAddExternalIdDetails;
@synthesize groupAddMemberDetails = _groupAddMemberDetails;
@synthesize groupChangeExternalIdDetails = _groupChangeExternalIdDetails;
@synthesize groupChangeManagementTypeDetails = _groupChangeManagementTypeDetails;
@synthesize groupChangeMemberRoleDetails = _groupChangeMemberRoleDetails;
@synthesize groupCreateDetails = _groupCreateDetails;
@synthesize groupDeleteDetails = _groupDeleteDetails;
@synthesize groupDescriptionUpdatedDetails = _groupDescriptionUpdatedDetails;
@synthesize groupJoinPolicyUpdatedDetails = _groupJoinPolicyUpdatedDetails;
@synthesize groupMovedDetails = _groupMovedDetails;
@synthesize groupRemoveExternalIdDetails = _groupRemoveExternalIdDetails;
@synthesize groupRemoveMemberDetails = _groupRemoveMemberDetails;
@synthesize groupRenameDetails = _groupRenameDetails;
@synthesize emmLoginSuccessDetails = _emmLoginSuccessDetails;
@synthesize logoutDetails = _logoutDetails;
@synthesize passwordLoginFailDetails = _passwordLoginFailDetails;
@synthesize passwordLoginSuccessDetails = _passwordLoginSuccessDetails;
@synthesize resellerSupportSessionEndDetails = _resellerSupportSessionEndDetails;
@synthesize resellerSupportSessionStartDetails = _resellerSupportSessionStartDetails;
@synthesize signInAsSessionEndDetails = _signInAsSessionEndDetails;
@synthesize signInAsSessionStartDetails = _signInAsSessionStartDetails;
@synthesize ssoLoginFailDetails = _ssoLoginFailDetails;
@synthesize memberAddNameDetails = _memberAddNameDetails;
@synthesize memberChangeEmailDetails = _memberChangeEmailDetails;
@synthesize memberChangeNameDetails = _memberChangeNameDetails;
@synthesize memberChangeRoleDetails = _memberChangeRoleDetails;
@synthesize memberInviteDetails = _memberInviteDetails;
@synthesize memberJoinDetails = _memberJoinDetails;
@synthesize memberLeaveDetails = _memberLeaveDetails;
@synthesize memberRecoverDetails = _memberRecoverDetails;
@synthesize memberSuggestDetails = _memberSuggestDetails;
@synthesize memberSuspendDetails = _memberSuspendDetails;
@synthesize memberUnsuspendDetails = _memberUnsuspendDetails;
@synthesize paperContentAddMemberDetails = _paperContentAddMemberDetails;
@synthesize paperContentAddToFolderDetails = _paperContentAddToFolderDetails;
@synthesize paperContentArchiveDetails = _paperContentArchiveDetails;
@synthesize paperContentChangeSubscriptionDetails = _paperContentChangeSubscriptionDetails;
@synthesize paperContentCreateDetails = _paperContentCreateDetails;
@synthesize paperContentPermanentlyDeleteDetails = _paperContentPermanentlyDeleteDetails;
@synthesize paperContentRemoveFromFolderDetails = _paperContentRemoveFromFolderDetails;
@synthesize paperContentRemoveMemberDetails = _paperContentRemoveMemberDetails;
@synthesize paperContentRenameDetails = _paperContentRenameDetails;
@synthesize paperContentRestoreDetails = _paperContentRestoreDetails;
@synthesize paperDocAddCommentDetails = _paperDocAddCommentDetails;
@synthesize paperDocChangeMemberRoleDetails = _paperDocChangeMemberRoleDetails;
@synthesize paperDocChangeSharingPolicyDetails = _paperDocChangeSharingPolicyDetails;
@synthesize paperDocDeletedDetails = _paperDocDeletedDetails;
@synthesize paperDocDeleteCommentDetails = _paperDocDeleteCommentDetails;
@synthesize paperDocDownloadDetails = _paperDocDownloadDetails;
@synthesize paperDocEditDetails = _paperDocEditDetails;
@synthesize paperDocEditCommentDetails = _paperDocEditCommentDetails;
@synthesize paperDocFollowedDetails = _paperDocFollowedDetails;
@synthesize paperDocMentionDetails = _paperDocMentionDetails;
@synthesize paperDocRequestAccessDetails = _paperDocRequestAccessDetails;
@synthesize paperDocResolveCommentDetails = _paperDocResolveCommentDetails;
@synthesize paperDocRevertDetails = _paperDocRevertDetails;
@synthesize paperDocSlackShareDetails = _paperDocSlackShareDetails;
@synthesize paperDocTeamInviteDetails = _paperDocTeamInviteDetails;
@synthesize paperDocUnresolveCommentDetails = _paperDocUnresolveCommentDetails;
@synthesize paperDocViewDetails = _paperDocViewDetails;
@synthesize paperFolderDeletedDetails = _paperFolderDeletedDetails;
@synthesize paperFolderFollowedDetails = _paperFolderFollowedDetails;
@synthesize paperFolderTeamInviteDetails = _paperFolderTeamInviteDetails;
@synthesize passwordChangeDetails = _passwordChangeDetails;
@synthesize passwordResetDetails = _passwordResetDetails;
@synthesize passwordResetAllDetails = _passwordResetAllDetails;
@synthesize emmCreateExceptionsReportDetails = _emmCreateExceptionsReportDetails;
@synthesize emmCreateUsageReportDetails = _emmCreateUsageReportDetails;
@synthesize smartSyncCreateAdminPrivilegeReportDetails = _smartSyncCreateAdminPrivilegeReportDetails;
@synthesize teamActivityCreateReportDetails = _teamActivityCreateReportDetails;
@synthesize collectionShareDetails = _collectionShareDetails;
@synthesize fileAddCommentDetails = _fileAddCommentDetails;
@synthesize fileLikeCommentDetails = _fileLikeCommentDetails;
@synthesize fileUnlikeCommentDetails = _fileUnlikeCommentDetails;
@synthesize noteAclInviteOnlyDetails = _noteAclInviteOnlyDetails;
@synthesize noteAclLinkDetails = _noteAclLinkDetails;
@synthesize noteAclTeamLinkDetails = _noteAclTeamLinkDetails;
@synthesize noteSharedDetails = _noteSharedDetails;
@synthesize noteShareReceiveDetails = _noteShareReceiveDetails;
@synthesize openNoteSharedDetails = _openNoteSharedDetails;
@synthesize sfAddGroupDetails = _sfAddGroupDetails;
@synthesize sfAllowNonMembersToViewSharedLinksDetails = _sfAllowNonMembersToViewSharedLinksDetails;
@synthesize sfInviteGroupDetails = _sfInviteGroupDetails;
@synthesize sfNestDetails = _sfNestDetails;
@synthesize sfTeamDeclineDetails = _sfTeamDeclineDetails;
@synthesize sfTeamGrantAccessDetails = _sfTeamGrantAccessDetails;
@synthesize sfTeamInviteDetails = _sfTeamInviteDetails;
@synthesize sfTeamInviteChangeRoleDetails = _sfTeamInviteChangeRoleDetails;
@synthesize sfTeamJoinDetails = _sfTeamJoinDetails;
@synthesize sfTeamJoinFromOobLinkDetails = _sfTeamJoinFromOobLinkDetails;
@synthesize sfTeamUninviteDetails = _sfTeamUninviteDetails;
@synthesize sharedContentAddInviteesDetails = _sharedContentAddInviteesDetails;
@synthesize sharedContentAddLinkExpiryDetails = _sharedContentAddLinkExpiryDetails;
@synthesize sharedContentAddLinkPasswordDetails = _sharedContentAddLinkPasswordDetails;
@synthesize sharedContentAddMemberDetails = _sharedContentAddMemberDetails;
@synthesize sharedContentChangeDownloadsPolicyDetails = _sharedContentChangeDownloadsPolicyDetails;
@synthesize sharedContentChangeInviteeRoleDetails = _sharedContentChangeInviteeRoleDetails;
@synthesize sharedContentChangeLinkAudienceDetails = _sharedContentChangeLinkAudienceDetails;
@synthesize sharedContentChangeLinkExpiryDetails = _sharedContentChangeLinkExpiryDetails;
@synthesize sharedContentChangeLinkPasswordDetails = _sharedContentChangeLinkPasswordDetails;
@synthesize sharedContentChangeMemberRoleDetails = _sharedContentChangeMemberRoleDetails;
@synthesize sharedContentChangeViewerInfoPolicyDetails = _sharedContentChangeViewerInfoPolicyDetails;
@synthesize sharedContentClaimInvitationDetails = _sharedContentClaimInvitationDetails;
@synthesize sharedContentCopyDetails = _sharedContentCopyDetails;
@synthesize sharedContentDownloadDetails = _sharedContentDownloadDetails;
@synthesize sharedContentRelinquishMembershipDetails = _sharedContentRelinquishMembershipDetails;
@synthesize sharedContentRemoveInviteeDetails = _sharedContentRemoveInviteeDetails;
@synthesize sharedContentRemoveLinkExpiryDetails = _sharedContentRemoveLinkExpiryDetails;
@synthesize sharedContentRemoveLinkPasswordDetails = _sharedContentRemoveLinkPasswordDetails;
@synthesize sharedContentRemoveMemberDetails = _sharedContentRemoveMemberDetails;
@synthesize sharedContentRequestAccessDetails = _sharedContentRequestAccessDetails;
@synthesize sharedContentUnshareDetails = _sharedContentUnshareDetails;
@synthesize sharedContentViewDetails = _sharedContentViewDetails;
@synthesize sharedFolderChangeConfidentialityDetails = _sharedFolderChangeConfidentialityDetails;
@synthesize sharedFolderChangeLinkPolicyDetails = _sharedFolderChangeLinkPolicyDetails;
@synthesize sharedFolderChangeMemberManagementPolicyDetails = _sharedFolderChangeMemberManagementPolicyDetails;
@synthesize sharedFolderChangeMemberPolicyDetails = _sharedFolderChangeMemberPolicyDetails;
@synthesize sharedFolderCreateDetails = _sharedFolderCreateDetails;
@synthesize sharedFolderMountDetails = _sharedFolderMountDetails;
@synthesize sharedFolderTransferOwnershipDetails = _sharedFolderTransferOwnershipDetails;
@synthesize sharedFolderUnmountDetails = _sharedFolderUnmountDetails;
@synthesize sharedNoteOpenedDetails = _sharedNoteOpenedDetails;
@synthesize shmodelAppCreateDetails = _shmodelAppCreateDetails;
@synthesize shmodelCreateDetails = _shmodelCreateDetails;
@synthesize shmodelDisableDetails = _shmodelDisableDetails;
@synthesize shmodelFbShareDetails = _shmodelFbShareDetails;
@synthesize shmodelGroupShareDetails = _shmodelGroupShareDetails;
@synthesize shmodelRemoveExpirationDetails = _shmodelRemoveExpirationDetails;
@synthesize shmodelSetExpirationDetails = _shmodelSetExpirationDetails;
@synthesize shmodelTeamCopyDetails = _shmodelTeamCopyDetails;
@synthesize shmodelTeamDownloadDetails = _shmodelTeamDownloadDetails;
@synthesize shmodelTeamShareDetails = _shmodelTeamShareDetails;
@synthesize shmodelTeamViewDetails = _shmodelTeamViewDetails;
@synthesize shmodelVisibilityPasswordDetails = _shmodelVisibilityPasswordDetails;
@synthesize shmodelVisibilityPublicDetails = _shmodelVisibilityPublicDetails;
@synthesize shmodelVisibilityTeamOnlyDetails = _shmodelVisibilityTeamOnlyDetails;
@synthesize removeLogoutUrlDetails = _removeLogoutUrlDetails;
@synthesize removeSsoUrlDetails = _removeSsoUrlDetails;
@synthesize ssoChangeCertDetails = _ssoChangeCertDetails;
@synthesize ssoChangeLoginUrlDetails = _ssoChangeLoginUrlDetails;
@synthesize ssoChangeLogoutUrlDetails = _ssoChangeLogoutUrlDetails;
@synthesize ssoChangeSamlIdentityModeDetails = _ssoChangeSamlIdentityModeDetails;
@synthesize teamFolderChangeStatusDetails = _teamFolderChangeStatusDetails;
@synthesize teamFolderCreateDetails = _teamFolderCreateDetails;
@synthesize teamFolderDowngradeDetails = _teamFolderDowngradeDetails;
@synthesize teamFolderPermanentlyDeleteDetails = _teamFolderPermanentlyDeleteDetails;
@synthesize teamFolderRenameDetails = _teamFolderRenameDetails;
@synthesize accountCaptureChangePolicyDetails = _accountCaptureChangePolicyDetails;
@synthesize allowDownloadDisabledDetails = _allowDownloadDisabledDetails;
@synthesize allowDownloadEnabledDetails = _allowDownloadEnabledDetails;
@synthesize dataPlacementRestrictionChangePolicyDetails = _dataPlacementRestrictionChangePolicyDetails;
@synthesize dataPlacementRestrictionSatisfyPolicyDetails = _dataPlacementRestrictionSatisfyPolicyDetails;
@synthesize deviceApprovalsChangeDesktopPolicyDetails = _deviceApprovalsChangeDesktopPolicyDetails;
@synthesize deviceApprovalsChangeMobilePolicyDetails = _deviceApprovalsChangeMobilePolicyDetails;
@synthesize deviceApprovalsChangeOverageActionDetails = _deviceApprovalsChangeOverageActionDetails;
@synthesize deviceApprovalsChangeUnlinkActionDetails = _deviceApprovalsChangeUnlinkActionDetails;
@synthesize emmAddExceptionDetails = _emmAddExceptionDetails;
@synthesize emmChangePolicyDetails = _emmChangePolicyDetails;
@synthesize emmRemoveExceptionDetails = _emmRemoveExceptionDetails;
@synthesize extendedVersionHistoryChangePolicyDetails = _extendedVersionHistoryChangePolicyDetails;
@synthesize fileCommentsChangePolicyDetails = _fileCommentsChangePolicyDetails;
@synthesize fileRequestsChangePolicyDetails = _fileRequestsChangePolicyDetails;
@synthesize fileRequestsEmailsEnabledDetails = _fileRequestsEmailsEnabledDetails;
@synthesize fileRequestsEmailsRestrictedToTeamOnlyDetails = _fileRequestsEmailsRestrictedToTeamOnlyDetails;
@synthesize googleSsoChangePolicyDetails = _googleSsoChangePolicyDetails;
@synthesize groupUserManagementChangePolicyDetails = _groupUserManagementChangePolicyDetails;
@synthesize memberRequestsChangePolicyDetails = _memberRequestsChangePolicyDetails;
@synthesize memberSpaceLimitsAddExceptionDetails = _memberSpaceLimitsAddExceptionDetails;
@synthesize memberSpaceLimitsChangePolicyDetails = _memberSpaceLimitsChangePolicyDetails;
@synthesize memberSpaceLimitsRemoveExceptionDetails = _memberSpaceLimitsRemoveExceptionDetails;
@synthesize memberSuggestionsChangePolicyDetails = _memberSuggestionsChangePolicyDetails;
@synthesize microsoftOfficeAddinChangePolicyDetails = _microsoftOfficeAddinChangePolicyDetails;
@synthesize networkControlChangePolicyDetails = _networkControlChangePolicyDetails;
@synthesize paperChangeDeploymentPolicyDetails = _paperChangeDeploymentPolicyDetails;
@synthesize paperChangeMemberPolicyDetails = _paperChangeMemberPolicyDetails;
@synthesize paperChangePolicyDetails = _paperChangePolicyDetails;
@synthesize permanentDeleteChangePolicyDetails = _permanentDeleteChangePolicyDetails;
@synthesize sharingChangeFolderJoinPolicyDetails = _sharingChangeFolderJoinPolicyDetails;
@synthesize sharingChangeLinkPolicyDetails = _sharingChangeLinkPolicyDetails;
@synthesize sharingChangeMemberPolicyDetails = _sharingChangeMemberPolicyDetails;
@synthesize smartSyncChangePolicyDetails = _smartSyncChangePolicyDetails;
@synthesize ssoChangePolicyDetails = _ssoChangePolicyDetails;
@synthesize tfaChangePolicyDetails = _tfaChangePolicyDetails;
@synthesize twoAccountChangePolicyDetails = _twoAccountChangePolicyDetails;
@synthesize webSessionsChangeFixedLengthPolicyDetails = _webSessionsChangeFixedLengthPolicyDetails;
@synthesize webSessionsChangeIdleLengthPolicyDetails = _webSessionsChangeIdleLengthPolicyDetails;
@synthesize teamProfileAddLogoDetails = _teamProfileAddLogoDetails;
@synthesize teamProfileChangeLogoDetails = _teamProfileChangeLogoDetails;
@synthesize teamProfileChangeNameDetails = _teamProfileChangeNameDetails;
@synthesize teamProfileRemoveLogoDetails = _teamProfileRemoveLogoDetails;
@synthesize tfaAddBackupPhoneDetails = _tfaAddBackupPhoneDetails;
@synthesize tfaAddSecurityKeyDetails = _tfaAddSecurityKeyDetails;
@synthesize tfaChangeBackupPhoneDetails = _tfaChangeBackupPhoneDetails;
@synthesize tfaChangeStatusDetails = _tfaChangeStatusDetails;
@synthesize tfaRemoveBackupPhoneDetails = _tfaRemoveBackupPhoneDetails;
@synthesize tfaRemoveSecurityKeyDetails = _tfaRemoveSecurityKeyDetails;
@synthesize tfaResetDetails = _tfaResetDetails;
@synthesize missingDetails = _missingDetails;

#pragma mark - Constructors

- (instancetype)initWithMemberChangeMembershipTypeDetails:
    (DBTEAMLOGMemberChangeMembershipTypeDetails *)memberChangeMembershipTypeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails;
    _memberChangeMembershipTypeDetails = memberChangeMembershipTypeDetails;
  }
  return self;
}

- (instancetype)initWithMemberPermanentlyDeleteAccountContentsDetails:
    (DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails *)memberPermanentlyDeleteAccountContentsDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails;
    _memberPermanentlyDeleteAccountContentsDetails = memberPermanentlyDeleteAccountContentsDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsChangeStatusDetails:
    (DBTEAMLOGMemberSpaceLimitsChangeStatusDetails *)memberSpaceLimitsChangeStatusDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails;
    _memberSpaceLimitsChangeStatusDetails = memberSpaceLimitsChangeStatusDetails;
  }
  return self;
}

- (instancetype)initWithMemberTransferAccountContentsDetails:
    (DBTEAMLOGMemberTransferAccountContentsDetails *)memberTransferAccountContentsDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails;
    _memberTransferAccountContentsDetails = memberTransferAccountContentsDetails;
  }
  return self;
}

- (instancetype)initWithPaperEnabledUsersGroupAdditionDetails:
    (DBTEAMLOGPaperEnabledUsersGroupAdditionDetails *)paperEnabledUsersGroupAdditionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails;
    _paperEnabledUsersGroupAdditionDetails = paperEnabledUsersGroupAdditionDetails;
  }
  return self;
}

- (instancetype)initWithPaperEnabledUsersGroupRemovalDetails:
    (DBTEAMLOGPaperEnabledUsersGroupRemovalDetails *)paperEnabledUsersGroupRemovalDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails;
    _paperEnabledUsersGroupRemovalDetails = paperEnabledUsersGroupRemovalDetails;
  }
  return self;
}

- (instancetype)initWithPaperExternalViewAllowDetails:
    (DBTEAMLOGPaperExternalViewAllowDetails *)paperExternalViewAllowDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperExternalViewAllowDetails;
    _paperExternalViewAllowDetails = paperExternalViewAllowDetails;
  }
  return self;
}

- (instancetype)initWithPaperExternalViewDefaultTeamDetails:
    (DBTEAMLOGPaperExternalViewDefaultTeamDetails *)paperExternalViewDefaultTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails;
    _paperExternalViewDefaultTeamDetails = paperExternalViewDefaultTeamDetails;
  }
  return self;
}

- (instancetype)initWithPaperExternalViewForbidDetails:
    (DBTEAMLOGPaperExternalViewForbidDetails *)paperExternalViewForbidDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperExternalViewForbidDetails;
    _paperExternalViewForbidDetails = paperExternalViewForbidDetails;
  }
  return self;
}

- (instancetype)initWithSfExternalInviteWarnDetails:
    (DBTEAMLOGSfExternalInviteWarnDetails *)sfExternalInviteWarnDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfExternalInviteWarnDetails;
    _sfExternalInviteWarnDetails = sfExternalInviteWarnDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeDetails:(DBTEAMLOGTeamMergeDetails *)teamMergeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeDetails;
    _teamMergeDetails = teamMergeDetails;
  }
  return self;
}

- (instancetype)initWithAppLinkTeamDetails:(DBTEAMLOGAppLinkTeamDetails *)appLinkTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAppLinkTeamDetails;
    _appLinkTeamDetails = appLinkTeamDetails;
  }
  return self;
}

- (instancetype)initWithAppLinkUserDetails:(DBTEAMLOGAppLinkUserDetails *)appLinkUserDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAppLinkUserDetails;
    _appLinkUserDetails = appLinkUserDetails;
  }
  return self;
}

- (instancetype)initWithAppUnlinkTeamDetails:(DBTEAMLOGAppUnlinkTeamDetails *)appUnlinkTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAppUnlinkTeamDetails;
    _appUnlinkTeamDetails = appUnlinkTeamDetails;
  }
  return self;
}

- (instancetype)initWithAppUnlinkUserDetails:(DBTEAMLOGAppUnlinkUserDetails *)appUnlinkUserDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAppUnlinkUserDetails;
    _appUnlinkUserDetails = appUnlinkUserDetails;
  }
  return self;
}

- (instancetype)initWithDeviceChangeIpDesktopDetails:
    (DBTEAMLOGDeviceChangeIpDesktopDetails *)deviceChangeIpDesktopDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails;
    _deviceChangeIpDesktopDetails = deviceChangeIpDesktopDetails;
  }
  return self;
}

- (instancetype)initWithDeviceChangeIpMobileDetails:
    (DBTEAMLOGDeviceChangeIpMobileDetails *)deviceChangeIpMobileDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails;
    _deviceChangeIpMobileDetails = deviceChangeIpMobileDetails;
  }
  return self;
}

- (instancetype)initWithDeviceChangeIpWebDetails:(DBTEAMLOGDeviceChangeIpWebDetails *)deviceChangeIpWebDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceChangeIpWebDetails;
    _deviceChangeIpWebDetails = deviceChangeIpWebDetails;
  }
  return self;
}

- (instancetype)initWithDeviceDeleteOnUnlinkFailDetails:
    (DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *)deviceDeleteOnUnlinkFailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails;
    _deviceDeleteOnUnlinkFailDetails = deviceDeleteOnUnlinkFailDetails;
  }
  return self;
}

- (instancetype)initWithDeviceDeleteOnUnlinkSuccessDetails:
    (DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *)deviceDeleteOnUnlinkSuccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails;
    _deviceDeleteOnUnlinkSuccessDetails = deviceDeleteOnUnlinkSuccessDetails;
  }
  return self;
}

- (instancetype)initWithDeviceLinkFailDetails:(DBTEAMLOGDeviceLinkFailDetails *)deviceLinkFailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceLinkFailDetails;
    _deviceLinkFailDetails = deviceLinkFailDetails;
  }
  return self;
}

- (instancetype)initWithDeviceLinkSuccessDetails:(DBTEAMLOGDeviceLinkSuccessDetails *)deviceLinkSuccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceLinkSuccessDetails;
    _deviceLinkSuccessDetails = deviceLinkSuccessDetails;
  }
  return self;
}

- (instancetype)initWithDeviceManagementDisabledDetails:
    (DBTEAMLOGDeviceManagementDisabledDetails *)deviceManagementDisabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceManagementDisabledDetails;
    _deviceManagementDisabledDetails = deviceManagementDisabledDetails;
  }
  return self;
}

- (instancetype)initWithDeviceManagementEnabledDetails:
    (DBTEAMLOGDeviceManagementEnabledDetails *)deviceManagementEnabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceManagementEnabledDetails;
    _deviceManagementEnabledDetails = deviceManagementEnabledDetails;
  }
  return self;
}

- (instancetype)initWithDeviceUnlinkDetails:(DBTEAMLOGDeviceUnlinkDetails *)deviceUnlinkDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceUnlinkDetails;
    _deviceUnlinkDetails = deviceUnlinkDetails;
  }
  return self;
}

- (instancetype)initWithEmmRefreshAuthTokenDetails:(DBTEAMLOGEmmRefreshAuthTokenDetails *)emmRefreshAuthTokenDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails;
    _emmRefreshAuthTokenDetails = emmRefreshAuthTokenDetails;
  }
  return self;
}

- (instancetype)initWithAccountCaptureChangeAvailabilityDetails:
    (DBTEAMLOGAccountCaptureChangeAvailabilityDetails *)accountCaptureChangeAvailabilityDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails;
    _accountCaptureChangeAvailabilityDetails = accountCaptureChangeAvailabilityDetails;
  }
  return self;
}

- (instancetype)initWithAccountCaptureMigrateAccountDetails:
    (DBTEAMLOGAccountCaptureMigrateAccountDetails *)accountCaptureMigrateAccountDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails;
    _accountCaptureMigrateAccountDetails = accountCaptureMigrateAccountDetails;
  }
  return self;
}

- (instancetype)initWithAccountCaptureRelinquishAccountDetails:
    (DBTEAMLOGAccountCaptureRelinquishAccountDetails *)accountCaptureRelinquishAccountDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails;
    _accountCaptureRelinquishAccountDetails = accountCaptureRelinquishAccountDetails;
  }
  return self;
}

- (instancetype)initWithDisabledDomainInvitesDetails:
    (DBTEAMLOGDisabledDomainInvitesDetails *)disabledDomainInvitesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDisabledDomainInvitesDetails;
    _disabledDomainInvitesDetails = disabledDomainInvitesDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesApproveRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *)domainInvitesApproveRequestToJoinTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails;
    _domainInvitesApproveRequestToJoinTeamDetails = domainInvitesApproveRequestToJoinTeamDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesDeclineRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *)domainInvitesDeclineRequestToJoinTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails;
    _domainInvitesDeclineRequestToJoinTeamDetails = domainInvitesDeclineRequestToJoinTeamDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesEmailExistingUsersDetails:
    (DBTEAMLOGDomainInvitesEmailExistingUsersDetails *)domainInvitesEmailExistingUsersDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails;
    _domainInvitesEmailExistingUsersDetails = domainInvitesEmailExistingUsersDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *)domainInvitesRequestToJoinTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails;
    _domainInvitesRequestToJoinTeamDetails = domainInvitesRequestToJoinTeamDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesSetInviteNewUserPrefToNoDetails:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *)domainInvitesSetInviteNewUserPrefToNoDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails;
    _domainInvitesSetInviteNewUserPrefToNoDetails = domainInvitesSetInviteNewUserPrefToNoDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesSetInviteNewUserPrefToYesDetails:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *)domainInvitesSetInviteNewUserPrefToYesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails;
    _domainInvitesSetInviteNewUserPrefToYesDetails = domainInvitesSetInviteNewUserPrefToYesDetails;
  }
  return self;
}

- (instancetype)initWithDomainVerificationAddDomainFailDetails:
    (DBTEAMLOGDomainVerificationAddDomainFailDetails *)domainVerificationAddDomainFailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails;
    _domainVerificationAddDomainFailDetails = domainVerificationAddDomainFailDetails;
  }
  return self;
}

- (instancetype)initWithDomainVerificationAddDomainSuccessDetails:
    (DBTEAMLOGDomainVerificationAddDomainSuccessDetails *)domainVerificationAddDomainSuccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails;
    _domainVerificationAddDomainSuccessDetails = domainVerificationAddDomainSuccessDetails;
  }
  return self;
}

- (instancetype)initWithDomainVerificationRemoveDomainDetails:
    (DBTEAMLOGDomainVerificationRemoveDomainDetails *)domainVerificationRemoveDomainDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails;
    _domainVerificationRemoveDomainDetails = domainVerificationRemoveDomainDetails;
  }
  return self;
}

- (instancetype)initWithEnabledDomainInvitesDetails:
    (DBTEAMLOGEnabledDomainInvitesDetails *)enabledDomainInvitesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEnabledDomainInvitesDetails;
    _enabledDomainInvitesDetails = enabledDomainInvitesDetails;
  }
  return self;
}

- (instancetype)initWithCreateFolderDetails:(DBTEAMLOGCreateFolderDetails *)createFolderDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsCreateFolderDetails;
    _createFolderDetails = createFolderDetails;
  }
  return self;
}

- (instancetype)initWithFileAddDetails:(DBTEAMLOGFileAddDetails *)fileAddDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileAddDetails;
    _fileAddDetails = fileAddDetails;
  }
  return self;
}

- (instancetype)initWithFileCopyDetails:(DBTEAMLOGFileCopyDetails *)fileCopyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileCopyDetails;
    _fileCopyDetails = fileCopyDetails;
  }
  return self;
}

- (instancetype)initWithFileDeleteDetails:(DBTEAMLOGFileDeleteDetails *)fileDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileDeleteDetails;
    _fileDeleteDetails = fileDeleteDetails;
  }
  return self;
}

- (instancetype)initWithFileDownloadDetails:(DBTEAMLOGFileDownloadDetails *)fileDownloadDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileDownloadDetails;
    _fileDownloadDetails = fileDownloadDetails;
  }
  return self;
}

- (instancetype)initWithFileEditDetails:(DBTEAMLOGFileEditDetails *)fileEditDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileEditDetails;
    _fileEditDetails = fileEditDetails;
  }
  return self;
}

- (instancetype)initWithFileGetCopyReferenceDetails:
    (DBTEAMLOGFileGetCopyReferenceDetails *)fileGetCopyReferenceDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileGetCopyReferenceDetails;
    _fileGetCopyReferenceDetails = fileGetCopyReferenceDetails;
  }
  return self;
}

- (instancetype)initWithFileMoveDetails:(DBTEAMLOGFileMoveDetails *)fileMoveDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileMoveDetails;
    _fileMoveDetails = fileMoveDetails;
  }
  return self;
}

- (instancetype)initWithFilePermanentlyDeleteDetails:
    (DBTEAMLOGFilePermanentlyDeleteDetails *)filePermanentlyDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails;
    _filePermanentlyDeleteDetails = filePermanentlyDeleteDetails;
  }
  return self;
}

- (instancetype)initWithFilePreviewDetails:(DBTEAMLOGFilePreviewDetails *)filePreviewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFilePreviewDetails;
    _filePreviewDetails = filePreviewDetails;
  }
  return self;
}

- (instancetype)initWithFileRenameDetails:(DBTEAMLOGFileRenameDetails *)fileRenameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRenameDetails;
    _fileRenameDetails = fileRenameDetails;
  }
  return self;
}

- (instancetype)initWithFileRestoreDetails:(DBTEAMLOGFileRestoreDetails *)fileRestoreDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRestoreDetails;
    _fileRestoreDetails = fileRestoreDetails;
  }
  return self;
}

- (instancetype)initWithFileRevertDetails:(DBTEAMLOGFileRevertDetails *)fileRevertDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRevertDetails;
    _fileRevertDetails = fileRevertDetails;
  }
  return self;
}

- (instancetype)initWithFileRollbackChangesDetails:(DBTEAMLOGFileRollbackChangesDetails *)fileRollbackChangesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRollbackChangesDetails;
    _fileRollbackChangesDetails = fileRollbackChangesDetails;
  }
  return self;
}

- (instancetype)initWithFileSaveCopyReferenceDetails:
    (DBTEAMLOGFileSaveCopyReferenceDetails *)fileSaveCopyReferenceDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails;
    _fileSaveCopyReferenceDetails = fileSaveCopyReferenceDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestAddDeadlineDetails:
    (DBTEAMLOGFileRequestAddDeadlineDetails *)fileRequestAddDeadlineDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestAddDeadlineDetails;
    _fileRequestAddDeadlineDetails = fileRequestAddDeadlineDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestChangeFolderDetails:
    (DBTEAMLOGFileRequestChangeFolderDetails *)fileRequestChangeFolderDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestChangeFolderDetails;
    _fileRequestChangeFolderDetails = fileRequestChangeFolderDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestChangeTitleDetails:
    (DBTEAMLOGFileRequestChangeTitleDetails *)fileRequestChangeTitleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestChangeTitleDetails;
    _fileRequestChangeTitleDetails = fileRequestChangeTitleDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestCloseDetails:(DBTEAMLOGFileRequestCloseDetails *)fileRequestCloseDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestCloseDetails;
    _fileRequestCloseDetails = fileRequestCloseDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestCreateDetails:(DBTEAMLOGFileRequestCreateDetails *)fileRequestCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestCreateDetails;
    _fileRequestCreateDetails = fileRequestCreateDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestReceiveFileDetails:
    (DBTEAMLOGFileRequestReceiveFileDetails *)fileRequestReceiveFileDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestReceiveFileDetails;
    _fileRequestReceiveFileDetails = fileRequestReceiveFileDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestRemoveDeadlineDetails:
    (DBTEAMLOGFileRequestRemoveDeadlineDetails *)fileRequestRemoveDeadlineDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestRemoveDeadlineDetails;
    _fileRequestRemoveDeadlineDetails = fileRequestRemoveDeadlineDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestSendDetails:(DBTEAMLOGFileRequestSendDetails *)fileRequestSendDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestSendDetails;
    _fileRequestSendDetails = fileRequestSendDetails;
  }
  return self;
}

- (instancetype)initWithGroupAddExternalIdDetails:(DBTEAMLOGGroupAddExternalIdDetails *)groupAddExternalIdDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupAddExternalIdDetails;
    _groupAddExternalIdDetails = groupAddExternalIdDetails;
  }
  return self;
}

- (instancetype)initWithGroupAddMemberDetails:(DBTEAMLOGGroupAddMemberDetails *)groupAddMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupAddMemberDetails;
    _groupAddMemberDetails = groupAddMemberDetails;
  }
  return self;
}

- (instancetype)initWithGroupChangeExternalIdDetails:
    (DBTEAMLOGGroupChangeExternalIdDetails *)groupChangeExternalIdDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupChangeExternalIdDetails;
    _groupChangeExternalIdDetails = groupChangeExternalIdDetails;
  }
  return self;
}

- (instancetype)initWithGroupChangeManagementTypeDetails:
    (DBTEAMLOGGroupChangeManagementTypeDetails *)groupChangeManagementTypeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails;
    _groupChangeManagementTypeDetails = groupChangeManagementTypeDetails;
  }
  return self;
}

- (instancetype)initWithGroupChangeMemberRoleDetails:
    (DBTEAMLOGGroupChangeMemberRoleDetails *)groupChangeMemberRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails;
    _groupChangeMemberRoleDetails = groupChangeMemberRoleDetails;
  }
  return self;
}

- (instancetype)initWithGroupCreateDetails:(DBTEAMLOGGroupCreateDetails *)groupCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupCreateDetails;
    _groupCreateDetails = groupCreateDetails;
  }
  return self;
}

- (instancetype)initWithGroupDeleteDetails:(DBTEAMLOGGroupDeleteDetails *)groupDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupDeleteDetails;
    _groupDeleteDetails = groupDeleteDetails;
  }
  return self;
}

- (instancetype)initWithGroupDescriptionUpdatedDetails:
    (DBTEAMLOGGroupDescriptionUpdatedDetails *)groupDescriptionUpdatedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails;
    _groupDescriptionUpdatedDetails = groupDescriptionUpdatedDetails;
  }
  return self;
}

- (instancetype)initWithGroupJoinPolicyUpdatedDetails:
    (DBTEAMLOGGroupJoinPolicyUpdatedDetails *)groupJoinPolicyUpdatedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails;
    _groupJoinPolicyUpdatedDetails = groupJoinPolicyUpdatedDetails;
  }
  return self;
}

- (instancetype)initWithGroupMovedDetails:(DBTEAMLOGGroupMovedDetails *)groupMovedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupMovedDetails;
    _groupMovedDetails = groupMovedDetails;
  }
  return self;
}

- (instancetype)initWithGroupRemoveExternalIdDetails:
    (DBTEAMLOGGroupRemoveExternalIdDetails *)groupRemoveExternalIdDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails;
    _groupRemoveExternalIdDetails = groupRemoveExternalIdDetails;
  }
  return self;
}

- (instancetype)initWithGroupRemoveMemberDetails:(DBTEAMLOGGroupRemoveMemberDetails *)groupRemoveMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupRemoveMemberDetails;
    _groupRemoveMemberDetails = groupRemoveMemberDetails;
  }
  return self;
}

- (instancetype)initWithGroupRenameDetails:(DBTEAMLOGGroupRenameDetails *)groupRenameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupRenameDetails;
    _groupRenameDetails = groupRenameDetails;
  }
  return self;
}

- (instancetype)initWithEmmLoginSuccessDetails:(DBTEAMLOGEmmLoginSuccessDetails *)emmLoginSuccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmLoginSuccessDetails;
    _emmLoginSuccessDetails = emmLoginSuccessDetails;
  }
  return self;
}

- (instancetype)initWithLogoutDetails:(DBTEAMLOGLogoutDetails *)logoutDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLogoutDetails;
    _logoutDetails = logoutDetails;
  }
  return self;
}

- (instancetype)initWithPasswordLoginFailDetails:(DBTEAMLOGPasswordLoginFailDetails *)passwordLoginFailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPasswordLoginFailDetails;
    _passwordLoginFailDetails = passwordLoginFailDetails;
  }
  return self;
}

- (instancetype)initWithPasswordLoginSuccessDetails:
    (DBTEAMLOGPasswordLoginSuccessDetails *)passwordLoginSuccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPasswordLoginSuccessDetails;
    _passwordLoginSuccessDetails = passwordLoginSuccessDetails;
  }
  return self;
}

- (instancetype)initWithResellerSupportSessionEndDetails:
    (DBTEAMLOGResellerSupportSessionEndDetails *)resellerSupportSessionEndDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsResellerSupportSessionEndDetails;
    _resellerSupportSessionEndDetails = resellerSupportSessionEndDetails;
  }
  return self;
}

- (instancetype)initWithResellerSupportSessionStartDetails:
    (DBTEAMLOGResellerSupportSessionStartDetails *)resellerSupportSessionStartDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsResellerSupportSessionStartDetails;
    _resellerSupportSessionStartDetails = resellerSupportSessionStartDetails;
  }
  return self;
}

- (instancetype)initWithSignInAsSessionEndDetails:(DBTEAMLOGSignInAsSessionEndDetails *)signInAsSessionEndDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSignInAsSessionEndDetails;
    _signInAsSessionEndDetails = signInAsSessionEndDetails;
  }
  return self;
}

- (instancetype)initWithSignInAsSessionStartDetails:
    (DBTEAMLOGSignInAsSessionStartDetails *)signInAsSessionStartDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSignInAsSessionStartDetails;
    _signInAsSessionStartDetails = signInAsSessionStartDetails;
  }
  return self;
}

- (instancetype)initWithSsoLoginFailDetails:(DBTEAMLOGSsoLoginFailDetails *)ssoLoginFailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoLoginFailDetails;
    _ssoLoginFailDetails = ssoLoginFailDetails;
  }
  return self;
}

- (instancetype)initWithMemberAddNameDetails:(DBTEAMLOGMemberAddNameDetails *)memberAddNameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberAddNameDetails;
    _memberAddNameDetails = memberAddNameDetails;
  }
  return self;
}

- (instancetype)initWithMemberChangeEmailDetails:(DBTEAMLOGMemberChangeEmailDetails *)memberChangeEmailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberChangeEmailDetails;
    _memberChangeEmailDetails = memberChangeEmailDetails;
  }
  return self;
}

- (instancetype)initWithMemberChangeNameDetails:(DBTEAMLOGMemberChangeNameDetails *)memberChangeNameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberChangeNameDetails;
    _memberChangeNameDetails = memberChangeNameDetails;
  }
  return self;
}

- (instancetype)initWithMemberChangeRoleDetails:(DBTEAMLOGMemberChangeRoleDetails *)memberChangeRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberChangeRoleDetails;
    _memberChangeRoleDetails = memberChangeRoleDetails;
  }
  return self;
}

- (instancetype)initWithMemberInviteDetails:(DBTEAMLOGMemberInviteDetails *)memberInviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberInviteDetails;
    _memberInviteDetails = memberInviteDetails;
  }
  return self;
}

- (instancetype)initWithMemberJoinDetails:(DBTEAMLOGMemberJoinDetails *)memberJoinDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberJoinDetails;
    _memberJoinDetails = memberJoinDetails;
  }
  return self;
}

- (instancetype)initWithMemberLeaveDetails:(DBTEAMLOGMemberLeaveDetails *)memberLeaveDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberLeaveDetails;
    _memberLeaveDetails = memberLeaveDetails;
  }
  return self;
}

- (instancetype)initWithMemberRecoverDetails:(DBTEAMLOGMemberRecoverDetails *)memberRecoverDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberRecoverDetails;
    _memberRecoverDetails = memberRecoverDetails;
  }
  return self;
}

- (instancetype)initWithMemberSuggestDetails:(DBTEAMLOGMemberSuggestDetails *)memberSuggestDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSuggestDetails;
    _memberSuggestDetails = memberSuggestDetails;
  }
  return self;
}

- (instancetype)initWithMemberSuspendDetails:(DBTEAMLOGMemberSuspendDetails *)memberSuspendDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSuspendDetails;
    _memberSuspendDetails = memberSuspendDetails;
  }
  return self;
}

- (instancetype)initWithMemberUnsuspendDetails:(DBTEAMLOGMemberUnsuspendDetails *)memberUnsuspendDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberUnsuspendDetails;
    _memberUnsuspendDetails = memberUnsuspendDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentAddMemberDetails:
    (DBTEAMLOGPaperContentAddMemberDetails *)paperContentAddMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentAddMemberDetails;
    _paperContentAddMemberDetails = paperContentAddMemberDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentAddToFolderDetails:
    (DBTEAMLOGPaperContentAddToFolderDetails *)paperContentAddToFolderDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentAddToFolderDetails;
    _paperContentAddToFolderDetails = paperContentAddToFolderDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentArchiveDetails:(DBTEAMLOGPaperContentArchiveDetails *)paperContentArchiveDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentArchiveDetails;
    _paperContentArchiveDetails = paperContentArchiveDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentChangeSubscriptionDetails:
    (DBTEAMLOGPaperContentChangeSubscriptionDetails *)paperContentChangeSubscriptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentChangeSubscriptionDetails;
    _paperContentChangeSubscriptionDetails = paperContentChangeSubscriptionDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentCreateDetails:(DBTEAMLOGPaperContentCreateDetails *)paperContentCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentCreateDetails;
    _paperContentCreateDetails = paperContentCreateDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentPermanentlyDeleteDetails:
    (DBTEAMLOGPaperContentPermanentlyDeleteDetails *)paperContentPermanentlyDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails;
    _paperContentPermanentlyDeleteDetails = paperContentPermanentlyDeleteDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentRemoveFromFolderDetails:
    (DBTEAMLOGPaperContentRemoveFromFolderDetails *)paperContentRemoveFromFolderDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails;
    _paperContentRemoveFromFolderDetails = paperContentRemoveFromFolderDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentRemoveMemberDetails:
    (DBTEAMLOGPaperContentRemoveMemberDetails *)paperContentRemoveMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails;
    _paperContentRemoveMemberDetails = paperContentRemoveMemberDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentRenameDetails:(DBTEAMLOGPaperContentRenameDetails *)paperContentRenameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentRenameDetails;
    _paperContentRenameDetails = paperContentRenameDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentRestoreDetails:(DBTEAMLOGPaperContentRestoreDetails *)paperContentRestoreDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentRestoreDetails;
    _paperContentRestoreDetails = paperContentRestoreDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocAddCommentDetails:(DBTEAMLOGPaperDocAddCommentDetails *)paperDocAddCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocAddCommentDetails;
    _paperDocAddCommentDetails = paperDocAddCommentDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocChangeMemberRoleDetails:
    (DBTEAMLOGPaperDocChangeMemberRoleDetails *)paperDocChangeMemberRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails;
    _paperDocChangeMemberRoleDetails = paperDocChangeMemberRoleDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocChangeSharingPolicyDetails:
    (DBTEAMLOGPaperDocChangeSharingPolicyDetails *)paperDocChangeSharingPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails;
    _paperDocChangeSharingPolicyDetails = paperDocChangeSharingPolicyDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocDeletedDetails:(DBTEAMLOGPaperDocDeletedDetails *)paperDocDeletedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocDeletedDetails;
    _paperDocDeletedDetails = paperDocDeletedDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocDeleteCommentDetails:
    (DBTEAMLOGPaperDocDeleteCommentDetails *)paperDocDeleteCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails;
    _paperDocDeleteCommentDetails = paperDocDeleteCommentDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocDownloadDetails:(DBTEAMLOGPaperDocDownloadDetails *)paperDocDownloadDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocDownloadDetails;
    _paperDocDownloadDetails = paperDocDownloadDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocEditDetails:(DBTEAMLOGPaperDocEditDetails *)paperDocEditDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocEditDetails;
    _paperDocEditDetails = paperDocEditDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocEditCommentDetails:(DBTEAMLOGPaperDocEditCommentDetails *)paperDocEditCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocEditCommentDetails;
    _paperDocEditCommentDetails = paperDocEditCommentDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocFollowedDetails:(DBTEAMLOGPaperDocFollowedDetails *)paperDocFollowedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocFollowedDetails;
    _paperDocFollowedDetails = paperDocFollowedDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocMentionDetails:(DBTEAMLOGPaperDocMentionDetails *)paperDocMentionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocMentionDetails;
    _paperDocMentionDetails = paperDocMentionDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocRequestAccessDetails:
    (DBTEAMLOGPaperDocRequestAccessDetails *)paperDocRequestAccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocRequestAccessDetails;
    _paperDocRequestAccessDetails = paperDocRequestAccessDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocResolveCommentDetails:
    (DBTEAMLOGPaperDocResolveCommentDetails *)paperDocResolveCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocResolveCommentDetails;
    _paperDocResolveCommentDetails = paperDocResolveCommentDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocRevertDetails:(DBTEAMLOGPaperDocRevertDetails *)paperDocRevertDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocRevertDetails;
    _paperDocRevertDetails = paperDocRevertDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocSlackShareDetails:(DBTEAMLOGPaperDocSlackShareDetails *)paperDocSlackShareDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocSlackShareDetails;
    _paperDocSlackShareDetails = paperDocSlackShareDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocTeamInviteDetails:(DBTEAMLOGPaperDocTeamInviteDetails *)paperDocTeamInviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocTeamInviteDetails;
    _paperDocTeamInviteDetails = paperDocTeamInviteDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocUnresolveCommentDetails:
    (DBTEAMLOGPaperDocUnresolveCommentDetails *)paperDocUnresolveCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails;
    _paperDocUnresolveCommentDetails = paperDocUnresolveCommentDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocViewDetails:(DBTEAMLOGPaperDocViewDetails *)paperDocViewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocViewDetails;
    _paperDocViewDetails = paperDocViewDetails;
  }
  return self;
}

- (instancetype)initWithPaperFolderDeletedDetails:(DBTEAMLOGPaperFolderDeletedDetails *)paperFolderDeletedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperFolderDeletedDetails;
    _paperFolderDeletedDetails = paperFolderDeletedDetails;
  }
  return self;
}

- (instancetype)initWithPaperFolderFollowedDetails:(DBTEAMLOGPaperFolderFollowedDetails *)paperFolderFollowedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperFolderFollowedDetails;
    _paperFolderFollowedDetails = paperFolderFollowedDetails;
  }
  return self;
}

- (instancetype)initWithPaperFolderTeamInviteDetails:
    (DBTEAMLOGPaperFolderTeamInviteDetails *)paperFolderTeamInviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails;
    _paperFolderTeamInviteDetails = paperFolderTeamInviteDetails;
  }
  return self;
}

- (instancetype)initWithPasswordChangeDetails:(DBTEAMLOGPasswordChangeDetails *)passwordChangeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPasswordChangeDetails;
    _passwordChangeDetails = passwordChangeDetails;
  }
  return self;
}

- (instancetype)initWithPasswordResetDetails:(DBTEAMLOGPasswordResetDetails *)passwordResetDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPasswordResetDetails;
    _passwordResetDetails = passwordResetDetails;
  }
  return self;
}

- (instancetype)initWithPasswordResetAllDetails:(DBTEAMLOGPasswordResetAllDetails *)passwordResetAllDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPasswordResetAllDetails;
    _passwordResetAllDetails = passwordResetAllDetails;
  }
  return self;
}

- (instancetype)initWithEmmCreateExceptionsReportDetails:
    (DBTEAMLOGEmmCreateExceptionsReportDetails *)emmCreateExceptionsReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails;
    _emmCreateExceptionsReportDetails = emmCreateExceptionsReportDetails;
  }
  return self;
}

- (instancetype)initWithEmmCreateUsageReportDetails:
    (DBTEAMLOGEmmCreateUsageReportDetails *)emmCreateUsageReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmCreateUsageReportDetails;
    _emmCreateUsageReportDetails = emmCreateUsageReportDetails;
  }
  return self;
}

- (instancetype)initWithSmartSyncCreateAdminPrivilegeReportDetails:
    (DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails *)smartSyncCreateAdminPrivilegeReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails;
    _smartSyncCreateAdminPrivilegeReportDetails = smartSyncCreateAdminPrivilegeReportDetails;
  }
  return self;
}

- (instancetype)initWithTeamActivityCreateReportDetails:
    (DBTEAMLOGTeamActivityCreateReportDetails *)teamActivityCreateReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamActivityCreateReportDetails;
    _teamActivityCreateReportDetails = teamActivityCreateReportDetails;
  }
  return self;
}

- (instancetype)initWithCollectionShareDetails:(DBTEAMLOGCollectionShareDetails *)collectionShareDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsCollectionShareDetails;
    _collectionShareDetails = collectionShareDetails;
  }
  return self;
}

- (instancetype)initWithFileAddCommentDetails:(DBTEAMLOGFileAddCommentDetails *)fileAddCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileAddCommentDetails;
    _fileAddCommentDetails = fileAddCommentDetails;
  }
  return self;
}

- (instancetype)initWithFileLikeCommentDetails:(DBTEAMLOGFileLikeCommentDetails *)fileLikeCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileLikeCommentDetails;
    _fileLikeCommentDetails = fileLikeCommentDetails;
  }
  return self;
}

- (instancetype)initWithFileUnlikeCommentDetails:(DBTEAMLOGFileUnlikeCommentDetails *)fileUnlikeCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileUnlikeCommentDetails;
    _fileUnlikeCommentDetails = fileUnlikeCommentDetails;
  }
  return self;
}

- (instancetype)initWithNoteAclInviteOnlyDetails:(DBTEAMLOGNoteAclInviteOnlyDetails *)noteAclInviteOnlyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails;
    _noteAclInviteOnlyDetails = noteAclInviteOnlyDetails;
  }
  return self;
}

- (instancetype)initWithNoteAclLinkDetails:(DBTEAMLOGNoteAclLinkDetails *)noteAclLinkDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoteAclLinkDetails;
    _noteAclLinkDetails = noteAclLinkDetails;
  }
  return self;
}

- (instancetype)initWithNoteAclTeamLinkDetails:(DBTEAMLOGNoteAclTeamLinkDetails *)noteAclTeamLinkDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoteAclTeamLinkDetails;
    _noteAclTeamLinkDetails = noteAclTeamLinkDetails;
  }
  return self;
}

- (instancetype)initWithNoteSharedDetails:(DBTEAMLOGNoteSharedDetails *)noteSharedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoteSharedDetails;
    _noteSharedDetails = noteSharedDetails;
  }
  return self;
}

- (instancetype)initWithNoteShareReceiveDetails:(DBTEAMLOGNoteShareReceiveDetails *)noteShareReceiveDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoteShareReceiveDetails;
    _noteShareReceiveDetails = noteShareReceiveDetails;
  }
  return self;
}

- (instancetype)initWithOpenNoteSharedDetails:(DBTEAMLOGOpenNoteSharedDetails *)openNoteSharedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsOpenNoteSharedDetails;
    _openNoteSharedDetails = openNoteSharedDetails;
  }
  return self;
}

- (instancetype)initWithSfAddGroupDetails:(DBTEAMLOGSfAddGroupDetails *)sfAddGroupDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfAddGroupDetails;
    _sfAddGroupDetails = sfAddGroupDetails;
  }
  return self;
}

- (instancetype)initWithSfAllowNonMembersToViewSharedLinksDetails:
    (DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails *)sfAllowNonMembersToViewSharedLinksDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails;
    _sfAllowNonMembersToViewSharedLinksDetails = sfAllowNonMembersToViewSharedLinksDetails;
  }
  return self;
}

- (instancetype)initWithSfInviteGroupDetails:(DBTEAMLOGSfInviteGroupDetails *)sfInviteGroupDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfInviteGroupDetails;
    _sfInviteGroupDetails = sfInviteGroupDetails;
  }
  return self;
}

- (instancetype)initWithSfNestDetails:(DBTEAMLOGSfNestDetails *)sfNestDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfNestDetails;
    _sfNestDetails = sfNestDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamDeclineDetails:(DBTEAMLOGSfTeamDeclineDetails *)sfTeamDeclineDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamDeclineDetails;
    _sfTeamDeclineDetails = sfTeamDeclineDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamGrantAccessDetails:(DBTEAMLOGSfTeamGrantAccessDetails *)sfTeamGrantAccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamGrantAccessDetails;
    _sfTeamGrantAccessDetails = sfTeamGrantAccessDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamInviteDetails:(DBTEAMLOGSfTeamInviteDetails *)sfTeamInviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamInviteDetails;
    _sfTeamInviteDetails = sfTeamInviteDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamInviteChangeRoleDetails:
    (DBTEAMLOGSfTeamInviteChangeRoleDetails *)sfTeamInviteChangeRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails;
    _sfTeamInviteChangeRoleDetails = sfTeamInviteChangeRoleDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamJoinDetails:(DBTEAMLOGSfTeamJoinDetails *)sfTeamJoinDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamJoinDetails;
    _sfTeamJoinDetails = sfTeamJoinDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamJoinFromOobLinkDetails:
    (DBTEAMLOGSfTeamJoinFromOobLinkDetails *)sfTeamJoinFromOobLinkDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails;
    _sfTeamJoinFromOobLinkDetails = sfTeamJoinFromOobLinkDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamUninviteDetails:(DBTEAMLOGSfTeamUninviteDetails *)sfTeamUninviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamUninviteDetails;
    _sfTeamUninviteDetails = sfTeamUninviteDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentAddInviteesDetails:
    (DBTEAMLOGSharedContentAddInviteesDetails *)sharedContentAddInviteesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentAddInviteesDetails;
    _sharedContentAddInviteesDetails = sharedContentAddInviteesDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentAddLinkExpiryDetails:
    (DBTEAMLOGSharedContentAddLinkExpiryDetails *)sharedContentAddLinkExpiryDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails;
    _sharedContentAddLinkExpiryDetails = sharedContentAddLinkExpiryDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentAddLinkPasswordDetails:
    (DBTEAMLOGSharedContentAddLinkPasswordDetails *)sharedContentAddLinkPasswordDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails;
    _sharedContentAddLinkPasswordDetails = sharedContentAddLinkPasswordDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentAddMemberDetails:
    (DBTEAMLOGSharedContentAddMemberDetails *)sharedContentAddMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentAddMemberDetails;
    _sharedContentAddMemberDetails = sharedContentAddMemberDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeDownloadsPolicyDetails:
    (DBTEAMLOGSharedContentChangeDownloadsPolicyDetails *)sharedContentChangeDownloadsPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails;
    _sharedContentChangeDownloadsPolicyDetails = sharedContentChangeDownloadsPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeInviteeRoleDetails:
    (DBTEAMLOGSharedContentChangeInviteeRoleDetails *)sharedContentChangeInviteeRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails;
    _sharedContentChangeInviteeRoleDetails = sharedContentChangeInviteeRoleDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeLinkAudienceDetails:
    (DBTEAMLOGSharedContentChangeLinkAudienceDetails *)sharedContentChangeLinkAudienceDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails;
    _sharedContentChangeLinkAudienceDetails = sharedContentChangeLinkAudienceDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeLinkExpiryDetails:
    (DBTEAMLOGSharedContentChangeLinkExpiryDetails *)sharedContentChangeLinkExpiryDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails;
    _sharedContentChangeLinkExpiryDetails = sharedContentChangeLinkExpiryDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeLinkPasswordDetails:
    (DBTEAMLOGSharedContentChangeLinkPasswordDetails *)sharedContentChangeLinkPasswordDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails;
    _sharedContentChangeLinkPasswordDetails = sharedContentChangeLinkPasswordDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeMemberRoleDetails:
    (DBTEAMLOGSharedContentChangeMemberRoleDetails *)sharedContentChangeMemberRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails;
    _sharedContentChangeMemberRoleDetails = sharedContentChangeMemberRoleDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeViewerInfoPolicyDetails:
    (DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails *)sharedContentChangeViewerInfoPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails;
    _sharedContentChangeViewerInfoPolicyDetails = sharedContentChangeViewerInfoPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentClaimInvitationDetails:
    (DBTEAMLOGSharedContentClaimInvitationDetails *)sharedContentClaimInvitationDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails;
    _sharedContentClaimInvitationDetails = sharedContentClaimInvitationDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentCopyDetails:(DBTEAMLOGSharedContentCopyDetails *)sharedContentCopyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentCopyDetails;
    _sharedContentCopyDetails = sharedContentCopyDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentDownloadDetails:
    (DBTEAMLOGSharedContentDownloadDetails *)sharedContentDownloadDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentDownloadDetails;
    _sharedContentDownloadDetails = sharedContentDownloadDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRelinquishMembershipDetails:
    (DBTEAMLOGSharedContentRelinquishMembershipDetails *)sharedContentRelinquishMembershipDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails;
    _sharedContentRelinquishMembershipDetails = sharedContentRelinquishMembershipDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveInviteeDetails:
    (DBTEAMLOGSharedContentRemoveInviteeDetails *)sharedContentRemoveInviteeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRemoveInviteeDetails;
    _sharedContentRemoveInviteeDetails = sharedContentRemoveInviteeDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveLinkExpiryDetails:
    (DBTEAMLOGSharedContentRemoveLinkExpiryDetails *)sharedContentRemoveLinkExpiryDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails;
    _sharedContentRemoveLinkExpiryDetails = sharedContentRemoveLinkExpiryDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveLinkPasswordDetails:
    (DBTEAMLOGSharedContentRemoveLinkPasswordDetails *)sharedContentRemoveLinkPasswordDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails;
    _sharedContentRemoveLinkPasswordDetails = sharedContentRemoveLinkPasswordDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveMemberDetails:
    (DBTEAMLOGSharedContentRemoveMemberDetails *)sharedContentRemoveMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails;
    _sharedContentRemoveMemberDetails = sharedContentRemoveMemberDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRequestAccessDetails:
    (DBTEAMLOGSharedContentRequestAccessDetails *)sharedContentRequestAccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRequestAccessDetails;
    _sharedContentRequestAccessDetails = sharedContentRequestAccessDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentUnshareDetails:
    (DBTEAMLOGSharedContentUnshareDetails *)sharedContentUnshareDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentUnshareDetails;
    _sharedContentUnshareDetails = sharedContentUnshareDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentViewDetails:(DBTEAMLOGSharedContentViewDetails *)sharedContentViewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentViewDetails;
    _sharedContentViewDetails = sharedContentViewDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeConfidentialityDetails:
    (DBTEAMLOGSharedFolderChangeConfidentialityDetails *)sharedFolderChangeConfidentialityDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderChangeConfidentialityDetails;
    _sharedFolderChangeConfidentialityDetails = sharedFolderChangeConfidentialityDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeLinkPolicyDetails:
    (DBTEAMLOGSharedFolderChangeLinkPolicyDetails *)sharedFolderChangeLinkPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails;
    _sharedFolderChangeLinkPolicyDetails = sharedFolderChangeLinkPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeMemberManagementPolicyDetails:
    (DBTEAMLOGSharedFolderChangeMemberManagementPolicyDetails *)sharedFolderChangeMemberManagementPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderChangeMemberManagementPolicyDetails;
    _sharedFolderChangeMemberManagementPolicyDetails = sharedFolderChangeMemberManagementPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeMemberPolicyDetails:
    (DBTEAMLOGSharedFolderChangeMemberPolicyDetails *)sharedFolderChangeMemberPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderChangeMemberPolicyDetails;
    _sharedFolderChangeMemberPolicyDetails = sharedFolderChangeMemberPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderCreateDetails:(DBTEAMLOGSharedFolderCreateDetails *)sharedFolderCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderCreateDetails;
    _sharedFolderCreateDetails = sharedFolderCreateDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderMountDetails:(DBTEAMLOGSharedFolderMountDetails *)sharedFolderMountDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderMountDetails;
    _sharedFolderMountDetails = sharedFolderMountDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderTransferOwnershipDetails:
    (DBTEAMLOGSharedFolderTransferOwnershipDetails *)sharedFolderTransferOwnershipDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails;
    _sharedFolderTransferOwnershipDetails = sharedFolderTransferOwnershipDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderUnmountDetails:(DBTEAMLOGSharedFolderUnmountDetails *)sharedFolderUnmountDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderUnmountDetails;
    _sharedFolderUnmountDetails = sharedFolderUnmountDetails;
  }
  return self;
}

- (instancetype)initWithSharedNoteOpenedDetails:(DBTEAMLOGSharedNoteOpenedDetails *)sharedNoteOpenedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedNoteOpenedDetails;
    _sharedNoteOpenedDetails = sharedNoteOpenedDetails;
  }
  return self;
}

- (instancetype)initWithShmodelAppCreateDetails:(DBTEAMLOGShmodelAppCreateDetails *)shmodelAppCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelAppCreateDetails;
    _shmodelAppCreateDetails = shmodelAppCreateDetails;
  }
  return self;
}

- (instancetype)initWithShmodelCreateDetails:(DBTEAMLOGShmodelCreateDetails *)shmodelCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelCreateDetails;
    _shmodelCreateDetails = shmodelCreateDetails;
  }
  return self;
}

- (instancetype)initWithShmodelDisableDetails:(DBTEAMLOGShmodelDisableDetails *)shmodelDisableDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelDisableDetails;
    _shmodelDisableDetails = shmodelDisableDetails;
  }
  return self;
}

- (instancetype)initWithShmodelFbShareDetails:(DBTEAMLOGShmodelFbShareDetails *)shmodelFbShareDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelFbShareDetails;
    _shmodelFbShareDetails = shmodelFbShareDetails;
  }
  return self;
}

- (instancetype)initWithShmodelGroupShareDetails:(DBTEAMLOGShmodelGroupShareDetails *)shmodelGroupShareDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelGroupShareDetails;
    _shmodelGroupShareDetails = shmodelGroupShareDetails;
  }
  return self;
}

- (instancetype)initWithShmodelRemoveExpirationDetails:
    (DBTEAMLOGShmodelRemoveExpirationDetails *)shmodelRemoveExpirationDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelRemoveExpirationDetails;
    _shmodelRemoveExpirationDetails = shmodelRemoveExpirationDetails;
  }
  return self;
}

- (instancetype)initWithShmodelSetExpirationDetails:
    (DBTEAMLOGShmodelSetExpirationDetails *)shmodelSetExpirationDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelSetExpirationDetails;
    _shmodelSetExpirationDetails = shmodelSetExpirationDetails;
  }
  return self;
}

- (instancetype)initWithShmodelTeamCopyDetails:(DBTEAMLOGShmodelTeamCopyDetails *)shmodelTeamCopyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelTeamCopyDetails;
    _shmodelTeamCopyDetails = shmodelTeamCopyDetails;
  }
  return self;
}

- (instancetype)initWithShmodelTeamDownloadDetails:(DBTEAMLOGShmodelTeamDownloadDetails *)shmodelTeamDownloadDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelTeamDownloadDetails;
    _shmodelTeamDownloadDetails = shmodelTeamDownloadDetails;
  }
  return self;
}

- (instancetype)initWithShmodelTeamShareDetails:(DBTEAMLOGShmodelTeamShareDetails *)shmodelTeamShareDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelTeamShareDetails;
    _shmodelTeamShareDetails = shmodelTeamShareDetails;
  }
  return self;
}

- (instancetype)initWithShmodelTeamViewDetails:(DBTEAMLOGShmodelTeamViewDetails *)shmodelTeamViewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelTeamViewDetails;
    _shmodelTeamViewDetails = shmodelTeamViewDetails;
  }
  return self;
}

- (instancetype)initWithShmodelVisibilityPasswordDetails:
    (DBTEAMLOGShmodelVisibilityPasswordDetails *)shmodelVisibilityPasswordDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelVisibilityPasswordDetails;
    _shmodelVisibilityPasswordDetails = shmodelVisibilityPasswordDetails;
  }
  return self;
}

- (instancetype)initWithShmodelVisibilityPublicDetails:
    (DBTEAMLOGShmodelVisibilityPublicDetails *)shmodelVisibilityPublicDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelVisibilityPublicDetails;
    _shmodelVisibilityPublicDetails = shmodelVisibilityPublicDetails;
  }
  return self;
}

- (instancetype)initWithShmodelVisibilityTeamOnlyDetails:
    (DBTEAMLOGShmodelVisibilityTeamOnlyDetails *)shmodelVisibilityTeamOnlyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelVisibilityTeamOnlyDetails;
    _shmodelVisibilityTeamOnlyDetails = shmodelVisibilityTeamOnlyDetails;
  }
  return self;
}

- (instancetype)initWithRemoveLogoutUrlDetails:(DBTEAMLOGRemoveLogoutUrlDetails *)removeLogoutUrlDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsRemoveLogoutUrlDetails;
    _removeLogoutUrlDetails = removeLogoutUrlDetails;
  }
  return self;
}

- (instancetype)initWithRemoveSsoUrlDetails:(DBTEAMLOGRemoveSsoUrlDetails *)removeSsoUrlDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsRemoveSsoUrlDetails;
    _removeSsoUrlDetails = removeSsoUrlDetails;
  }
  return self;
}

- (instancetype)initWithSsoChangeCertDetails:(DBTEAMLOGSsoChangeCertDetails *)ssoChangeCertDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoChangeCertDetails;
    _ssoChangeCertDetails = ssoChangeCertDetails;
  }
  return self;
}

- (instancetype)initWithSsoChangeLoginUrlDetails:(DBTEAMLOGSsoChangeLoginUrlDetails *)ssoChangeLoginUrlDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails;
    _ssoChangeLoginUrlDetails = ssoChangeLoginUrlDetails;
  }
  return self;
}

- (instancetype)initWithSsoChangeLogoutUrlDetails:(DBTEAMLOGSsoChangeLogoutUrlDetails *)ssoChangeLogoutUrlDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails;
    _ssoChangeLogoutUrlDetails = ssoChangeLogoutUrlDetails;
  }
  return self;
}

- (instancetype)initWithSsoChangeSamlIdentityModeDetails:
    (DBTEAMLOGSsoChangeSamlIdentityModeDetails *)ssoChangeSamlIdentityModeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails;
    _ssoChangeSamlIdentityModeDetails = ssoChangeSamlIdentityModeDetails;
  }
  return self;
}

- (instancetype)initWithTeamFolderChangeStatusDetails:
    (DBTEAMLOGTeamFolderChangeStatusDetails *)teamFolderChangeStatusDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails;
    _teamFolderChangeStatusDetails = teamFolderChangeStatusDetails;
  }
  return self;
}

- (instancetype)initWithTeamFolderCreateDetails:(DBTEAMLOGTeamFolderCreateDetails *)teamFolderCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamFolderCreateDetails;
    _teamFolderCreateDetails = teamFolderCreateDetails;
  }
  return self;
}

- (instancetype)initWithTeamFolderDowngradeDetails:(DBTEAMLOGTeamFolderDowngradeDetails *)teamFolderDowngradeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamFolderDowngradeDetails;
    _teamFolderDowngradeDetails = teamFolderDowngradeDetails;
  }
  return self;
}

- (instancetype)initWithTeamFolderPermanentlyDeleteDetails:
    (DBTEAMLOGTeamFolderPermanentlyDeleteDetails *)teamFolderPermanentlyDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails;
    _teamFolderPermanentlyDeleteDetails = teamFolderPermanentlyDeleteDetails;
  }
  return self;
}

- (instancetype)initWithTeamFolderRenameDetails:(DBTEAMLOGTeamFolderRenameDetails *)teamFolderRenameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamFolderRenameDetails;
    _teamFolderRenameDetails = teamFolderRenameDetails;
  }
  return self;
}

- (instancetype)initWithAccountCaptureChangePolicyDetails:
    (DBTEAMLOGAccountCaptureChangePolicyDetails *)accountCaptureChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails;
    _accountCaptureChangePolicyDetails = accountCaptureChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithAllowDownloadDisabledDetails:
    (DBTEAMLOGAllowDownloadDisabledDetails *)allowDownloadDisabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAllowDownloadDisabledDetails;
    _allowDownloadDisabledDetails = allowDownloadDisabledDetails;
  }
  return self;
}

- (instancetype)initWithAllowDownloadEnabledDetails:
    (DBTEAMLOGAllowDownloadEnabledDetails *)allowDownloadEnabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAllowDownloadEnabledDetails;
    _allowDownloadEnabledDetails = allowDownloadEnabledDetails;
  }
  return self;
}

- (instancetype)initWithDataPlacementRestrictionChangePolicyDetails:
    (DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *)dataPlacementRestrictionChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails;
    _dataPlacementRestrictionChangePolicyDetails = dataPlacementRestrictionChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithDataPlacementRestrictionSatisfyPolicyDetails:
    (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *)dataPlacementRestrictionSatisfyPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails;
    _dataPlacementRestrictionSatisfyPolicyDetails = dataPlacementRestrictionSatisfyPolicyDetails;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeDesktopPolicyDetails:
    (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *)deviceApprovalsChangeDesktopPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails;
    _deviceApprovalsChangeDesktopPolicyDetails = deviceApprovalsChangeDesktopPolicyDetails;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeMobilePolicyDetails:
    (DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *)deviceApprovalsChangeMobilePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails;
    _deviceApprovalsChangeMobilePolicyDetails = deviceApprovalsChangeMobilePolicyDetails;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeOverageActionDetails:
    (DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *)deviceApprovalsChangeOverageActionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails;
    _deviceApprovalsChangeOverageActionDetails = deviceApprovalsChangeOverageActionDetails;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeUnlinkActionDetails:
    (DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *)deviceApprovalsChangeUnlinkActionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails;
    _deviceApprovalsChangeUnlinkActionDetails = deviceApprovalsChangeUnlinkActionDetails;
  }
  return self;
}

- (instancetype)initWithEmmAddExceptionDetails:(DBTEAMLOGEmmAddExceptionDetails *)emmAddExceptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmAddExceptionDetails;
    _emmAddExceptionDetails = emmAddExceptionDetails;
  }
  return self;
}

- (instancetype)initWithEmmChangePolicyDetails:(DBTEAMLOGEmmChangePolicyDetails *)emmChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmChangePolicyDetails;
    _emmChangePolicyDetails = emmChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithEmmRemoveExceptionDetails:(DBTEAMLOGEmmRemoveExceptionDetails *)emmRemoveExceptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmRemoveExceptionDetails;
    _emmRemoveExceptionDetails = emmRemoveExceptionDetails;
  }
  return self;
}

- (instancetype)initWithExtendedVersionHistoryChangePolicyDetails:
    (DBTEAMLOGExtendedVersionHistoryChangePolicyDetails *)extendedVersionHistoryChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails;
    _extendedVersionHistoryChangePolicyDetails = extendedVersionHistoryChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithFileCommentsChangePolicyDetails:
    (DBTEAMLOGFileCommentsChangePolicyDetails *)fileCommentsChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails;
    _fileCommentsChangePolicyDetails = fileCommentsChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestsChangePolicyDetails:
    (DBTEAMLOGFileRequestsChangePolicyDetails *)fileRequestsChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails;
    _fileRequestsChangePolicyDetails = fileRequestsChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestsEmailsEnabledDetails:
    (DBTEAMLOGFileRequestsEmailsEnabledDetails *)fileRequestsEmailsEnabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails;
    _fileRequestsEmailsEnabledDetails = fileRequestsEmailsEnabledDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestsEmailsRestrictedToTeamOnlyDetails:
    (DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails *)fileRequestsEmailsRestrictedToTeamOnlyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails;
    _fileRequestsEmailsRestrictedToTeamOnlyDetails = fileRequestsEmailsRestrictedToTeamOnlyDetails;
  }
  return self;
}

- (instancetype)initWithGoogleSsoChangePolicyDetails:
    (DBTEAMLOGGoogleSsoChangePolicyDetails *)googleSsoChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails;
    _googleSsoChangePolicyDetails = googleSsoChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithGroupUserManagementChangePolicyDetails:
    (DBTEAMLOGGroupUserManagementChangePolicyDetails *)groupUserManagementChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails;
    _groupUserManagementChangePolicyDetails = groupUserManagementChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithMemberRequestsChangePolicyDetails:
    (DBTEAMLOGMemberRequestsChangePolicyDetails *)memberRequestsChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails;
    _memberRequestsChangePolicyDetails = memberRequestsChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsAddExceptionDetails:
    (DBTEAMLOGMemberSpaceLimitsAddExceptionDetails *)memberSpaceLimitsAddExceptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails;
    _memberSpaceLimitsAddExceptionDetails = memberSpaceLimitsAddExceptionDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsChangePolicyDetails:
    (DBTEAMLOGMemberSpaceLimitsChangePolicyDetails *)memberSpaceLimitsChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails;
    _memberSpaceLimitsChangePolicyDetails = memberSpaceLimitsChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsRemoveExceptionDetails:
    (DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails *)memberSpaceLimitsRemoveExceptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails;
    _memberSpaceLimitsRemoveExceptionDetails = memberSpaceLimitsRemoveExceptionDetails;
  }
  return self;
}

- (instancetype)initWithMemberSuggestionsChangePolicyDetails:
    (DBTEAMLOGMemberSuggestionsChangePolicyDetails *)memberSuggestionsChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails;
    _memberSuggestionsChangePolicyDetails = memberSuggestionsChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithMicrosoftOfficeAddinChangePolicyDetails:
    (DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails *)microsoftOfficeAddinChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails;
    _microsoftOfficeAddinChangePolicyDetails = microsoftOfficeAddinChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithNetworkControlChangePolicyDetails:
    (DBTEAMLOGNetworkControlChangePolicyDetails *)networkControlChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails;
    _networkControlChangePolicyDetails = networkControlChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithPaperChangeDeploymentPolicyDetails:
    (DBTEAMLOGPaperChangeDeploymentPolicyDetails *)paperChangeDeploymentPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails;
    _paperChangeDeploymentPolicyDetails = paperChangeDeploymentPolicyDetails;
  }
  return self;
}

- (instancetype)initWithPaperChangeMemberPolicyDetails:
    (DBTEAMLOGPaperChangeMemberPolicyDetails *)paperChangeMemberPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails;
    _paperChangeMemberPolicyDetails = paperChangeMemberPolicyDetails;
  }
  return self;
}

- (instancetype)initWithPaperChangePolicyDetails:(DBTEAMLOGPaperChangePolicyDetails *)paperChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperChangePolicyDetails;
    _paperChangePolicyDetails = paperChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithPermanentDeleteChangePolicyDetails:
    (DBTEAMLOGPermanentDeleteChangePolicyDetails *)permanentDeleteChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails;
    _permanentDeleteChangePolicyDetails = permanentDeleteChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharingChangeFolderJoinPolicyDetails:
    (DBTEAMLOGSharingChangeFolderJoinPolicyDetails *)sharingChangeFolderJoinPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails;
    _sharingChangeFolderJoinPolicyDetails = sharingChangeFolderJoinPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharingChangeLinkPolicyDetails:
    (DBTEAMLOGSharingChangeLinkPolicyDetails *)sharingChangeLinkPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails;
    _sharingChangeLinkPolicyDetails = sharingChangeLinkPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharingChangeMemberPolicyDetails:
    (DBTEAMLOGSharingChangeMemberPolicyDetails *)sharingChangeMemberPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails;
    _sharingChangeMemberPolicyDetails = sharingChangeMemberPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSmartSyncChangePolicyDetails:
    (DBTEAMLOGSmartSyncChangePolicyDetails *)smartSyncChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails;
    _smartSyncChangePolicyDetails = smartSyncChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithSsoChangePolicyDetails:(DBTEAMLOGSsoChangePolicyDetails *)ssoChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoChangePolicyDetails;
    _ssoChangePolicyDetails = ssoChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithTfaChangePolicyDetails:(DBTEAMLOGTfaChangePolicyDetails *)tfaChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaChangePolicyDetails;
    _tfaChangePolicyDetails = tfaChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithTwoAccountChangePolicyDetails:
    (DBTEAMLOGTwoAccountChangePolicyDetails *)twoAccountChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails;
    _twoAccountChangePolicyDetails = twoAccountChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithWebSessionsChangeFixedLengthPolicyDetails:
    (DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails *)webSessionsChangeFixedLengthPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails;
    _webSessionsChangeFixedLengthPolicyDetails = webSessionsChangeFixedLengthPolicyDetails;
  }
  return self;
}

- (instancetype)initWithWebSessionsChangeIdleLengthPolicyDetails:
    (DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails *)webSessionsChangeIdleLengthPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails;
    _webSessionsChangeIdleLengthPolicyDetails = webSessionsChangeIdleLengthPolicyDetails;
  }
  return self;
}

- (instancetype)initWithTeamProfileAddLogoDetails:(DBTEAMLOGTeamProfileAddLogoDetails *)teamProfileAddLogoDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamProfileAddLogoDetails;
    _teamProfileAddLogoDetails = teamProfileAddLogoDetails;
  }
  return self;
}

- (instancetype)initWithTeamProfileChangeLogoDetails:
    (DBTEAMLOGTeamProfileChangeLogoDetails *)teamProfileChangeLogoDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails;
    _teamProfileChangeLogoDetails = teamProfileChangeLogoDetails;
  }
  return self;
}

- (instancetype)initWithTeamProfileChangeNameDetails:
    (DBTEAMLOGTeamProfileChangeNameDetails *)teamProfileChangeNameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamProfileChangeNameDetails;
    _teamProfileChangeNameDetails = teamProfileChangeNameDetails;
  }
  return self;
}

- (instancetype)initWithTeamProfileRemoveLogoDetails:
    (DBTEAMLOGTeamProfileRemoveLogoDetails *)teamProfileRemoveLogoDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails;
    _teamProfileRemoveLogoDetails = teamProfileRemoveLogoDetails;
  }
  return self;
}

- (instancetype)initWithTfaAddBackupPhoneDetails:(DBTEAMLOGTfaAddBackupPhoneDetails *)tfaAddBackupPhoneDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails;
    _tfaAddBackupPhoneDetails = tfaAddBackupPhoneDetails;
  }
  return self;
}

- (instancetype)initWithTfaAddSecurityKeyDetails:(DBTEAMLOGTfaAddSecurityKeyDetails *)tfaAddSecurityKeyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails;
    _tfaAddSecurityKeyDetails = tfaAddSecurityKeyDetails;
  }
  return self;
}

- (instancetype)initWithTfaChangeBackupPhoneDetails:
    (DBTEAMLOGTfaChangeBackupPhoneDetails *)tfaChangeBackupPhoneDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails;
    _tfaChangeBackupPhoneDetails = tfaChangeBackupPhoneDetails;
  }
  return self;
}

- (instancetype)initWithTfaChangeStatusDetails:(DBTEAMLOGTfaChangeStatusDetails *)tfaChangeStatusDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaChangeStatusDetails;
    _tfaChangeStatusDetails = tfaChangeStatusDetails;
  }
  return self;
}

- (instancetype)initWithTfaRemoveBackupPhoneDetails:
    (DBTEAMLOGTfaRemoveBackupPhoneDetails *)tfaRemoveBackupPhoneDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails;
    _tfaRemoveBackupPhoneDetails = tfaRemoveBackupPhoneDetails;
  }
  return self;
}

- (instancetype)initWithTfaRemoveSecurityKeyDetails:
    (DBTEAMLOGTfaRemoveSecurityKeyDetails *)tfaRemoveSecurityKeyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails;
    _tfaRemoveSecurityKeyDetails = tfaRemoveSecurityKeyDetails;
  }
  return self;
}

- (instancetype)initWithTfaResetDetails:(DBTEAMLOGTfaResetDetails *)tfaResetDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaResetDetails;
    _tfaResetDetails = tfaResetDetails;
  }
  return self;
}

- (instancetype)initWithMissingDetails:(DBTEAMLOGMissingDetails *)missingDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMissingDetails;
    _missingDetails = missingDetails;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGMemberChangeMembershipTypeDetails *)memberChangeMembershipTypeDetails {
  if (![self isMemberChangeMembershipTypeDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails, but was %@.",
                       [self tagName]];
  }
  return _memberChangeMembershipTypeDetails;
}

- (DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails *)memberPermanentlyDeleteAccountContentsDetails {
  if (![self isMemberPermanentlyDeleteAccountContentsDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails, but was %@.",
               [self tagName]];
  }
  return _memberPermanentlyDeleteAccountContentsDetails;
}

- (DBTEAMLOGMemberSpaceLimitsChangeStatusDetails *)memberSpaceLimitsChangeStatusDetails {
  if (![self isMemberSpaceLimitsChangeStatusDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails, but was %@.",
                       [self tagName]];
  }
  return _memberSpaceLimitsChangeStatusDetails;
}

- (DBTEAMLOGMemberTransferAccountContentsDetails *)memberTransferAccountContentsDetails {
  if (![self isMemberTransferAccountContentsDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails, but was %@.",
                       [self tagName]];
  }
  return _memberTransferAccountContentsDetails;
}

- (DBTEAMLOGPaperEnabledUsersGroupAdditionDetails *)paperEnabledUsersGroupAdditionDetails {
  if (![self isPaperEnabledUsersGroupAdditionDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails, but was %@.",
                       [self tagName]];
  }
  return _paperEnabledUsersGroupAdditionDetails;
}

- (DBTEAMLOGPaperEnabledUsersGroupRemovalDetails *)paperEnabledUsersGroupRemovalDetails {
  if (![self isPaperEnabledUsersGroupRemovalDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails, but was %@.",
                       [self tagName]];
  }
  return _paperEnabledUsersGroupRemovalDetails;
}

- (DBTEAMLOGPaperExternalViewAllowDetails *)paperExternalViewAllowDetails {
  if (![self isPaperExternalViewAllowDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperExternalViewAllowDetails, but was %@.",
                       [self tagName]];
  }
  return _paperExternalViewAllowDetails;
}

- (DBTEAMLOGPaperExternalViewDefaultTeamDetails *)paperExternalViewDefaultTeamDetails {
  if (![self isPaperExternalViewDefaultTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails, but was %@.",
                       [self tagName]];
  }
  return _paperExternalViewDefaultTeamDetails;
}

- (DBTEAMLOGPaperExternalViewForbidDetails *)paperExternalViewForbidDetails {
  if (![self isPaperExternalViewForbidDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperExternalViewForbidDetails, but was %@.",
                       [self tagName]];
  }
  return _paperExternalViewForbidDetails;
}

- (DBTEAMLOGSfExternalInviteWarnDetails *)sfExternalInviteWarnDetails {
  if (![self isSfExternalInviteWarnDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSfExternalInviteWarnDetails, but was %@.", [self tagName]];
  }
  return _sfExternalInviteWarnDetails;
}

- (DBTEAMLOGTeamMergeDetails *)teamMergeDetails {
  if (![self isTeamMergeDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeDetails, but was %@.", [self tagName]];
  }
  return _teamMergeDetails;
}

- (DBTEAMLOGAppLinkTeamDetails *)appLinkTeamDetails {
  if (![self isAppLinkTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAppLinkTeamDetails, but was %@.", [self tagName]];
  }
  return _appLinkTeamDetails;
}

- (DBTEAMLOGAppLinkUserDetails *)appLinkUserDetails {
  if (![self isAppLinkUserDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAppLinkUserDetails, but was %@.", [self tagName]];
  }
  return _appLinkUserDetails;
}

- (DBTEAMLOGAppUnlinkTeamDetails *)appUnlinkTeamDetails {
  if (![self isAppUnlinkTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAppUnlinkTeamDetails, but was %@.", [self tagName]];
  }
  return _appUnlinkTeamDetails;
}

- (DBTEAMLOGAppUnlinkUserDetails *)appUnlinkUserDetails {
  if (![self isAppUnlinkUserDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAppUnlinkUserDetails, but was %@.", [self tagName]];
  }
  return _appUnlinkUserDetails;
}

- (DBTEAMLOGDeviceChangeIpDesktopDetails *)deviceChangeIpDesktopDetails {
  if (![self isDeviceChangeIpDesktopDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails, but was %@.", [self tagName]];
  }
  return _deviceChangeIpDesktopDetails;
}

- (DBTEAMLOGDeviceChangeIpMobileDetails *)deviceChangeIpMobileDetails {
  if (![self isDeviceChangeIpMobileDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails, but was %@.", [self tagName]];
  }
  return _deviceChangeIpMobileDetails;
}

- (DBTEAMLOGDeviceChangeIpWebDetails *)deviceChangeIpWebDetails {
  if (![self isDeviceChangeIpWebDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceChangeIpWebDetails, but was %@.", [self tagName]];
  }
  return _deviceChangeIpWebDetails;
}

- (DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *)deviceDeleteOnUnlinkFailDetails {
  if (![self isDeviceDeleteOnUnlinkFailDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails, but was %@.",
                       [self tagName]];
  }
  return _deviceDeleteOnUnlinkFailDetails;
}

- (DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *)deviceDeleteOnUnlinkSuccessDetails {
  if (![self isDeviceDeleteOnUnlinkSuccessDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails, but was %@.",
                       [self tagName]];
  }
  return _deviceDeleteOnUnlinkSuccessDetails;
}

- (DBTEAMLOGDeviceLinkFailDetails *)deviceLinkFailDetails {
  if (![self isDeviceLinkFailDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceLinkFailDetails, but was %@.", [self tagName]];
  }
  return _deviceLinkFailDetails;
}

- (DBTEAMLOGDeviceLinkSuccessDetails *)deviceLinkSuccessDetails {
  if (![self isDeviceLinkSuccessDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceLinkSuccessDetails, but was %@.", [self tagName]];
  }
  return _deviceLinkSuccessDetails;
}

- (DBTEAMLOGDeviceManagementDisabledDetails *)deviceManagementDisabledDetails {
  if (![self isDeviceManagementDisabledDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceManagementDisabledDetails, but was %@.",
                       [self tagName]];
  }
  return _deviceManagementDisabledDetails;
}

- (DBTEAMLOGDeviceManagementEnabledDetails *)deviceManagementEnabledDetails {
  if (![self isDeviceManagementEnabledDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceManagementEnabledDetails, but was %@.",
                       [self tagName]];
  }
  return _deviceManagementEnabledDetails;
}

- (DBTEAMLOGDeviceUnlinkDetails *)deviceUnlinkDetails {
  if (![self isDeviceUnlinkDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceUnlinkDetails, but was %@.", [self tagName]];
  }
  return _deviceUnlinkDetails;
}

- (DBTEAMLOGEmmRefreshAuthTokenDetails *)emmRefreshAuthTokenDetails {
  if (![self isEmmRefreshAuthTokenDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails, but was %@.", [self tagName]];
  }
  return _emmRefreshAuthTokenDetails;
}

- (DBTEAMLOGAccountCaptureChangeAvailabilityDetails *)accountCaptureChangeAvailabilityDetails {
  if (![self isAccountCaptureChangeAvailabilityDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails, but was %@.",
               [self tagName]];
  }
  return _accountCaptureChangeAvailabilityDetails;
}

- (DBTEAMLOGAccountCaptureMigrateAccountDetails *)accountCaptureMigrateAccountDetails {
  if (![self isAccountCaptureMigrateAccountDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails, but was %@.",
                       [self tagName]];
  }
  return _accountCaptureMigrateAccountDetails;
}

- (DBTEAMLOGAccountCaptureRelinquishAccountDetails *)accountCaptureRelinquishAccountDetails {
  if (![self isAccountCaptureRelinquishAccountDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails, but was %@.",
               [self tagName]];
  }
  return _accountCaptureRelinquishAccountDetails;
}

- (DBTEAMLOGDisabledDomainInvitesDetails *)disabledDomainInvitesDetails {
  if (![self isDisabledDomainInvitesDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDisabledDomainInvitesDetails, but was %@.", [self tagName]];
  }
  return _disabledDomainInvitesDetails;
}

- (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *)domainInvitesApproveRequestToJoinTeamDetails {
  if (![self isDomainInvitesApproveRequestToJoinTeamDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails, but was %@.",
               [self tagName]];
  }
  return _domainInvitesApproveRequestToJoinTeamDetails;
}

- (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *)domainInvitesDeclineRequestToJoinTeamDetails {
  if (![self isDomainInvitesDeclineRequestToJoinTeamDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails, but was %@.",
               [self tagName]];
  }
  return _domainInvitesDeclineRequestToJoinTeamDetails;
}

- (DBTEAMLOGDomainInvitesEmailExistingUsersDetails *)domainInvitesEmailExistingUsersDetails {
  if (![self isDomainInvitesEmailExistingUsersDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails, but was %@.",
               [self tagName]];
  }
  return _domainInvitesEmailExistingUsersDetails;
}

- (DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *)domainInvitesRequestToJoinTeamDetails {
  if (![self isDomainInvitesRequestToJoinTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails, but was %@.",
                       [self tagName]];
  }
  return _domainInvitesRequestToJoinTeamDetails;
}

- (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *)domainInvitesSetInviteNewUserPrefToNoDetails {
  if (![self isDomainInvitesSetInviteNewUserPrefToNoDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails, but was %@.",
               [self tagName]];
  }
  return _domainInvitesSetInviteNewUserPrefToNoDetails;
}

- (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *)domainInvitesSetInviteNewUserPrefToYesDetails {
  if (![self isDomainInvitesSetInviteNewUserPrefToYesDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails, but was %@.",
               [self tagName]];
  }
  return _domainInvitesSetInviteNewUserPrefToYesDetails;
}

- (DBTEAMLOGDomainVerificationAddDomainFailDetails *)domainVerificationAddDomainFailDetails {
  if (![self isDomainVerificationAddDomainFailDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails, but was %@.",
               [self tagName]];
  }
  return _domainVerificationAddDomainFailDetails;
}

- (DBTEAMLOGDomainVerificationAddDomainSuccessDetails *)domainVerificationAddDomainSuccessDetails {
  if (![self isDomainVerificationAddDomainSuccessDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails, but was %@.",
               [self tagName]];
  }
  return _domainVerificationAddDomainSuccessDetails;
}

- (DBTEAMLOGDomainVerificationRemoveDomainDetails *)domainVerificationRemoveDomainDetails {
  if (![self isDomainVerificationRemoveDomainDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails, but was %@.",
                       [self tagName]];
  }
  return _domainVerificationRemoveDomainDetails;
}

- (DBTEAMLOGEnabledDomainInvitesDetails *)enabledDomainInvitesDetails {
  if (![self isEnabledDomainInvitesDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEnabledDomainInvitesDetails, but was %@.", [self tagName]];
  }
  return _enabledDomainInvitesDetails;
}

- (DBTEAMLOGCreateFolderDetails *)createFolderDetails {
  if (![self isCreateFolderDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsCreateFolderDetails, but was %@.", [self tagName]];
  }
  return _createFolderDetails;
}

- (DBTEAMLOGFileAddDetails *)fileAddDetails {
  if (![self isFileAddDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileAddDetails, but was %@.", [self tagName]];
  }
  return _fileAddDetails;
}

- (DBTEAMLOGFileCopyDetails *)fileCopyDetails {
  if (![self isFileCopyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileCopyDetails, but was %@.", [self tagName]];
  }
  return _fileCopyDetails;
}

- (DBTEAMLOGFileDeleteDetails *)fileDeleteDetails {
  if (![self isFileDeleteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileDeleteDetails, but was %@.", [self tagName]];
  }
  return _fileDeleteDetails;
}

- (DBTEAMLOGFileDownloadDetails *)fileDownloadDetails {
  if (![self isFileDownloadDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileDownloadDetails, but was %@.", [self tagName]];
  }
  return _fileDownloadDetails;
}

- (DBTEAMLOGFileEditDetails *)fileEditDetails {
  if (![self isFileEditDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileEditDetails, but was %@.", [self tagName]];
  }
  return _fileEditDetails;
}

- (DBTEAMLOGFileGetCopyReferenceDetails *)fileGetCopyReferenceDetails {
  if (![self isFileGetCopyReferenceDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileGetCopyReferenceDetails, but was %@.", [self tagName]];
  }
  return _fileGetCopyReferenceDetails;
}

- (DBTEAMLOGFileMoveDetails *)fileMoveDetails {
  if (![self isFileMoveDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileMoveDetails, but was %@.", [self tagName]];
  }
  return _fileMoveDetails;
}

- (DBTEAMLOGFilePermanentlyDeleteDetails *)filePermanentlyDeleteDetails {
  if (![self isFilePermanentlyDeleteDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails, but was %@.", [self tagName]];
  }
  return _filePermanentlyDeleteDetails;
}

- (DBTEAMLOGFilePreviewDetails *)filePreviewDetails {
  if (![self isFilePreviewDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFilePreviewDetails, but was %@.", [self tagName]];
  }
  return _filePreviewDetails;
}

- (DBTEAMLOGFileRenameDetails *)fileRenameDetails {
  if (![self isFileRenameDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRenameDetails, but was %@.", [self tagName]];
  }
  return _fileRenameDetails;
}

- (DBTEAMLOGFileRestoreDetails *)fileRestoreDetails {
  if (![self isFileRestoreDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRestoreDetails, but was %@.", [self tagName]];
  }
  return _fileRestoreDetails;
}

- (DBTEAMLOGFileRevertDetails *)fileRevertDetails {
  if (![self isFileRevertDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRevertDetails, but was %@.", [self tagName]];
  }
  return _fileRevertDetails;
}

- (DBTEAMLOGFileRollbackChangesDetails *)fileRollbackChangesDetails {
  if (![self isFileRollbackChangesDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRollbackChangesDetails, but was %@.", [self tagName]];
  }
  return _fileRollbackChangesDetails;
}

- (DBTEAMLOGFileSaveCopyReferenceDetails *)fileSaveCopyReferenceDetails {
  if (![self isFileSaveCopyReferenceDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails, but was %@.", [self tagName]];
  }
  return _fileSaveCopyReferenceDetails;
}

- (DBTEAMLOGFileRequestAddDeadlineDetails *)fileRequestAddDeadlineDetails {
  if (![self isFileRequestAddDeadlineDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestAddDeadlineDetails, but was %@.",
                       [self tagName]];
  }
  return _fileRequestAddDeadlineDetails;
}

- (DBTEAMLOGFileRequestChangeFolderDetails *)fileRequestChangeFolderDetails {
  if (![self isFileRequestChangeFolderDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestChangeFolderDetails, but was %@.",
                       [self tagName]];
  }
  return _fileRequestChangeFolderDetails;
}

- (DBTEAMLOGFileRequestChangeTitleDetails *)fileRequestChangeTitleDetails {
  if (![self isFileRequestChangeTitleDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestChangeTitleDetails, but was %@.",
                       [self tagName]];
  }
  return _fileRequestChangeTitleDetails;
}

- (DBTEAMLOGFileRequestCloseDetails *)fileRequestCloseDetails {
  if (![self isFileRequestCloseDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestCloseDetails, but was %@.", [self tagName]];
  }
  return _fileRequestCloseDetails;
}

- (DBTEAMLOGFileRequestCreateDetails *)fileRequestCreateDetails {
  if (![self isFileRequestCreateDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestCreateDetails, but was %@.", [self tagName]];
  }
  return _fileRequestCreateDetails;
}

- (DBTEAMLOGFileRequestReceiveFileDetails *)fileRequestReceiveFileDetails {
  if (![self isFileRequestReceiveFileDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestReceiveFileDetails, but was %@.",
                       [self tagName]];
  }
  return _fileRequestReceiveFileDetails;
}

- (DBTEAMLOGFileRequestRemoveDeadlineDetails *)fileRequestRemoveDeadlineDetails {
  if (![self isFileRequestRemoveDeadlineDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestRemoveDeadlineDetails, but was %@.",
                       [self tagName]];
  }
  return _fileRequestRemoveDeadlineDetails;
}

- (DBTEAMLOGFileRequestSendDetails *)fileRequestSendDetails {
  if (![self isFileRequestSendDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestSendDetails, but was %@.", [self tagName]];
  }
  return _fileRequestSendDetails;
}

- (DBTEAMLOGGroupAddExternalIdDetails *)groupAddExternalIdDetails {
  if (![self isGroupAddExternalIdDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupAddExternalIdDetails, but was %@.", [self tagName]];
  }
  return _groupAddExternalIdDetails;
}

- (DBTEAMLOGGroupAddMemberDetails *)groupAddMemberDetails {
  if (![self isGroupAddMemberDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupAddMemberDetails, but was %@.", [self tagName]];
  }
  return _groupAddMemberDetails;
}

- (DBTEAMLOGGroupChangeExternalIdDetails *)groupChangeExternalIdDetails {
  if (![self isGroupChangeExternalIdDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupChangeExternalIdDetails, but was %@.", [self tagName]];
  }
  return _groupChangeExternalIdDetails;
}

- (DBTEAMLOGGroupChangeManagementTypeDetails *)groupChangeManagementTypeDetails {
  if (![self isGroupChangeManagementTypeDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails, but was %@.",
                       [self tagName]];
  }
  return _groupChangeManagementTypeDetails;
}

- (DBTEAMLOGGroupChangeMemberRoleDetails *)groupChangeMemberRoleDetails {
  if (![self isGroupChangeMemberRoleDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails, but was %@.", [self tagName]];
  }
  return _groupChangeMemberRoleDetails;
}

- (DBTEAMLOGGroupCreateDetails *)groupCreateDetails {
  if (![self isGroupCreateDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupCreateDetails, but was %@.", [self tagName]];
  }
  return _groupCreateDetails;
}

- (DBTEAMLOGGroupDeleteDetails *)groupDeleteDetails {
  if (![self isGroupDeleteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupDeleteDetails, but was %@.", [self tagName]];
  }
  return _groupDeleteDetails;
}

- (DBTEAMLOGGroupDescriptionUpdatedDetails *)groupDescriptionUpdatedDetails {
  if (![self isGroupDescriptionUpdatedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails, but was %@.",
                       [self tagName]];
  }
  return _groupDescriptionUpdatedDetails;
}

- (DBTEAMLOGGroupJoinPolicyUpdatedDetails *)groupJoinPolicyUpdatedDetails {
  if (![self isGroupJoinPolicyUpdatedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails, but was %@.",
                       [self tagName]];
  }
  return _groupJoinPolicyUpdatedDetails;
}

- (DBTEAMLOGGroupMovedDetails *)groupMovedDetails {
  if (![self isGroupMovedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupMovedDetails, but was %@.", [self tagName]];
  }
  return _groupMovedDetails;
}

- (DBTEAMLOGGroupRemoveExternalIdDetails *)groupRemoveExternalIdDetails {
  if (![self isGroupRemoveExternalIdDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails, but was %@.", [self tagName]];
  }
  return _groupRemoveExternalIdDetails;
}

- (DBTEAMLOGGroupRemoveMemberDetails *)groupRemoveMemberDetails {
  if (![self isGroupRemoveMemberDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupRemoveMemberDetails, but was %@.", [self tagName]];
  }
  return _groupRemoveMemberDetails;
}

- (DBTEAMLOGGroupRenameDetails *)groupRenameDetails {
  if (![self isGroupRenameDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupRenameDetails, but was %@.", [self tagName]];
  }
  return _groupRenameDetails;
}

- (DBTEAMLOGEmmLoginSuccessDetails *)emmLoginSuccessDetails {
  if (![self isEmmLoginSuccessDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmLoginSuccessDetails, but was %@.", [self tagName]];
  }
  return _emmLoginSuccessDetails;
}

- (DBTEAMLOGLogoutDetails *)logoutDetails {
  if (![self isLogoutDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsLogoutDetails, but was %@.", [self tagName]];
  }
  return _logoutDetails;
}

- (DBTEAMLOGPasswordLoginFailDetails *)passwordLoginFailDetails {
  if (![self isPasswordLoginFailDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPasswordLoginFailDetails, but was %@.", [self tagName]];
  }
  return _passwordLoginFailDetails;
}

- (DBTEAMLOGPasswordLoginSuccessDetails *)passwordLoginSuccessDetails {
  if (![self isPasswordLoginSuccessDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPasswordLoginSuccessDetails, but was %@.", [self tagName]];
  }
  return _passwordLoginSuccessDetails;
}

- (DBTEAMLOGResellerSupportSessionEndDetails *)resellerSupportSessionEndDetails {
  if (![self isResellerSupportSessionEndDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsResellerSupportSessionEndDetails, but was %@.",
                       [self tagName]];
  }
  return _resellerSupportSessionEndDetails;
}

- (DBTEAMLOGResellerSupportSessionStartDetails *)resellerSupportSessionStartDetails {
  if (![self isResellerSupportSessionStartDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsResellerSupportSessionStartDetails, but was %@.",
                       [self tagName]];
  }
  return _resellerSupportSessionStartDetails;
}

- (DBTEAMLOGSignInAsSessionEndDetails *)signInAsSessionEndDetails {
  if (![self isSignInAsSessionEndDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSignInAsSessionEndDetails, but was %@.", [self tagName]];
  }
  return _signInAsSessionEndDetails;
}

- (DBTEAMLOGSignInAsSessionStartDetails *)signInAsSessionStartDetails {
  if (![self isSignInAsSessionStartDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSignInAsSessionStartDetails, but was %@.", [self tagName]];
  }
  return _signInAsSessionStartDetails;
}

- (DBTEAMLOGSsoLoginFailDetails *)ssoLoginFailDetails {
  if (![self isSsoLoginFailDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoLoginFailDetails, but was %@.", [self tagName]];
  }
  return _ssoLoginFailDetails;
}

- (DBTEAMLOGMemberAddNameDetails *)memberAddNameDetails {
  if (![self isMemberAddNameDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberAddNameDetails, but was %@.", [self tagName]];
  }
  return _memberAddNameDetails;
}

- (DBTEAMLOGMemberChangeEmailDetails *)memberChangeEmailDetails {
  if (![self isMemberChangeEmailDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberChangeEmailDetails, but was %@.", [self tagName]];
  }
  return _memberChangeEmailDetails;
}

- (DBTEAMLOGMemberChangeNameDetails *)memberChangeNameDetails {
  if (![self isMemberChangeNameDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberChangeNameDetails, but was %@.", [self tagName]];
  }
  return _memberChangeNameDetails;
}

- (DBTEAMLOGMemberChangeRoleDetails *)memberChangeRoleDetails {
  if (![self isMemberChangeRoleDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberChangeRoleDetails, but was %@.", [self tagName]];
  }
  return _memberChangeRoleDetails;
}

- (DBTEAMLOGMemberInviteDetails *)memberInviteDetails {
  if (![self isMemberInviteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberInviteDetails, but was %@.", [self tagName]];
  }
  return _memberInviteDetails;
}

- (DBTEAMLOGMemberJoinDetails *)memberJoinDetails {
  if (![self isMemberJoinDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberJoinDetails, but was %@.", [self tagName]];
  }
  return _memberJoinDetails;
}

- (DBTEAMLOGMemberLeaveDetails *)memberLeaveDetails {
  if (![self isMemberLeaveDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberLeaveDetails, but was %@.", [self tagName]];
  }
  return _memberLeaveDetails;
}

- (DBTEAMLOGMemberRecoverDetails *)memberRecoverDetails {
  if (![self isMemberRecoverDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberRecoverDetails, but was %@.", [self tagName]];
  }
  return _memberRecoverDetails;
}

- (DBTEAMLOGMemberSuggestDetails *)memberSuggestDetails {
  if (![self isMemberSuggestDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSuggestDetails, but was %@.", [self tagName]];
  }
  return _memberSuggestDetails;
}

- (DBTEAMLOGMemberSuspendDetails *)memberSuspendDetails {
  if (![self isMemberSuspendDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSuspendDetails, but was %@.", [self tagName]];
  }
  return _memberSuspendDetails;
}

- (DBTEAMLOGMemberUnsuspendDetails *)memberUnsuspendDetails {
  if (![self isMemberUnsuspendDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberUnsuspendDetails, but was %@.", [self tagName]];
  }
  return _memberUnsuspendDetails;
}

- (DBTEAMLOGPaperContentAddMemberDetails *)paperContentAddMemberDetails {
  if (![self isPaperContentAddMemberDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentAddMemberDetails, but was %@.", [self tagName]];
  }
  return _paperContentAddMemberDetails;
}

- (DBTEAMLOGPaperContentAddToFolderDetails *)paperContentAddToFolderDetails {
  if (![self isPaperContentAddToFolderDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentAddToFolderDetails, but was %@.",
                       [self tagName]];
  }
  return _paperContentAddToFolderDetails;
}

- (DBTEAMLOGPaperContentArchiveDetails *)paperContentArchiveDetails {
  if (![self isPaperContentArchiveDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentArchiveDetails, but was %@.", [self tagName]];
  }
  return _paperContentArchiveDetails;
}

- (DBTEAMLOGPaperContentChangeSubscriptionDetails *)paperContentChangeSubscriptionDetails {
  if (![self isPaperContentChangeSubscriptionDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentChangeSubscriptionDetails, but was %@.",
                       [self tagName]];
  }
  return _paperContentChangeSubscriptionDetails;
}

- (DBTEAMLOGPaperContentCreateDetails *)paperContentCreateDetails {
  if (![self isPaperContentCreateDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentCreateDetails, but was %@.", [self tagName]];
  }
  return _paperContentCreateDetails;
}

- (DBTEAMLOGPaperContentPermanentlyDeleteDetails *)paperContentPermanentlyDeleteDetails {
  if (![self isPaperContentPermanentlyDeleteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails, but was %@.",
                       [self tagName]];
  }
  return _paperContentPermanentlyDeleteDetails;
}

- (DBTEAMLOGPaperContentRemoveFromFolderDetails *)paperContentRemoveFromFolderDetails {
  if (![self isPaperContentRemoveFromFolderDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails, but was %@.",
                       [self tagName]];
  }
  return _paperContentRemoveFromFolderDetails;
}

- (DBTEAMLOGPaperContentRemoveMemberDetails *)paperContentRemoveMemberDetails {
  if (![self isPaperContentRemoveMemberDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails, but was %@.",
                       [self tagName]];
  }
  return _paperContentRemoveMemberDetails;
}

- (DBTEAMLOGPaperContentRenameDetails *)paperContentRenameDetails {
  if (![self isPaperContentRenameDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentRenameDetails, but was %@.", [self tagName]];
  }
  return _paperContentRenameDetails;
}

- (DBTEAMLOGPaperContentRestoreDetails *)paperContentRestoreDetails {
  if (![self isPaperContentRestoreDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentRestoreDetails, but was %@.", [self tagName]];
  }
  return _paperContentRestoreDetails;
}

- (DBTEAMLOGPaperDocAddCommentDetails *)paperDocAddCommentDetails {
  if (![self isPaperDocAddCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocAddCommentDetails, but was %@.", [self tagName]];
  }
  return _paperDocAddCommentDetails;
}

- (DBTEAMLOGPaperDocChangeMemberRoleDetails *)paperDocChangeMemberRoleDetails {
  if (![self isPaperDocChangeMemberRoleDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails, but was %@.",
                       [self tagName]];
  }
  return _paperDocChangeMemberRoleDetails;
}

- (DBTEAMLOGPaperDocChangeSharingPolicyDetails *)paperDocChangeSharingPolicyDetails {
  if (![self isPaperDocChangeSharingPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _paperDocChangeSharingPolicyDetails;
}

- (DBTEAMLOGPaperDocDeletedDetails *)paperDocDeletedDetails {
  if (![self isPaperDocDeletedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocDeletedDetails, but was %@.", [self tagName]];
  }
  return _paperDocDeletedDetails;
}

- (DBTEAMLOGPaperDocDeleteCommentDetails *)paperDocDeleteCommentDetails {
  if (![self isPaperDocDeleteCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails, but was %@.", [self tagName]];
  }
  return _paperDocDeleteCommentDetails;
}

- (DBTEAMLOGPaperDocDownloadDetails *)paperDocDownloadDetails {
  if (![self isPaperDocDownloadDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocDownloadDetails, but was %@.", [self tagName]];
  }
  return _paperDocDownloadDetails;
}

- (DBTEAMLOGPaperDocEditDetails *)paperDocEditDetails {
  if (![self isPaperDocEditDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocEditDetails, but was %@.", [self tagName]];
  }
  return _paperDocEditDetails;
}

- (DBTEAMLOGPaperDocEditCommentDetails *)paperDocEditCommentDetails {
  if (![self isPaperDocEditCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocEditCommentDetails, but was %@.", [self tagName]];
  }
  return _paperDocEditCommentDetails;
}

- (DBTEAMLOGPaperDocFollowedDetails *)paperDocFollowedDetails {
  if (![self isPaperDocFollowedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocFollowedDetails, but was %@.", [self tagName]];
  }
  return _paperDocFollowedDetails;
}

- (DBTEAMLOGPaperDocMentionDetails *)paperDocMentionDetails {
  if (![self isPaperDocMentionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocMentionDetails, but was %@.", [self tagName]];
  }
  return _paperDocMentionDetails;
}

- (DBTEAMLOGPaperDocRequestAccessDetails *)paperDocRequestAccessDetails {
  if (![self isPaperDocRequestAccessDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocRequestAccessDetails, but was %@.", [self tagName]];
  }
  return _paperDocRequestAccessDetails;
}

- (DBTEAMLOGPaperDocResolveCommentDetails *)paperDocResolveCommentDetails {
  if (![self isPaperDocResolveCommentDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocResolveCommentDetails, but was %@.",
                       [self tagName]];
  }
  return _paperDocResolveCommentDetails;
}

- (DBTEAMLOGPaperDocRevertDetails *)paperDocRevertDetails {
  if (![self isPaperDocRevertDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocRevertDetails, but was %@.", [self tagName]];
  }
  return _paperDocRevertDetails;
}

- (DBTEAMLOGPaperDocSlackShareDetails *)paperDocSlackShareDetails {
  if (![self isPaperDocSlackShareDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocSlackShareDetails, but was %@.", [self tagName]];
  }
  return _paperDocSlackShareDetails;
}

- (DBTEAMLOGPaperDocTeamInviteDetails *)paperDocTeamInviteDetails {
  if (![self isPaperDocTeamInviteDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocTeamInviteDetails, but was %@.", [self tagName]];
  }
  return _paperDocTeamInviteDetails;
}

- (DBTEAMLOGPaperDocUnresolveCommentDetails *)paperDocUnresolveCommentDetails {
  if (![self isPaperDocUnresolveCommentDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails, but was %@.",
                       [self tagName]];
  }
  return _paperDocUnresolveCommentDetails;
}

- (DBTEAMLOGPaperDocViewDetails *)paperDocViewDetails {
  if (![self isPaperDocViewDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocViewDetails, but was %@.", [self tagName]];
  }
  return _paperDocViewDetails;
}

- (DBTEAMLOGPaperFolderDeletedDetails *)paperFolderDeletedDetails {
  if (![self isPaperFolderDeletedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperFolderDeletedDetails, but was %@.", [self tagName]];
  }
  return _paperFolderDeletedDetails;
}

- (DBTEAMLOGPaperFolderFollowedDetails *)paperFolderFollowedDetails {
  if (![self isPaperFolderFollowedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperFolderFollowedDetails, but was %@.", [self tagName]];
  }
  return _paperFolderFollowedDetails;
}

- (DBTEAMLOGPaperFolderTeamInviteDetails *)paperFolderTeamInviteDetails {
  if (![self isPaperFolderTeamInviteDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails, but was %@.", [self tagName]];
  }
  return _paperFolderTeamInviteDetails;
}

- (DBTEAMLOGPasswordChangeDetails *)passwordChangeDetails {
  if (![self isPasswordChangeDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPasswordChangeDetails, but was %@.", [self tagName]];
  }
  return _passwordChangeDetails;
}

- (DBTEAMLOGPasswordResetDetails *)passwordResetDetails {
  if (![self isPasswordResetDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPasswordResetDetails, but was %@.", [self tagName]];
  }
  return _passwordResetDetails;
}

- (DBTEAMLOGPasswordResetAllDetails *)passwordResetAllDetails {
  if (![self isPasswordResetAllDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPasswordResetAllDetails, but was %@.", [self tagName]];
  }
  return _passwordResetAllDetails;
}

- (DBTEAMLOGEmmCreateExceptionsReportDetails *)emmCreateExceptionsReportDetails {
  if (![self isEmmCreateExceptionsReportDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails, but was %@.",
                       [self tagName]];
  }
  return _emmCreateExceptionsReportDetails;
}

- (DBTEAMLOGEmmCreateUsageReportDetails *)emmCreateUsageReportDetails {
  if (![self isEmmCreateUsageReportDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmCreateUsageReportDetails, but was %@.", [self tagName]];
  }
  return _emmCreateUsageReportDetails;
}

- (DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails *)smartSyncCreateAdminPrivilegeReportDetails {
  if (![self isSmartSyncCreateAdminPrivilegeReportDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails, but was %@.",
               [self tagName]];
  }
  return _smartSyncCreateAdminPrivilegeReportDetails;
}

- (DBTEAMLOGTeamActivityCreateReportDetails *)teamActivityCreateReportDetails {
  if (![self isTeamActivityCreateReportDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamActivityCreateReportDetails, but was %@.",
                       [self tagName]];
  }
  return _teamActivityCreateReportDetails;
}

- (DBTEAMLOGCollectionShareDetails *)collectionShareDetails {
  if (![self isCollectionShareDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsCollectionShareDetails, but was %@.", [self tagName]];
  }
  return _collectionShareDetails;
}

- (DBTEAMLOGFileAddCommentDetails *)fileAddCommentDetails {
  if (![self isFileAddCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileAddCommentDetails, but was %@.", [self tagName]];
  }
  return _fileAddCommentDetails;
}

- (DBTEAMLOGFileLikeCommentDetails *)fileLikeCommentDetails {
  if (![self isFileLikeCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileLikeCommentDetails, but was %@.", [self tagName]];
  }
  return _fileLikeCommentDetails;
}

- (DBTEAMLOGFileUnlikeCommentDetails *)fileUnlikeCommentDetails {
  if (![self isFileUnlikeCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileUnlikeCommentDetails, but was %@.", [self tagName]];
  }
  return _fileUnlikeCommentDetails;
}

- (DBTEAMLOGNoteAclInviteOnlyDetails *)noteAclInviteOnlyDetails {
  if (![self isNoteAclInviteOnlyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails, but was %@.", [self tagName]];
  }
  return _noteAclInviteOnlyDetails;
}

- (DBTEAMLOGNoteAclLinkDetails *)noteAclLinkDetails {
  if (![self isNoteAclLinkDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsNoteAclLinkDetails, but was %@.", [self tagName]];
  }
  return _noteAclLinkDetails;
}

- (DBTEAMLOGNoteAclTeamLinkDetails *)noteAclTeamLinkDetails {
  if (![self isNoteAclTeamLinkDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsNoteAclTeamLinkDetails, but was %@.", [self tagName]];
  }
  return _noteAclTeamLinkDetails;
}

- (DBTEAMLOGNoteSharedDetails *)noteSharedDetails {
  if (![self isNoteSharedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsNoteSharedDetails, but was %@.", [self tagName]];
  }
  return _noteSharedDetails;
}

- (DBTEAMLOGNoteShareReceiveDetails *)noteShareReceiveDetails {
  if (![self isNoteShareReceiveDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsNoteShareReceiveDetails, but was %@.", [self tagName]];
  }
  return _noteShareReceiveDetails;
}

- (DBTEAMLOGOpenNoteSharedDetails *)openNoteSharedDetails {
  if (![self isOpenNoteSharedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsOpenNoteSharedDetails, but was %@.", [self tagName]];
  }
  return _openNoteSharedDetails;
}

- (DBTEAMLOGSfAddGroupDetails *)sfAddGroupDetails {
  if (![self isSfAddGroupDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfAddGroupDetails, but was %@.", [self tagName]];
  }
  return _sfAddGroupDetails;
}

- (DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails *)sfAllowNonMembersToViewSharedLinksDetails {
  if (![self isSfAllowNonMembersToViewSharedLinksDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails, but was %@.",
               [self tagName]];
  }
  return _sfAllowNonMembersToViewSharedLinksDetails;
}

- (DBTEAMLOGSfInviteGroupDetails *)sfInviteGroupDetails {
  if (![self isSfInviteGroupDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfInviteGroupDetails, but was %@.", [self tagName]];
  }
  return _sfInviteGroupDetails;
}

- (DBTEAMLOGSfNestDetails *)sfNestDetails {
  if (![self isSfNestDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfNestDetails, but was %@.", [self tagName]];
  }
  return _sfNestDetails;
}

- (DBTEAMLOGSfTeamDeclineDetails *)sfTeamDeclineDetails {
  if (![self isSfTeamDeclineDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamDeclineDetails, but was %@.", [self tagName]];
  }
  return _sfTeamDeclineDetails;
}

- (DBTEAMLOGSfTeamGrantAccessDetails *)sfTeamGrantAccessDetails {
  if (![self isSfTeamGrantAccessDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamGrantAccessDetails, but was %@.", [self tagName]];
  }
  return _sfTeamGrantAccessDetails;
}

- (DBTEAMLOGSfTeamInviteDetails *)sfTeamInviteDetails {
  if (![self isSfTeamInviteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamInviteDetails, but was %@.", [self tagName]];
  }
  return _sfTeamInviteDetails;
}

- (DBTEAMLOGSfTeamInviteChangeRoleDetails *)sfTeamInviteChangeRoleDetails {
  if (![self isSfTeamInviteChangeRoleDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails, but was %@.",
                       [self tagName]];
  }
  return _sfTeamInviteChangeRoleDetails;
}

- (DBTEAMLOGSfTeamJoinDetails *)sfTeamJoinDetails {
  if (![self isSfTeamJoinDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamJoinDetails, but was %@.", [self tagName]];
  }
  return _sfTeamJoinDetails;
}

- (DBTEAMLOGSfTeamJoinFromOobLinkDetails *)sfTeamJoinFromOobLinkDetails {
  if (![self isSfTeamJoinFromOobLinkDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails, but was %@.", [self tagName]];
  }
  return _sfTeamJoinFromOobLinkDetails;
}

- (DBTEAMLOGSfTeamUninviteDetails *)sfTeamUninviteDetails {
  if (![self isSfTeamUninviteDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamUninviteDetails, but was %@.", [self tagName]];
  }
  return _sfTeamUninviteDetails;
}

- (DBTEAMLOGSharedContentAddInviteesDetails *)sharedContentAddInviteesDetails {
  if (![self isSharedContentAddInviteesDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentAddInviteesDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentAddInviteesDetails;
}

- (DBTEAMLOGSharedContentAddLinkExpiryDetails *)sharedContentAddLinkExpiryDetails {
  if (![self isSharedContentAddLinkExpiryDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentAddLinkExpiryDetails;
}

- (DBTEAMLOGSharedContentAddLinkPasswordDetails *)sharedContentAddLinkPasswordDetails {
  if (![self isSharedContentAddLinkPasswordDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentAddLinkPasswordDetails;
}

- (DBTEAMLOGSharedContentAddMemberDetails *)sharedContentAddMemberDetails {
  if (![self isSharedContentAddMemberDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentAddMemberDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentAddMemberDetails;
}

- (DBTEAMLOGSharedContentChangeDownloadsPolicyDetails *)sharedContentChangeDownloadsPolicyDetails {
  if (![self isSharedContentChangeDownloadsPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentChangeDownloadsPolicyDetails;
}

- (DBTEAMLOGSharedContentChangeInviteeRoleDetails *)sharedContentChangeInviteeRoleDetails {
  if (![self isSharedContentChangeInviteeRoleDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentChangeInviteeRoleDetails;
}

- (DBTEAMLOGSharedContentChangeLinkAudienceDetails *)sharedContentChangeLinkAudienceDetails {
  if (![self isSharedContentChangeLinkAudienceDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentChangeLinkAudienceDetails;
}

- (DBTEAMLOGSharedContentChangeLinkExpiryDetails *)sharedContentChangeLinkExpiryDetails {
  if (![self isSharedContentChangeLinkExpiryDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentChangeLinkExpiryDetails;
}

- (DBTEAMLOGSharedContentChangeLinkPasswordDetails *)sharedContentChangeLinkPasswordDetails {
  if (![self isSharedContentChangeLinkPasswordDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentChangeLinkPasswordDetails;
}

- (DBTEAMLOGSharedContentChangeMemberRoleDetails *)sharedContentChangeMemberRoleDetails {
  if (![self isSharedContentChangeMemberRoleDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentChangeMemberRoleDetails;
}

- (DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails *)sharedContentChangeViewerInfoPolicyDetails {
  if (![self isSharedContentChangeViewerInfoPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentChangeViewerInfoPolicyDetails;
}

- (DBTEAMLOGSharedContentClaimInvitationDetails *)sharedContentClaimInvitationDetails {
  if (![self isSharedContentClaimInvitationDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentClaimInvitationDetails;
}

- (DBTEAMLOGSharedContentCopyDetails *)sharedContentCopyDetails {
  if (![self isSharedContentCopyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentCopyDetails, but was %@.", [self tagName]];
  }
  return _sharedContentCopyDetails;
}

- (DBTEAMLOGSharedContentDownloadDetails *)sharedContentDownloadDetails {
  if (![self isSharedContentDownloadDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentDownloadDetails, but was %@.", [self tagName]];
  }
  return _sharedContentDownloadDetails;
}

- (DBTEAMLOGSharedContentRelinquishMembershipDetails *)sharedContentRelinquishMembershipDetails {
  if (![self isSharedContentRelinquishMembershipDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentRelinquishMembershipDetails;
}

- (DBTEAMLOGSharedContentRemoveInviteeDetails *)sharedContentRemoveInviteeDetails {
  if (![self isSharedContentRemoveInviteeDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRemoveInviteeDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentRemoveInviteeDetails;
}

- (DBTEAMLOGSharedContentRemoveLinkExpiryDetails *)sharedContentRemoveLinkExpiryDetails {
  if (![self isSharedContentRemoveLinkExpiryDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentRemoveLinkExpiryDetails;
}

- (DBTEAMLOGSharedContentRemoveLinkPasswordDetails *)sharedContentRemoveLinkPasswordDetails {
  if (![self isSharedContentRemoveLinkPasswordDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentRemoveLinkPasswordDetails;
}

- (DBTEAMLOGSharedContentRemoveMemberDetails *)sharedContentRemoveMemberDetails {
  if (![self isSharedContentRemoveMemberDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentRemoveMemberDetails;
}

- (DBTEAMLOGSharedContentRequestAccessDetails *)sharedContentRequestAccessDetails {
  if (![self isSharedContentRequestAccessDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRequestAccessDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentRequestAccessDetails;
}

- (DBTEAMLOGSharedContentUnshareDetails *)sharedContentUnshareDetails {
  if (![self isSharedContentUnshareDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentUnshareDetails, but was %@.", [self tagName]];
  }
  return _sharedContentUnshareDetails;
}

- (DBTEAMLOGSharedContentViewDetails *)sharedContentViewDetails {
  if (![self isSharedContentViewDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentViewDetails, but was %@.", [self tagName]];
  }
  return _sharedContentViewDetails;
}

- (DBTEAMLOGSharedFolderChangeConfidentialityDetails *)sharedFolderChangeConfidentialityDetails {
  if (![self isSharedFolderChangeConfidentialityDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderChangeConfidentialityDetails, but was %@.",
               [self tagName]];
  }
  return _sharedFolderChangeConfidentialityDetails;
}

- (DBTEAMLOGSharedFolderChangeLinkPolicyDetails *)sharedFolderChangeLinkPolicyDetails {
  if (![self isSharedFolderChangeLinkPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedFolderChangeLinkPolicyDetails;
}

- (DBTEAMLOGSharedFolderChangeMemberManagementPolicyDetails *)sharedFolderChangeMemberManagementPolicyDetails {
  if (![self isSharedFolderChangeMemberManagementPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderChangeMemberManagementPolicyDetails, "
                       @"but was %@.",
                       [self tagName]];
  }
  return _sharedFolderChangeMemberManagementPolicyDetails;
}

- (DBTEAMLOGSharedFolderChangeMemberPolicyDetails *)sharedFolderChangeMemberPolicyDetails {
  if (![self isSharedFolderChangeMemberPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderChangeMemberPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedFolderChangeMemberPolicyDetails;
}

- (DBTEAMLOGSharedFolderCreateDetails *)sharedFolderCreateDetails {
  if (![self isSharedFolderCreateDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderCreateDetails, but was %@.", [self tagName]];
  }
  return _sharedFolderCreateDetails;
}

- (DBTEAMLOGSharedFolderMountDetails *)sharedFolderMountDetails {
  if (![self isSharedFolderMountDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderMountDetails, but was %@.", [self tagName]];
  }
  return _sharedFolderMountDetails;
}

- (DBTEAMLOGSharedFolderTransferOwnershipDetails *)sharedFolderTransferOwnershipDetails {
  if (![self isSharedFolderTransferOwnershipDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedFolderTransferOwnershipDetails;
}

- (DBTEAMLOGSharedFolderUnmountDetails *)sharedFolderUnmountDetails {
  if (![self isSharedFolderUnmountDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderUnmountDetails, but was %@.", [self tagName]];
  }
  return _sharedFolderUnmountDetails;
}

- (DBTEAMLOGSharedNoteOpenedDetails *)sharedNoteOpenedDetails {
  if (![self isSharedNoteOpenedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedNoteOpenedDetails, but was %@.", [self tagName]];
  }
  return _sharedNoteOpenedDetails;
}

- (DBTEAMLOGShmodelAppCreateDetails *)shmodelAppCreateDetails {
  if (![self isShmodelAppCreateDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelAppCreateDetails, but was %@.", [self tagName]];
  }
  return _shmodelAppCreateDetails;
}

- (DBTEAMLOGShmodelCreateDetails *)shmodelCreateDetails {
  if (![self isShmodelCreateDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelCreateDetails, but was %@.", [self tagName]];
  }
  return _shmodelCreateDetails;
}

- (DBTEAMLOGShmodelDisableDetails *)shmodelDisableDetails {
  if (![self isShmodelDisableDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelDisableDetails, but was %@.", [self tagName]];
  }
  return _shmodelDisableDetails;
}

- (DBTEAMLOGShmodelFbShareDetails *)shmodelFbShareDetails {
  if (![self isShmodelFbShareDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelFbShareDetails, but was %@.", [self tagName]];
  }
  return _shmodelFbShareDetails;
}

- (DBTEAMLOGShmodelGroupShareDetails *)shmodelGroupShareDetails {
  if (![self isShmodelGroupShareDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelGroupShareDetails, but was %@.", [self tagName]];
  }
  return _shmodelGroupShareDetails;
}

- (DBTEAMLOGShmodelRemoveExpirationDetails *)shmodelRemoveExpirationDetails {
  if (![self isShmodelRemoveExpirationDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelRemoveExpirationDetails, but was %@.",
                       [self tagName]];
  }
  return _shmodelRemoveExpirationDetails;
}

- (DBTEAMLOGShmodelSetExpirationDetails *)shmodelSetExpirationDetails {
  if (![self isShmodelSetExpirationDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelSetExpirationDetails, but was %@.", [self tagName]];
  }
  return _shmodelSetExpirationDetails;
}

- (DBTEAMLOGShmodelTeamCopyDetails *)shmodelTeamCopyDetails {
  if (![self isShmodelTeamCopyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelTeamCopyDetails, but was %@.", [self tagName]];
  }
  return _shmodelTeamCopyDetails;
}

- (DBTEAMLOGShmodelTeamDownloadDetails *)shmodelTeamDownloadDetails {
  if (![self isShmodelTeamDownloadDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelTeamDownloadDetails, but was %@.", [self tagName]];
  }
  return _shmodelTeamDownloadDetails;
}

- (DBTEAMLOGShmodelTeamShareDetails *)shmodelTeamShareDetails {
  if (![self isShmodelTeamShareDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelTeamShareDetails, but was %@.", [self tagName]];
  }
  return _shmodelTeamShareDetails;
}

- (DBTEAMLOGShmodelTeamViewDetails *)shmodelTeamViewDetails {
  if (![self isShmodelTeamViewDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelTeamViewDetails, but was %@.", [self tagName]];
  }
  return _shmodelTeamViewDetails;
}

- (DBTEAMLOGShmodelVisibilityPasswordDetails *)shmodelVisibilityPasswordDetails {
  if (![self isShmodelVisibilityPasswordDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelVisibilityPasswordDetails, but was %@.",
                       [self tagName]];
  }
  return _shmodelVisibilityPasswordDetails;
}

- (DBTEAMLOGShmodelVisibilityPublicDetails *)shmodelVisibilityPublicDetails {
  if (![self isShmodelVisibilityPublicDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelVisibilityPublicDetails, but was %@.",
                       [self tagName]];
  }
  return _shmodelVisibilityPublicDetails;
}

- (DBTEAMLOGShmodelVisibilityTeamOnlyDetails *)shmodelVisibilityTeamOnlyDetails {
  if (![self isShmodelVisibilityTeamOnlyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelVisibilityTeamOnlyDetails, but was %@.",
                       [self tagName]];
  }
  return _shmodelVisibilityTeamOnlyDetails;
}

- (DBTEAMLOGRemoveLogoutUrlDetails *)removeLogoutUrlDetails {
  if (![self isRemoveLogoutUrlDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsRemoveLogoutUrlDetails, but was %@.", [self tagName]];
  }
  return _removeLogoutUrlDetails;
}

- (DBTEAMLOGRemoveSsoUrlDetails *)removeSsoUrlDetails {
  if (![self isRemoveSsoUrlDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsRemoveSsoUrlDetails, but was %@.", [self tagName]];
  }
  return _removeSsoUrlDetails;
}

- (DBTEAMLOGSsoChangeCertDetails *)ssoChangeCertDetails {
  if (![self isSsoChangeCertDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoChangeCertDetails, but was %@.", [self tagName]];
  }
  return _ssoChangeCertDetails;
}

- (DBTEAMLOGSsoChangeLoginUrlDetails *)ssoChangeLoginUrlDetails {
  if (![self isSsoChangeLoginUrlDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails, but was %@.", [self tagName]];
  }
  return _ssoChangeLoginUrlDetails;
}

- (DBTEAMLOGSsoChangeLogoutUrlDetails *)ssoChangeLogoutUrlDetails {
  if (![self isSsoChangeLogoutUrlDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails, but was %@.", [self tagName]];
  }
  return _ssoChangeLogoutUrlDetails;
}

- (DBTEAMLOGSsoChangeSamlIdentityModeDetails *)ssoChangeSamlIdentityModeDetails {
  if (![self isSsoChangeSamlIdentityModeDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails, but was %@.",
                       [self tagName]];
  }
  return _ssoChangeSamlIdentityModeDetails;
}

- (DBTEAMLOGTeamFolderChangeStatusDetails *)teamFolderChangeStatusDetails {
  if (![self isTeamFolderChangeStatusDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails, but was %@.",
                       [self tagName]];
  }
  return _teamFolderChangeStatusDetails;
}

- (DBTEAMLOGTeamFolderCreateDetails *)teamFolderCreateDetails {
  if (![self isTeamFolderCreateDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamFolderCreateDetails, but was %@.", [self tagName]];
  }
  return _teamFolderCreateDetails;
}

- (DBTEAMLOGTeamFolderDowngradeDetails *)teamFolderDowngradeDetails {
  if (![self isTeamFolderDowngradeDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamFolderDowngradeDetails, but was %@.", [self tagName]];
  }
  return _teamFolderDowngradeDetails;
}

- (DBTEAMLOGTeamFolderPermanentlyDeleteDetails *)teamFolderPermanentlyDeleteDetails {
  if (![self isTeamFolderPermanentlyDeleteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails, but was %@.",
                       [self tagName]];
  }
  return _teamFolderPermanentlyDeleteDetails;
}

- (DBTEAMLOGTeamFolderRenameDetails *)teamFolderRenameDetails {
  if (![self isTeamFolderRenameDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamFolderRenameDetails, but was %@.", [self tagName]];
  }
  return _teamFolderRenameDetails;
}

- (DBTEAMLOGAccountCaptureChangePolicyDetails *)accountCaptureChangePolicyDetails {
  if (![self isAccountCaptureChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _accountCaptureChangePolicyDetails;
}

- (DBTEAMLOGAllowDownloadDisabledDetails *)allowDownloadDisabledDetails {
  if (![self isAllowDownloadDisabledDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsAllowDownloadDisabledDetails, but was %@.", [self tagName]];
  }
  return _allowDownloadDisabledDetails;
}

- (DBTEAMLOGAllowDownloadEnabledDetails *)allowDownloadEnabledDetails {
  if (![self isAllowDownloadEnabledDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsAllowDownloadEnabledDetails, but was %@.", [self tagName]];
  }
  return _allowDownloadEnabledDetails;
}

- (DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *)dataPlacementRestrictionChangePolicyDetails {
  if (![self isDataPlacementRestrictionChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails, but was %@.",
               [self tagName]];
  }
  return _dataPlacementRestrictionChangePolicyDetails;
}

- (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *)dataPlacementRestrictionSatisfyPolicyDetails {
  if (![self isDataPlacementRestrictionSatisfyPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _dataPlacementRestrictionSatisfyPolicyDetails;
}

- (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *)deviceApprovalsChangeDesktopPolicyDetails {
  if (![self isDeviceApprovalsChangeDesktopPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _deviceApprovalsChangeDesktopPolicyDetails;
}

- (DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *)deviceApprovalsChangeMobilePolicyDetails {
  if (![self isDeviceApprovalsChangeMobilePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails, but was %@.",
               [self tagName]];
  }
  return _deviceApprovalsChangeMobilePolicyDetails;
}

- (DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *)deviceApprovalsChangeOverageActionDetails {
  if (![self isDeviceApprovalsChangeOverageActionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails, but was %@.",
               [self tagName]];
  }
  return _deviceApprovalsChangeOverageActionDetails;
}

- (DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *)deviceApprovalsChangeUnlinkActionDetails {
  if (![self isDeviceApprovalsChangeUnlinkActionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails, but was %@.",
               [self tagName]];
  }
  return _deviceApprovalsChangeUnlinkActionDetails;
}

- (DBTEAMLOGEmmAddExceptionDetails *)emmAddExceptionDetails {
  if (![self isEmmAddExceptionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmAddExceptionDetails, but was %@.", [self tagName]];
  }
  return _emmAddExceptionDetails;
}

- (DBTEAMLOGEmmChangePolicyDetails *)emmChangePolicyDetails {
  if (![self isEmmChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _emmChangePolicyDetails;
}

- (DBTEAMLOGEmmRemoveExceptionDetails *)emmRemoveExceptionDetails {
  if (![self isEmmRemoveExceptionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmRemoveExceptionDetails, but was %@.", [self tagName]];
  }
  return _emmRemoveExceptionDetails;
}

- (DBTEAMLOGExtendedVersionHistoryChangePolicyDetails *)extendedVersionHistoryChangePolicyDetails {
  if (![self isExtendedVersionHistoryChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails, but was %@.",
               [self tagName]];
  }
  return _extendedVersionHistoryChangePolicyDetails;
}

- (DBTEAMLOGFileCommentsChangePolicyDetails *)fileCommentsChangePolicyDetails {
  if (![self isFileCommentsChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _fileCommentsChangePolicyDetails;
}

- (DBTEAMLOGFileRequestsChangePolicyDetails *)fileRequestsChangePolicyDetails {
  if (![self isFileRequestsChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _fileRequestsChangePolicyDetails;
}

- (DBTEAMLOGFileRequestsEmailsEnabledDetails *)fileRequestsEmailsEnabledDetails {
  if (![self isFileRequestsEmailsEnabledDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails, but was %@.",
                       [self tagName]];
  }
  return _fileRequestsEmailsEnabledDetails;
}

- (DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails *)fileRequestsEmailsRestrictedToTeamOnlyDetails {
  if (![self isFileRequestsEmailsRestrictedToTeamOnlyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails, but was %@.",
               [self tagName]];
  }
  return _fileRequestsEmailsRestrictedToTeamOnlyDetails;
}

- (DBTEAMLOGGoogleSsoChangePolicyDetails *)googleSsoChangePolicyDetails {
  if (![self isGoogleSsoChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _googleSsoChangePolicyDetails;
}

- (DBTEAMLOGGroupUserManagementChangePolicyDetails *)groupUserManagementChangePolicyDetails {
  if (![self isGroupUserManagementChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails, but was %@.",
               [self tagName]];
  }
  return _groupUserManagementChangePolicyDetails;
}

- (DBTEAMLOGMemberRequestsChangePolicyDetails *)memberRequestsChangePolicyDetails {
  if (![self isMemberRequestsChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _memberRequestsChangePolicyDetails;
}

- (DBTEAMLOGMemberSpaceLimitsAddExceptionDetails *)memberSpaceLimitsAddExceptionDetails {
  if (![self isMemberSpaceLimitsAddExceptionDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails, but was %@.",
                       [self tagName]];
  }
  return _memberSpaceLimitsAddExceptionDetails;
}

- (DBTEAMLOGMemberSpaceLimitsChangePolicyDetails *)memberSpaceLimitsChangePolicyDetails {
  if (![self isMemberSpaceLimitsChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _memberSpaceLimitsChangePolicyDetails;
}

- (DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails *)memberSpaceLimitsRemoveExceptionDetails {
  if (![self isMemberSpaceLimitsRemoveExceptionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails, but was %@.",
               [self tagName]];
  }
  return _memberSpaceLimitsRemoveExceptionDetails;
}

- (DBTEAMLOGMemberSuggestionsChangePolicyDetails *)memberSuggestionsChangePolicyDetails {
  if (![self isMemberSuggestionsChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _memberSuggestionsChangePolicyDetails;
}

- (DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails *)microsoftOfficeAddinChangePolicyDetails {
  if (![self isMicrosoftOfficeAddinChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails, but was %@.",
               [self tagName]];
  }
  return _microsoftOfficeAddinChangePolicyDetails;
}

- (DBTEAMLOGNetworkControlChangePolicyDetails *)networkControlChangePolicyDetails {
  if (![self isNetworkControlChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _networkControlChangePolicyDetails;
}

- (DBTEAMLOGPaperChangeDeploymentPolicyDetails *)paperChangeDeploymentPolicyDetails {
  if (![self isPaperChangeDeploymentPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _paperChangeDeploymentPolicyDetails;
}

- (DBTEAMLOGPaperChangeMemberPolicyDetails *)paperChangeMemberPolicyDetails {
  if (![self isPaperChangeMemberPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _paperChangeMemberPolicyDetails;
}

- (DBTEAMLOGPaperChangePolicyDetails *)paperChangePolicyDetails {
  if (![self isPaperChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _paperChangePolicyDetails;
}

- (DBTEAMLOGPermanentDeleteChangePolicyDetails *)permanentDeleteChangePolicyDetails {
  if (![self isPermanentDeleteChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _permanentDeleteChangePolicyDetails;
}

- (DBTEAMLOGSharingChangeFolderJoinPolicyDetails *)sharingChangeFolderJoinPolicyDetails {
  if (![self isSharingChangeFolderJoinPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _sharingChangeFolderJoinPolicyDetails;
}

- (DBTEAMLOGSharingChangeLinkPolicyDetails *)sharingChangeLinkPolicyDetails {
  if (![self isSharingChangeLinkPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _sharingChangeLinkPolicyDetails;
}

- (DBTEAMLOGSharingChangeMemberPolicyDetails *)sharingChangeMemberPolicyDetails {
  if (![self isSharingChangeMemberPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _sharingChangeMemberPolicyDetails;
}

- (DBTEAMLOGSmartSyncChangePolicyDetails *)smartSyncChangePolicyDetails {
  if (![self isSmartSyncChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _smartSyncChangePolicyDetails;
}

- (DBTEAMLOGSsoChangePolicyDetails *)ssoChangePolicyDetails {
  if (![self isSsoChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _ssoChangePolicyDetails;
}

- (DBTEAMLOGTfaChangePolicyDetails *)tfaChangePolicyDetails {
  if (![self isTfaChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _tfaChangePolicyDetails;
}

- (DBTEAMLOGTwoAccountChangePolicyDetails *)twoAccountChangePolicyDetails {
  if (![self isTwoAccountChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _twoAccountChangePolicyDetails;
}

- (DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails *)webSessionsChangeFixedLengthPolicyDetails {
  if (![self isWebSessionsChangeFixedLengthPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _webSessionsChangeFixedLengthPolicyDetails;
}

- (DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails *)webSessionsChangeIdleLengthPolicyDetails {
  if (![self isWebSessionsChangeIdleLengthPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _webSessionsChangeIdleLengthPolicyDetails;
}

- (DBTEAMLOGTeamProfileAddLogoDetails *)teamProfileAddLogoDetails {
  if (![self isTeamProfileAddLogoDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamProfileAddLogoDetails, but was %@.", [self tagName]];
  }
  return _teamProfileAddLogoDetails;
}

- (DBTEAMLOGTeamProfileChangeLogoDetails *)teamProfileChangeLogoDetails {
  if (![self isTeamProfileChangeLogoDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails, but was %@.", [self tagName]];
  }
  return _teamProfileChangeLogoDetails;
}

- (DBTEAMLOGTeamProfileChangeNameDetails *)teamProfileChangeNameDetails {
  if (![self isTeamProfileChangeNameDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamProfileChangeNameDetails, but was %@.", [self tagName]];
  }
  return _teamProfileChangeNameDetails;
}

- (DBTEAMLOGTeamProfileRemoveLogoDetails *)teamProfileRemoveLogoDetails {
  if (![self isTeamProfileRemoveLogoDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails, but was %@.", [self tagName]];
  }
  return _teamProfileRemoveLogoDetails;
}

- (DBTEAMLOGTfaAddBackupPhoneDetails *)tfaAddBackupPhoneDetails {
  if (![self isTfaAddBackupPhoneDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails, but was %@.", [self tagName]];
  }
  return _tfaAddBackupPhoneDetails;
}

- (DBTEAMLOGTfaAddSecurityKeyDetails *)tfaAddSecurityKeyDetails {
  if (![self isTfaAddSecurityKeyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails, but was %@.", [self tagName]];
  }
  return _tfaAddSecurityKeyDetails;
}

- (DBTEAMLOGTfaChangeBackupPhoneDetails *)tfaChangeBackupPhoneDetails {
  if (![self isTfaChangeBackupPhoneDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails, but was %@.", [self tagName]];
  }
  return _tfaChangeBackupPhoneDetails;
}

- (DBTEAMLOGTfaChangeStatusDetails *)tfaChangeStatusDetails {
  if (![self isTfaChangeStatusDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaChangeStatusDetails, but was %@.", [self tagName]];
  }
  return _tfaChangeStatusDetails;
}

- (DBTEAMLOGTfaRemoveBackupPhoneDetails *)tfaRemoveBackupPhoneDetails {
  if (![self isTfaRemoveBackupPhoneDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails, but was %@.", [self tagName]];
  }
  return _tfaRemoveBackupPhoneDetails;
}

- (DBTEAMLOGTfaRemoveSecurityKeyDetails *)tfaRemoveSecurityKeyDetails {
  if (![self isTfaRemoveSecurityKeyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails, but was %@.", [self tagName]];
  }
  return _tfaRemoveSecurityKeyDetails;
}

- (DBTEAMLOGTfaResetDetails *)tfaResetDetails {
  if (![self isTfaResetDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaResetDetails, but was %@.", [self tagName]];
  }
  return _tfaResetDetails;
}

- (DBTEAMLOGMissingDetails *)missingDetails {
  if (![self isMissingDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMissingDetails, but was %@.", [self tagName]];
  }
  return _missingDetails;
}

#pragma mark - Tag state methods

- (BOOL)isMemberChangeMembershipTypeDetails {
  return _tag == DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails;
}

- (BOOL)isMemberPermanentlyDeleteAccountContentsDetails {
  return _tag == DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails;
}

- (BOOL)isMemberSpaceLimitsChangeStatusDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails;
}

- (BOOL)isMemberTransferAccountContentsDetails {
  return _tag == DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails;
}

- (BOOL)isPaperEnabledUsersGroupAdditionDetails {
  return _tag == DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails;
}

- (BOOL)isPaperEnabledUsersGroupRemovalDetails {
  return _tag == DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails;
}

- (BOOL)isPaperExternalViewAllowDetails {
  return _tag == DBTEAMLOGEventDetailsPaperExternalViewAllowDetails;
}

- (BOOL)isPaperExternalViewDefaultTeamDetails {
  return _tag == DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails;
}

- (BOOL)isPaperExternalViewForbidDetails {
  return _tag == DBTEAMLOGEventDetailsPaperExternalViewForbidDetails;
}

- (BOOL)isSfExternalInviteWarnDetails {
  return _tag == DBTEAMLOGEventDetailsSfExternalInviteWarnDetails;
}

- (BOOL)isTeamMergeDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeDetails;
}

- (BOOL)isAppLinkTeamDetails {
  return _tag == DBTEAMLOGEventDetailsAppLinkTeamDetails;
}

- (BOOL)isAppLinkUserDetails {
  return _tag == DBTEAMLOGEventDetailsAppLinkUserDetails;
}

- (BOOL)isAppUnlinkTeamDetails {
  return _tag == DBTEAMLOGEventDetailsAppUnlinkTeamDetails;
}

- (BOOL)isAppUnlinkUserDetails {
  return _tag == DBTEAMLOGEventDetailsAppUnlinkUserDetails;
}

- (BOOL)isDeviceChangeIpDesktopDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails;
}

- (BOOL)isDeviceChangeIpMobileDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails;
}

- (BOOL)isDeviceChangeIpWebDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceChangeIpWebDetails;
}

- (BOOL)isDeviceDeleteOnUnlinkFailDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails;
}

- (BOOL)isDeviceDeleteOnUnlinkSuccessDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails;
}

- (BOOL)isDeviceLinkFailDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceLinkFailDetails;
}

- (BOOL)isDeviceLinkSuccessDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceLinkSuccessDetails;
}

- (BOOL)isDeviceManagementDisabledDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceManagementDisabledDetails;
}

- (BOOL)isDeviceManagementEnabledDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceManagementEnabledDetails;
}

- (BOOL)isDeviceUnlinkDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceUnlinkDetails;
}

- (BOOL)isEmmRefreshAuthTokenDetails {
  return _tag == DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails;
}

- (BOOL)isAccountCaptureChangeAvailabilityDetails {
  return _tag == DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails;
}

- (BOOL)isAccountCaptureMigrateAccountDetails {
  return _tag == DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails;
}

- (BOOL)isAccountCaptureRelinquishAccountDetails {
  return _tag == DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails;
}

- (BOOL)isDisabledDomainInvitesDetails {
  return _tag == DBTEAMLOGEventDetailsDisabledDomainInvitesDetails;
}

- (BOOL)isDomainInvitesApproveRequestToJoinTeamDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails;
}

- (BOOL)isDomainInvitesDeclineRequestToJoinTeamDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails;
}

- (BOOL)isDomainInvitesEmailExistingUsersDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails;
}

- (BOOL)isDomainInvitesRequestToJoinTeamDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails;
}

- (BOOL)isDomainInvitesSetInviteNewUserPrefToNoDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails;
}

- (BOOL)isDomainInvitesSetInviteNewUserPrefToYesDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails;
}

- (BOOL)isDomainVerificationAddDomainFailDetails {
  return _tag == DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails;
}

- (BOOL)isDomainVerificationAddDomainSuccessDetails {
  return _tag == DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails;
}

- (BOOL)isDomainVerificationRemoveDomainDetails {
  return _tag == DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails;
}

- (BOOL)isEnabledDomainInvitesDetails {
  return _tag == DBTEAMLOGEventDetailsEnabledDomainInvitesDetails;
}

- (BOOL)isCreateFolderDetails {
  return _tag == DBTEAMLOGEventDetailsCreateFolderDetails;
}

- (BOOL)isFileAddDetails {
  return _tag == DBTEAMLOGEventDetailsFileAddDetails;
}

- (BOOL)isFileCopyDetails {
  return _tag == DBTEAMLOGEventDetailsFileCopyDetails;
}

- (BOOL)isFileDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsFileDeleteDetails;
}

- (BOOL)isFileDownloadDetails {
  return _tag == DBTEAMLOGEventDetailsFileDownloadDetails;
}

- (BOOL)isFileEditDetails {
  return _tag == DBTEAMLOGEventDetailsFileEditDetails;
}

- (BOOL)isFileGetCopyReferenceDetails {
  return _tag == DBTEAMLOGEventDetailsFileGetCopyReferenceDetails;
}

- (BOOL)isFileMoveDetails {
  return _tag == DBTEAMLOGEventDetailsFileMoveDetails;
}

- (BOOL)isFilePermanentlyDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails;
}

- (BOOL)isFilePreviewDetails {
  return _tag == DBTEAMLOGEventDetailsFilePreviewDetails;
}

- (BOOL)isFileRenameDetails {
  return _tag == DBTEAMLOGEventDetailsFileRenameDetails;
}

- (BOOL)isFileRestoreDetails {
  return _tag == DBTEAMLOGEventDetailsFileRestoreDetails;
}

- (BOOL)isFileRevertDetails {
  return _tag == DBTEAMLOGEventDetailsFileRevertDetails;
}

- (BOOL)isFileRollbackChangesDetails {
  return _tag == DBTEAMLOGEventDetailsFileRollbackChangesDetails;
}

- (BOOL)isFileSaveCopyReferenceDetails {
  return _tag == DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails;
}

- (BOOL)isFileRequestAddDeadlineDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestAddDeadlineDetails;
}

- (BOOL)isFileRequestChangeFolderDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestChangeFolderDetails;
}

- (BOOL)isFileRequestChangeTitleDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestChangeTitleDetails;
}

- (BOOL)isFileRequestCloseDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestCloseDetails;
}

- (BOOL)isFileRequestCreateDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestCreateDetails;
}

- (BOOL)isFileRequestReceiveFileDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestReceiveFileDetails;
}

- (BOOL)isFileRequestRemoveDeadlineDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestRemoveDeadlineDetails;
}

- (BOOL)isFileRequestSendDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestSendDetails;
}

- (BOOL)isGroupAddExternalIdDetails {
  return _tag == DBTEAMLOGEventDetailsGroupAddExternalIdDetails;
}

- (BOOL)isGroupAddMemberDetails {
  return _tag == DBTEAMLOGEventDetailsGroupAddMemberDetails;
}

- (BOOL)isGroupChangeExternalIdDetails {
  return _tag == DBTEAMLOGEventDetailsGroupChangeExternalIdDetails;
}

- (BOOL)isGroupChangeManagementTypeDetails {
  return _tag == DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails;
}

- (BOOL)isGroupChangeMemberRoleDetails {
  return _tag == DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails;
}

- (BOOL)isGroupCreateDetails {
  return _tag == DBTEAMLOGEventDetailsGroupCreateDetails;
}

- (BOOL)isGroupDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsGroupDeleteDetails;
}

- (BOOL)isGroupDescriptionUpdatedDetails {
  return _tag == DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails;
}

- (BOOL)isGroupJoinPolicyUpdatedDetails {
  return _tag == DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails;
}

- (BOOL)isGroupMovedDetails {
  return _tag == DBTEAMLOGEventDetailsGroupMovedDetails;
}

- (BOOL)isGroupRemoveExternalIdDetails {
  return _tag == DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails;
}

- (BOOL)isGroupRemoveMemberDetails {
  return _tag == DBTEAMLOGEventDetailsGroupRemoveMemberDetails;
}

- (BOOL)isGroupRenameDetails {
  return _tag == DBTEAMLOGEventDetailsGroupRenameDetails;
}

- (BOOL)isEmmLoginSuccessDetails {
  return _tag == DBTEAMLOGEventDetailsEmmLoginSuccessDetails;
}

- (BOOL)isLogoutDetails {
  return _tag == DBTEAMLOGEventDetailsLogoutDetails;
}

- (BOOL)isPasswordLoginFailDetails {
  return _tag == DBTEAMLOGEventDetailsPasswordLoginFailDetails;
}

- (BOOL)isPasswordLoginSuccessDetails {
  return _tag == DBTEAMLOGEventDetailsPasswordLoginSuccessDetails;
}

- (BOOL)isResellerSupportSessionEndDetails {
  return _tag == DBTEAMLOGEventDetailsResellerSupportSessionEndDetails;
}

- (BOOL)isResellerSupportSessionStartDetails {
  return _tag == DBTEAMLOGEventDetailsResellerSupportSessionStartDetails;
}

- (BOOL)isSignInAsSessionEndDetails {
  return _tag == DBTEAMLOGEventDetailsSignInAsSessionEndDetails;
}

- (BOOL)isSignInAsSessionStartDetails {
  return _tag == DBTEAMLOGEventDetailsSignInAsSessionStartDetails;
}

- (BOOL)isSsoLoginFailDetails {
  return _tag == DBTEAMLOGEventDetailsSsoLoginFailDetails;
}

- (BOOL)isMemberAddNameDetails {
  return _tag == DBTEAMLOGEventDetailsMemberAddNameDetails;
}

- (BOOL)isMemberChangeEmailDetails {
  return _tag == DBTEAMLOGEventDetailsMemberChangeEmailDetails;
}

- (BOOL)isMemberChangeNameDetails {
  return _tag == DBTEAMLOGEventDetailsMemberChangeNameDetails;
}

- (BOOL)isMemberChangeRoleDetails {
  return _tag == DBTEAMLOGEventDetailsMemberChangeRoleDetails;
}

- (BOOL)isMemberInviteDetails {
  return _tag == DBTEAMLOGEventDetailsMemberInviteDetails;
}

- (BOOL)isMemberJoinDetails {
  return _tag == DBTEAMLOGEventDetailsMemberJoinDetails;
}

- (BOOL)isMemberLeaveDetails {
  return _tag == DBTEAMLOGEventDetailsMemberLeaveDetails;
}

- (BOOL)isMemberRecoverDetails {
  return _tag == DBTEAMLOGEventDetailsMemberRecoverDetails;
}

- (BOOL)isMemberSuggestDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSuggestDetails;
}

- (BOOL)isMemberSuspendDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSuspendDetails;
}

- (BOOL)isMemberUnsuspendDetails {
  return _tag == DBTEAMLOGEventDetailsMemberUnsuspendDetails;
}

- (BOOL)isPaperContentAddMemberDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentAddMemberDetails;
}

- (BOOL)isPaperContentAddToFolderDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentAddToFolderDetails;
}

- (BOOL)isPaperContentArchiveDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentArchiveDetails;
}

- (BOOL)isPaperContentChangeSubscriptionDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentChangeSubscriptionDetails;
}

- (BOOL)isPaperContentCreateDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentCreateDetails;
}

- (BOOL)isPaperContentPermanentlyDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails;
}

- (BOOL)isPaperContentRemoveFromFolderDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails;
}

- (BOOL)isPaperContentRemoveMemberDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails;
}

- (BOOL)isPaperContentRenameDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentRenameDetails;
}

- (BOOL)isPaperContentRestoreDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentRestoreDetails;
}

- (BOOL)isPaperDocAddCommentDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocAddCommentDetails;
}

- (BOOL)isPaperDocChangeMemberRoleDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails;
}

- (BOOL)isPaperDocChangeSharingPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails;
}

- (BOOL)isPaperDocDeletedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocDeletedDetails;
}

- (BOOL)isPaperDocDeleteCommentDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails;
}

- (BOOL)isPaperDocDownloadDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocDownloadDetails;
}

- (BOOL)isPaperDocEditDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocEditDetails;
}

- (BOOL)isPaperDocEditCommentDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocEditCommentDetails;
}

- (BOOL)isPaperDocFollowedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocFollowedDetails;
}

- (BOOL)isPaperDocMentionDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocMentionDetails;
}

- (BOOL)isPaperDocRequestAccessDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocRequestAccessDetails;
}

- (BOOL)isPaperDocResolveCommentDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocResolveCommentDetails;
}

- (BOOL)isPaperDocRevertDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocRevertDetails;
}

- (BOOL)isPaperDocSlackShareDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocSlackShareDetails;
}

- (BOOL)isPaperDocTeamInviteDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocTeamInviteDetails;
}

- (BOOL)isPaperDocUnresolveCommentDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails;
}

- (BOOL)isPaperDocViewDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocViewDetails;
}

- (BOOL)isPaperFolderDeletedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperFolderDeletedDetails;
}

- (BOOL)isPaperFolderFollowedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperFolderFollowedDetails;
}

- (BOOL)isPaperFolderTeamInviteDetails {
  return _tag == DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails;
}

- (BOOL)isPasswordChangeDetails {
  return _tag == DBTEAMLOGEventDetailsPasswordChangeDetails;
}

- (BOOL)isPasswordResetDetails {
  return _tag == DBTEAMLOGEventDetailsPasswordResetDetails;
}

- (BOOL)isPasswordResetAllDetails {
  return _tag == DBTEAMLOGEventDetailsPasswordResetAllDetails;
}

- (BOOL)isEmmCreateExceptionsReportDetails {
  return _tag == DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails;
}

- (BOOL)isEmmCreateUsageReportDetails {
  return _tag == DBTEAMLOGEventDetailsEmmCreateUsageReportDetails;
}

- (BOOL)isSmartSyncCreateAdminPrivilegeReportDetails {
  return _tag == DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails;
}

- (BOOL)isTeamActivityCreateReportDetails {
  return _tag == DBTEAMLOGEventDetailsTeamActivityCreateReportDetails;
}

- (BOOL)isCollectionShareDetails {
  return _tag == DBTEAMLOGEventDetailsCollectionShareDetails;
}

- (BOOL)isFileAddCommentDetails {
  return _tag == DBTEAMLOGEventDetailsFileAddCommentDetails;
}

- (BOOL)isFileLikeCommentDetails {
  return _tag == DBTEAMLOGEventDetailsFileLikeCommentDetails;
}

- (BOOL)isFileUnlikeCommentDetails {
  return _tag == DBTEAMLOGEventDetailsFileUnlikeCommentDetails;
}

- (BOOL)isNoteAclInviteOnlyDetails {
  return _tag == DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails;
}

- (BOOL)isNoteAclLinkDetails {
  return _tag == DBTEAMLOGEventDetailsNoteAclLinkDetails;
}

- (BOOL)isNoteAclTeamLinkDetails {
  return _tag == DBTEAMLOGEventDetailsNoteAclTeamLinkDetails;
}

- (BOOL)isNoteSharedDetails {
  return _tag == DBTEAMLOGEventDetailsNoteSharedDetails;
}

- (BOOL)isNoteShareReceiveDetails {
  return _tag == DBTEAMLOGEventDetailsNoteShareReceiveDetails;
}

- (BOOL)isOpenNoteSharedDetails {
  return _tag == DBTEAMLOGEventDetailsOpenNoteSharedDetails;
}

- (BOOL)isSfAddGroupDetails {
  return _tag == DBTEAMLOGEventDetailsSfAddGroupDetails;
}

- (BOOL)isSfAllowNonMembersToViewSharedLinksDetails {
  return _tag == DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails;
}

- (BOOL)isSfInviteGroupDetails {
  return _tag == DBTEAMLOGEventDetailsSfInviteGroupDetails;
}

- (BOOL)isSfNestDetails {
  return _tag == DBTEAMLOGEventDetailsSfNestDetails;
}

- (BOOL)isSfTeamDeclineDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamDeclineDetails;
}

- (BOOL)isSfTeamGrantAccessDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamGrantAccessDetails;
}

- (BOOL)isSfTeamInviteDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamInviteDetails;
}

- (BOOL)isSfTeamInviteChangeRoleDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails;
}

- (BOOL)isSfTeamJoinDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamJoinDetails;
}

- (BOOL)isSfTeamJoinFromOobLinkDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails;
}

- (BOOL)isSfTeamUninviteDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamUninviteDetails;
}

- (BOOL)isSharedContentAddInviteesDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentAddInviteesDetails;
}

- (BOOL)isSharedContentAddLinkExpiryDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails;
}

- (BOOL)isSharedContentAddLinkPasswordDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails;
}

- (BOOL)isSharedContentAddMemberDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentAddMemberDetails;
}

- (BOOL)isSharedContentChangeDownloadsPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails;
}

- (BOOL)isSharedContentChangeInviteeRoleDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails;
}

- (BOOL)isSharedContentChangeLinkAudienceDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails;
}

- (BOOL)isSharedContentChangeLinkExpiryDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails;
}

- (BOOL)isSharedContentChangeLinkPasswordDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails;
}

- (BOOL)isSharedContentChangeMemberRoleDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails;
}

- (BOOL)isSharedContentChangeViewerInfoPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails;
}

- (BOOL)isSharedContentClaimInvitationDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails;
}

- (BOOL)isSharedContentCopyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentCopyDetails;
}

- (BOOL)isSharedContentDownloadDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentDownloadDetails;
}

- (BOOL)isSharedContentRelinquishMembershipDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails;
}

- (BOOL)isSharedContentRemoveInviteeDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRemoveInviteeDetails;
}

- (BOOL)isSharedContentRemoveLinkExpiryDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails;
}

- (BOOL)isSharedContentRemoveLinkPasswordDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails;
}

- (BOOL)isSharedContentRemoveMemberDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails;
}

- (BOOL)isSharedContentRequestAccessDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRequestAccessDetails;
}

- (BOOL)isSharedContentUnshareDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentUnshareDetails;
}

- (BOOL)isSharedContentViewDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentViewDetails;
}

- (BOOL)isSharedFolderChangeConfidentialityDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderChangeConfidentialityDetails;
}

- (BOOL)isSharedFolderChangeLinkPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails;
}

- (BOOL)isSharedFolderChangeMemberManagementPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderChangeMemberManagementPolicyDetails;
}

- (BOOL)isSharedFolderChangeMemberPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderChangeMemberPolicyDetails;
}

- (BOOL)isSharedFolderCreateDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderCreateDetails;
}

- (BOOL)isSharedFolderMountDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderMountDetails;
}

- (BOOL)isSharedFolderTransferOwnershipDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails;
}

- (BOOL)isSharedFolderUnmountDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderUnmountDetails;
}

- (BOOL)isSharedNoteOpenedDetails {
  return _tag == DBTEAMLOGEventDetailsSharedNoteOpenedDetails;
}

- (BOOL)isShmodelAppCreateDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelAppCreateDetails;
}

- (BOOL)isShmodelCreateDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelCreateDetails;
}

- (BOOL)isShmodelDisableDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelDisableDetails;
}

- (BOOL)isShmodelFbShareDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelFbShareDetails;
}

- (BOOL)isShmodelGroupShareDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelGroupShareDetails;
}

- (BOOL)isShmodelRemoveExpirationDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelRemoveExpirationDetails;
}

- (BOOL)isShmodelSetExpirationDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelSetExpirationDetails;
}

- (BOOL)isShmodelTeamCopyDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelTeamCopyDetails;
}

- (BOOL)isShmodelTeamDownloadDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelTeamDownloadDetails;
}

- (BOOL)isShmodelTeamShareDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelTeamShareDetails;
}

- (BOOL)isShmodelTeamViewDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelTeamViewDetails;
}

- (BOOL)isShmodelVisibilityPasswordDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelVisibilityPasswordDetails;
}

- (BOOL)isShmodelVisibilityPublicDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelVisibilityPublicDetails;
}

- (BOOL)isShmodelVisibilityTeamOnlyDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelVisibilityTeamOnlyDetails;
}

- (BOOL)isRemoveLogoutUrlDetails {
  return _tag == DBTEAMLOGEventDetailsRemoveLogoutUrlDetails;
}

- (BOOL)isRemoveSsoUrlDetails {
  return _tag == DBTEAMLOGEventDetailsRemoveSsoUrlDetails;
}

- (BOOL)isSsoChangeCertDetails {
  return _tag == DBTEAMLOGEventDetailsSsoChangeCertDetails;
}

- (BOOL)isSsoChangeLoginUrlDetails {
  return _tag == DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails;
}

- (BOOL)isSsoChangeLogoutUrlDetails {
  return _tag == DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails;
}

- (BOOL)isSsoChangeSamlIdentityModeDetails {
  return _tag == DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails;
}

- (BOOL)isTeamFolderChangeStatusDetails {
  return _tag == DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails;
}

- (BOOL)isTeamFolderCreateDetails {
  return _tag == DBTEAMLOGEventDetailsTeamFolderCreateDetails;
}

- (BOOL)isTeamFolderDowngradeDetails {
  return _tag == DBTEAMLOGEventDetailsTeamFolderDowngradeDetails;
}

- (BOOL)isTeamFolderPermanentlyDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails;
}

- (BOOL)isTeamFolderRenameDetails {
  return _tag == DBTEAMLOGEventDetailsTeamFolderRenameDetails;
}

- (BOOL)isAccountCaptureChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails;
}

- (BOOL)isAllowDownloadDisabledDetails {
  return _tag == DBTEAMLOGEventDetailsAllowDownloadDisabledDetails;
}

- (BOOL)isAllowDownloadEnabledDetails {
  return _tag == DBTEAMLOGEventDetailsAllowDownloadEnabledDetails;
}

- (BOOL)isDataPlacementRestrictionChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails;
}

- (BOOL)isDataPlacementRestrictionSatisfyPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails;
}

- (BOOL)isDeviceApprovalsChangeDesktopPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails;
}

- (BOOL)isDeviceApprovalsChangeMobilePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails;
}

- (BOOL)isDeviceApprovalsChangeOverageActionDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails;
}

- (BOOL)isDeviceApprovalsChangeUnlinkActionDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails;
}

- (BOOL)isEmmAddExceptionDetails {
  return _tag == DBTEAMLOGEventDetailsEmmAddExceptionDetails;
}

- (BOOL)isEmmChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsEmmChangePolicyDetails;
}

- (BOOL)isEmmRemoveExceptionDetails {
  return _tag == DBTEAMLOGEventDetailsEmmRemoveExceptionDetails;
}

- (BOOL)isExtendedVersionHistoryChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails;
}

- (BOOL)isFileCommentsChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails;
}

- (BOOL)isFileRequestsChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails;
}

- (BOOL)isFileRequestsEmailsEnabledDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails;
}

- (BOOL)isFileRequestsEmailsRestrictedToTeamOnlyDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails;
}

- (BOOL)isGoogleSsoChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails;
}

- (BOOL)isGroupUserManagementChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails;
}

- (BOOL)isMemberRequestsChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails;
}

- (BOOL)isMemberSpaceLimitsAddExceptionDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails;
}

- (BOOL)isMemberSpaceLimitsChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails;
}

- (BOOL)isMemberSpaceLimitsRemoveExceptionDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails;
}

- (BOOL)isMemberSuggestionsChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails;
}

- (BOOL)isMicrosoftOfficeAddinChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails;
}

- (BOOL)isNetworkControlChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails;
}

- (BOOL)isPaperChangeDeploymentPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails;
}

- (BOOL)isPaperChangeMemberPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails;
}

- (BOOL)isPaperChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPaperChangePolicyDetails;
}

- (BOOL)isPermanentDeleteChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails;
}

- (BOOL)isSharingChangeFolderJoinPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails;
}

- (BOOL)isSharingChangeLinkPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails;
}

- (BOOL)isSharingChangeMemberPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails;
}

- (BOOL)isSmartSyncChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails;
}

- (BOOL)isSsoChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSsoChangePolicyDetails;
}

- (BOOL)isTfaChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsTfaChangePolicyDetails;
}

- (BOOL)isTwoAccountChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails;
}

- (BOOL)isWebSessionsChangeFixedLengthPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails;
}

- (BOOL)isWebSessionsChangeIdleLengthPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails;
}

- (BOOL)isTeamProfileAddLogoDetails {
  return _tag == DBTEAMLOGEventDetailsTeamProfileAddLogoDetails;
}

- (BOOL)isTeamProfileChangeLogoDetails {
  return _tag == DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails;
}

- (BOOL)isTeamProfileChangeNameDetails {
  return _tag == DBTEAMLOGEventDetailsTeamProfileChangeNameDetails;
}

- (BOOL)isTeamProfileRemoveLogoDetails {
  return _tag == DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails;
}

- (BOOL)isTfaAddBackupPhoneDetails {
  return _tag == DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails;
}

- (BOOL)isTfaAddSecurityKeyDetails {
  return _tag == DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails;
}

- (BOOL)isTfaChangeBackupPhoneDetails {
  return _tag == DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails;
}

- (BOOL)isTfaChangeStatusDetails {
  return _tag == DBTEAMLOGEventDetailsTfaChangeStatusDetails;
}

- (BOOL)isTfaRemoveBackupPhoneDetails {
  return _tag == DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails;
}

- (BOOL)isTfaRemoveSecurityKeyDetails {
  return _tag == DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails;
}

- (BOOL)isTfaResetDetails {
  return _tag == DBTEAMLOGEventDetailsTfaResetDetails;
}

- (BOOL)isMissingDetails {
  return _tag == DBTEAMLOGEventDetailsMissingDetails;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGEventDetailsOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails:
    return @"DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails";
  case DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails:
    return @"DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails";
  case DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails:
    return @"DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails";
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails:
    return @"DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails";
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails:
    return @"DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails";
  case DBTEAMLOGEventDetailsPaperExternalViewAllowDetails:
    return @"DBTEAMLOGEventDetailsPaperExternalViewAllowDetails";
  case DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails:
    return @"DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails";
  case DBTEAMLOGEventDetailsPaperExternalViewForbidDetails:
    return @"DBTEAMLOGEventDetailsPaperExternalViewForbidDetails";
  case DBTEAMLOGEventDetailsSfExternalInviteWarnDetails:
    return @"DBTEAMLOGEventDetailsSfExternalInviteWarnDetails";
  case DBTEAMLOGEventDetailsTeamMergeDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeDetails";
  case DBTEAMLOGEventDetailsAppLinkTeamDetails:
    return @"DBTEAMLOGEventDetailsAppLinkTeamDetails";
  case DBTEAMLOGEventDetailsAppLinkUserDetails:
    return @"DBTEAMLOGEventDetailsAppLinkUserDetails";
  case DBTEAMLOGEventDetailsAppUnlinkTeamDetails:
    return @"DBTEAMLOGEventDetailsAppUnlinkTeamDetails";
  case DBTEAMLOGEventDetailsAppUnlinkUserDetails:
    return @"DBTEAMLOGEventDetailsAppUnlinkUserDetails";
  case DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails:
    return @"DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails";
  case DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails:
    return @"DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails";
  case DBTEAMLOGEventDetailsDeviceChangeIpWebDetails:
    return @"DBTEAMLOGEventDetailsDeviceChangeIpWebDetails";
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails:
    return @"DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails";
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails:
    return @"DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails";
  case DBTEAMLOGEventDetailsDeviceLinkFailDetails:
    return @"DBTEAMLOGEventDetailsDeviceLinkFailDetails";
  case DBTEAMLOGEventDetailsDeviceLinkSuccessDetails:
    return @"DBTEAMLOGEventDetailsDeviceLinkSuccessDetails";
  case DBTEAMLOGEventDetailsDeviceManagementDisabledDetails:
    return @"DBTEAMLOGEventDetailsDeviceManagementDisabledDetails";
  case DBTEAMLOGEventDetailsDeviceManagementEnabledDetails:
    return @"DBTEAMLOGEventDetailsDeviceManagementEnabledDetails";
  case DBTEAMLOGEventDetailsDeviceUnlinkDetails:
    return @"DBTEAMLOGEventDetailsDeviceUnlinkDetails";
  case DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails:
    return @"DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails";
  case DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails:
    return @"DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails";
  case DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails:
    return @"DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails";
  case DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails:
    return @"DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails";
  case DBTEAMLOGEventDetailsDisabledDomainInvitesDetails:
    return @"DBTEAMLOGEventDetailsDisabledDomainInvitesDetails";
  case DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails";
  case DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails";
  case DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails";
  case DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails";
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails";
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails";
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails:
    return @"DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails";
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails:
    return @"DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails";
  case DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails:
    return @"DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails";
  case DBTEAMLOGEventDetailsEnabledDomainInvitesDetails:
    return @"DBTEAMLOGEventDetailsEnabledDomainInvitesDetails";
  case DBTEAMLOGEventDetailsCreateFolderDetails:
    return @"DBTEAMLOGEventDetailsCreateFolderDetails";
  case DBTEAMLOGEventDetailsFileAddDetails:
    return @"DBTEAMLOGEventDetailsFileAddDetails";
  case DBTEAMLOGEventDetailsFileCopyDetails:
    return @"DBTEAMLOGEventDetailsFileCopyDetails";
  case DBTEAMLOGEventDetailsFileDeleteDetails:
    return @"DBTEAMLOGEventDetailsFileDeleteDetails";
  case DBTEAMLOGEventDetailsFileDownloadDetails:
    return @"DBTEAMLOGEventDetailsFileDownloadDetails";
  case DBTEAMLOGEventDetailsFileEditDetails:
    return @"DBTEAMLOGEventDetailsFileEditDetails";
  case DBTEAMLOGEventDetailsFileGetCopyReferenceDetails:
    return @"DBTEAMLOGEventDetailsFileGetCopyReferenceDetails";
  case DBTEAMLOGEventDetailsFileMoveDetails:
    return @"DBTEAMLOGEventDetailsFileMoveDetails";
  case DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails:
    return @"DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails";
  case DBTEAMLOGEventDetailsFilePreviewDetails:
    return @"DBTEAMLOGEventDetailsFilePreviewDetails";
  case DBTEAMLOGEventDetailsFileRenameDetails:
    return @"DBTEAMLOGEventDetailsFileRenameDetails";
  case DBTEAMLOGEventDetailsFileRestoreDetails:
    return @"DBTEAMLOGEventDetailsFileRestoreDetails";
  case DBTEAMLOGEventDetailsFileRevertDetails:
    return @"DBTEAMLOGEventDetailsFileRevertDetails";
  case DBTEAMLOGEventDetailsFileRollbackChangesDetails:
    return @"DBTEAMLOGEventDetailsFileRollbackChangesDetails";
  case DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails:
    return @"DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails";
  case DBTEAMLOGEventDetailsFileRequestAddDeadlineDetails:
    return @"DBTEAMLOGEventDetailsFileRequestAddDeadlineDetails";
  case DBTEAMLOGEventDetailsFileRequestChangeFolderDetails:
    return @"DBTEAMLOGEventDetailsFileRequestChangeFolderDetails";
  case DBTEAMLOGEventDetailsFileRequestChangeTitleDetails:
    return @"DBTEAMLOGEventDetailsFileRequestChangeTitleDetails";
  case DBTEAMLOGEventDetailsFileRequestCloseDetails:
    return @"DBTEAMLOGEventDetailsFileRequestCloseDetails";
  case DBTEAMLOGEventDetailsFileRequestCreateDetails:
    return @"DBTEAMLOGEventDetailsFileRequestCreateDetails";
  case DBTEAMLOGEventDetailsFileRequestReceiveFileDetails:
    return @"DBTEAMLOGEventDetailsFileRequestReceiveFileDetails";
  case DBTEAMLOGEventDetailsFileRequestRemoveDeadlineDetails:
    return @"DBTEAMLOGEventDetailsFileRequestRemoveDeadlineDetails";
  case DBTEAMLOGEventDetailsFileRequestSendDetails:
    return @"DBTEAMLOGEventDetailsFileRequestSendDetails";
  case DBTEAMLOGEventDetailsGroupAddExternalIdDetails:
    return @"DBTEAMLOGEventDetailsGroupAddExternalIdDetails";
  case DBTEAMLOGEventDetailsGroupAddMemberDetails:
    return @"DBTEAMLOGEventDetailsGroupAddMemberDetails";
  case DBTEAMLOGEventDetailsGroupChangeExternalIdDetails:
    return @"DBTEAMLOGEventDetailsGroupChangeExternalIdDetails";
  case DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails:
    return @"DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails";
  case DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails:
    return @"DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails";
  case DBTEAMLOGEventDetailsGroupCreateDetails:
    return @"DBTEAMLOGEventDetailsGroupCreateDetails";
  case DBTEAMLOGEventDetailsGroupDeleteDetails:
    return @"DBTEAMLOGEventDetailsGroupDeleteDetails";
  case DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails:
    return @"DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails";
  case DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails:
    return @"DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails";
  case DBTEAMLOGEventDetailsGroupMovedDetails:
    return @"DBTEAMLOGEventDetailsGroupMovedDetails";
  case DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails:
    return @"DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails";
  case DBTEAMLOGEventDetailsGroupRemoveMemberDetails:
    return @"DBTEAMLOGEventDetailsGroupRemoveMemberDetails";
  case DBTEAMLOGEventDetailsGroupRenameDetails:
    return @"DBTEAMLOGEventDetailsGroupRenameDetails";
  case DBTEAMLOGEventDetailsEmmLoginSuccessDetails:
    return @"DBTEAMLOGEventDetailsEmmLoginSuccessDetails";
  case DBTEAMLOGEventDetailsLogoutDetails:
    return @"DBTEAMLOGEventDetailsLogoutDetails";
  case DBTEAMLOGEventDetailsPasswordLoginFailDetails:
    return @"DBTEAMLOGEventDetailsPasswordLoginFailDetails";
  case DBTEAMLOGEventDetailsPasswordLoginSuccessDetails:
    return @"DBTEAMLOGEventDetailsPasswordLoginSuccessDetails";
  case DBTEAMLOGEventDetailsResellerSupportSessionEndDetails:
    return @"DBTEAMLOGEventDetailsResellerSupportSessionEndDetails";
  case DBTEAMLOGEventDetailsResellerSupportSessionStartDetails:
    return @"DBTEAMLOGEventDetailsResellerSupportSessionStartDetails";
  case DBTEAMLOGEventDetailsSignInAsSessionEndDetails:
    return @"DBTEAMLOGEventDetailsSignInAsSessionEndDetails";
  case DBTEAMLOGEventDetailsSignInAsSessionStartDetails:
    return @"DBTEAMLOGEventDetailsSignInAsSessionStartDetails";
  case DBTEAMLOGEventDetailsSsoLoginFailDetails:
    return @"DBTEAMLOGEventDetailsSsoLoginFailDetails";
  case DBTEAMLOGEventDetailsMemberAddNameDetails:
    return @"DBTEAMLOGEventDetailsMemberAddNameDetails";
  case DBTEAMLOGEventDetailsMemberChangeEmailDetails:
    return @"DBTEAMLOGEventDetailsMemberChangeEmailDetails";
  case DBTEAMLOGEventDetailsMemberChangeNameDetails:
    return @"DBTEAMLOGEventDetailsMemberChangeNameDetails";
  case DBTEAMLOGEventDetailsMemberChangeRoleDetails:
    return @"DBTEAMLOGEventDetailsMemberChangeRoleDetails";
  case DBTEAMLOGEventDetailsMemberInviteDetails:
    return @"DBTEAMLOGEventDetailsMemberInviteDetails";
  case DBTEAMLOGEventDetailsMemberJoinDetails:
    return @"DBTEAMLOGEventDetailsMemberJoinDetails";
  case DBTEAMLOGEventDetailsMemberLeaveDetails:
    return @"DBTEAMLOGEventDetailsMemberLeaveDetails";
  case DBTEAMLOGEventDetailsMemberRecoverDetails:
    return @"DBTEAMLOGEventDetailsMemberRecoverDetails";
  case DBTEAMLOGEventDetailsMemberSuggestDetails:
    return @"DBTEAMLOGEventDetailsMemberSuggestDetails";
  case DBTEAMLOGEventDetailsMemberSuspendDetails:
    return @"DBTEAMLOGEventDetailsMemberSuspendDetails";
  case DBTEAMLOGEventDetailsMemberUnsuspendDetails:
    return @"DBTEAMLOGEventDetailsMemberUnsuspendDetails";
  case DBTEAMLOGEventDetailsPaperContentAddMemberDetails:
    return @"DBTEAMLOGEventDetailsPaperContentAddMemberDetails";
  case DBTEAMLOGEventDetailsPaperContentAddToFolderDetails:
    return @"DBTEAMLOGEventDetailsPaperContentAddToFolderDetails";
  case DBTEAMLOGEventDetailsPaperContentArchiveDetails:
    return @"DBTEAMLOGEventDetailsPaperContentArchiveDetails";
  case DBTEAMLOGEventDetailsPaperContentChangeSubscriptionDetails:
    return @"DBTEAMLOGEventDetailsPaperContentChangeSubscriptionDetails";
  case DBTEAMLOGEventDetailsPaperContentCreateDetails:
    return @"DBTEAMLOGEventDetailsPaperContentCreateDetails";
  case DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails:
    return @"DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails";
  case DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails:
    return @"DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails";
  case DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails:
    return @"DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails";
  case DBTEAMLOGEventDetailsPaperContentRenameDetails:
    return @"DBTEAMLOGEventDetailsPaperContentRenameDetails";
  case DBTEAMLOGEventDetailsPaperContentRestoreDetails:
    return @"DBTEAMLOGEventDetailsPaperContentRestoreDetails";
  case DBTEAMLOGEventDetailsPaperDocAddCommentDetails:
    return @"DBTEAMLOGEventDetailsPaperDocAddCommentDetails";
  case DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails:
    return @"DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails";
  case DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails:
    return @"DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails";
  case DBTEAMLOGEventDetailsPaperDocDeletedDetails:
    return @"DBTEAMLOGEventDetailsPaperDocDeletedDetails";
  case DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails:
    return @"DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails";
  case DBTEAMLOGEventDetailsPaperDocDownloadDetails:
    return @"DBTEAMLOGEventDetailsPaperDocDownloadDetails";
  case DBTEAMLOGEventDetailsPaperDocEditDetails:
    return @"DBTEAMLOGEventDetailsPaperDocEditDetails";
  case DBTEAMLOGEventDetailsPaperDocEditCommentDetails:
    return @"DBTEAMLOGEventDetailsPaperDocEditCommentDetails";
  case DBTEAMLOGEventDetailsPaperDocFollowedDetails:
    return @"DBTEAMLOGEventDetailsPaperDocFollowedDetails";
  case DBTEAMLOGEventDetailsPaperDocMentionDetails:
    return @"DBTEAMLOGEventDetailsPaperDocMentionDetails";
  case DBTEAMLOGEventDetailsPaperDocRequestAccessDetails:
    return @"DBTEAMLOGEventDetailsPaperDocRequestAccessDetails";
  case DBTEAMLOGEventDetailsPaperDocResolveCommentDetails:
    return @"DBTEAMLOGEventDetailsPaperDocResolveCommentDetails";
  case DBTEAMLOGEventDetailsPaperDocRevertDetails:
    return @"DBTEAMLOGEventDetailsPaperDocRevertDetails";
  case DBTEAMLOGEventDetailsPaperDocSlackShareDetails:
    return @"DBTEAMLOGEventDetailsPaperDocSlackShareDetails";
  case DBTEAMLOGEventDetailsPaperDocTeamInviteDetails:
    return @"DBTEAMLOGEventDetailsPaperDocTeamInviteDetails";
  case DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails:
    return @"DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails";
  case DBTEAMLOGEventDetailsPaperDocViewDetails:
    return @"DBTEAMLOGEventDetailsPaperDocViewDetails";
  case DBTEAMLOGEventDetailsPaperFolderDeletedDetails:
    return @"DBTEAMLOGEventDetailsPaperFolderDeletedDetails";
  case DBTEAMLOGEventDetailsPaperFolderFollowedDetails:
    return @"DBTEAMLOGEventDetailsPaperFolderFollowedDetails";
  case DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails:
    return @"DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails";
  case DBTEAMLOGEventDetailsPasswordChangeDetails:
    return @"DBTEAMLOGEventDetailsPasswordChangeDetails";
  case DBTEAMLOGEventDetailsPasswordResetDetails:
    return @"DBTEAMLOGEventDetailsPasswordResetDetails";
  case DBTEAMLOGEventDetailsPasswordResetAllDetails:
    return @"DBTEAMLOGEventDetailsPasswordResetAllDetails";
  case DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails:
    return @"DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails";
  case DBTEAMLOGEventDetailsEmmCreateUsageReportDetails:
    return @"DBTEAMLOGEventDetailsEmmCreateUsageReportDetails";
  case DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails:
    return @"DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails";
  case DBTEAMLOGEventDetailsTeamActivityCreateReportDetails:
    return @"DBTEAMLOGEventDetailsTeamActivityCreateReportDetails";
  case DBTEAMLOGEventDetailsCollectionShareDetails:
    return @"DBTEAMLOGEventDetailsCollectionShareDetails";
  case DBTEAMLOGEventDetailsFileAddCommentDetails:
    return @"DBTEAMLOGEventDetailsFileAddCommentDetails";
  case DBTEAMLOGEventDetailsFileLikeCommentDetails:
    return @"DBTEAMLOGEventDetailsFileLikeCommentDetails";
  case DBTEAMLOGEventDetailsFileUnlikeCommentDetails:
    return @"DBTEAMLOGEventDetailsFileUnlikeCommentDetails";
  case DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails:
    return @"DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails";
  case DBTEAMLOGEventDetailsNoteAclLinkDetails:
    return @"DBTEAMLOGEventDetailsNoteAclLinkDetails";
  case DBTEAMLOGEventDetailsNoteAclTeamLinkDetails:
    return @"DBTEAMLOGEventDetailsNoteAclTeamLinkDetails";
  case DBTEAMLOGEventDetailsNoteSharedDetails:
    return @"DBTEAMLOGEventDetailsNoteSharedDetails";
  case DBTEAMLOGEventDetailsNoteShareReceiveDetails:
    return @"DBTEAMLOGEventDetailsNoteShareReceiveDetails";
  case DBTEAMLOGEventDetailsOpenNoteSharedDetails:
    return @"DBTEAMLOGEventDetailsOpenNoteSharedDetails";
  case DBTEAMLOGEventDetailsSfAddGroupDetails:
    return @"DBTEAMLOGEventDetailsSfAddGroupDetails";
  case DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails:
    return @"DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails";
  case DBTEAMLOGEventDetailsSfInviteGroupDetails:
    return @"DBTEAMLOGEventDetailsSfInviteGroupDetails";
  case DBTEAMLOGEventDetailsSfNestDetails:
    return @"DBTEAMLOGEventDetailsSfNestDetails";
  case DBTEAMLOGEventDetailsSfTeamDeclineDetails:
    return @"DBTEAMLOGEventDetailsSfTeamDeclineDetails";
  case DBTEAMLOGEventDetailsSfTeamGrantAccessDetails:
    return @"DBTEAMLOGEventDetailsSfTeamGrantAccessDetails";
  case DBTEAMLOGEventDetailsSfTeamInviteDetails:
    return @"DBTEAMLOGEventDetailsSfTeamInviteDetails";
  case DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails:
    return @"DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails";
  case DBTEAMLOGEventDetailsSfTeamJoinDetails:
    return @"DBTEAMLOGEventDetailsSfTeamJoinDetails";
  case DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails:
    return @"DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails";
  case DBTEAMLOGEventDetailsSfTeamUninviteDetails:
    return @"DBTEAMLOGEventDetailsSfTeamUninviteDetails";
  case DBTEAMLOGEventDetailsSharedContentAddInviteesDetails:
    return @"DBTEAMLOGEventDetailsSharedContentAddInviteesDetails";
  case DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails:
    return @"DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails";
  case DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails:
    return @"DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails";
  case DBTEAMLOGEventDetailsSharedContentAddMemberDetails:
    return @"DBTEAMLOGEventDetailsSharedContentAddMemberDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails";
  case DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails:
    return @"DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails";
  case DBTEAMLOGEventDetailsSharedContentCopyDetails:
    return @"DBTEAMLOGEventDetailsSharedContentCopyDetails";
  case DBTEAMLOGEventDetailsSharedContentDownloadDetails:
    return @"DBTEAMLOGEventDetailsSharedContentDownloadDetails";
  case DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails";
  case DBTEAMLOGEventDetailsSharedContentRemoveInviteeDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRemoveInviteeDetails";
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails";
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails";
  case DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails";
  case DBTEAMLOGEventDetailsSharedContentRequestAccessDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRequestAccessDetails";
  case DBTEAMLOGEventDetailsSharedContentUnshareDetails:
    return @"DBTEAMLOGEventDetailsSharedContentUnshareDetails";
  case DBTEAMLOGEventDetailsSharedContentViewDetails:
    return @"DBTEAMLOGEventDetailsSharedContentViewDetails";
  case DBTEAMLOGEventDetailsSharedFolderChangeConfidentialityDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderChangeConfidentialityDetails";
  case DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails";
  case DBTEAMLOGEventDetailsSharedFolderChangeMemberManagementPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderChangeMemberManagementPolicyDetails";
  case DBTEAMLOGEventDetailsSharedFolderChangeMemberPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderChangeMemberPolicyDetails";
  case DBTEAMLOGEventDetailsSharedFolderCreateDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderCreateDetails";
  case DBTEAMLOGEventDetailsSharedFolderMountDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderMountDetails";
  case DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails";
  case DBTEAMLOGEventDetailsSharedFolderUnmountDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderUnmountDetails";
  case DBTEAMLOGEventDetailsSharedNoteOpenedDetails:
    return @"DBTEAMLOGEventDetailsSharedNoteOpenedDetails";
  case DBTEAMLOGEventDetailsShmodelAppCreateDetails:
    return @"DBTEAMLOGEventDetailsShmodelAppCreateDetails";
  case DBTEAMLOGEventDetailsShmodelCreateDetails:
    return @"DBTEAMLOGEventDetailsShmodelCreateDetails";
  case DBTEAMLOGEventDetailsShmodelDisableDetails:
    return @"DBTEAMLOGEventDetailsShmodelDisableDetails";
  case DBTEAMLOGEventDetailsShmodelFbShareDetails:
    return @"DBTEAMLOGEventDetailsShmodelFbShareDetails";
  case DBTEAMLOGEventDetailsShmodelGroupShareDetails:
    return @"DBTEAMLOGEventDetailsShmodelGroupShareDetails";
  case DBTEAMLOGEventDetailsShmodelRemoveExpirationDetails:
    return @"DBTEAMLOGEventDetailsShmodelRemoveExpirationDetails";
  case DBTEAMLOGEventDetailsShmodelSetExpirationDetails:
    return @"DBTEAMLOGEventDetailsShmodelSetExpirationDetails";
  case DBTEAMLOGEventDetailsShmodelTeamCopyDetails:
    return @"DBTEAMLOGEventDetailsShmodelTeamCopyDetails";
  case DBTEAMLOGEventDetailsShmodelTeamDownloadDetails:
    return @"DBTEAMLOGEventDetailsShmodelTeamDownloadDetails";
  case DBTEAMLOGEventDetailsShmodelTeamShareDetails:
    return @"DBTEAMLOGEventDetailsShmodelTeamShareDetails";
  case DBTEAMLOGEventDetailsShmodelTeamViewDetails:
    return @"DBTEAMLOGEventDetailsShmodelTeamViewDetails";
  case DBTEAMLOGEventDetailsShmodelVisibilityPasswordDetails:
    return @"DBTEAMLOGEventDetailsShmodelVisibilityPasswordDetails";
  case DBTEAMLOGEventDetailsShmodelVisibilityPublicDetails:
    return @"DBTEAMLOGEventDetailsShmodelVisibilityPublicDetails";
  case DBTEAMLOGEventDetailsShmodelVisibilityTeamOnlyDetails:
    return @"DBTEAMLOGEventDetailsShmodelVisibilityTeamOnlyDetails";
  case DBTEAMLOGEventDetailsRemoveLogoutUrlDetails:
    return @"DBTEAMLOGEventDetailsRemoveLogoutUrlDetails";
  case DBTEAMLOGEventDetailsRemoveSsoUrlDetails:
    return @"DBTEAMLOGEventDetailsRemoveSsoUrlDetails";
  case DBTEAMLOGEventDetailsSsoChangeCertDetails:
    return @"DBTEAMLOGEventDetailsSsoChangeCertDetails";
  case DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails:
    return @"DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails";
  case DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails:
    return @"DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails";
  case DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails:
    return @"DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails";
  case DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails:
    return @"DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails";
  case DBTEAMLOGEventDetailsTeamFolderCreateDetails:
    return @"DBTEAMLOGEventDetailsTeamFolderCreateDetails";
  case DBTEAMLOGEventDetailsTeamFolderDowngradeDetails:
    return @"DBTEAMLOGEventDetailsTeamFolderDowngradeDetails";
  case DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails:
    return @"DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails";
  case DBTEAMLOGEventDetailsTeamFolderRenameDetails:
    return @"DBTEAMLOGEventDetailsTeamFolderRenameDetails";
  case DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails";
  case DBTEAMLOGEventDetailsAllowDownloadDisabledDetails:
    return @"DBTEAMLOGEventDetailsAllowDownloadDisabledDetails";
  case DBTEAMLOGEventDetailsAllowDownloadEnabledDetails:
    return @"DBTEAMLOGEventDetailsAllowDownloadEnabledDetails";
  case DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails";
  case DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails:
    return @"DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails";
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails:
    return @"DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails";
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails:
    return @"DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails";
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails:
    return @"DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails";
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails:
    return @"DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails";
  case DBTEAMLOGEventDetailsEmmAddExceptionDetails:
    return @"DBTEAMLOGEventDetailsEmmAddExceptionDetails";
  case DBTEAMLOGEventDetailsEmmChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsEmmChangePolicyDetails";
  case DBTEAMLOGEventDetailsEmmRemoveExceptionDetails:
    return @"DBTEAMLOGEventDetailsEmmRemoveExceptionDetails";
  case DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails";
  case DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails";
  case DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails";
  case DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails:
    return @"DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails";
  case DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails:
    return @"DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails";
  case DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails";
  case DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails";
  case DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails";
  case DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails";
  case DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails";
  case DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails";
  case DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails:
    return @"DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails";
  case DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails:
    return @"DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails";
  case DBTEAMLOGEventDetailsPaperChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsPaperChangePolicyDetails";
  case DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails";
  case DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails";
  case DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails";
  case DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails";
  case DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails";
  case DBTEAMLOGEventDetailsSsoChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsSsoChangePolicyDetails";
  case DBTEAMLOGEventDetailsTfaChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsTfaChangePolicyDetails";
  case DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails";
  case DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails:
    return @"DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails";
  case DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails:
    return @"DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails";
  case DBTEAMLOGEventDetailsTeamProfileAddLogoDetails:
    return @"DBTEAMLOGEventDetailsTeamProfileAddLogoDetails";
  case DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails:
    return @"DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails";
  case DBTEAMLOGEventDetailsTeamProfileChangeNameDetails:
    return @"DBTEAMLOGEventDetailsTeamProfileChangeNameDetails";
  case DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails:
    return @"DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails";
  case DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails:
    return @"DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails";
  case DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails:
    return @"DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails";
  case DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails:
    return @"DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails";
  case DBTEAMLOGEventDetailsTfaChangeStatusDetails:
    return @"DBTEAMLOGEventDetailsTfaChangeStatusDetails";
  case DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails:
    return @"DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails";
  case DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails:
    return @"DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails";
  case DBTEAMLOGEventDetailsTfaResetDetails:
    return @"DBTEAMLOGEventDetailsTfaResetDetails";
  case DBTEAMLOGEventDetailsMissingDetails:
    return @"DBTEAMLOGEventDetailsMissingDetails";
  case DBTEAMLOGEventDetailsOther:
    return @"DBTEAMLOGEventDetailsOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGEventDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGEventDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEventDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails:
    result = prime * result + [self.memberChangeMembershipTypeDetails hash];
  case DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails:
    result = prime * result + [self.memberPermanentlyDeleteAccountContentsDetails hash];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails:
    result = prime * result + [self.memberSpaceLimitsChangeStatusDetails hash];
  case DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails:
    result = prime * result + [self.memberTransferAccountContentsDetails hash];
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails:
    result = prime * result + [self.paperEnabledUsersGroupAdditionDetails hash];
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails:
    result = prime * result + [self.paperEnabledUsersGroupRemovalDetails hash];
  case DBTEAMLOGEventDetailsPaperExternalViewAllowDetails:
    result = prime * result + [self.paperExternalViewAllowDetails hash];
  case DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails:
    result = prime * result + [self.paperExternalViewDefaultTeamDetails hash];
  case DBTEAMLOGEventDetailsPaperExternalViewForbidDetails:
    result = prime * result + [self.paperExternalViewForbidDetails hash];
  case DBTEAMLOGEventDetailsSfExternalInviteWarnDetails:
    result = prime * result + [self.sfExternalInviteWarnDetails hash];
  case DBTEAMLOGEventDetailsTeamMergeDetails:
    result = prime * result + [self.teamMergeDetails hash];
  case DBTEAMLOGEventDetailsAppLinkTeamDetails:
    result = prime * result + [self.appLinkTeamDetails hash];
  case DBTEAMLOGEventDetailsAppLinkUserDetails:
    result = prime * result + [self.appLinkUserDetails hash];
  case DBTEAMLOGEventDetailsAppUnlinkTeamDetails:
    result = prime * result + [self.appUnlinkTeamDetails hash];
  case DBTEAMLOGEventDetailsAppUnlinkUserDetails:
    result = prime * result + [self.appUnlinkUserDetails hash];
  case DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails:
    result = prime * result + [self.deviceChangeIpDesktopDetails hash];
  case DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails:
    result = prime * result + [self.deviceChangeIpMobileDetails hash];
  case DBTEAMLOGEventDetailsDeviceChangeIpWebDetails:
    result = prime * result + [self.deviceChangeIpWebDetails hash];
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails:
    result = prime * result + [self.deviceDeleteOnUnlinkFailDetails hash];
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails:
    result = prime * result + [self.deviceDeleteOnUnlinkSuccessDetails hash];
  case DBTEAMLOGEventDetailsDeviceLinkFailDetails:
    result = prime * result + [self.deviceLinkFailDetails hash];
  case DBTEAMLOGEventDetailsDeviceLinkSuccessDetails:
    result = prime * result + [self.deviceLinkSuccessDetails hash];
  case DBTEAMLOGEventDetailsDeviceManagementDisabledDetails:
    result = prime * result + [self.deviceManagementDisabledDetails hash];
  case DBTEAMLOGEventDetailsDeviceManagementEnabledDetails:
    result = prime * result + [self.deviceManagementEnabledDetails hash];
  case DBTEAMLOGEventDetailsDeviceUnlinkDetails:
    result = prime * result + [self.deviceUnlinkDetails hash];
  case DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails:
    result = prime * result + [self.emmRefreshAuthTokenDetails hash];
  case DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails:
    result = prime * result + [self.accountCaptureChangeAvailabilityDetails hash];
  case DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails:
    result = prime * result + [self.accountCaptureMigrateAccountDetails hash];
  case DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails:
    result = prime * result + [self.accountCaptureRelinquishAccountDetails hash];
  case DBTEAMLOGEventDetailsDisabledDomainInvitesDetails:
    result = prime * result + [self.disabledDomainInvitesDetails hash];
  case DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails:
    result = prime * result + [self.domainInvitesApproveRequestToJoinTeamDetails hash];
  case DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails:
    result = prime * result + [self.domainInvitesDeclineRequestToJoinTeamDetails hash];
  case DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails:
    result = prime * result + [self.domainInvitesEmailExistingUsersDetails hash];
  case DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails:
    result = prime * result + [self.domainInvitesRequestToJoinTeamDetails hash];
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails:
    result = prime * result + [self.domainInvitesSetInviteNewUserPrefToNoDetails hash];
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails:
    result = prime * result + [self.domainInvitesSetInviteNewUserPrefToYesDetails hash];
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails:
    result = prime * result + [self.domainVerificationAddDomainFailDetails hash];
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails:
    result = prime * result + [self.domainVerificationAddDomainSuccessDetails hash];
  case DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails:
    result = prime * result + [self.domainVerificationRemoveDomainDetails hash];
  case DBTEAMLOGEventDetailsEnabledDomainInvitesDetails:
    result = prime * result + [self.enabledDomainInvitesDetails hash];
  case DBTEAMLOGEventDetailsCreateFolderDetails:
    result = prime * result + [self.createFolderDetails hash];
  case DBTEAMLOGEventDetailsFileAddDetails:
    result = prime * result + [self.fileAddDetails hash];
  case DBTEAMLOGEventDetailsFileCopyDetails:
    result = prime * result + [self.fileCopyDetails hash];
  case DBTEAMLOGEventDetailsFileDeleteDetails:
    result = prime * result + [self.fileDeleteDetails hash];
  case DBTEAMLOGEventDetailsFileDownloadDetails:
    result = prime * result + [self.fileDownloadDetails hash];
  case DBTEAMLOGEventDetailsFileEditDetails:
    result = prime * result + [self.fileEditDetails hash];
  case DBTEAMLOGEventDetailsFileGetCopyReferenceDetails:
    result = prime * result + [self.fileGetCopyReferenceDetails hash];
  case DBTEAMLOGEventDetailsFileMoveDetails:
    result = prime * result + [self.fileMoveDetails hash];
  case DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails:
    result = prime * result + [self.filePermanentlyDeleteDetails hash];
  case DBTEAMLOGEventDetailsFilePreviewDetails:
    result = prime * result + [self.filePreviewDetails hash];
  case DBTEAMLOGEventDetailsFileRenameDetails:
    result = prime * result + [self.fileRenameDetails hash];
  case DBTEAMLOGEventDetailsFileRestoreDetails:
    result = prime * result + [self.fileRestoreDetails hash];
  case DBTEAMLOGEventDetailsFileRevertDetails:
    result = prime * result + [self.fileRevertDetails hash];
  case DBTEAMLOGEventDetailsFileRollbackChangesDetails:
    result = prime * result + [self.fileRollbackChangesDetails hash];
  case DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails:
    result = prime * result + [self.fileSaveCopyReferenceDetails hash];
  case DBTEAMLOGEventDetailsFileRequestAddDeadlineDetails:
    result = prime * result + [self.fileRequestAddDeadlineDetails hash];
  case DBTEAMLOGEventDetailsFileRequestChangeFolderDetails:
    result = prime * result + [self.fileRequestChangeFolderDetails hash];
  case DBTEAMLOGEventDetailsFileRequestChangeTitleDetails:
    result = prime * result + [self.fileRequestChangeTitleDetails hash];
  case DBTEAMLOGEventDetailsFileRequestCloseDetails:
    result = prime * result + [self.fileRequestCloseDetails hash];
  case DBTEAMLOGEventDetailsFileRequestCreateDetails:
    result = prime * result + [self.fileRequestCreateDetails hash];
  case DBTEAMLOGEventDetailsFileRequestReceiveFileDetails:
    result = prime * result + [self.fileRequestReceiveFileDetails hash];
  case DBTEAMLOGEventDetailsFileRequestRemoveDeadlineDetails:
    result = prime * result + [self.fileRequestRemoveDeadlineDetails hash];
  case DBTEAMLOGEventDetailsFileRequestSendDetails:
    result = prime * result + [self.fileRequestSendDetails hash];
  case DBTEAMLOGEventDetailsGroupAddExternalIdDetails:
    result = prime * result + [self.groupAddExternalIdDetails hash];
  case DBTEAMLOGEventDetailsGroupAddMemberDetails:
    result = prime * result + [self.groupAddMemberDetails hash];
  case DBTEAMLOGEventDetailsGroupChangeExternalIdDetails:
    result = prime * result + [self.groupChangeExternalIdDetails hash];
  case DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails:
    result = prime * result + [self.groupChangeManagementTypeDetails hash];
  case DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails:
    result = prime * result + [self.groupChangeMemberRoleDetails hash];
  case DBTEAMLOGEventDetailsGroupCreateDetails:
    result = prime * result + [self.groupCreateDetails hash];
  case DBTEAMLOGEventDetailsGroupDeleteDetails:
    result = prime * result + [self.groupDeleteDetails hash];
  case DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails:
    result = prime * result + [self.groupDescriptionUpdatedDetails hash];
  case DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails:
    result = prime * result + [self.groupJoinPolicyUpdatedDetails hash];
  case DBTEAMLOGEventDetailsGroupMovedDetails:
    result = prime * result + [self.groupMovedDetails hash];
  case DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails:
    result = prime * result + [self.groupRemoveExternalIdDetails hash];
  case DBTEAMLOGEventDetailsGroupRemoveMemberDetails:
    result = prime * result + [self.groupRemoveMemberDetails hash];
  case DBTEAMLOGEventDetailsGroupRenameDetails:
    result = prime * result + [self.groupRenameDetails hash];
  case DBTEAMLOGEventDetailsEmmLoginSuccessDetails:
    result = prime * result + [self.emmLoginSuccessDetails hash];
  case DBTEAMLOGEventDetailsLogoutDetails:
    result = prime * result + [self.logoutDetails hash];
  case DBTEAMLOGEventDetailsPasswordLoginFailDetails:
    result = prime * result + [self.passwordLoginFailDetails hash];
  case DBTEAMLOGEventDetailsPasswordLoginSuccessDetails:
    result = prime * result + [self.passwordLoginSuccessDetails hash];
  case DBTEAMLOGEventDetailsResellerSupportSessionEndDetails:
    result = prime * result + [self.resellerSupportSessionEndDetails hash];
  case DBTEAMLOGEventDetailsResellerSupportSessionStartDetails:
    result = prime * result + [self.resellerSupportSessionStartDetails hash];
  case DBTEAMLOGEventDetailsSignInAsSessionEndDetails:
    result = prime * result + [self.signInAsSessionEndDetails hash];
  case DBTEAMLOGEventDetailsSignInAsSessionStartDetails:
    result = prime * result + [self.signInAsSessionStartDetails hash];
  case DBTEAMLOGEventDetailsSsoLoginFailDetails:
    result = prime * result + [self.ssoLoginFailDetails hash];
  case DBTEAMLOGEventDetailsMemberAddNameDetails:
    result = prime * result + [self.memberAddNameDetails hash];
  case DBTEAMLOGEventDetailsMemberChangeEmailDetails:
    result = prime * result + [self.memberChangeEmailDetails hash];
  case DBTEAMLOGEventDetailsMemberChangeNameDetails:
    result = prime * result + [self.memberChangeNameDetails hash];
  case DBTEAMLOGEventDetailsMemberChangeRoleDetails:
    result = prime * result + [self.memberChangeRoleDetails hash];
  case DBTEAMLOGEventDetailsMemberInviteDetails:
    result = prime * result + [self.memberInviteDetails hash];
  case DBTEAMLOGEventDetailsMemberJoinDetails:
    result = prime * result + [self.memberJoinDetails hash];
  case DBTEAMLOGEventDetailsMemberLeaveDetails:
    result = prime * result + [self.memberLeaveDetails hash];
  case DBTEAMLOGEventDetailsMemberRecoverDetails:
    result = prime * result + [self.memberRecoverDetails hash];
  case DBTEAMLOGEventDetailsMemberSuggestDetails:
    result = prime * result + [self.memberSuggestDetails hash];
  case DBTEAMLOGEventDetailsMemberSuspendDetails:
    result = prime * result + [self.memberSuspendDetails hash];
  case DBTEAMLOGEventDetailsMemberUnsuspendDetails:
    result = prime * result + [self.memberUnsuspendDetails hash];
  case DBTEAMLOGEventDetailsPaperContentAddMemberDetails:
    result = prime * result + [self.paperContentAddMemberDetails hash];
  case DBTEAMLOGEventDetailsPaperContentAddToFolderDetails:
    result = prime * result + [self.paperContentAddToFolderDetails hash];
  case DBTEAMLOGEventDetailsPaperContentArchiveDetails:
    result = prime * result + [self.paperContentArchiveDetails hash];
  case DBTEAMLOGEventDetailsPaperContentChangeSubscriptionDetails:
    result = prime * result + [self.paperContentChangeSubscriptionDetails hash];
  case DBTEAMLOGEventDetailsPaperContentCreateDetails:
    result = prime * result + [self.paperContentCreateDetails hash];
  case DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails:
    result = prime * result + [self.paperContentPermanentlyDeleteDetails hash];
  case DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails:
    result = prime * result + [self.paperContentRemoveFromFolderDetails hash];
  case DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails:
    result = prime * result + [self.paperContentRemoveMemberDetails hash];
  case DBTEAMLOGEventDetailsPaperContentRenameDetails:
    result = prime * result + [self.paperContentRenameDetails hash];
  case DBTEAMLOGEventDetailsPaperContentRestoreDetails:
    result = prime * result + [self.paperContentRestoreDetails hash];
  case DBTEAMLOGEventDetailsPaperDocAddCommentDetails:
    result = prime * result + [self.paperDocAddCommentDetails hash];
  case DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails:
    result = prime * result + [self.paperDocChangeMemberRoleDetails hash];
  case DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails:
    result = prime * result + [self.paperDocChangeSharingPolicyDetails hash];
  case DBTEAMLOGEventDetailsPaperDocDeletedDetails:
    result = prime * result + [self.paperDocDeletedDetails hash];
  case DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails:
    result = prime * result + [self.paperDocDeleteCommentDetails hash];
  case DBTEAMLOGEventDetailsPaperDocDownloadDetails:
    result = prime * result + [self.paperDocDownloadDetails hash];
  case DBTEAMLOGEventDetailsPaperDocEditDetails:
    result = prime * result + [self.paperDocEditDetails hash];
  case DBTEAMLOGEventDetailsPaperDocEditCommentDetails:
    result = prime * result + [self.paperDocEditCommentDetails hash];
  case DBTEAMLOGEventDetailsPaperDocFollowedDetails:
    result = prime * result + [self.paperDocFollowedDetails hash];
  case DBTEAMLOGEventDetailsPaperDocMentionDetails:
    result = prime * result + [self.paperDocMentionDetails hash];
  case DBTEAMLOGEventDetailsPaperDocRequestAccessDetails:
    result = prime * result + [self.paperDocRequestAccessDetails hash];
  case DBTEAMLOGEventDetailsPaperDocResolveCommentDetails:
    result = prime * result + [self.paperDocResolveCommentDetails hash];
  case DBTEAMLOGEventDetailsPaperDocRevertDetails:
    result = prime * result + [self.paperDocRevertDetails hash];
  case DBTEAMLOGEventDetailsPaperDocSlackShareDetails:
    result = prime * result + [self.paperDocSlackShareDetails hash];
  case DBTEAMLOGEventDetailsPaperDocTeamInviteDetails:
    result = prime * result + [self.paperDocTeamInviteDetails hash];
  case DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails:
    result = prime * result + [self.paperDocUnresolveCommentDetails hash];
  case DBTEAMLOGEventDetailsPaperDocViewDetails:
    result = prime * result + [self.paperDocViewDetails hash];
  case DBTEAMLOGEventDetailsPaperFolderDeletedDetails:
    result = prime * result + [self.paperFolderDeletedDetails hash];
  case DBTEAMLOGEventDetailsPaperFolderFollowedDetails:
    result = prime * result + [self.paperFolderFollowedDetails hash];
  case DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails:
    result = prime * result + [self.paperFolderTeamInviteDetails hash];
  case DBTEAMLOGEventDetailsPasswordChangeDetails:
    result = prime * result + [self.passwordChangeDetails hash];
  case DBTEAMLOGEventDetailsPasswordResetDetails:
    result = prime * result + [self.passwordResetDetails hash];
  case DBTEAMLOGEventDetailsPasswordResetAllDetails:
    result = prime * result + [self.passwordResetAllDetails hash];
  case DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails:
    result = prime * result + [self.emmCreateExceptionsReportDetails hash];
  case DBTEAMLOGEventDetailsEmmCreateUsageReportDetails:
    result = prime * result + [self.emmCreateUsageReportDetails hash];
  case DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails:
    result = prime * result + [self.smartSyncCreateAdminPrivilegeReportDetails hash];
  case DBTEAMLOGEventDetailsTeamActivityCreateReportDetails:
    result = prime * result + [self.teamActivityCreateReportDetails hash];
  case DBTEAMLOGEventDetailsCollectionShareDetails:
    result = prime * result + [self.collectionShareDetails hash];
  case DBTEAMLOGEventDetailsFileAddCommentDetails:
    result = prime * result + [self.fileAddCommentDetails hash];
  case DBTEAMLOGEventDetailsFileLikeCommentDetails:
    result = prime * result + [self.fileLikeCommentDetails hash];
  case DBTEAMLOGEventDetailsFileUnlikeCommentDetails:
    result = prime * result + [self.fileUnlikeCommentDetails hash];
  case DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails:
    result = prime * result + [self.noteAclInviteOnlyDetails hash];
  case DBTEAMLOGEventDetailsNoteAclLinkDetails:
    result = prime * result + [self.noteAclLinkDetails hash];
  case DBTEAMLOGEventDetailsNoteAclTeamLinkDetails:
    result = prime * result + [self.noteAclTeamLinkDetails hash];
  case DBTEAMLOGEventDetailsNoteSharedDetails:
    result = prime * result + [self.noteSharedDetails hash];
  case DBTEAMLOGEventDetailsNoteShareReceiveDetails:
    result = prime * result + [self.noteShareReceiveDetails hash];
  case DBTEAMLOGEventDetailsOpenNoteSharedDetails:
    result = prime * result + [self.openNoteSharedDetails hash];
  case DBTEAMLOGEventDetailsSfAddGroupDetails:
    result = prime * result + [self.sfAddGroupDetails hash];
  case DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails:
    result = prime * result + [self.sfAllowNonMembersToViewSharedLinksDetails hash];
  case DBTEAMLOGEventDetailsSfInviteGroupDetails:
    result = prime * result + [self.sfInviteGroupDetails hash];
  case DBTEAMLOGEventDetailsSfNestDetails:
    result = prime * result + [self.sfNestDetails hash];
  case DBTEAMLOGEventDetailsSfTeamDeclineDetails:
    result = prime * result + [self.sfTeamDeclineDetails hash];
  case DBTEAMLOGEventDetailsSfTeamGrantAccessDetails:
    result = prime * result + [self.sfTeamGrantAccessDetails hash];
  case DBTEAMLOGEventDetailsSfTeamInviteDetails:
    result = prime * result + [self.sfTeamInviteDetails hash];
  case DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails:
    result = prime * result + [self.sfTeamInviteChangeRoleDetails hash];
  case DBTEAMLOGEventDetailsSfTeamJoinDetails:
    result = prime * result + [self.sfTeamJoinDetails hash];
  case DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails:
    result = prime * result + [self.sfTeamJoinFromOobLinkDetails hash];
  case DBTEAMLOGEventDetailsSfTeamUninviteDetails:
    result = prime * result + [self.sfTeamUninviteDetails hash];
  case DBTEAMLOGEventDetailsSharedContentAddInviteesDetails:
    result = prime * result + [self.sharedContentAddInviteesDetails hash];
  case DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails:
    result = prime * result + [self.sharedContentAddLinkExpiryDetails hash];
  case DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails:
    result = prime * result + [self.sharedContentAddLinkPasswordDetails hash];
  case DBTEAMLOGEventDetailsSharedContentAddMemberDetails:
    result = prime * result + [self.sharedContentAddMemberDetails hash];
  case DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails:
    result = prime * result + [self.sharedContentChangeDownloadsPolicyDetails hash];
  case DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails:
    result = prime * result + [self.sharedContentChangeInviteeRoleDetails hash];
  case DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails:
    result = prime * result + [self.sharedContentChangeLinkAudienceDetails hash];
  case DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails:
    result = prime * result + [self.sharedContentChangeLinkExpiryDetails hash];
  case DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails:
    result = prime * result + [self.sharedContentChangeLinkPasswordDetails hash];
  case DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails:
    result = prime * result + [self.sharedContentChangeMemberRoleDetails hash];
  case DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails:
    result = prime * result + [self.sharedContentChangeViewerInfoPolicyDetails hash];
  case DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails:
    result = prime * result + [self.sharedContentClaimInvitationDetails hash];
  case DBTEAMLOGEventDetailsSharedContentCopyDetails:
    result = prime * result + [self.sharedContentCopyDetails hash];
  case DBTEAMLOGEventDetailsSharedContentDownloadDetails:
    result = prime * result + [self.sharedContentDownloadDetails hash];
  case DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails:
    result = prime * result + [self.sharedContentRelinquishMembershipDetails hash];
  case DBTEAMLOGEventDetailsSharedContentRemoveInviteeDetails:
    result = prime * result + [self.sharedContentRemoveInviteeDetails hash];
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails:
    result = prime * result + [self.sharedContentRemoveLinkExpiryDetails hash];
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails:
    result = prime * result + [self.sharedContentRemoveLinkPasswordDetails hash];
  case DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails:
    result = prime * result + [self.sharedContentRemoveMemberDetails hash];
  case DBTEAMLOGEventDetailsSharedContentRequestAccessDetails:
    result = prime * result + [self.sharedContentRequestAccessDetails hash];
  case DBTEAMLOGEventDetailsSharedContentUnshareDetails:
    result = prime * result + [self.sharedContentUnshareDetails hash];
  case DBTEAMLOGEventDetailsSharedContentViewDetails:
    result = prime * result + [self.sharedContentViewDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderChangeConfidentialityDetails:
    result = prime * result + [self.sharedFolderChangeConfidentialityDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails:
    result = prime * result + [self.sharedFolderChangeLinkPolicyDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderChangeMemberManagementPolicyDetails:
    result = prime * result + [self.sharedFolderChangeMemberManagementPolicyDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderChangeMemberPolicyDetails:
    result = prime * result + [self.sharedFolderChangeMemberPolicyDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderCreateDetails:
    result = prime * result + [self.sharedFolderCreateDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderMountDetails:
    result = prime * result + [self.sharedFolderMountDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails:
    result = prime * result + [self.sharedFolderTransferOwnershipDetails hash];
  case DBTEAMLOGEventDetailsSharedFolderUnmountDetails:
    result = prime * result + [self.sharedFolderUnmountDetails hash];
  case DBTEAMLOGEventDetailsSharedNoteOpenedDetails:
    result = prime * result + [self.sharedNoteOpenedDetails hash];
  case DBTEAMLOGEventDetailsShmodelAppCreateDetails:
    result = prime * result + [self.shmodelAppCreateDetails hash];
  case DBTEAMLOGEventDetailsShmodelCreateDetails:
    result = prime * result + [self.shmodelCreateDetails hash];
  case DBTEAMLOGEventDetailsShmodelDisableDetails:
    result = prime * result + [self.shmodelDisableDetails hash];
  case DBTEAMLOGEventDetailsShmodelFbShareDetails:
    result = prime * result + [self.shmodelFbShareDetails hash];
  case DBTEAMLOGEventDetailsShmodelGroupShareDetails:
    result = prime * result + [self.shmodelGroupShareDetails hash];
  case DBTEAMLOGEventDetailsShmodelRemoveExpirationDetails:
    result = prime * result + [self.shmodelRemoveExpirationDetails hash];
  case DBTEAMLOGEventDetailsShmodelSetExpirationDetails:
    result = prime * result + [self.shmodelSetExpirationDetails hash];
  case DBTEAMLOGEventDetailsShmodelTeamCopyDetails:
    result = prime * result + [self.shmodelTeamCopyDetails hash];
  case DBTEAMLOGEventDetailsShmodelTeamDownloadDetails:
    result = prime * result + [self.shmodelTeamDownloadDetails hash];
  case DBTEAMLOGEventDetailsShmodelTeamShareDetails:
    result = prime * result + [self.shmodelTeamShareDetails hash];
  case DBTEAMLOGEventDetailsShmodelTeamViewDetails:
    result = prime * result + [self.shmodelTeamViewDetails hash];
  case DBTEAMLOGEventDetailsShmodelVisibilityPasswordDetails:
    result = prime * result + [self.shmodelVisibilityPasswordDetails hash];
  case DBTEAMLOGEventDetailsShmodelVisibilityPublicDetails:
    result = prime * result + [self.shmodelVisibilityPublicDetails hash];
  case DBTEAMLOGEventDetailsShmodelVisibilityTeamOnlyDetails:
    result = prime * result + [self.shmodelVisibilityTeamOnlyDetails hash];
  case DBTEAMLOGEventDetailsRemoveLogoutUrlDetails:
    result = prime * result + [self.removeLogoutUrlDetails hash];
  case DBTEAMLOGEventDetailsRemoveSsoUrlDetails:
    result = prime * result + [self.removeSsoUrlDetails hash];
  case DBTEAMLOGEventDetailsSsoChangeCertDetails:
    result = prime * result + [self.ssoChangeCertDetails hash];
  case DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails:
    result = prime * result + [self.ssoChangeLoginUrlDetails hash];
  case DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails:
    result = prime * result + [self.ssoChangeLogoutUrlDetails hash];
  case DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails:
    result = prime * result + [self.ssoChangeSamlIdentityModeDetails hash];
  case DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails:
    result = prime * result + [self.teamFolderChangeStatusDetails hash];
  case DBTEAMLOGEventDetailsTeamFolderCreateDetails:
    result = prime * result + [self.teamFolderCreateDetails hash];
  case DBTEAMLOGEventDetailsTeamFolderDowngradeDetails:
    result = prime * result + [self.teamFolderDowngradeDetails hash];
  case DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails:
    result = prime * result + [self.teamFolderPermanentlyDeleteDetails hash];
  case DBTEAMLOGEventDetailsTeamFolderRenameDetails:
    result = prime * result + [self.teamFolderRenameDetails hash];
  case DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails:
    result = prime * result + [self.accountCaptureChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsAllowDownloadDisabledDetails:
    result = prime * result + [self.allowDownloadDisabledDetails hash];
  case DBTEAMLOGEventDetailsAllowDownloadEnabledDetails:
    result = prime * result + [self.allowDownloadEnabledDetails hash];
  case DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails:
    result = prime * result + [self.dataPlacementRestrictionChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails:
    result = prime * result + [self.dataPlacementRestrictionSatisfyPolicyDetails hash];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails:
    result = prime * result + [self.deviceApprovalsChangeDesktopPolicyDetails hash];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails:
    result = prime * result + [self.deviceApprovalsChangeMobilePolicyDetails hash];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails:
    result = prime * result + [self.deviceApprovalsChangeOverageActionDetails hash];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails:
    result = prime * result + [self.deviceApprovalsChangeUnlinkActionDetails hash];
  case DBTEAMLOGEventDetailsEmmAddExceptionDetails:
    result = prime * result + [self.emmAddExceptionDetails hash];
  case DBTEAMLOGEventDetailsEmmChangePolicyDetails:
    result = prime * result + [self.emmChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsEmmRemoveExceptionDetails:
    result = prime * result + [self.emmRemoveExceptionDetails hash];
  case DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails:
    result = prime * result + [self.extendedVersionHistoryChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails:
    result = prime * result + [self.fileCommentsChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails:
    result = prime * result + [self.fileRequestsChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails:
    result = prime * result + [self.fileRequestsEmailsEnabledDetails hash];
  case DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails:
    result = prime * result + [self.fileRequestsEmailsRestrictedToTeamOnlyDetails hash];
  case DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails:
    result = prime * result + [self.googleSsoChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails:
    result = prime * result + [self.groupUserManagementChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails:
    result = prime * result + [self.memberRequestsChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails:
    result = prime * result + [self.memberSpaceLimitsAddExceptionDetails hash];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails:
    result = prime * result + [self.memberSpaceLimitsChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails:
    result = prime * result + [self.memberSpaceLimitsRemoveExceptionDetails hash];
  case DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails:
    result = prime * result + [self.memberSuggestionsChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails:
    result = prime * result + [self.microsoftOfficeAddinChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails:
    result = prime * result + [self.networkControlChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails:
    result = prime * result + [self.paperChangeDeploymentPolicyDetails hash];
  case DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails:
    result = prime * result + [self.paperChangeMemberPolicyDetails hash];
  case DBTEAMLOGEventDetailsPaperChangePolicyDetails:
    result = prime * result + [self.paperChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails:
    result = prime * result + [self.permanentDeleteChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails:
    result = prime * result + [self.sharingChangeFolderJoinPolicyDetails hash];
  case DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails:
    result = prime * result + [self.sharingChangeLinkPolicyDetails hash];
  case DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails:
    result = prime * result + [self.sharingChangeMemberPolicyDetails hash];
  case DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails:
    result = prime * result + [self.smartSyncChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsSsoChangePolicyDetails:
    result = prime * result + [self.ssoChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsTfaChangePolicyDetails:
    result = prime * result + [self.tfaChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails:
    result = prime * result + [self.twoAccountChangePolicyDetails hash];
  case DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails:
    result = prime * result + [self.webSessionsChangeFixedLengthPolicyDetails hash];
  case DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails:
    result = prime * result + [self.webSessionsChangeIdleLengthPolicyDetails hash];
  case DBTEAMLOGEventDetailsTeamProfileAddLogoDetails:
    result = prime * result + [self.teamProfileAddLogoDetails hash];
  case DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails:
    result = prime * result + [self.teamProfileChangeLogoDetails hash];
  case DBTEAMLOGEventDetailsTeamProfileChangeNameDetails:
    result = prime * result + [self.teamProfileChangeNameDetails hash];
  case DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails:
    result = prime * result + [self.teamProfileRemoveLogoDetails hash];
  case DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails:
    result = prime * result + [self.tfaAddBackupPhoneDetails hash];
  case DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails:
    result = prime * result + [self.tfaAddSecurityKeyDetails hash];
  case DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails:
    result = prime * result + [self.tfaChangeBackupPhoneDetails hash];
  case DBTEAMLOGEventDetailsTfaChangeStatusDetails:
    result = prime * result + [self.tfaChangeStatusDetails hash];
  case DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails:
    result = prime * result + [self.tfaRemoveBackupPhoneDetails hash];
  case DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails:
    result = prime * result + [self.tfaRemoveSecurityKeyDetails hash];
  case DBTEAMLOGEventDetailsTfaResetDetails:
    result = prime * result + [self.tfaResetDetails hash];
  case DBTEAMLOGEventDetailsMissingDetails:
    result = prime * result + [self.missingDetails hash];
  case DBTEAMLOGEventDetailsOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEventDetails:other];
}

- (BOOL)isEqualToEventDetails:(DBTEAMLOGEventDetails *)anEventDetails {
  if (self == anEventDetails) {
    return YES;
  }
  if (self.tag != anEventDetails.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails:
    return [self.memberChangeMembershipTypeDetails isEqual:anEventDetails.memberChangeMembershipTypeDetails];
  case DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails:
    return [self.memberPermanentlyDeleteAccountContentsDetails
        isEqual:anEventDetails.memberPermanentlyDeleteAccountContentsDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails:
    return [self.memberSpaceLimitsChangeStatusDetails isEqual:anEventDetails.memberSpaceLimitsChangeStatusDetails];
  case DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails:
    return [self.memberTransferAccountContentsDetails isEqual:anEventDetails.memberTransferAccountContentsDetails];
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails:
    return [self.paperEnabledUsersGroupAdditionDetails isEqual:anEventDetails.paperEnabledUsersGroupAdditionDetails];
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails:
    return [self.paperEnabledUsersGroupRemovalDetails isEqual:anEventDetails.paperEnabledUsersGroupRemovalDetails];
  case DBTEAMLOGEventDetailsPaperExternalViewAllowDetails:
    return [self.paperExternalViewAllowDetails isEqual:anEventDetails.paperExternalViewAllowDetails];
  case DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails:
    return [self.paperExternalViewDefaultTeamDetails isEqual:anEventDetails.paperExternalViewDefaultTeamDetails];
  case DBTEAMLOGEventDetailsPaperExternalViewForbidDetails:
    return [self.paperExternalViewForbidDetails isEqual:anEventDetails.paperExternalViewForbidDetails];
  case DBTEAMLOGEventDetailsSfExternalInviteWarnDetails:
    return [self.sfExternalInviteWarnDetails isEqual:anEventDetails.sfExternalInviteWarnDetails];
  case DBTEAMLOGEventDetailsTeamMergeDetails:
    return [self.teamMergeDetails isEqual:anEventDetails.teamMergeDetails];
  case DBTEAMLOGEventDetailsAppLinkTeamDetails:
    return [self.appLinkTeamDetails isEqual:anEventDetails.appLinkTeamDetails];
  case DBTEAMLOGEventDetailsAppLinkUserDetails:
    return [self.appLinkUserDetails isEqual:anEventDetails.appLinkUserDetails];
  case DBTEAMLOGEventDetailsAppUnlinkTeamDetails:
    return [self.appUnlinkTeamDetails isEqual:anEventDetails.appUnlinkTeamDetails];
  case DBTEAMLOGEventDetailsAppUnlinkUserDetails:
    return [self.appUnlinkUserDetails isEqual:anEventDetails.appUnlinkUserDetails];
  case DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails:
    return [self.deviceChangeIpDesktopDetails isEqual:anEventDetails.deviceChangeIpDesktopDetails];
  case DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails:
    return [self.deviceChangeIpMobileDetails isEqual:anEventDetails.deviceChangeIpMobileDetails];
  case DBTEAMLOGEventDetailsDeviceChangeIpWebDetails:
    return [self.deviceChangeIpWebDetails isEqual:anEventDetails.deviceChangeIpWebDetails];
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails:
    return [self.deviceDeleteOnUnlinkFailDetails isEqual:anEventDetails.deviceDeleteOnUnlinkFailDetails];
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails:
    return [self.deviceDeleteOnUnlinkSuccessDetails isEqual:anEventDetails.deviceDeleteOnUnlinkSuccessDetails];
  case DBTEAMLOGEventDetailsDeviceLinkFailDetails:
    return [self.deviceLinkFailDetails isEqual:anEventDetails.deviceLinkFailDetails];
  case DBTEAMLOGEventDetailsDeviceLinkSuccessDetails:
    return [self.deviceLinkSuccessDetails isEqual:anEventDetails.deviceLinkSuccessDetails];
  case DBTEAMLOGEventDetailsDeviceManagementDisabledDetails:
    return [self.deviceManagementDisabledDetails isEqual:anEventDetails.deviceManagementDisabledDetails];
  case DBTEAMLOGEventDetailsDeviceManagementEnabledDetails:
    return [self.deviceManagementEnabledDetails isEqual:anEventDetails.deviceManagementEnabledDetails];
  case DBTEAMLOGEventDetailsDeviceUnlinkDetails:
    return [self.deviceUnlinkDetails isEqual:anEventDetails.deviceUnlinkDetails];
  case DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails:
    return [self.emmRefreshAuthTokenDetails isEqual:anEventDetails.emmRefreshAuthTokenDetails];
  case DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails:
    return
        [self.accountCaptureChangeAvailabilityDetails isEqual:anEventDetails.accountCaptureChangeAvailabilityDetails];
  case DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails:
    return [self.accountCaptureMigrateAccountDetails isEqual:anEventDetails.accountCaptureMigrateAccountDetails];
  case DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails:
    return [self.accountCaptureRelinquishAccountDetails isEqual:anEventDetails.accountCaptureRelinquishAccountDetails];
  case DBTEAMLOGEventDetailsDisabledDomainInvitesDetails:
    return [self.disabledDomainInvitesDetails isEqual:anEventDetails.disabledDomainInvitesDetails];
  case DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails:
    return [self.domainInvitesApproveRequestToJoinTeamDetails
        isEqual:anEventDetails.domainInvitesApproveRequestToJoinTeamDetails];
  case DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails:
    return [self.domainInvitesDeclineRequestToJoinTeamDetails
        isEqual:anEventDetails.domainInvitesDeclineRequestToJoinTeamDetails];
  case DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails:
    return [self.domainInvitesEmailExistingUsersDetails isEqual:anEventDetails.domainInvitesEmailExistingUsersDetails];
  case DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails:
    return [self.domainInvitesRequestToJoinTeamDetails isEqual:anEventDetails.domainInvitesRequestToJoinTeamDetails];
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails:
    return [self.domainInvitesSetInviteNewUserPrefToNoDetails
        isEqual:anEventDetails.domainInvitesSetInviteNewUserPrefToNoDetails];
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails:
    return [self.domainInvitesSetInviteNewUserPrefToYesDetails
        isEqual:anEventDetails.domainInvitesSetInviteNewUserPrefToYesDetails];
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails:
    return [self.domainVerificationAddDomainFailDetails isEqual:anEventDetails.domainVerificationAddDomainFailDetails];
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails:
    return [self.domainVerificationAddDomainSuccessDetails
        isEqual:anEventDetails.domainVerificationAddDomainSuccessDetails];
  case DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails:
    return [self.domainVerificationRemoveDomainDetails isEqual:anEventDetails.domainVerificationRemoveDomainDetails];
  case DBTEAMLOGEventDetailsEnabledDomainInvitesDetails:
    return [self.enabledDomainInvitesDetails isEqual:anEventDetails.enabledDomainInvitesDetails];
  case DBTEAMLOGEventDetailsCreateFolderDetails:
    return [self.createFolderDetails isEqual:anEventDetails.createFolderDetails];
  case DBTEAMLOGEventDetailsFileAddDetails:
    return [self.fileAddDetails isEqual:anEventDetails.fileAddDetails];
  case DBTEAMLOGEventDetailsFileCopyDetails:
    return [self.fileCopyDetails isEqual:anEventDetails.fileCopyDetails];
  case DBTEAMLOGEventDetailsFileDeleteDetails:
    return [self.fileDeleteDetails isEqual:anEventDetails.fileDeleteDetails];
  case DBTEAMLOGEventDetailsFileDownloadDetails:
    return [self.fileDownloadDetails isEqual:anEventDetails.fileDownloadDetails];
  case DBTEAMLOGEventDetailsFileEditDetails:
    return [self.fileEditDetails isEqual:anEventDetails.fileEditDetails];
  case DBTEAMLOGEventDetailsFileGetCopyReferenceDetails:
    return [self.fileGetCopyReferenceDetails isEqual:anEventDetails.fileGetCopyReferenceDetails];
  case DBTEAMLOGEventDetailsFileMoveDetails:
    return [self.fileMoveDetails isEqual:anEventDetails.fileMoveDetails];
  case DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails:
    return [self.filePermanentlyDeleteDetails isEqual:anEventDetails.filePermanentlyDeleteDetails];
  case DBTEAMLOGEventDetailsFilePreviewDetails:
    return [self.filePreviewDetails isEqual:anEventDetails.filePreviewDetails];
  case DBTEAMLOGEventDetailsFileRenameDetails:
    return [self.fileRenameDetails isEqual:anEventDetails.fileRenameDetails];
  case DBTEAMLOGEventDetailsFileRestoreDetails:
    return [self.fileRestoreDetails isEqual:anEventDetails.fileRestoreDetails];
  case DBTEAMLOGEventDetailsFileRevertDetails:
    return [self.fileRevertDetails isEqual:anEventDetails.fileRevertDetails];
  case DBTEAMLOGEventDetailsFileRollbackChangesDetails:
    return [self.fileRollbackChangesDetails isEqual:anEventDetails.fileRollbackChangesDetails];
  case DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails:
    return [self.fileSaveCopyReferenceDetails isEqual:anEventDetails.fileSaveCopyReferenceDetails];
  case DBTEAMLOGEventDetailsFileRequestAddDeadlineDetails:
    return [self.fileRequestAddDeadlineDetails isEqual:anEventDetails.fileRequestAddDeadlineDetails];
  case DBTEAMLOGEventDetailsFileRequestChangeFolderDetails:
    return [self.fileRequestChangeFolderDetails isEqual:anEventDetails.fileRequestChangeFolderDetails];
  case DBTEAMLOGEventDetailsFileRequestChangeTitleDetails:
    return [self.fileRequestChangeTitleDetails isEqual:anEventDetails.fileRequestChangeTitleDetails];
  case DBTEAMLOGEventDetailsFileRequestCloseDetails:
    return [self.fileRequestCloseDetails isEqual:anEventDetails.fileRequestCloseDetails];
  case DBTEAMLOGEventDetailsFileRequestCreateDetails:
    return [self.fileRequestCreateDetails isEqual:anEventDetails.fileRequestCreateDetails];
  case DBTEAMLOGEventDetailsFileRequestReceiveFileDetails:
    return [self.fileRequestReceiveFileDetails isEqual:anEventDetails.fileRequestReceiveFileDetails];
  case DBTEAMLOGEventDetailsFileRequestRemoveDeadlineDetails:
    return [self.fileRequestRemoveDeadlineDetails isEqual:anEventDetails.fileRequestRemoveDeadlineDetails];
  case DBTEAMLOGEventDetailsFileRequestSendDetails:
    return [self.fileRequestSendDetails isEqual:anEventDetails.fileRequestSendDetails];
  case DBTEAMLOGEventDetailsGroupAddExternalIdDetails:
    return [self.groupAddExternalIdDetails isEqual:anEventDetails.groupAddExternalIdDetails];
  case DBTEAMLOGEventDetailsGroupAddMemberDetails:
    return [self.groupAddMemberDetails isEqual:anEventDetails.groupAddMemberDetails];
  case DBTEAMLOGEventDetailsGroupChangeExternalIdDetails:
    return [self.groupChangeExternalIdDetails isEqual:anEventDetails.groupChangeExternalIdDetails];
  case DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails:
    return [self.groupChangeManagementTypeDetails isEqual:anEventDetails.groupChangeManagementTypeDetails];
  case DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails:
    return [self.groupChangeMemberRoleDetails isEqual:anEventDetails.groupChangeMemberRoleDetails];
  case DBTEAMLOGEventDetailsGroupCreateDetails:
    return [self.groupCreateDetails isEqual:anEventDetails.groupCreateDetails];
  case DBTEAMLOGEventDetailsGroupDeleteDetails:
    return [self.groupDeleteDetails isEqual:anEventDetails.groupDeleteDetails];
  case DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails:
    return [self.groupDescriptionUpdatedDetails isEqual:anEventDetails.groupDescriptionUpdatedDetails];
  case DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails:
    return [self.groupJoinPolicyUpdatedDetails isEqual:anEventDetails.groupJoinPolicyUpdatedDetails];
  case DBTEAMLOGEventDetailsGroupMovedDetails:
    return [self.groupMovedDetails isEqual:anEventDetails.groupMovedDetails];
  case DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails:
    return [self.groupRemoveExternalIdDetails isEqual:anEventDetails.groupRemoveExternalIdDetails];
  case DBTEAMLOGEventDetailsGroupRemoveMemberDetails:
    return [self.groupRemoveMemberDetails isEqual:anEventDetails.groupRemoveMemberDetails];
  case DBTEAMLOGEventDetailsGroupRenameDetails:
    return [self.groupRenameDetails isEqual:anEventDetails.groupRenameDetails];
  case DBTEAMLOGEventDetailsEmmLoginSuccessDetails:
    return [self.emmLoginSuccessDetails isEqual:anEventDetails.emmLoginSuccessDetails];
  case DBTEAMLOGEventDetailsLogoutDetails:
    return [self.logoutDetails isEqual:anEventDetails.logoutDetails];
  case DBTEAMLOGEventDetailsPasswordLoginFailDetails:
    return [self.passwordLoginFailDetails isEqual:anEventDetails.passwordLoginFailDetails];
  case DBTEAMLOGEventDetailsPasswordLoginSuccessDetails:
    return [self.passwordLoginSuccessDetails isEqual:anEventDetails.passwordLoginSuccessDetails];
  case DBTEAMLOGEventDetailsResellerSupportSessionEndDetails:
    return [self.resellerSupportSessionEndDetails isEqual:anEventDetails.resellerSupportSessionEndDetails];
  case DBTEAMLOGEventDetailsResellerSupportSessionStartDetails:
    return [self.resellerSupportSessionStartDetails isEqual:anEventDetails.resellerSupportSessionStartDetails];
  case DBTEAMLOGEventDetailsSignInAsSessionEndDetails:
    return [self.signInAsSessionEndDetails isEqual:anEventDetails.signInAsSessionEndDetails];
  case DBTEAMLOGEventDetailsSignInAsSessionStartDetails:
    return [self.signInAsSessionStartDetails isEqual:anEventDetails.signInAsSessionStartDetails];
  case DBTEAMLOGEventDetailsSsoLoginFailDetails:
    return [self.ssoLoginFailDetails isEqual:anEventDetails.ssoLoginFailDetails];
  case DBTEAMLOGEventDetailsMemberAddNameDetails:
    return [self.memberAddNameDetails isEqual:anEventDetails.memberAddNameDetails];
  case DBTEAMLOGEventDetailsMemberChangeEmailDetails:
    return [self.memberChangeEmailDetails isEqual:anEventDetails.memberChangeEmailDetails];
  case DBTEAMLOGEventDetailsMemberChangeNameDetails:
    return [self.memberChangeNameDetails isEqual:anEventDetails.memberChangeNameDetails];
  case DBTEAMLOGEventDetailsMemberChangeRoleDetails:
    return [self.memberChangeRoleDetails isEqual:anEventDetails.memberChangeRoleDetails];
  case DBTEAMLOGEventDetailsMemberInviteDetails:
    return [self.memberInviteDetails isEqual:anEventDetails.memberInviteDetails];
  case DBTEAMLOGEventDetailsMemberJoinDetails:
    return [self.memberJoinDetails isEqual:anEventDetails.memberJoinDetails];
  case DBTEAMLOGEventDetailsMemberLeaveDetails:
    return [self.memberLeaveDetails isEqual:anEventDetails.memberLeaveDetails];
  case DBTEAMLOGEventDetailsMemberRecoverDetails:
    return [self.memberRecoverDetails isEqual:anEventDetails.memberRecoverDetails];
  case DBTEAMLOGEventDetailsMemberSuggestDetails:
    return [self.memberSuggestDetails isEqual:anEventDetails.memberSuggestDetails];
  case DBTEAMLOGEventDetailsMemberSuspendDetails:
    return [self.memberSuspendDetails isEqual:anEventDetails.memberSuspendDetails];
  case DBTEAMLOGEventDetailsMemberUnsuspendDetails:
    return [self.memberUnsuspendDetails isEqual:anEventDetails.memberUnsuspendDetails];
  case DBTEAMLOGEventDetailsPaperContentAddMemberDetails:
    return [self.paperContentAddMemberDetails isEqual:anEventDetails.paperContentAddMemberDetails];
  case DBTEAMLOGEventDetailsPaperContentAddToFolderDetails:
    return [self.paperContentAddToFolderDetails isEqual:anEventDetails.paperContentAddToFolderDetails];
  case DBTEAMLOGEventDetailsPaperContentArchiveDetails:
    return [self.paperContentArchiveDetails isEqual:anEventDetails.paperContentArchiveDetails];
  case DBTEAMLOGEventDetailsPaperContentChangeSubscriptionDetails:
    return [self.paperContentChangeSubscriptionDetails isEqual:anEventDetails.paperContentChangeSubscriptionDetails];
  case DBTEAMLOGEventDetailsPaperContentCreateDetails:
    return [self.paperContentCreateDetails isEqual:anEventDetails.paperContentCreateDetails];
  case DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails:
    return [self.paperContentPermanentlyDeleteDetails isEqual:anEventDetails.paperContentPermanentlyDeleteDetails];
  case DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails:
    return [self.paperContentRemoveFromFolderDetails isEqual:anEventDetails.paperContentRemoveFromFolderDetails];
  case DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails:
    return [self.paperContentRemoveMemberDetails isEqual:anEventDetails.paperContentRemoveMemberDetails];
  case DBTEAMLOGEventDetailsPaperContentRenameDetails:
    return [self.paperContentRenameDetails isEqual:anEventDetails.paperContentRenameDetails];
  case DBTEAMLOGEventDetailsPaperContentRestoreDetails:
    return [self.paperContentRestoreDetails isEqual:anEventDetails.paperContentRestoreDetails];
  case DBTEAMLOGEventDetailsPaperDocAddCommentDetails:
    return [self.paperDocAddCommentDetails isEqual:anEventDetails.paperDocAddCommentDetails];
  case DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails:
    return [self.paperDocChangeMemberRoleDetails isEqual:anEventDetails.paperDocChangeMemberRoleDetails];
  case DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails:
    return [self.paperDocChangeSharingPolicyDetails isEqual:anEventDetails.paperDocChangeSharingPolicyDetails];
  case DBTEAMLOGEventDetailsPaperDocDeletedDetails:
    return [self.paperDocDeletedDetails isEqual:anEventDetails.paperDocDeletedDetails];
  case DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails:
    return [self.paperDocDeleteCommentDetails isEqual:anEventDetails.paperDocDeleteCommentDetails];
  case DBTEAMLOGEventDetailsPaperDocDownloadDetails:
    return [self.paperDocDownloadDetails isEqual:anEventDetails.paperDocDownloadDetails];
  case DBTEAMLOGEventDetailsPaperDocEditDetails:
    return [self.paperDocEditDetails isEqual:anEventDetails.paperDocEditDetails];
  case DBTEAMLOGEventDetailsPaperDocEditCommentDetails:
    return [self.paperDocEditCommentDetails isEqual:anEventDetails.paperDocEditCommentDetails];
  case DBTEAMLOGEventDetailsPaperDocFollowedDetails:
    return [self.paperDocFollowedDetails isEqual:anEventDetails.paperDocFollowedDetails];
  case DBTEAMLOGEventDetailsPaperDocMentionDetails:
    return [self.paperDocMentionDetails isEqual:anEventDetails.paperDocMentionDetails];
  case DBTEAMLOGEventDetailsPaperDocRequestAccessDetails:
    return [self.paperDocRequestAccessDetails isEqual:anEventDetails.paperDocRequestAccessDetails];
  case DBTEAMLOGEventDetailsPaperDocResolveCommentDetails:
    return [self.paperDocResolveCommentDetails isEqual:anEventDetails.paperDocResolveCommentDetails];
  case DBTEAMLOGEventDetailsPaperDocRevertDetails:
    return [self.paperDocRevertDetails isEqual:anEventDetails.paperDocRevertDetails];
  case DBTEAMLOGEventDetailsPaperDocSlackShareDetails:
    return [self.paperDocSlackShareDetails isEqual:anEventDetails.paperDocSlackShareDetails];
  case DBTEAMLOGEventDetailsPaperDocTeamInviteDetails:
    return [self.paperDocTeamInviteDetails isEqual:anEventDetails.paperDocTeamInviteDetails];
  case DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails:
    return [self.paperDocUnresolveCommentDetails isEqual:anEventDetails.paperDocUnresolveCommentDetails];
  case DBTEAMLOGEventDetailsPaperDocViewDetails:
    return [self.paperDocViewDetails isEqual:anEventDetails.paperDocViewDetails];
  case DBTEAMLOGEventDetailsPaperFolderDeletedDetails:
    return [self.paperFolderDeletedDetails isEqual:anEventDetails.paperFolderDeletedDetails];
  case DBTEAMLOGEventDetailsPaperFolderFollowedDetails:
    return [self.paperFolderFollowedDetails isEqual:anEventDetails.paperFolderFollowedDetails];
  case DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails:
    return [self.paperFolderTeamInviteDetails isEqual:anEventDetails.paperFolderTeamInviteDetails];
  case DBTEAMLOGEventDetailsPasswordChangeDetails:
    return [self.passwordChangeDetails isEqual:anEventDetails.passwordChangeDetails];
  case DBTEAMLOGEventDetailsPasswordResetDetails:
    return [self.passwordResetDetails isEqual:anEventDetails.passwordResetDetails];
  case DBTEAMLOGEventDetailsPasswordResetAllDetails:
    return [self.passwordResetAllDetails isEqual:anEventDetails.passwordResetAllDetails];
  case DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails:
    return [self.emmCreateExceptionsReportDetails isEqual:anEventDetails.emmCreateExceptionsReportDetails];
  case DBTEAMLOGEventDetailsEmmCreateUsageReportDetails:
    return [self.emmCreateUsageReportDetails isEqual:anEventDetails.emmCreateUsageReportDetails];
  case DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails:
    return [self.smartSyncCreateAdminPrivilegeReportDetails
        isEqual:anEventDetails.smartSyncCreateAdminPrivilegeReportDetails];
  case DBTEAMLOGEventDetailsTeamActivityCreateReportDetails:
    return [self.teamActivityCreateReportDetails isEqual:anEventDetails.teamActivityCreateReportDetails];
  case DBTEAMLOGEventDetailsCollectionShareDetails:
    return [self.collectionShareDetails isEqual:anEventDetails.collectionShareDetails];
  case DBTEAMLOGEventDetailsFileAddCommentDetails:
    return [self.fileAddCommentDetails isEqual:anEventDetails.fileAddCommentDetails];
  case DBTEAMLOGEventDetailsFileLikeCommentDetails:
    return [self.fileLikeCommentDetails isEqual:anEventDetails.fileLikeCommentDetails];
  case DBTEAMLOGEventDetailsFileUnlikeCommentDetails:
    return [self.fileUnlikeCommentDetails isEqual:anEventDetails.fileUnlikeCommentDetails];
  case DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails:
    return [self.noteAclInviteOnlyDetails isEqual:anEventDetails.noteAclInviteOnlyDetails];
  case DBTEAMLOGEventDetailsNoteAclLinkDetails:
    return [self.noteAclLinkDetails isEqual:anEventDetails.noteAclLinkDetails];
  case DBTEAMLOGEventDetailsNoteAclTeamLinkDetails:
    return [self.noteAclTeamLinkDetails isEqual:anEventDetails.noteAclTeamLinkDetails];
  case DBTEAMLOGEventDetailsNoteSharedDetails:
    return [self.noteSharedDetails isEqual:anEventDetails.noteSharedDetails];
  case DBTEAMLOGEventDetailsNoteShareReceiveDetails:
    return [self.noteShareReceiveDetails isEqual:anEventDetails.noteShareReceiveDetails];
  case DBTEAMLOGEventDetailsOpenNoteSharedDetails:
    return [self.openNoteSharedDetails isEqual:anEventDetails.openNoteSharedDetails];
  case DBTEAMLOGEventDetailsSfAddGroupDetails:
    return [self.sfAddGroupDetails isEqual:anEventDetails.sfAddGroupDetails];
  case DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails:
    return [self.sfAllowNonMembersToViewSharedLinksDetails
        isEqual:anEventDetails.sfAllowNonMembersToViewSharedLinksDetails];
  case DBTEAMLOGEventDetailsSfInviteGroupDetails:
    return [self.sfInviteGroupDetails isEqual:anEventDetails.sfInviteGroupDetails];
  case DBTEAMLOGEventDetailsSfNestDetails:
    return [self.sfNestDetails isEqual:anEventDetails.sfNestDetails];
  case DBTEAMLOGEventDetailsSfTeamDeclineDetails:
    return [self.sfTeamDeclineDetails isEqual:anEventDetails.sfTeamDeclineDetails];
  case DBTEAMLOGEventDetailsSfTeamGrantAccessDetails:
    return [self.sfTeamGrantAccessDetails isEqual:anEventDetails.sfTeamGrantAccessDetails];
  case DBTEAMLOGEventDetailsSfTeamInviteDetails:
    return [self.sfTeamInviteDetails isEqual:anEventDetails.sfTeamInviteDetails];
  case DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails:
    return [self.sfTeamInviteChangeRoleDetails isEqual:anEventDetails.sfTeamInviteChangeRoleDetails];
  case DBTEAMLOGEventDetailsSfTeamJoinDetails:
    return [self.sfTeamJoinDetails isEqual:anEventDetails.sfTeamJoinDetails];
  case DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails:
    return [self.sfTeamJoinFromOobLinkDetails isEqual:anEventDetails.sfTeamJoinFromOobLinkDetails];
  case DBTEAMLOGEventDetailsSfTeamUninviteDetails:
    return [self.sfTeamUninviteDetails isEqual:anEventDetails.sfTeamUninviteDetails];
  case DBTEAMLOGEventDetailsSharedContentAddInviteesDetails:
    return [self.sharedContentAddInviteesDetails isEqual:anEventDetails.sharedContentAddInviteesDetails];
  case DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails:
    return [self.sharedContentAddLinkExpiryDetails isEqual:anEventDetails.sharedContentAddLinkExpiryDetails];
  case DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails:
    return [self.sharedContentAddLinkPasswordDetails isEqual:anEventDetails.sharedContentAddLinkPasswordDetails];
  case DBTEAMLOGEventDetailsSharedContentAddMemberDetails:
    return [self.sharedContentAddMemberDetails isEqual:anEventDetails.sharedContentAddMemberDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails:
    return [self.sharedContentChangeDownloadsPolicyDetails
        isEqual:anEventDetails.sharedContentChangeDownloadsPolicyDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails:
    return [self.sharedContentChangeInviteeRoleDetails isEqual:anEventDetails.sharedContentChangeInviteeRoleDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails:
    return [self.sharedContentChangeLinkAudienceDetails isEqual:anEventDetails.sharedContentChangeLinkAudienceDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails:
    return [self.sharedContentChangeLinkExpiryDetails isEqual:anEventDetails.sharedContentChangeLinkExpiryDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails:
    return [self.sharedContentChangeLinkPasswordDetails isEqual:anEventDetails.sharedContentChangeLinkPasswordDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails:
    return [self.sharedContentChangeMemberRoleDetails isEqual:anEventDetails.sharedContentChangeMemberRoleDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails:
    return [self.sharedContentChangeViewerInfoPolicyDetails
        isEqual:anEventDetails.sharedContentChangeViewerInfoPolicyDetails];
  case DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails:
    return [self.sharedContentClaimInvitationDetails isEqual:anEventDetails.sharedContentClaimInvitationDetails];
  case DBTEAMLOGEventDetailsSharedContentCopyDetails:
    return [self.sharedContentCopyDetails isEqual:anEventDetails.sharedContentCopyDetails];
  case DBTEAMLOGEventDetailsSharedContentDownloadDetails:
    return [self.sharedContentDownloadDetails isEqual:anEventDetails.sharedContentDownloadDetails];
  case DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails:
    return
        [self.sharedContentRelinquishMembershipDetails isEqual:anEventDetails.sharedContentRelinquishMembershipDetails];
  case DBTEAMLOGEventDetailsSharedContentRemoveInviteeDetails:
    return [self.sharedContentRemoveInviteeDetails isEqual:anEventDetails.sharedContentRemoveInviteeDetails];
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails:
    return [self.sharedContentRemoveLinkExpiryDetails isEqual:anEventDetails.sharedContentRemoveLinkExpiryDetails];
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails:
    return [self.sharedContentRemoveLinkPasswordDetails isEqual:anEventDetails.sharedContentRemoveLinkPasswordDetails];
  case DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails:
    return [self.sharedContentRemoveMemberDetails isEqual:anEventDetails.sharedContentRemoveMemberDetails];
  case DBTEAMLOGEventDetailsSharedContentRequestAccessDetails:
    return [self.sharedContentRequestAccessDetails isEqual:anEventDetails.sharedContentRequestAccessDetails];
  case DBTEAMLOGEventDetailsSharedContentUnshareDetails:
    return [self.sharedContentUnshareDetails isEqual:anEventDetails.sharedContentUnshareDetails];
  case DBTEAMLOGEventDetailsSharedContentViewDetails:
    return [self.sharedContentViewDetails isEqual:anEventDetails.sharedContentViewDetails];
  case DBTEAMLOGEventDetailsSharedFolderChangeConfidentialityDetails:
    return
        [self.sharedFolderChangeConfidentialityDetails isEqual:anEventDetails.sharedFolderChangeConfidentialityDetails];
  case DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails:
    return [self.sharedFolderChangeLinkPolicyDetails isEqual:anEventDetails.sharedFolderChangeLinkPolicyDetails];
  case DBTEAMLOGEventDetailsSharedFolderChangeMemberManagementPolicyDetails:
    return [self.sharedFolderChangeMemberManagementPolicyDetails
        isEqual:anEventDetails.sharedFolderChangeMemberManagementPolicyDetails];
  case DBTEAMLOGEventDetailsSharedFolderChangeMemberPolicyDetails:
    return [self.sharedFolderChangeMemberPolicyDetails isEqual:anEventDetails.sharedFolderChangeMemberPolicyDetails];
  case DBTEAMLOGEventDetailsSharedFolderCreateDetails:
    return [self.sharedFolderCreateDetails isEqual:anEventDetails.sharedFolderCreateDetails];
  case DBTEAMLOGEventDetailsSharedFolderMountDetails:
    return [self.sharedFolderMountDetails isEqual:anEventDetails.sharedFolderMountDetails];
  case DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails:
    return [self.sharedFolderTransferOwnershipDetails isEqual:anEventDetails.sharedFolderTransferOwnershipDetails];
  case DBTEAMLOGEventDetailsSharedFolderUnmountDetails:
    return [self.sharedFolderUnmountDetails isEqual:anEventDetails.sharedFolderUnmountDetails];
  case DBTEAMLOGEventDetailsSharedNoteOpenedDetails:
    return [self.sharedNoteOpenedDetails isEqual:anEventDetails.sharedNoteOpenedDetails];
  case DBTEAMLOGEventDetailsShmodelAppCreateDetails:
    return [self.shmodelAppCreateDetails isEqual:anEventDetails.shmodelAppCreateDetails];
  case DBTEAMLOGEventDetailsShmodelCreateDetails:
    return [self.shmodelCreateDetails isEqual:anEventDetails.shmodelCreateDetails];
  case DBTEAMLOGEventDetailsShmodelDisableDetails:
    return [self.shmodelDisableDetails isEqual:anEventDetails.shmodelDisableDetails];
  case DBTEAMLOGEventDetailsShmodelFbShareDetails:
    return [self.shmodelFbShareDetails isEqual:anEventDetails.shmodelFbShareDetails];
  case DBTEAMLOGEventDetailsShmodelGroupShareDetails:
    return [self.shmodelGroupShareDetails isEqual:anEventDetails.shmodelGroupShareDetails];
  case DBTEAMLOGEventDetailsShmodelRemoveExpirationDetails:
    return [self.shmodelRemoveExpirationDetails isEqual:anEventDetails.shmodelRemoveExpirationDetails];
  case DBTEAMLOGEventDetailsShmodelSetExpirationDetails:
    return [self.shmodelSetExpirationDetails isEqual:anEventDetails.shmodelSetExpirationDetails];
  case DBTEAMLOGEventDetailsShmodelTeamCopyDetails:
    return [self.shmodelTeamCopyDetails isEqual:anEventDetails.shmodelTeamCopyDetails];
  case DBTEAMLOGEventDetailsShmodelTeamDownloadDetails:
    return [self.shmodelTeamDownloadDetails isEqual:anEventDetails.shmodelTeamDownloadDetails];
  case DBTEAMLOGEventDetailsShmodelTeamShareDetails:
    return [self.shmodelTeamShareDetails isEqual:anEventDetails.shmodelTeamShareDetails];
  case DBTEAMLOGEventDetailsShmodelTeamViewDetails:
    return [self.shmodelTeamViewDetails isEqual:anEventDetails.shmodelTeamViewDetails];
  case DBTEAMLOGEventDetailsShmodelVisibilityPasswordDetails:
    return [self.shmodelVisibilityPasswordDetails isEqual:anEventDetails.shmodelVisibilityPasswordDetails];
  case DBTEAMLOGEventDetailsShmodelVisibilityPublicDetails:
    return [self.shmodelVisibilityPublicDetails isEqual:anEventDetails.shmodelVisibilityPublicDetails];
  case DBTEAMLOGEventDetailsShmodelVisibilityTeamOnlyDetails:
    return [self.shmodelVisibilityTeamOnlyDetails isEqual:anEventDetails.shmodelVisibilityTeamOnlyDetails];
  case DBTEAMLOGEventDetailsRemoveLogoutUrlDetails:
    return [self.removeLogoutUrlDetails isEqual:anEventDetails.removeLogoutUrlDetails];
  case DBTEAMLOGEventDetailsRemoveSsoUrlDetails:
    return [self.removeSsoUrlDetails isEqual:anEventDetails.removeSsoUrlDetails];
  case DBTEAMLOGEventDetailsSsoChangeCertDetails:
    return [self.ssoChangeCertDetails isEqual:anEventDetails.ssoChangeCertDetails];
  case DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails:
    return [self.ssoChangeLoginUrlDetails isEqual:anEventDetails.ssoChangeLoginUrlDetails];
  case DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails:
    return [self.ssoChangeLogoutUrlDetails isEqual:anEventDetails.ssoChangeLogoutUrlDetails];
  case DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails:
    return [self.ssoChangeSamlIdentityModeDetails isEqual:anEventDetails.ssoChangeSamlIdentityModeDetails];
  case DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails:
    return [self.teamFolderChangeStatusDetails isEqual:anEventDetails.teamFolderChangeStatusDetails];
  case DBTEAMLOGEventDetailsTeamFolderCreateDetails:
    return [self.teamFolderCreateDetails isEqual:anEventDetails.teamFolderCreateDetails];
  case DBTEAMLOGEventDetailsTeamFolderDowngradeDetails:
    return [self.teamFolderDowngradeDetails isEqual:anEventDetails.teamFolderDowngradeDetails];
  case DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails:
    return [self.teamFolderPermanentlyDeleteDetails isEqual:anEventDetails.teamFolderPermanentlyDeleteDetails];
  case DBTEAMLOGEventDetailsTeamFolderRenameDetails:
    return [self.teamFolderRenameDetails isEqual:anEventDetails.teamFolderRenameDetails];
  case DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails:
    return [self.accountCaptureChangePolicyDetails isEqual:anEventDetails.accountCaptureChangePolicyDetails];
  case DBTEAMLOGEventDetailsAllowDownloadDisabledDetails:
    return [self.allowDownloadDisabledDetails isEqual:anEventDetails.allowDownloadDisabledDetails];
  case DBTEAMLOGEventDetailsAllowDownloadEnabledDetails:
    return [self.allowDownloadEnabledDetails isEqual:anEventDetails.allowDownloadEnabledDetails];
  case DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails:
    return [self.dataPlacementRestrictionChangePolicyDetails
        isEqual:anEventDetails.dataPlacementRestrictionChangePolicyDetails];
  case DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails:
    return [self.dataPlacementRestrictionSatisfyPolicyDetails
        isEqual:anEventDetails.dataPlacementRestrictionSatisfyPolicyDetails];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails:
    return [self.deviceApprovalsChangeDesktopPolicyDetails
        isEqual:anEventDetails.deviceApprovalsChangeDesktopPolicyDetails];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails:
    return
        [self.deviceApprovalsChangeMobilePolicyDetails isEqual:anEventDetails.deviceApprovalsChangeMobilePolicyDetails];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails:
    return [self.deviceApprovalsChangeOverageActionDetails
        isEqual:anEventDetails.deviceApprovalsChangeOverageActionDetails];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails:
    return
        [self.deviceApprovalsChangeUnlinkActionDetails isEqual:anEventDetails.deviceApprovalsChangeUnlinkActionDetails];
  case DBTEAMLOGEventDetailsEmmAddExceptionDetails:
    return [self.emmAddExceptionDetails isEqual:anEventDetails.emmAddExceptionDetails];
  case DBTEAMLOGEventDetailsEmmChangePolicyDetails:
    return [self.emmChangePolicyDetails isEqual:anEventDetails.emmChangePolicyDetails];
  case DBTEAMLOGEventDetailsEmmRemoveExceptionDetails:
    return [self.emmRemoveExceptionDetails isEqual:anEventDetails.emmRemoveExceptionDetails];
  case DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails:
    return [self.extendedVersionHistoryChangePolicyDetails
        isEqual:anEventDetails.extendedVersionHistoryChangePolicyDetails];
  case DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails:
    return [self.fileCommentsChangePolicyDetails isEqual:anEventDetails.fileCommentsChangePolicyDetails];
  case DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails:
    return [self.fileRequestsChangePolicyDetails isEqual:anEventDetails.fileRequestsChangePolicyDetails];
  case DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails:
    return [self.fileRequestsEmailsEnabledDetails isEqual:anEventDetails.fileRequestsEmailsEnabledDetails];
  case DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails:
    return [self.fileRequestsEmailsRestrictedToTeamOnlyDetails
        isEqual:anEventDetails.fileRequestsEmailsRestrictedToTeamOnlyDetails];
  case DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails:
    return [self.googleSsoChangePolicyDetails isEqual:anEventDetails.googleSsoChangePolicyDetails];
  case DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails:
    return [self.groupUserManagementChangePolicyDetails isEqual:anEventDetails.groupUserManagementChangePolicyDetails];
  case DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails:
    return [self.memberRequestsChangePolicyDetails isEqual:anEventDetails.memberRequestsChangePolicyDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails:
    return [self.memberSpaceLimitsAddExceptionDetails isEqual:anEventDetails.memberSpaceLimitsAddExceptionDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails:
    return [self.memberSpaceLimitsChangePolicyDetails isEqual:anEventDetails.memberSpaceLimitsChangePolicyDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails:
    return
        [self.memberSpaceLimitsRemoveExceptionDetails isEqual:anEventDetails.memberSpaceLimitsRemoveExceptionDetails];
  case DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails:
    return [self.memberSuggestionsChangePolicyDetails isEqual:anEventDetails.memberSuggestionsChangePolicyDetails];
  case DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails:
    return
        [self.microsoftOfficeAddinChangePolicyDetails isEqual:anEventDetails.microsoftOfficeAddinChangePolicyDetails];
  case DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails:
    return [self.networkControlChangePolicyDetails isEqual:anEventDetails.networkControlChangePolicyDetails];
  case DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails:
    return [self.paperChangeDeploymentPolicyDetails isEqual:anEventDetails.paperChangeDeploymentPolicyDetails];
  case DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails:
    return [self.paperChangeMemberPolicyDetails isEqual:anEventDetails.paperChangeMemberPolicyDetails];
  case DBTEAMLOGEventDetailsPaperChangePolicyDetails:
    return [self.paperChangePolicyDetails isEqual:anEventDetails.paperChangePolicyDetails];
  case DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails:
    return [self.permanentDeleteChangePolicyDetails isEqual:anEventDetails.permanentDeleteChangePolicyDetails];
  case DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails:
    return [self.sharingChangeFolderJoinPolicyDetails isEqual:anEventDetails.sharingChangeFolderJoinPolicyDetails];
  case DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails:
    return [self.sharingChangeLinkPolicyDetails isEqual:anEventDetails.sharingChangeLinkPolicyDetails];
  case DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails:
    return [self.sharingChangeMemberPolicyDetails isEqual:anEventDetails.sharingChangeMemberPolicyDetails];
  case DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails:
    return [self.smartSyncChangePolicyDetails isEqual:anEventDetails.smartSyncChangePolicyDetails];
  case DBTEAMLOGEventDetailsSsoChangePolicyDetails:
    return [self.ssoChangePolicyDetails isEqual:anEventDetails.ssoChangePolicyDetails];
  case DBTEAMLOGEventDetailsTfaChangePolicyDetails:
    return [self.tfaChangePolicyDetails isEqual:anEventDetails.tfaChangePolicyDetails];
  case DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails:
    return [self.twoAccountChangePolicyDetails isEqual:anEventDetails.twoAccountChangePolicyDetails];
  case DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails:
    return [self.webSessionsChangeFixedLengthPolicyDetails
        isEqual:anEventDetails.webSessionsChangeFixedLengthPolicyDetails];
  case DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails:
    return
        [self.webSessionsChangeIdleLengthPolicyDetails isEqual:anEventDetails.webSessionsChangeIdleLengthPolicyDetails];
  case DBTEAMLOGEventDetailsTeamProfileAddLogoDetails:
    return [self.teamProfileAddLogoDetails isEqual:anEventDetails.teamProfileAddLogoDetails];
  case DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails:
    return [self.teamProfileChangeLogoDetails isEqual:anEventDetails.teamProfileChangeLogoDetails];
  case DBTEAMLOGEventDetailsTeamProfileChangeNameDetails:
    return [self.teamProfileChangeNameDetails isEqual:anEventDetails.teamProfileChangeNameDetails];
  case DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails:
    return [self.teamProfileRemoveLogoDetails isEqual:anEventDetails.teamProfileRemoveLogoDetails];
  case DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails:
    return [self.tfaAddBackupPhoneDetails isEqual:anEventDetails.tfaAddBackupPhoneDetails];
  case DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails:
    return [self.tfaAddSecurityKeyDetails isEqual:anEventDetails.tfaAddSecurityKeyDetails];
  case DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails:
    return [self.tfaChangeBackupPhoneDetails isEqual:anEventDetails.tfaChangeBackupPhoneDetails];
  case DBTEAMLOGEventDetailsTfaChangeStatusDetails:
    return [self.tfaChangeStatusDetails isEqual:anEventDetails.tfaChangeStatusDetails];
  case DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails:
    return [self.tfaRemoveBackupPhoneDetails isEqual:anEventDetails.tfaRemoveBackupPhoneDetails];
  case DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails:
    return [self.tfaRemoveSecurityKeyDetails isEqual:anEventDetails.tfaRemoveSecurityKeyDetails];
  case DBTEAMLOGEventDetailsTfaResetDetails:
    return [self.tfaResetDetails isEqual:anEventDetails.tfaResetDetails];
  case DBTEAMLOGEventDetailsMissingDetails:
    return [self.missingDetails isEqual:anEventDetails.missingDetails];
  case DBTEAMLOGEventDetailsOther:
    return [[self tagName] isEqual:[anEventDetails tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEventDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGEventDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isMemberChangeMembershipTypeDetails]) {
    jsonDict[@"member_change_membership_type_details"] = [[DBTEAMLOGMemberChangeMembershipTypeDetailsSerializer
        serialize:valueObj.memberChangeMembershipTypeDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_change_membership_type_details";
  } else if ([valueObj isMemberPermanentlyDeleteAccountContentsDetails]) {
    jsonDict[@"member_permanently_delete_account_contents_details"] =
        [[DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsSerializer
            serialize:valueObj.memberPermanentlyDeleteAccountContentsDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_permanently_delete_account_contents_details";
  } else if ([valueObj isMemberSpaceLimitsChangeStatusDetails]) {
    jsonDict[@"member_space_limits_change_status_details"] = [[DBTEAMLOGMemberSpaceLimitsChangeStatusDetailsSerializer
        serialize:valueObj.memberSpaceLimitsChangeStatusDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_change_status_details";
  } else if ([valueObj isMemberTransferAccountContentsDetails]) {
    jsonDict[@"member_transfer_account_contents_details"] = [[DBTEAMLOGMemberTransferAccountContentsDetailsSerializer
        serialize:valueObj.memberTransferAccountContentsDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_transfer_account_contents_details";
  } else if ([valueObj isPaperEnabledUsersGroupAdditionDetails]) {
    jsonDict[@"paper_enabled_users_group_addition_details"] = [[DBTEAMLOGPaperEnabledUsersGroupAdditionDetailsSerializer
        serialize:valueObj.paperEnabledUsersGroupAdditionDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_enabled_users_group_addition_details";
  } else if ([valueObj isPaperEnabledUsersGroupRemovalDetails]) {
    jsonDict[@"paper_enabled_users_group_removal_details"] = [[DBTEAMLOGPaperEnabledUsersGroupRemovalDetailsSerializer
        serialize:valueObj.paperEnabledUsersGroupRemovalDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_enabled_users_group_removal_details";
  } else if ([valueObj isPaperExternalViewAllowDetails]) {
    jsonDict[@"paper_external_view_allow_details"] = [[DBTEAMLOGPaperExternalViewAllowDetailsSerializer
        serialize:valueObj.paperExternalViewAllowDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_external_view_allow_details";
  } else if ([valueObj isPaperExternalViewDefaultTeamDetails]) {
    jsonDict[@"paper_external_view_default_team_details"] = [[DBTEAMLOGPaperExternalViewDefaultTeamDetailsSerializer
        serialize:valueObj.paperExternalViewDefaultTeamDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_external_view_default_team_details";
  } else if ([valueObj isPaperExternalViewForbidDetails]) {
    jsonDict[@"paper_external_view_forbid_details"] = [[DBTEAMLOGPaperExternalViewForbidDetailsSerializer
        serialize:valueObj.paperExternalViewForbidDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_external_view_forbid_details";
  } else if ([valueObj isSfExternalInviteWarnDetails]) {
    jsonDict[@"sf_external_invite_warn_details"] =
        [[DBTEAMLOGSfExternalInviteWarnDetailsSerializer serialize:valueObj.sfExternalInviteWarnDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_external_invite_warn_details";
  } else if ([valueObj isTeamMergeDetails]) {
    jsonDict[@"team_merge_details"] =
        [[DBTEAMLOGTeamMergeDetailsSerializer serialize:valueObj.teamMergeDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_merge_details";
  } else if ([valueObj isAppLinkTeamDetails]) {
    jsonDict[@"app_link_team_details"] =
        [[DBTEAMLOGAppLinkTeamDetailsSerializer serialize:valueObj.appLinkTeamDetails] mutableCopy];
    jsonDict[@".tag"] = @"app_link_team_details";
  } else if ([valueObj isAppLinkUserDetails]) {
    jsonDict[@"app_link_user_details"] =
        [[DBTEAMLOGAppLinkUserDetailsSerializer serialize:valueObj.appLinkUserDetails] mutableCopy];
    jsonDict[@".tag"] = @"app_link_user_details";
  } else if ([valueObj isAppUnlinkTeamDetails]) {
    jsonDict[@"app_unlink_team_details"] =
        [[DBTEAMLOGAppUnlinkTeamDetailsSerializer serialize:valueObj.appUnlinkTeamDetails] mutableCopy];
    jsonDict[@".tag"] = @"app_unlink_team_details";
  } else if ([valueObj isAppUnlinkUserDetails]) {
    jsonDict[@"app_unlink_user_details"] =
        [[DBTEAMLOGAppUnlinkUserDetailsSerializer serialize:valueObj.appUnlinkUserDetails] mutableCopy];
    jsonDict[@".tag"] = @"app_unlink_user_details";
  } else if ([valueObj isDeviceChangeIpDesktopDetails]) {
    jsonDict[@"device_change_ip_desktop_details"] =
        [[DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer serialize:valueObj.deviceChangeIpDesktopDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_change_ip_desktop_details";
  } else if ([valueObj isDeviceChangeIpMobileDetails]) {
    jsonDict[@"device_change_ip_mobile_details"] =
        [[DBTEAMLOGDeviceChangeIpMobileDetailsSerializer serialize:valueObj.deviceChangeIpMobileDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_change_ip_mobile_details";
  } else if ([valueObj isDeviceChangeIpWebDetails]) {
    jsonDict[@"device_change_ip_web_details"] =
        [[DBTEAMLOGDeviceChangeIpWebDetailsSerializer serialize:valueObj.deviceChangeIpWebDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_change_ip_web_details";
  } else if ([valueObj isDeviceDeleteOnUnlinkFailDetails]) {
    jsonDict[@"device_delete_on_unlink_fail_details"] = [[DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer
        serialize:valueObj.deviceDeleteOnUnlinkFailDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_delete_on_unlink_fail_details";
  } else if ([valueObj isDeviceDeleteOnUnlinkSuccessDetails]) {
    jsonDict[@"device_delete_on_unlink_success_details"] = [[DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer
        serialize:valueObj.deviceDeleteOnUnlinkSuccessDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_delete_on_unlink_success_details";
  } else if ([valueObj isDeviceLinkFailDetails]) {
    jsonDict[@"device_link_fail_details"] =
        [[DBTEAMLOGDeviceLinkFailDetailsSerializer serialize:valueObj.deviceLinkFailDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_link_fail_details";
  } else if ([valueObj isDeviceLinkSuccessDetails]) {
    jsonDict[@"device_link_success_details"] =
        [[DBTEAMLOGDeviceLinkSuccessDetailsSerializer serialize:valueObj.deviceLinkSuccessDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_link_success_details";
  } else if ([valueObj isDeviceManagementDisabledDetails]) {
    jsonDict[@"device_management_disabled_details"] = [[DBTEAMLOGDeviceManagementDisabledDetailsSerializer
        serialize:valueObj.deviceManagementDisabledDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_management_disabled_details";
  } else if ([valueObj isDeviceManagementEnabledDetails]) {
    jsonDict[@"device_management_enabled_details"] = [[DBTEAMLOGDeviceManagementEnabledDetailsSerializer
        serialize:valueObj.deviceManagementEnabledDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_management_enabled_details";
  } else if ([valueObj isDeviceUnlinkDetails]) {
    jsonDict[@"device_unlink_details"] =
        [[DBTEAMLOGDeviceUnlinkDetailsSerializer serialize:valueObj.deviceUnlinkDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_unlink_details";
  } else if ([valueObj isEmmRefreshAuthTokenDetails]) {
    jsonDict[@"emm_refresh_auth_token_details"] =
        [[DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer serialize:valueObj.emmRefreshAuthTokenDetails] mutableCopy];
    jsonDict[@".tag"] = @"emm_refresh_auth_token_details";
  } else if ([valueObj isAccountCaptureChangeAvailabilityDetails]) {
    jsonDict[@"account_capture_change_availability_details"] =
        [[DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer
            serialize:valueObj.accountCaptureChangeAvailabilityDetails] mutableCopy];
    jsonDict[@".tag"] = @"account_capture_change_availability_details";
  } else if ([valueObj isAccountCaptureMigrateAccountDetails]) {
    jsonDict[@"account_capture_migrate_account_details"] = [[DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer
        serialize:valueObj.accountCaptureMigrateAccountDetails] mutableCopy];
    jsonDict[@".tag"] = @"account_capture_migrate_account_details";
  } else if ([valueObj isAccountCaptureRelinquishAccountDetails]) {
    jsonDict[@"account_capture_relinquish_account_details"] =
        [[DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer
            serialize:valueObj.accountCaptureRelinquishAccountDetails] mutableCopy];
    jsonDict[@".tag"] = @"account_capture_relinquish_account_details";
  } else if ([valueObj isDisabledDomainInvitesDetails]) {
    jsonDict[@"disabled_domain_invites_details"] =
        [[DBTEAMLOGDisabledDomainInvitesDetailsSerializer serialize:valueObj.disabledDomainInvitesDetails] mutableCopy];
    jsonDict[@".tag"] = @"disabled_domain_invites_details";
  } else if ([valueObj isDomainInvitesApproveRequestToJoinTeamDetails]) {
    jsonDict[@"domain_invites_approve_request_to_join_team_details"] =
        [[DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer
            serialize:valueObj.domainInvitesApproveRequestToJoinTeamDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_approve_request_to_join_team_details";
  } else if ([valueObj isDomainInvitesDeclineRequestToJoinTeamDetails]) {
    jsonDict[@"domain_invites_decline_request_to_join_team_details"] =
        [[DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer
            serialize:valueObj.domainInvitesDeclineRequestToJoinTeamDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_decline_request_to_join_team_details";
  } else if ([valueObj isDomainInvitesEmailExistingUsersDetails]) {
    jsonDict[@"domain_invites_email_existing_users_details"] =
        [[DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer
            serialize:valueObj.domainInvitesEmailExistingUsersDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_email_existing_users_details";
  } else if ([valueObj isDomainInvitesRequestToJoinTeamDetails]) {
    jsonDict[@"domain_invites_request_to_join_team_details"] =
        [[DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer
            serialize:valueObj.domainInvitesRequestToJoinTeamDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_request_to_join_team_details";
  } else if ([valueObj isDomainInvitesSetInviteNewUserPrefToNoDetails]) {
    jsonDict[@"domain_invites_set_invite_new_user_pref_to_no_details"] =
        [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer
            serialize:valueObj.domainInvitesSetInviteNewUserPrefToNoDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_set_invite_new_user_pref_to_no_details";
  } else if ([valueObj isDomainInvitesSetInviteNewUserPrefToYesDetails]) {
    jsonDict[@"domain_invites_set_invite_new_user_pref_to_yes_details"] =
        [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer
            serialize:valueObj.domainInvitesSetInviteNewUserPrefToYesDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_invites_set_invite_new_user_pref_to_yes_details";
  } else if ([valueObj isDomainVerificationAddDomainFailDetails]) {
    jsonDict[@"domain_verification_add_domain_fail_details"] =
        [[DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer
            serialize:valueObj.domainVerificationAddDomainFailDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_verification_add_domain_fail_details";
  } else if ([valueObj isDomainVerificationAddDomainSuccessDetails]) {
    jsonDict[@"domain_verification_add_domain_success_details"] =
        [[DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer
            serialize:valueObj.domainVerificationAddDomainSuccessDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_verification_add_domain_success_details";
  } else if ([valueObj isDomainVerificationRemoveDomainDetails]) {
    jsonDict[@"domain_verification_remove_domain_details"] = [[DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer
        serialize:valueObj.domainVerificationRemoveDomainDetails] mutableCopy];
    jsonDict[@".tag"] = @"domain_verification_remove_domain_details";
  } else if ([valueObj isEnabledDomainInvitesDetails]) {
    jsonDict[@"enabled_domain_invites_details"] =
        [[DBTEAMLOGEnabledDomainInvitesDetailsSerializer serialize:valueObj.enabledDomainInvitesDetails] mutableCopy];
    jsonDict[@".tag"] = @"enabled_domain_invites_details";
  } else if ([valueObj isCreateFolderDetails]) {
    jsonDict[@"create_folder_details"] =
        [[DBTEAMLOGCreateFolderDetailsSerializer serialize:valueObj.createFolderDetails] mutableCopy];
    jsonDict[@".tag"] = @"create_folder_details";
  } else if ([valueObj isFileAddDetails]) {
    jsonDict[@"file_add_details"] = [[DBTEAMLOGFileAddDetailsSerializer serialize:valueObj.fileAddDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_add_details";
  } else if ([valueObj isFileCopyDetails]) {
    jsonDict[@"file_copy_details"] =
        [[DBTEAMLOGFileCopyDetailsSerializer serialize:valueObj.fileCopyDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_copy_details";
  } else if ([valueObj isFileDeleteDetails]) {
    jsonDict[@"file_delete_details"] =
        [[DBTEAMLOGFileDeleteDetailsSerializer serialize:valueObj.fileDeleteDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_delete_details";
  } else if ([valueObj isFileDownloadDetails]) {
    jsonDict[@"file_download_details"] =
        [[DBTEAMLOGFileDownloadDetailsSerializer serialize:valueObj.fileDownloadDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_download_details";
  } else if ([valueObj isFileEditDetails]) {
    jsonDict[@"file_edit_details"] =
        [[DBTEAMLOGFileEditDetailsSerializer serialize:valueObj.fileEditDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_edit_details";
  } else if ([valueObj isFileGetCopyReferenceDetails]) {
    jsonDict[@"file_get_copy_reference_details"] =
        [[DBTEAMLOGFileGetCopyReferenceDetailsSerializer serialize:valueObj.fileGetCopyReferenceDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_get_copy_reference_details";
  } else if ([valueObj isFileMoveDetails]) {
    jsonDict[@"file_move_details"] =
        [[DBTEAMLOGFileMoveDetailsSerializer serialize:valueObj.fileMoveDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_move_details";
  } else if ([valueObj isFilePermanentlyDeleteDetails]) {
    jsonDict[@"file_permanently_delete_details"] =
        [[DBTEAMLOGFilePermanentlyDeleteDetailsSerializer serialize:valueObj.filePermanentlyDeleteDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_permanently_delete_details";
  } else if ([valueObj isFilePreviewDetails]) {
    jsonDict[@"file_preview_details"] =
        [[DBTEAMLOGFilePreviewDetailsSerializer serialize:valueObj.filePreviewDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_preview_details";
  } else if ([valueObj isFileRenameDetails]) {
    jsonDict[@"file_rename_details"] =
        [[DBTEAMLOGFileRenameDetailsSerializer serialize:valueObj.fileRenameDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_rename_details";
  } else if ([valueObj isFileRestoreDetails]) {
    jsonDict[@"file_restore_details"] =
        [[DBTEAMLOGFileRestoreDetailsSerializer serialize:valueObj.fileRestoreDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_restore_details";
  } else if ([valueObj isFileRevertDetails]) {
    jsonDict[@"file_revert_details"] =
        [[DBTEAMLOGFileRevertDetailsSerializer serialize:valueObj.fileRevertDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_revert_details";
  } else if ([valueObj isFileRollbackChangesDetails]) {
    jsonDict[@"file_rollback_changes_details"] =
        [[DBTEAMLOGFileRollbackChangesDetailsSerializer serialize:valueObj.fileRollbackChangesDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_rollback_changes_details";
  } else if ([valueObj isFileSaveCopyReferenceDetails]) {
    jsonDict[@"file_save_copy_reference_details"] =
        [[DBTEAMLOGFileSaveCopyReferenceDetailsSerializer serialize:valueObj.fileSaveCopyReferenceDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_save_copy_reference_details";
  } else if ([valueObj isFileRequestAddDeadlineDetails]) {
    jsonDict[@"file_request_add_deadline_details"] = [[DBTEAMLOGFileRequestAddDeadlineDetailsSerializer
        serialize:valueObj.fileRequestAddDeadlineDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_request_add_deadline_details";
  } else if ([valueObj isFileRequestChangeFolderDetails]) {
    jsonDict[@"file_request_change_folder_details"] = [[DBTEAMLOGFileRequestChangeFolderDetailsSerializer
        serialize:valueObj.fileRequestChangeFolderDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_request_change_folder_details";
  } else if ([valueObj isFileRequestChangeTitleDetails]) {
    jsonDict[@"file_request_change_title_details"] = [[DBTEAMLOGFileRequestChangeTitleDetailsSerializer
        serialize:valueObj.fileRequestChangeTitleDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_request_change_title_details";
  } else if ([valueObj isFileRequestCloseDetails]) {
    jsonDict[@"file_request_close_details"] =
        [[DBTEAMLOGFileRequestCloseDetailsSerializer serialize:valueObj.fileRequestCloseDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_request_close_details";
  } else if ([valueObj isFileRequestCreateDetails]) {
    jsonDict[@"file_request_create_details"] =
        [[DBTEAMLOGFileRequestCreateDetailsSerializer serialize:valueObj.fileRequestCreateDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_request_create_details";
  } else if ([valueObj isFileRequestReceiveFileDetails]) {
    jsonDict[@"file_request_receive_file_details"] = [[DBTEAMLOGFileRequestReceiveFileDetailsSerializer
        serialize:valueObj.fileRequestReceiveFileDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_request_receive_file_details";
  } else if ([valueObj isFileRequestRemoveDeadlineDetails]) {
    jsonDict[@"file_request_remove_deadline_details"] = [[DBTEAMLOGFileRequestRemoveDeadlineDetailsSerializer
        serialize:valueObj.fileRequestRemoveDeadlineDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_request_remove_deadline_details";
  } else if ([valueObj isFileRequestSendDetails]) {
    jsonDict[@"file_request_send_details"] =
        [[DBTEAMLOGFileRequestSendDetailsSerializer serialize:valueObj.fileRequestSendDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_request_send_details";
  } else if ([valueObj isGroupAddExternalIdDetails]) {
    jsonDict[@"group_add_external_id_details"] =
        [[DBTEAMLOGGroupAddExternalIdDetailsSerializer serialize:valueObj.groupAddExternalIdDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_add_external_id_details";
  } else if ([valueObj isGroupAddMemberDetails]) {
    jsonDict[@"group_add_member_details"] =
        [[DBTEAMLOGGroupAddMemberDetailsSerializer serialize:valueObj.groupAddMemberDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_add_member_details";
  } else if ([valueObj isGroupChangeExternalIdDetails]) {
    jsonDict[@"group_change_external_id_details"] =
        [[DBTEAMLOGGroupChangeExternalIdDetailsSerializer serialize:valueObj.groupChangeExternalIdDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_change_external_id_details";
  } else if ([valueObj isGroupChangeManagementTypeDetails]) {
    jsonDict[@"group_change_management_type_details"] = [[DBTEAMLOGGroupChangeManagementTypeDetailsSerializer
        serialize:valueObj.groupChangeManagementTypeDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_change_management_type_details";
  } else if ([valueObj isGroupChangeMemberRoleDetails]) {
    jsonDict[@"group_change_member_role_details"] =
        [[DBTEAMLOGGroupChangeMemberRoleDetailsSerializer serialize:valueObj.groupChangeMemberRoleDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_change_member_role_details";
  } else if ([valueObj isGroupCreateDetails]) {
    jsonDict[@"group_create_details"] =
        [[DBTEAMLOGGroupCreateDetailsSerializer serialize:valueObj.groupCreateDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_create_details";
  } else if ([valueObj isGroupDeleteDetails]) {
    jsonDict[@"group_delete_details"] =
        [[DBTEAMLOGGroupDeleteDetailsSerializer serialize:valueObj.groupDeleteDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_delete_details";
  } else if ([valueObj isGroupDescriptionUpdatedDetails]) {
    jsonDict[@"group_description_updated_details"] = [[DBTEAMLOGGroupDescriptionUpdatedDetailsSerializer
        serialize:valueObj.groupDescriptionUpdatedDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_description_updated_details";
  } else if ([valueObj isGroupJoinPolicyUpdatedDetails]) {
    jsonDict[@"group_join_policy_updated_details"] = [[DBTEAMLOGGroupJoinPolicyUpdatedDetailsSerializer
        serialize:valueObj.groupJoinPolicyUpdatedDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_join_policy_updated_details";
  } else if ([valueObj isGroupMovedDetails]) {
    jsonDict[@"group_moved_details"] =
        [[DBTEAMLOGGroupMovedDetailsSerializer serialize:valueObj.groupMovedDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_moved_details";
  } else if ([valueObj isGroupRemoveExternalIdDetails]) {
    jsonDict[@"group_remove_external_id_details"] =
        [[DBTEAMLOGGroupRemoveExternalIdDetailsSerializer serialize:valueObj.groupRemoveExternalIdDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_remove_external_id_details";
  } else if ([valueObj isGroupRemoveMemberDetails]) {
    jsonDict[@"group_remove_member_details"] =
        [[DBTEAMLOGGroupRemoveMemberDetailsSerializer serialize:valueObj.groupRemoveMemberDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_remove_member_details";
  } else if ([valueObj isGroupRenameDetails]) {
    jsonDict[@"group_rename_details"] =
        [[DBTEAMLOGGroupRenameDetailsSerializer serialize:valueObj.groupRenameDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_rename_details";
  } else if ([valueObj isEmmLoginSuccessDetails]) {
    jsonDict[@"emm_login_success_details"] =
        [[DBTEAMLOGEmmLoginSuccessDetailsSerializer serialize:valueObj.emmLoginSuccessDetails] mutableCopy];
    jsonDict[@".tag"] = @"emm_login_success_details";
  } else if ([valueObj isLogoutDetails]) {
    jsonDict[@"logout_details"] = [[DBTEAMLOGLogoutDetailsSerializer serialize:valueObj.logoutDetails] mutableCopy];
    jsonDict[@".tag"] = @"logout_details";
  } else if ([valueObj isPasswordLoginFailDetails]) {
    jsonDict[@"password_login_fail_details"] =
        [[DBTEAMLOGPasswordLoginFailDetailsSerializer serialize:valueObj.passwordLoginFailDetails] mutableCopy];
    jsonDict[@".tag"] = @"password_login_fail_details";
  } else if ([valueObj isPasswordLoginSuccessDetails]) {
    jsonDict[@"password_login_success_details"] =
        [[DBTEAMLOGPasswordLoginSuccessDetailsSerializer serialize:valueObj.passwordLoginSuccessDetails] mutableCopy];
    jsonDict[@".tag"] = @"password_login_success_details";
  } else if ([valueObj isResellerSupportSessionEndDetails]) {
    jsonDict[@"reseller_support_session_end_details"] = [[DBTEAMLOGResellerSupportSessionEndDetailsSerializer
        serialize:valueObj.resellerSupportSessionEndDetails] mutableCopy];
    jsonDict[@".tag"] = @"reseller_support_session_end_details";
  } else if ([valueObj isResellerSupportSessionStartDetails]) {
    jsonDict[@"reseller_support_session_start_details"] = [[DBTEAMLOGResellerSupportSessionStartDetailsSerializer
        serialize:valueObj.resellerSupportSessionStartDetails] mutableCopy];
    jsonDict[@".tag"] = @"reseller_support_session_start_details";
  } else if ([valueObj isSignInAsSessionEndDetails]) {
    jsonDict[@"sign_in_as_session_end_details"] =
        [[DBTEAMLOGSignInAsSessionEndDetailsSerializer serialize:valueObj.signInAsSessionEndDetails] mutableCopy];
    jsonDict[@".tag"] = @"sign_in_as_session_end_details";
  } else if ([valueObj isSignInAsSessionStartDetails]) {
    jsonDict[@"sign_in_as_session_start_details"] =
        [[DBTEAMLOGSignInAsSessionStartDetailsSerializer serialize:valueObj.signInAsSessionStartDetails] mutableCopy];
    jsonDict[@".tag"] = @"sign_in_as_session_start_details";
  } else if ([valueObj isSsoLoginFailDetails]) {
    jsonDict[@"sso_login_fail_details"] =
        [[DBTEAMLOGSsoLoginFailDetailsSerializer serialize:valueObj.ssoLoginFailDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_login_fail_details";
  } else if ([valueObj isMemberAddNameDetails]) {
    jsonDict[@"member_add_name_details"] =
        [[DBTEAMLOGMemberAddNameDetailsSerializer serialize:valueObj.memberAddNameDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_add_name_details";
  } else if ([valueObj isMemberChangeEmailDetails]) {
    jsonDict[@"member_change_email_details"] =
        [[DBTEAMLOGMemberChangeEmailDetailsSerializer serialize:valueObj.memberChangeEmailDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_change_email_details";
  } else if ([valueObj isMemberChangeNameDetails]) {
    jsonDict[@"member_change_name_details"] =
        [[DBTEAMLOGMemberChangeNameDetailsSerializer serialize:valueObj.memberChangeNameDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_change_name_details";
  } else if ([valueObj isMemberChangeRoleDetails]) {
    jsonDict[@"member_change_role_details"] =
        [[DBTEAMLOGMemberChangeRoleDetailsSerializer serialize:valueObj.memberChangeRoleDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_change_role_details";
  } else if ([valueObj isMemberInviteDetails]) {
    jsonDict[@"member_invite_details"] =
        [[DBTEAMLOGMemberInviteDetailsSerializer serialize:valueObj.memberInviteDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_invite_details";
  } else if ([valueObj isMemberJoinDetails]) {
    jsonDict[@"member_join_details"] =
        [[DBTEAMLOGMemberJoinDetailsSerializer serialize:valueObj.memberJoinDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_join_details";
  } else if ([valueObj isMemberLeaveDetails]) {
    jsonDict[@"member_leave_details"] =
        [[DBTEAMLOGMemberLeaveDetailsSerializer serialize:valueObj.memberLeaveDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_leave_details";
  } else if ([valueObj isMemberRecoverDetails]) {
    jsonDict[@"member_recover_details"] =
        [[DBTEAMLOGMemberRecoverDetailsSerializer serialize:valueObj.memberRecoverDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_recover_details";
  } else if ([valueObj isMemberSuggestDetails]) {
    jsonDict[@"member_suggest_details"] =
        [[DBTEAMLOGMemberSuggestDetailsSerializer serialize:valueObj.memberSuggestDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_suggest_details";
  } else if ([valueObj isMemberSuspendDetails]) {
    jsonDict[@"member_suspend_details"] =
        [[DBTEAMLOGMemberSuspendDetailsSerializer serialize:valueObj.memberSuspendDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_suspend_details";
  } else if ([valueObj isMemberUnsuspendDetails]) {
    jsonDict[@"member_unsuspend_details"] =
        [[DBTEAMLOGMemberUnsuspendDetailsSerializer serialize:valueObj.memberUnsuspendDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_unsuspend_details";
  } else if ([valueObj isPaperContentAddMemberDetails]) {
    jsonDict[@"paper_content_add_member_details"] =
        [[DBTEAMLOGPaperContentAddMemberDetailsSerializer serialize:valueObj.paperContentAddMemberDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_add_member_details";
  } else if ([valueObj isPaperContentAddToFolderDetails]) {
    jsonDict[@"paper_content_add_to_folder_details"] = [[DBTEAMLOGPaperContentAddToFolderDetailsSerializer
        serialize:valueObj.paperContentAddToFolderDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_add_to_folder_details";
  } else if ([valueObj isPaperContentArchiveDetails]) {
    jsonDict[@"paper_content_archive_details"] =
        [[DBTEAMLOGPaperContentArchiveDetailsSerializer serialize:valueObj.paperContentArchiveDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_archive_details";
  } else if ([valueObj isPaperContentChangeSubscriptionDetails]) {
    jsonDict[@"paper_content_change_subscription_details"] = [[DBTEAMLOGPaperContentChangeSubscriptionDetailsSerializer
        serialize:valueObj.paperContentChangeSubscriptionDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_change_subscription_details";
  } else if ([valueObj isPaperContentCreateDetails]) {
    jsonDict[@"paper_content_create_details"] =
        [[DBTEAMLOGPaperContentCreateDetailsSerializer serialize:valueObj.paperContentCreateDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_create_details";
  } else if ([valueObj isPaperContentPermanentlyDeleteDetails]) {
    jsonDict[@"paper_content_permanently_delete_details"] = [[DBTEAMLOGPaperContentPermanentlyDeleteDetailsSerializer
        serialize:valueObj.paperContentPermanentlyDeleteDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_permanently_delete_details";
  } else if ([valueObj isPaperContentRemoveFromFolderDetails]) {
    jsonDict[@"paper_content_remove_from_folder_details"] = [[DBTEAMLOGPaperContentRemoveFromFolderDetailsSerializer
        serialize:valueObj.paperContentRemoveFromFolderDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_remove_from_folder_details";
  } else if ([valueObj isPaperContentRemoveMemberDetails]) {
    jsonDict[@"paper_content_remove_member_details"] = [[DBTEAMLOGPaperContentRemoveMemberDetailsSerializer
        serialize:valueObj.paperContentRemoveMemberDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_remove_member_details";
  } else if ([valueObj isPaperContentRenameDetails]) {
    jsonDict[@"paper_content_rename_details"] =
        [[DBTEAMLOGPaperContentRenameDetailsSerializer serialize:valueObj.paperContentRenameDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_rename_details";
  } else if ([valueObj isPaperContentRestoreDetails]) {
    jsonDict[@"paper_content_restore_details"] =
        [[DBTEAMLOGPaperContentRestoreDetailsSerializer serialize:valueObj.paperContentRestoreDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_content_restore_details";
  } else if ([valueObj isPaperDocAddCommentDetails]) {
    jsonDict[@"paper_doc_add_comment_details"] =
        [[DBTEAMLOGPaperDocAddCommentDetailsSerializer serialize:valueObj.paperDocAddCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_add_comment_details";
  } else if ([valueObj isPaperDocChangeMemberRoleDetails]) {
    jsonDict[@"paper_doc_change_member_role_details"] = [[DBTEAMLOGPaperDocChangeMemberRoleDetailsSerializer
        serialize:valueObj.paperDocChangeMemberRoleDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_change_member_role_details";
  } else if ([valueObj isPaperDocChangeSharingPolicyDetails]) {
    jsonDict[@"paper_doc_change_sharing_policy_details"] = [[DBTEAMLOGPaperDocChangeSharingPolicyDetailsSerializer
        serialize:valueObj.paperDocChangeSharingPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_change_sharing_policy_details";
  } else if ([valueObj isPaperDocDeletedDetails]) {
    jsonDict[@"paper_doc_deleted_details"] =
        [[DBTEAMLOGPaperDocDeletedDetailsSerializer serialize:valueObj.paperDocDeletedDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_deleted_details";
  } else if ([valueObj isPaperDocDeleteCommentDetails]) {
    jsonDict[@"paper_doc_delete_comment_details"] =
        [[DBTEAMLOGPaperDocDeleteCommentDetailsSerializer serialize:valueObj.paperDocDeleteCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_delete_comment_details";
  } else if ([valueObj isPaperDocDownloadDetails]) {
    jsonDict[@"paper_doc_download_details"] =
        [[DBTEAMLOGPaperDocDownloadDetailsSerializer serialize:valueObj.paperDocDownloadDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_download_details";
  } else if ([valueObj isPaperDocEditDetails]) {
    jsonDict[@"paper_doc_edit_details"] =
        [[DBTEAMLOGPaperDocEditDetailsSerializer serialize:valueObj.paperDocEditDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_edit_details";
  } else if ([valueObj isPaperDocEditCommentDetails]) {
    jsonDict[@"paper_doc_edit_comment_details"] =
        [[DBTEAMLOGPaperDocEditCommentDetailsSerializer serialize:valueObj.paperDocEditCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_edit_comment_details";
  } else if ([valueObj isPaperDocFollowedDetails]) {
    jsonDict[@"paper_doc_followed_details"] =
        [[DBTEAMLOGPaperDocFollowedDetailsSerializer serialize:valueObj.paperDocFollowedDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_followed_details";
  } else if ([valueObj isPaperDocMentionDetails]) {
    jsonDict[@"paper_doc_mention_details"] =
        [[DBTEAMLOGPaperDocMentionDetailsSerializer serialize:valueObj.paperDocMentionDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_mention_details";
  } else if ([valueObj isPaperDocRequestAccessDetails]) {
    jsonDict[@"paper_doc_request_access_details"] =
        [[DBTEAMLOGPaperDocRequestAccessDetailsSerializer serialize:valueObj.paperDocRequestAccessDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_request_access_details";
  } else if ([valueObj isPaperDocResolveCommentDetails]) {
    jsonDict[@"paper_doc_resolve_comment_details"] = [[DBTEAMLOGPaperDocResolveCommentDetailsSerializer
        serialize:valueObj.paperDocResolveCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_resolve_comment_details";
  } else if ([valueObj isPaperDocRevertDetails]) {
    jsonDict[@"paper_doc_revert_details"] =
        [[DBTEAMLOGPaperDocRevertDetailsSerializer serialize:valueObj.paperDocRevertDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_revert_details";
  } else if ([valueObj isPaperDocSlackShareDetails]) {
    jsonDict[@"paper_doc_slack_share_details"] =
        [[DBTEAMLOGPaperDocSlackShareDetailsSerializer serialize:valueObj.paperDocSlackShareDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_slack_share_details";
  } else if ([valueObj isPaperDocTeamInviteDetails]) {
    jsonDict[@"paper_doc_team_invite_details"] =
        [[DBTEAMLOGPaperDocTeamInviteDetailsSerializer serialize:valueObj.paperDocTeamInviteDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_team_invite_details";
  } else if ([valueObj isPaperDocUnresolveCommentDetails]) {
    jsonDict[@"paper_doc_unresolve_comment_details"] = [[DBTEAMLOGPaperDocUnresolveCommentDetailsSerializer
        serialize:valueObj.paperDocUnresolveCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_unresolve_comment_details";
  } else if ([valueObj isPaperDocViewDetails]) {
    jsonDict[@"paper_doc_view_details"] =
        [[DBTEAMLOGPaperDocViewDetailsSerializer serialize:valueObj.paperDocViewDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_doc_view_details";
  } else if ([valueObj isPaperFolderDeletedDetails]) {
    jsonDict[@"paper_folder_deleted_details"] =
        [[DBTEAMLOGPaperFolderDeletedDetailsSerializer serialize:valueObj.paperFolderDeletedDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_folder_deleted_details";
  } else if ([valueObj isPaperFolderFollowedDetails]) {
    jsonDict[@"paper_folder_followed_details"] =
        [[DBTEAMLOGPaperFolderFollowedDetailsSerializer serialize:valueObj.paperFolderFollowedDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_folder_followed_details";
  } else if ([valueObj isPaperFolderTeamInviteDetails]) {
    jsonDict[@"paper_folder_team_invite_details"] =
        [[DBTEAMLOGPaperFolderTeamInviteDetailsSerializer serialize:valueObj.paperFolderTeamInviteDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_folder_team_invite_details";
  } else if ([valueObj isPasswordChangeDetails]) {
    jsonDict[@"password_change_details"] =
        [[DBTEAMLOGPasswordChangeDetailsSerializer serialize:valueObj.passwordChangeDetails] mutableCopy];
    jsonDict[@".tag"] = @"password_change_details";
  } else if ([valueObj isPasswordResetDetails]) {
    jsonDict[@"password_reset_details"] =
        [[DBTEAMLOGPasswordResetDetailsSerializer serialize:valueObj.passwordResetDetails] mutableCopy];
    jsonDict[@".tag"] = @"password_reset_details";
  } else if ([valueObj isPasswordResetAllDetails]) {
    jsonDict[@"password_reset_all_details"] =
        [[DBTEAMLOGPasswordResetAllDetailsSerializer serialize:valueObj.passwordResetAllDetails] mutableCopy];
    jsonDict[@".tag"] = @"password_reset_all_details";
  } else if ([valueObj isEmmCreateExceptionsReportDetails]) {
    jsonDict[@"emm_create_exceptions_report_details"] = [[DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer
        serialize:valueObj.emmCreateExceptionsReportDetails] mutableCopy];
    jsonDict[@".tag"] = @"emm_create_exceptions_report_details";
  } else if ([valueObj isEmmCreateUsageReportDetails]) {
    jsonDict[@"emm_create_usage_report_details"] =
        [[DBTEAMLOGEmmCreateUsageReportDetailsSerializer serialize:valueObj.emmCreateUsageReportDetails] mutableCopy];
    jsonDict[@".tag"] = @"emm_create_usage_report_details";
  } else if ([valueObj isSmartSyncCreateAdminPrivilegeReportDetails]) {
    jsonDict[@"smart_sync_create_admin_privilege_report_details"] =
        [[DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsSerializer
            serialize:valueObj.smartSyncCreateAdminPrivilegeReportDetails] mutableCopy];
    jsonDict[@".tag"] = @"smart_sync_create_admin_privilege_report_details";
  } else if ([valueObj isTeamActivityCreateReportDetails]) {
    jsonDict[@"team_activity_create_report_details"] = [[DBTEAMLOGTeamActivityCreateReportDetailsSerializer
        serialize:valueObj.teamActivityCreateReportDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_activity_create_report_details";
  } else if ([valueObj isCollectionShareDetails]) {
    jsonDict[@"collection_share_details"] =
        [[DBTEAMLOGCollectionShareDetailsSerializer serialize:valueObj.collectionShareDetails] mutableCopy];
    jsonDict[@".tag"] = @"collection_share_details";
  } else if ([valueObj isFileAddCommentDetails]) {
    jsonDict[@"file_add_comment_details"] =
        [[DBTEAMLOGFileAddCommentDetailsSerializer serialize:valueObj.fileAddCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_add_comment_details";
  } else if ([valueObj isFileLikeCommentDetails]) {
    jsonDict[@"file_like_comment_details"] =
        [[DBTEAMLOGFileLikeCommentDetailsSerializer serialize:valueObj.fileLikeCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_like_comment_details";
  } else if ([valueObj isFileUnlikeCommentDetails]) {
    jsonDict[@"file_unlike_comment_details"] =
        [[DBTEAMLOGFileUnlikeCommentDetailsSerializer serialize:valueObj.fileUnlikeCommentDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_unlike_comment_details";
  } else if ([valueObj isNoteAclInviteOnlyDetails]) {
    jsonDict[@"note_acl_invite_only_details"] =
        [[DBTEAMLOGNoteAclInviteOnlyDetailsSerializer serialize:valueObj.noteAclInviteOnlyDetails] mutableCopy];
    jsonDict[@".tag"] = @"note_acl_invite_only_details";
  } else if ([valueObj isNoteAclLinkDetails]) {
    jsonDict[@"note_acl_link_details"] =
        [[DBTEAMLOGNoteAclLinkDetailsSerializer serialize:valueObj.noteAclLinkDetails] mutableCopy];
    jsonDict[@".tag"] = @"note_acl_link_details";
  } else if ([valueObj isNoteAclTeamLinkDetails]) {
    jsonDict[@"note_acl_team_link_details"] =
        [[DBTEAMLOGNoteAclTeamLinkDetailsSerializer serialize:valueObj.noteAclTeamLinkDetails] mutableCopy];
    jsonDict[@".tag"] = @"note_acl_team_link_details";
  } else if ([valueObj isNoteSharedDetails]) {
    jsonDict[@"note_shared_details"] =
        [[DBTEAMLOGNoteSharedDetailsSerializer serialize:valueObj.noteSharedDetails] mutableCopy];
    jsonDict[@".tag"] = @"note_shared_details";
  } else if ([valueObj isNoteShareReceiveDetails]) {
    jsonDict[@"note_share_receive_details"] =
        [[DBTEAMLOGNoteShareReceiveDetailsSerializer serialize:valueObj.noteShareReceiveDetails] mutableCopy];
    jsonDict[@".tag"] = @"note_share_receive_details";
  } else if ([valueObj isOpenNoteSharedDetails]) {
    jsonDict[@"open_note_shared_details"] =
        [[DBTEAMLOGOpenNoteSharedDetailsSerializer serialize:valueObj.openNoteSharedDetails] mutableCopy];
    jsonDict[@".tag"] = @"open_note_shared_details";
  } else if ([valueObj isSfAddGroupDetails]) {
    jsonDict[@"sf_add_group_details"] =
        [[DBTEAMLOGSfAddGroupDetailsSerializer serialize:valueObj.sfAddGroupDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_add_group_details";
  } else if ([valueObj isSfAllowNonMembersToViewSharedLinksDetails]) {
    jsonDict[@"sf_allow_non_members_to_view_shared_links_details"] =
        [[DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsSerializer
            serialize:valueObj.sfAllowNonMembersToViewSharedLinksDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_allow_non_members_to_view_shared_links_details";
  } else if ([valueObj isSfInviteGroupDetails]) {
    jsonDict[@"sf_invite_group_details"] =
        [[DBTEAMLOGSfInviteGroupDetailsSerializer serialize:valueObj.sfInviteGroupDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_invite_group_details";
  } else if ([valueObj isSfNestDetails]) {
    jsonDict[@"sf_nest_details"] = [[DBTEAMLOGSfNestDetailsSerializer serialize:valueObj.sfNestDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_nest_details";
  } else if ([valueObj isSfTeamDeclineDetails]) {
    jsonDict[@"sf_team_decline_details"] =
        [[DBTEAMLOGSfTeamDeclineDetailsSerializer serialize:valueObj.sfTeamDeclineDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_decline_details";
  } else if ([valueObj isSfTeamGrantAccessDetails]) {
    jsonDict[@"sf_team_grant_access_details"] =
        [[DBTEAMLOGSfTeamGrantAccessDetailsSerializer serialize:valueObj.sfTeamGrantAccessDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_grant_access_details";
  } else if ([valueObj isSfTeamInviteDetails]) {
    jsonDict[@"sf_team_invite_details"] =
        [[DBTEAMLOGSfTeamInviteDetailsSerializer serialize:valueObj.sfTeamInviteDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_invite_details";
  } else if ([valueObj isSfTeamInviteChangeRoleDetails]) {
    jsonDict[@"sf_team_invite_change_role_details"] = [[DBTEAMLOGSfTeamInviteChangeRoleDetailsSerializer
        serialize:valueObj.sfTeamInviteChangeRoleDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_invite_change_role_details";
  } else if ([valueObj isSfTeamJoinDetails]) {
    jsonDict[@"sf_team_join_details"] =
        [[DBTEAMLOGSfTeamJoinDetailsSerializer serialize:valueObj.sfTeamJoinDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_join_details";
  } else if ([valueObj isSfTeamJoinFromOobLinkDetails]) {
    jsonDict[@"sf_team_join_from_oob_link_details"] =
        [[DBTEAMLOGSfTeamJoinFromOobLinkDetailsSerializer serialize:valueObj.sfTeamJoinFromOobLinkDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_join_from_oob_link_details";
  } else if ([valueObj isSfTeamUninviteDetails]) {
    jsonDict[@"sf_team_uninvite_details"] =
        [[DBTEAMLOGSfTeamUninviteDetailsSerializer serialize:valueObj.sfTeamUninviteDetails] mutableCopy];
    jsonDict[@".tag"] = @"sf_team_uninvite_details";
  } else if ([valueObj isSharedContentAddInviteesDetails]) {
    jsonDict[@"shared_content_add_invitees_details"] = [[DBTEAMLOGSharedContentAddInviteesDetailsSerializer
        serialize:valueObj.sharedContentAddInviteesDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_add_invitees_details";
  } else if ([valueObj isSharedContentAddLinkExpiryDetails]) {
    jsonDict[@"shared_content_add_link_expiry_details"] = [[DBTEAMLOGSharedContentAddLinkExpiryDetailsSerializer
        serialize:valueObj.sharedContentAddLinkExpiryDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_add_link_expiry_details";
  } else if ([valueObj isSharedContentAddLinkPasswordDetails]) {
    jsonDict[@"shared_content_add_link_password_details"] = [[DBTEAMLOGSharedContentAddLinkPasswordDetailsSerializer
        serialize:valueObj.sharedContentAddLinkPasswordDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_add_link_password_details";
  } else if ([valueObj isSharedContentAddMemberDetails]) {
    jsonDict[@"shared_content_add_member_details"] = [[DBTEAMLOGSharedContentAddMemberDetailsSerializer
        serialize:valueObj.sharedContentAddMemberDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_add_member_details";
  } else if ([valueObj isSharedContentChangeDownloadsPolicyDetails]) {
    jsonDict[@"shared_content_change_downloads_policy_details"] =
        [[DBTEAMLOGSharedContentChangeDownloadsPolicyDetailsSerializer
            serialize:valueObj.sharedContentChangeDownloadsPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_downloads_policy_details";
  } else if ([valueObj isSharedContentChangeInviteeRoleDetails]) {
    jsonDict[@"shared_content_change_invitee_role_details"] = [[DBTEAMLOGSharedContentChangeInviteeRoleDetailsSerializer
        serialize:valueObj.sharedContentChangeInviteeRoleDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_invitee_role_details";
  } else if ([valueObj isSharedContentChangeLinkAudienceDetails]) {
    jsonDict[@"shared_content_change_link_audience_details"] =
        [[DBTEAMLOGSharedContentChangeLinkAudienceDetailsSerializer
            serialize:valueObj.sharedContentChangeLinkAudienceDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_link_audience_details";
  } else if ([valueObj isSharedContentChangeLinkExpiryDetails]) {
    jsonDict[@"shared_content_change_link_expiry_details"] = [[DBTEAMLOGSharedContentChangeLinkExpiryDetailsSerializer
        serialize:valueObj.sharedContentChangeLinkExpiryDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_link_expiry_details";
  } else if ([valueObj isSharedContentChangeLinkPasswordDetails]) {
    jsonDict[@"shared_content_change_link_password_details"] =
        [[DBTEAMLOGSharedContentChangeLinkPasswordDetailsSerializer
            serialize:valueObj.sharedContentChangeLinkPasswordDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_link_password_details";
  } else if ([valueObj isSharedContentChangeMemberRoleDetails]) {
    jsonDict[@"shared_content_change_member_role_details"] = [[DBTEAMLOGSharedContentChangeMemberRoleDetailsSerializer
        serialize:valueObj.sharedContentChangeMemberRoleDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_member_role_details";
  } else if ([valueObj isSharedContentChangeViewerInfoPolicyDetails]) {
    jsonDict[@"shared_content_change_viewer_info_policy_details"] =
        [[DBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsSerializer
            serialize:valueObj.sharedContentChangeViewerInfoPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_change_viewer_info_policy_details";
  } else if ([valueObj isSharedContentClaimInvitationDetails]) {
    jsonDict[@"shared_content_claim_invitation_details"] = [[DBTEAMLOGSharedContentClaimInvitationDetailsSerializer
        serialize:valueObj.sharedContentClaimInvitationDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_claim_invitation_details";
  } else if ([valueObj isSharedContentCopyDetails]) {
    jsonDict[@"shared_content_copy_details"] =
        [[DBTEAMLOGSharedContentCopyDetailsSerializer serialize:valueObj.sharedContentCopyDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_copy_details";
  } else if ([valueObj isSharedContentDownloadDetails]) {
    jsonDict[@"shared_content_download_details"] =
        [[DBTEAMLOGSharedContentDownloadDetailsSerializer serialize:valueObj.sharedContentDownloadDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_download_details";
  } else if ([valueObj isSharedContentRelinquishMembershipDetails]) {
    jsonDict[@"shared_content_relinquish_membership_details"] =
        [[DBTEAMLOGSharedContentRelinquishMembershipDetailsSerializer
            serialize:valueObj.sharedContentRelinquishMembershipDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_relinquish_membership_details";
  } else if ([valueObj isSharedContentRemoveInviteeDetails]) {
    jsonDict[@"shared_content_remove_invitee_details"] = [[DBTEAMLOGSharedContentRemoveInviteeDetailsSerializer
        serialize:valueObj.sharedContentRemoveInviteeDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_remove_invitee_details";
  } else if ([valueObj isSharedContentRemoveLinkExpiryDetails]) {
    jsonDict[@"shared_content_remove_link_expiry_details"] = [[DBTEAMLOGSharedContentRemoveLinkExpiryDetailsSerializer
        serialize:valueObj.sharedContentRemoveLinkExpiryDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_remove_link_expiry_details";
  } else if ([valueObj isSharedContentRemoveLinkPasswordDetails]) {
    jsonDict[@"shared_content_remove_link_password_details"] =
        [[DBTEAMLOGSharedContentRemoveLinkPasswordDetailsSerializer
            serialize:valueObj.sharedContentRemoveLinkPasswordDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_remove_link_password_details";
  } else if ([valueObj isSharedContentRemoveMemberDetails]) {
    jsonDict[@"shared_content_remove_member_details"] = [[DBTEAMLOGSharedContentRemoveMemberDetailsSerializer
        serialize:valueObj.sharedContentRemoveMemberDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_remove_member_details";
  } else if ([valueObj isSharedContentRequestAccessDetails]) {
    jsonDict[@"shared_content_request_access_details"] = [[DBTEAMLOGSharedContentRequestAccessDetailsSerializer
        serialize:valueObj.sharedContentRequestAccessDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_request_access_details";
  } else if ([valueObj isSharedContentUnshareDetails]) {
    jsonDict[@"shared_content_unshare_details"] =
        [[DBTEAMLOGSharedContentUnshareDetailsSerializer serialize:valueObj.sharedContentUnshareDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_unshare_details";
  } else if ([valueObj isSharedContentViewDetails]) {
    jsonDict[@"shared_content_view_details"] =
        [[DBTEAMLOGSharedContentViewDetailsSerializer serialize:valueObj.sharedContentViewDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_content_view_details";
  } else if ([valueObj isSharedFolderChangeConfidentialityDetails]) {
    jsonDict[@"shared_folder_change_confidentiality_details"] =
        [[DBTEAMLOGSharedFolderChangeConfidentialityDetailsSerializer
            serialize:valueObj.sharedFolderChangeConfidentialityDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_change_confidentiality_details";
  } else if ([valueObj isSharedFolderChangeLinkPolicyDetails]) {
    jsonDict[@"shared_folder_change_link_policy_details"] = [[DBTEAMLOGSharedFolderChangeLinkPolicyDetailsSerializer
        serialize:valueObj.sharedFolderChangeLinkPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_change_link_policy_details";
  } else if ([valueObj isSharedFolderChangeMemberManagementPolicyDetails]) {
    jsonDict[@"shared_folder_change_member_management_policy_details"] =
        [[DBTEAMLOGSharedFolderChangeMemberManagementPolicyDetailsSerializer
            serialize:valueObj.sharedFolderChangeMemberManagementPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_change_member_management_policy_details";
  } else if ([valueObj isSharedFolderChangeMemberPolicyDetails]) {
    jsonDict[@"shared_folder_change_member_policy_details"] = [[DBTEAMLOGSharedFolderChangeMemberPolicyDetailsSerializer
        serialize:valueObj.sharedFolderChangeMemberPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_change_member_policy_details";
  } else if ([valueObj isSharedFolderCreateDetails]) {
    jsonDict[@"shared_folder_create_details"] =
        [[DBTEAMLOGSharedFolderCreateDetailsSerializer serialize:valueObj.sharedFolderCreateDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_create_details";
  } else if ([valueObj isSharedFolderMountDetails]) {
    jsonDict[@"shared_folder_mount_details"] =
        [[DBTEAMLOGSharedFolderMountDetailsSerializer serialize:valueObj.sharedFolderMountDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_mount_details";
  } else if ([valueObj isSharedFolderTransferOwnershipDetails]) {
    jsonDict[@"shared_folder_transfer_ownership_details"] = [[DBTEAMLOGSharedFolderTransferOwnershipDetailsSerializer
        serialize:valueObj.sharedFolderTransferOwnershipDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_transfer_ownership_details";
  } else if ([valueObj isSharedFolderUnmountDetails]) {
    jsonDict[@"shared_folder_unmount_details"] =
        [[DBTEAMLOGSharedFolderUnmountDetailsSerializer serialize:valueObj.sharedFolderUnmountDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_folder_unmount_details";
  } else if ([valueObj isSharedNoteOpenedDetails]) {
    jsonDict[@"shared_note_opened_details"] =
        [[DBTEAMLOGSharedNoteOpenedDetailsSerializer serialize:valueObj.sharedNoteOpenedDetails] mutableCopy];
    jsonDict[@".tag"] = @"shared_note_opened_details";
  } else if ([valueObj isShmodelAppCreateDetails]) {
    jsonDict[@"shmodel_app_create_details"] =
        [[DBTEAMLOGShmodelAppCreateDetailsSerializer serialize:valueObj.shmodelAppCreateDetails] mutableCopy];
    jsonDict[@".tag"] = @"shmodel_app_create_details";
  } else if ([valueObj isShmodelCreateDetails]) {
    jsonDict[@"shmodel_create_details"] =
        [[DBTEAMLOGShmodelCreateDetailsSerializer serialize:valueObj.shmodelCreateDetails] mutableCopy];
    jsonDict[@".tag"] = @"shmodel_create_details";
  } else if ([valueObj isShmodelDisableDetails]) {
    jsonDict[@"shmodel_disable_details"] =
        [[DBTEAMLOGShmodelDisableDetailsSerializer serialize:valueObj.shmodelDisableDetails] mutableCopy];
    jsonDict[@".tag"] = @"shmodel_disable_details";
  } else if ([valueObj isShmodelFbShareDetails]) {
    jsonDict[@"shmodel_fb_share_details"] =
        [[DBTEAMLOGShmodelFbShareDetailsSerializer serialize:valueObj.shmodelFbShareDetails] mutableCopy];
    jsonDict[@".tag"] = @"shmodel_fb_share_details";
  } else if ([valueObj isShmodelGroupShareDetails]) {
    jsonDict[@"shmodel_group_share_details"] =
        [[DBTEAMLOGShmodelGroupShareDetailsSerializer serialize:valueObj.shmodelGroupShareDetails] mutableCopy];
    jsonDict[@".tag"] = @"shmodel_group_share_details";
  } else if ([valueObj isShmodelRemoveExpirationDetails]) {
    jsonDict[@"shmodel_remove_expiration_details"] = [[DBTEAMLOGShmodelRemoveExpirationDetailsSerializer
        serialize:valueObj.shmodelRemoveExpirationDetails] mutableCopy];
    jsonDict[@".tag"] = @"shmodel_remove_expiration_details";
  } else if ([valueObj isShmodelSetExpirationDetails]) {
    jsonDict[@"shmodel_set_expiration_details"] =
        [[DBTEAMLOGShmodelSetExpirationDetailsSerializer serialize:valueObj.shmodelSetExpirationDetails] mutableCopy];
    jsonDict[@".tag"] = @"shmodel_set_expiration_details";
  } else if ([valueObj isShmodelTeamCopyDetails]) {
    jsonDict[@"shmodel_team_copy_details"] =
        [[DBTEAMLOGShmodelTeamCopyDetailsSerializer serialize:valueObj.shmodelTeamCopyDetails] mutableCopy];
    jsonDict[@".tag"] = @"shmodel_team_copy_details";
  } else if ([valueObj isShmodelTeamDownloadDetails]) {
    jsonDict[@"shmodel_team_download_details"] =
        [[DBTEAMLOGShmodelTeamDownloadDetailsSerializer serialize:valueObj.shmodelTeamDownloadDetails] mutableCopy];
    jsonDict[@".tag"] = @"shmodel_team_download_details";
  } else if ([valueObj isShmodelTeamShareDetails]) {
    jsonDict[@"shmodel_team_share_details"] =
        [[DBTEAMLOGShmodelTeamShareDetailsSerializer serialize:valueObj.shmodelTeamShareDetails] mutableCopy];
    jsonDict[@".tag"] = @"shmodel_team_share_details";
  } else if ([valueObj isShmodelTeamViewDetails]) {
    jsonDict[@"shmodel_team_view_details"] =
        [[DBTEAMLOGShmodelTeamViewDetailsSerializer serialize:valueObj.shmodelTeamViewDetails] mutableCopy];
    jsonDict[@".tag"] = @"shmodel_team_view_details";
  } else if ([valueObj isShmodelVisibilityPasswordDetails]) {
    jsonDict[@"shmodel_visibility_password_details"] = [[DBTEAMLOGShmodelVisibilityPasswordDetailsSerializer
        serialize:valueObj.shmodelVisibilityPasswordDetails] mutableCopy];
    jsonDict[@".tag"] = @"shmodel_visibility_password_details";
  } else if ([valueObj isShmodelVisibilityPublicDetails]) {
    jsonDict[@"shmodel_visibility_public_details"] = [[DBTEAMLOGShmodelVisibilityPublicDetailsSerializer
        serialize:valueObj.shmodelVisibilityPublicDetails] mutableCopy];
    jsonDict[@".tag"] = @"shmodel_visibility_public_details";
  } else if ([valueObj isShmodelVisibilityTeamOnlyDetails]) {
    jsonDict[@"shmodel_visibility_team_only_details"] = [[DBTEAMLOGShmodelVisibilityTeamOnlyDetailsSerializer
        serialize:valueObj.shmodelVisibilityTeamOnlyDetails] mutableCopy];
    jsonDict[@".tag"] = @"shmodel_visibility_team_only_details";
  } else if ([valueObj isRemoveLogoutUrlDetails]) {
    jsonDict[@"remove_logout_url_details"] =
        [[DBTEAMLOGRemoveLogoutUrlDetailsSerializer serialize:valueObj.removeLogoutUrlDetails] mutableCopy];
    jsonDict[@".tag"] = @"remove_logout_url_details";
  } else if ([valueObj isRemoveSsoUrlDetails]) {
    jsonDict[@"remove_sso_url_details"] =
        [[DBTEAMLOGRemoveSsoUrlDetailsSerializer serialize:valueObj.removeSsoUrlDetails] mutableCopy];
    jsonDict[@".tag"] = @"remove_sso_url_details";
  } else if ([valueObj isSsoChangeCertDetails]) {
    jsonDict[@"sso_change_cert_details"] =
        [[DBTEAMLOGSsoChangeCertDetailsSerializer serialize:valueObj.ssoChangeCertDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_change_cert_details";
  } else if ([valueObj isSsoChangeLoginUrlDetails]) {
    jsonDict[@"sso_change_login_url_details"] =
        [[DBTEAMLOGSsoChangeLoginUrlDetailsSerializer serialize:valueObj.ssoChangeLoginUrlDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_change_login_url_details";
  } else if ([valueObj isSsoChangeLogoutUrlDetails]) {
    jsonDict[@"sso_change_logout_url_details"] =
        [[DBTEAMLOGSsoChangeLogoutUrlDetailsSerializer serialize:valueObj.ssoChangeLogoutUrlDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_change_logout_url_details";
  } else if ([valueObj isSsoChangeSamlIdentityModeDetails]) {
    jsonDict[@"sso_change_saml_identity_mode_details"] = [[DBTEAMLOGSsoChangeSamlIdentityModeDetailsSerializer
        serialize:valueObj.ssoChangeSamlIdentityModeDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_change_saml_identity_mode_details";
  } else if ([valueObj isTeamFolderChangeStatusDetails]) {
    jsonDict[@"team_folder_change_status_details"] = [[DBTEAMLOGTeamFolderChangeStatusDetailsSerializer
        serialize:valueObj.teamFolderChangeStatusDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_folder_change_status_details";
  } else if ([valueObj isTeamFolderCreateDetails]) {
    jsonDict[@"team_folder_create_details"] =
        [[DBTEAMLOGTeamFolderCreateDetailsSerializer serialize:valueObj.teamFolderCreateDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_folder_create_details";
  } else if ([valueObj isTeamFolderDowngradeDetails]) {
    jsonDict[@"team_folder_downgrade_details"] =
        [[DBTEAMLOGTeamFolderDowngradeDetailsSerializer serialize:valueObj.teamFolderDowngradeDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_folder_downgrade_details";
  } else if ([valueObj isTeamFolderPermanentlyDeleteDetails]) {
    jsonDict[@"team_folder_permanently_delete_details"] = [[DBTEAMLOGTeamFolderPermanentlyDeleteDetailsSerializer
        serialize:valueObj.teamFolderPermanentlyDeleteDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_folder_permanently_delete_details";
  } else if ([valueObj isTeamFolderRenameDetails]) {
    jsonDict[@"team_folder_rename_details"] =
        [[DBTEAMLOGTeamFolderRenameDetailsSerializer serialize:valueObj.teamFolderRenameDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_folder_rename_details";
  } else if ([valueObj isAccountCaptureChangePolicyDetails]) {
    jsonDict[@"account_capture_change_policy_details"] = [[DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer
        serialize:valueObj.accountCaptureChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"account_capture_change_policy_details";
  } else if ([valueObj isAllowDownloadDisabledDetails]) {
    jsonDict[@"allow_download_disabled_details"] =
        [[DBTEAMLOGAllowDownloadDisabledDetailsSerializer serialize:valueObj.allowDownloadDisabledDetails] mutableCopy];
    jsonDict[@".tag"] = @"allow_download_disabled_details";
  } else if ([valueObj isAllowDownloadEnabledDetails]) {
    jsonDict[@"allow_download_enabled_details"] =
        [[DBTEAMLOGAllowDownloadEnabledDetailsSerializer serialize:valueObj.allowDownloadEnabledDetails] mutableCopy];
    jsonDict[@".tag"] = @"allow_download_enabled_details";
  } else if ([valueObj isDataPlacementRestrictionChangePolicyDetails]) {
    jsonDict[@"data_placement_restriction_change_policy_details"] =
        [[DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer
            serialize:valueObj.dataPlacementRestrictionChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"data_placement_restriction_change_policy_details";
  } else if ([valueObj isDataPlacementRestrictionSatisfyPolicyDetails]) {
    jsonDict[@"data_placement_restriction_satisfy_policy_details"] =
        [[DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer
            serialize:valueObj.dataPlacementRestrictionSatisfyPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"data_placement_restriction_satisfy_policy_details";
  } else if ([valueObj isDeviceApprovalsChangeDesktopPolicyDetails]) {
    jsonDict[@"device_approvals_change_desktop_policy_details"] =
        [[DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer
            serialize:valueObj.deviceApprovalsChangeDesktopPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_approvals_change_desktop_policy_details";
  } else if ([valueObj isDeviceApprovalsChangeMobilePolicyDetails]) {
    jsonDict[@"device_approvals_change_mobile_policy_details"] =
        [[DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer
            serialize:valueObj.deviceApprovalsChangeMobilePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_approvals_change_mobile_policy_details";
  } else if ([valueObj isDeviceApprovalsChangeOverageActionDetails]) {
    jsonDict[@"device_approvals_change_overage_action_details"] =
        [[DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer
            serialize:valueObj.deviceApprovalsChangeOverageActionDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_approvals_change_overage_action_details";
  } else if ([valueObj isDeviceApprovalsChangeUnlinkActionDetails]) {
    jsonDict[@"device_approvals_change_unlink_action_details"] =
        [[DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer
            serialize:valueObj.deviceApprovalsChangeUnlinkActionDetails] mutableCopy];
    jsonDict[@".tag"] = @"device_approvals_change_unlink_action_details";
  } else if ([valueObj isEmmAddExceptionDetails]) {
    jsonDict[@"emm_add_exception_details"] =
        [[DBTEAMLOGEmmAddExceptionDetailsSerializer serialize:valueObj.emmAddExceptionDetails] mutableCopy];
    jsonDict[@".tag"] = @"emm_add_exception_details";
  } else if ([valueObj isEmmChangePolicyDetails]) {
    jsonDict[@"emm_change_policy_details"] =
        [[DBTEAMLOGEmmChangePolicyDetailsSerializer serialize:valueObj.emmChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"emm_change_policy_details";
  } else if ([valueObj isEmmRemoveExceptionDetails]) {
    jsonDict[@"emm_remove_exception_details"] =
        [[DBTEAMLOGEmmRemoveExceptionDetailsSerializer serialize:valueObj.emmRemoveExceptionDetails] mutableCopy];
    jsonDict[@".tag"] = @"emm_remove_exception_details";
  } else if ([valueObj isExtendedVersionHistoryChangePolicyDetails]) {
    jsonDict[@"extended_version_history_change_policy_details"] =
        [[DBTEAMLOGExtendedVersionHistoryChangePolicyDetailsSerializer
            serialize:valueObj.extendedVersionHistoryChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"extended_version_history_change_policy_details";
  } else if ([valueObj isFileCommentsChangePolicyDetails]) {
    jsonDict[@"file_comments_change_policy_details"] = [[DBTEAMLOGFileCommentsChangePolicyDetailsSerializer
        serialize:valueObj.fileCommentsChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_comments_change_policy_details";
  } else if ([valueObj isFileRequestsChangePolicyDetails]) {
    jsonDict[@"file_requests_change_policy_details"] = [[DBTEAMLOGFileRequestsChangePolicyDetailsSerializer
        serialize:valueObj.fileRequestsChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_requests_change_policy_details";
  } else if ([valueObj isFileRequestsEmailsEnabledDetails]) {
    jsonDict[@"file_requests_emails_enabled_details"] = [[DBTEAMLOGFileRequestsEmailsEnabledDetailsSerializer
        serialize:valueObj.fileRequestsEmailsEnabledDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_requests_emails_enabled_details";
  } else if ([valueObj isFileRequestsEmailsRestrictedToTeamOnlyDetails]) {
    jsonDict[@"file_requests_emails_restricted_to_team_only_details"] =
        [[DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer
            serialize:valueObj.fileRequestsEmailsRestrictedToTeamOnlyDetails] mutableCopy];
    jsonDict[@".tag"] = @"file_requests_emails_restricted_to_team_only_details";
  } else if ([valueObj isGoogleSsoChangePolicyDetails]) {
    jsonDict[@"google_sso_change_policy_details"] =
        [[DBTEAMLOGGoogleSsoChangePolicyDetailsSerializer serialize:valueObj.googleSsoChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"google_sso_change_policy_details";
  } else if ([valueObj isGroupUserManagementChangePolicyDetails]) {
    jsonDict[@"group_user_management_change_policy_details"] =
        [[DBTEAMLOGGroupUserManagementChangePolicyDetailsSerializer
            serialize:valueObj.groupUserManagementChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"group_user_management_change_policy_details";
  } else if ([valueObj isMemberRequestsChangePolicyDetails]) {
    jsonDict[@"member_requests_change_policy_details"] = [[DBTEAMLOGMemberRequestsChangePolicyDetailsSerializer
        serialize:valueObj.memberRequestsChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_requests_change_policy_details";
  } else if ([valueObj isMemberSpaceLimitsAddExceptionDetails]) {
    jsonDict[@"member_space_limits_add_exception_details"] = [[DBTEAMLOGMemberSpaceLimitsAddExceptionDetailsSerializer
        serialize:valueObj.memberSpaceLimitsAddExceptionDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_add_exception_details";
  } else if ([valueObj isMemberSpaceLimitsChangePolicyDetails]) {
    jsonDict[@"member_space_limits_change_policy_details"] = [[DBTEAMLOGMemberSpaceLimitsChangePolicyDetailsSerializer
        serialize:valueObj.memberSpaceLimitsChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_change_policy_details";
  } else if ([valueObj isMemberSpaceLimitsRemoveExceptionDetails]) {
    jsonDict[@"member_space_limits_remove_exception_details"] =
        [[DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsSerializer
            serialize:valueObj.memberSpaceLimitsRemoveExceptionDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_space_limits_remove_exception_details";
  } else if ([valueObj isMemberSuggestionsChangePolicyDetails]) {
    jsonDict[@"member_suggestions_change_policy_details"] = [[DBTEAMLOGMemberSuggestionsChangePolicyDetailsSerializer
        serialize:valueObj.memberSuggestionsChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"member_suggestions_change_policy_details";
  } else if ([valueObj isMicrosoftOfficeAddinChangePolicyDetails]) {
    jsonDict[@"microsoft_office_addin_change_policy_details"] =
        [[DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsSerializer
            serialize:valueObj.microsoftOfficeAddinChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"microsoft_office_addin_change_policy_details";
  } else if ([valueObj isNetworkControlChangePolicyDetails]) {
    jsonDict[@"network_control_change_policy_details"] = [[DBTEAMLOGNetworkControlChangePolicyDetailsSerializer
        serialize:valueObj.networkControlChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"network_control_change_policy_details";
  } else if ([valueObj isPaperChangeDeploymentPolicyDetails]) {
    jsonDict[@"paper_change_deployment_policy_details"] = [[DBTEAMLOGPaperChangeDeploymentPolicyDetailsSerializer
        serialize:valueObj.paperChangeDeploymentPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_change_deployment_policy_details";
  } else if ([valueObj isPaperChangeMemberPolicyDetails]) {
    jsonDict[@"paper_change_member_policy_details"] = [[DBTEAMLOGPaperChangeMemberPolicyDetailsSerializer
        serialize:valueObj.paperChangeMemberPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_change_member_policy_details";
  } else if ([valueObj isPaperChangePolicyDetails]) {
    jsonDict[@"paper_change_policy_details"] =
        [[DBTEAMLOGPaperChangePolicyDetailsSerializer serialize:valueObj.paperChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"paper_change_policy_details";
  } else if ([valueObj isPermanentDeleteChangePolicyDetails]) {
    jsonDict[@"permanent_delete_change_policy_details"] = [[DBTEAMLOGPermanentDeleteChangePolicyDetailsSerializer
        serialize:valueObj.permanentDeleteChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"permanent_delete_change_policy_details";
  } else if ([valueObj isSharingChangeFolderJoinPolicyDetails]) {
    jsonDict[@"sharing_change_folder_join_policy_details"] = [[DBTEAMLOGSharingChangeFolderJoinPolicyDetailsSerializer
        serialize:valueObj.sharingChangeFolderJoinPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"sharing_change_folder_join_policy_details";
  } else if ([valueObj isSharingChangeLinkPolicyDetails]) {
    jsonDict[@"sharing_change_link_policy_details"] = [[DBTEAMLOGSharingChangeLinkPolicyDetailsSerializer
        serialize:valueObj.sharingChangeLinkPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"sharing_change_link_policy_details";
  } else if ([valueObj isSharingChangeMemberPolicyDetails]) {
    jsonDict[@"sharing_change_member_policy_details"] = [[DBTEAMLOGSharingChangeMemberPolicyDetailsSerializer
        serialize:valueObj.sharingChangeMemberPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"sharing_change_member_policy_details";
  } else if ([valueObj isSmartSyncChangePolicyDetails]) {
    jsonDict[@"smart_sync_change_policy_details"] =
        [[DBTEAMLOGSmartSyncChangePolicyDetailsSerializer serialize:valueObj.smartSyncChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"smart_sync_change_policy_details";
  } else if ([valueObj isSsoChangePolicyDetails]) {
    jsonDict[@"sso_change_policy_details"] =
        [[DBTEAMLOGSsoChangePolicyDetailsSerializer serialize:valueObj.ssoChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"sso_change_policy_details";
  } else if ([valueObj isTfaChangePolicyDetails]) {
    jsonDict[@"tfa_change_policy_details"] =
        [[DBTEAMLOGTfaChangePolicyDetailsSerializer serialize:valueObj.tfaChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"tfa_change_policy_details";
  } else if ([valueObj isTwoAccountChangePolicyDetails]) {
    jsonDict[@"two_account_change_policy_details"] = [[DBTEAMLOGTwoAccountChangePolicyDetailsSerializer
        serialize:valueObj.twoAccountChangePolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"two_account_change_policy_details";
  } else if ([valueObj isWebSessionsChangeFixedLengthPolicyDetails]) {
    jsonDict[@"web_sessions_change_fixed_length_policy_details"] =
        [[DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsSerializer
            serialize:valueObj.webSessionsChangeFixedLengthPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"web_sessions_change_fixed_length_policy_details";
  } else if ([valueObj isWebSessionsChangeIdleLengthPolicyDetails]) {
    jsonDict[@"web_sessions_change_idle_length_policy_details"] =
        [[DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsSerializer
            serialize:valueObj.webSessionsChangeIdleLengthPolicyDetails] mutableCopy];
    jsonDict[@".tag"] = @"web_sessions_change_idle_length_policy_details";
  } else if ([valueObj isTeamProfileAddLogoDetails]) {
    jsonDict[@"team_profile_add_logo_details"] =
        [[DBTEAMLOGTeamProfileAddLogoDetailsSerializer serialize:valueObj.teamProfileAddLogoDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_profile_add_logo_details";
  } else if ([valueObj isTeamProfileChangeLogoDetails]) {
    jsonDict[@"team_profile_change_logo_details"] =
        [[DBTEAMLOGTeamProfileChangeLogoDetailsSerializer serialize:valueObj.teamProfileChangeLogoDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_profile_change_logo_details";
  } else if ([valueObj isTeamProfileChangeNameDetails]) {
    jsonDict[@"team_profile_change_name_details"] =
        [[DBTEAMLOGTeamProfileChangeNameDetailsSerializer serialize:valueObj.teamProfileChangeNameDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_profile_change_name_details";
  } else if ([valueObj isTeamProfileRemoveLogoDetails]) {
    jsonDict[@"team_profile_remove_logo_details"] =
        [[DBTEAMLOGTeamProfileRemoveLogoDetailsSerializer serialize:valueObj.teamProfileRemoveLogoDetails] mutableCopy];
    jsonDict[@".tag"] = @"team_profile_remove_logo_details";
  } else if ([valueObj isTfaAddBackupPhoneDetails]) {
    jsonDict[@"tfa_add_backup_phone_details"] =
        [[DBTEAMLOGTfaAddBackupPhoneDetailsSerializer serialize:valueObj.tfaAddBackupPhoneDetails] mutableCopy];
    jsonDict[@".tag"] = @"tfa_add_backup_phone_details";
  } else if ([valueObj isTfaAddSecurityKeyDetails]) {
    jsonDict[@"tfa_add_security_key_details"] =
        [[DBTEAMLOGTfaAddSecurityKeyDetailsSerializer serialize:valueObj.tfaAddSecurityKeyDetails] mutableCopy];
    jsonDict[@".tag"] = @"tfa_add_security_key_details";
  } else if ([valueObj isTfaChangeBackupPhoneDetails]) {
    jsonDict[@"tfa_change_backup_phone_details"] =
        [[DBTEAMLOGTfaChangeBackupPhoneDetailsSerializer serialize:valueObj.tfaChangeBackupPhoneDetails] mutableCopy];
    jsonDict[@".tag"] = @"tfa_change_backup_phone_details";
  } else if ([valueObj isTfaChangeStatusDetails]) {
    jsonDict[@"tfa_change_status_details"] =
        [[DBTEAMLOGTfaChangeStatusDetailsSerializer serialize:valueObj.tfaChangeStatusDetails] mutableCopy];
    jsonDict[@".tag"] = @"tfa_change_status_details";
  } else if ([valueObj isTfaRemoveBackupPhoneDetails]) {
    jsonDict[@"tfa_remove_backup_phone_details"] =
        [[DBTEAMLOGTfaRemoveBackupPhoneDetailsSerializer serialize:valueObj.tfaRemoveBackupPhoneDetails] mutableCopy];
    jsonDict[@".tag"] = @"tfa_remove_backup_phone_details";
  } else if ([valueObj isTfaRemoveSecurityKeyDetails]) {
    jsonDict[@"tfa_remove_security_key_details"] =
        [[DBTEAMLOGTfaRemoveSecurityKeyDetailsSerializer serialize:valueObj.tfaRemoveSecurityKeyDetails] mutableCopy];
    jsonDict[@".tag"] = @"tfa_remove_security_key_details";
  } else if ([valueObj isTfaResetDetails]) {
    jsonDict[@"tfa_reset_details"] =
        [[DBTEAMLOGTfaResetDetailsSerializer serialize:valueObj.tfaResetDetails] mutableCopy];
    jsonDict[@".tag"] = @"tfa_reset_details";
  } else if ([valueObj isMissingDetails]) {
    jsonDict[@"missing_details"] = [[DBTEAMLOGMissingDetailsSerializer serialize:valueObj.missingDetails] mutableCopy];
    jsonDict[@".tag"] = @"missing_details";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGEventDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"member_change_membership_type_details"]) {
    DBTEAMLOGMemberChangeMembershipTypeDetails *memberChangeMembershipTypeDetails =
        [DBTEAMLOGMemberChangeMembershipTypeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberChangeMembershipTypeDetails:memberChangeMembershipTypeDetails];
  } else if ([tag isEqualToString:@"member_permanently_delete_account_contents_details"]) {
    DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails *memberPermanentlyDeleteAccountContentsDetails =
        [DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberPermanentlyDeleteAccountContentsDetails:memberPermanentlyDeleteAccountContentsDetails];
  } else if ([tag isEqualToString:@"member_space_limits_change_status_details"]) {
    DBTEAMLOGMemberSpaceLimitsChangeStatusDetails *memberSpaceLimitsChangeStatusDetails =
        [DBTEAMLOGMemberSpaceLimitsChangeStatusDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsChangeStatusDetails:memberSpaceLimitsChangeStatusDetails];
  } else if ([tag isEqualToString:@"member_transfer_account_contents_details"]) {
    DBTEAMLOGMemberTransferAccountContentsDetails *memberTransferAccountContentsDetails =
        [DBTEAMLOGMemberTransferAccountContentsDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberTransferAccountContentsDetails:memberTransferAccountContentsDetails];
  } else if ([tag isEqualToString:@"paper_enabled_users_group_addition_details"]) {
    DBTEAMLOGPaperEnabledUsersGroupAdditionDetails *paperEnabledUsersGroupAdditionDetails =
        [DBTEAMLOGPaperEnabledUsersGroupAdditionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithPaperEnabledUsersGroupAdditionDetails:paperEnabledUsersGroupAdditionDetails];
  } else if ([tag isEqualToString:@"paper_enabled_users_group_removal_details"]) {
    DBTEAMLOGPaperEnabledUsersGroupRemovalDetails *paperEnabledUsersGroupRemovalDetails =
        [DBTEAMLOGPaperEnabledUsersGroupRemovalDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithPaperEnabledUsersGroupRemovalDetails:paperEnabledUsersGroupRemovalDetails];
  } else if ([tag isEqualToString:@"paper_external_view_allow_details"]) {
    DBTEAMLOGPaperExternalViewAllowDetails *paperExternalViewAllowDetails =
        [DBTEAMLOGPaperExternalViewAllowDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperExternalViewAllowDetails:paperExternalViewAllowDetails];
  } else if ([tag isEqualToString:@"paper_external_view_default_team_details"]) {
    DBTEAMLOGPaperExternalViewDefaultTeamDetails *paperExternalViewDefaultTeamDetails =
        [DBTEAMLOGPaperExternalViewDefaultTeamDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithPaperExternalViewDefaultTeamDetails:paperExternalViewDefaultTeamDetails];
  } else if ([tag isEqualToString:@"paper_external_view_forbid_details"]) {
    DBTEAMLOGPaperExternalViewForbidDetails *paperExternalViewForbidDetails =
        [DBTEAMLOGPaperExternalViewForbidDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperExternalViewForbidDetails:paperExternalViewForbidDetails];
  } else if ([tag isEqualToString:@"sf_external_invite_warn_details"]) {
    DBTEAMLOGSfExternalInviteWarnDetails *sfExternalInviteWarnDetails =
        [DBTEAMLOGSfExternalInviteWarnDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfExternalInviteWarnDetails:sfExternalInviteWarnDetails];
  } else if ([tag isEqualToString:@"team_merge_details"]) {
    DBTEAMLOGTeamMergeDetails *teamMergeDetails = [DBTEAMLOGTeamMergeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamMergeDetails:teamMergeDetails];
  } else if ([tag isEqualToString:@"app_link_team_details"]) {
    DBTEAMLOGAppLinkTeamDetails *appLinkTeamDetails = [DBTEAMLOGAppLinkTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAppLinkTeamDetails:appLinkTeamDetails];
  } else if ([tag isEqualToString:@"app_link_user_details"]) {
    DBTEAMLOGAppLinkUserDetails *appLinkUserDetails = [DBTEAMLOGAppLinkUserDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAppLinkUserDetails:appLinkUserDetails];
  } else if ([tag isEqualToString:@"app_unlink_team_details"]) {
    DBTEAMLOGAppUnlinkTeamDetails *appUnlinkTeamDetails =
        [DBTEAMLOGAppUnlinkTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAppUnlinkTeamDetails:appUnlinkTeamDetails];
  } else if ([tag isEqualToString:@"app_unlink_user_details"]) {
    DBTEAMLOGAppUnlinkUserDetails *appUnlinkUserDetails =
        [DBTEAMLOGAppUnlinkUserDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAppUnlinkUserDetails:appUnlinkUserDetails];
  } else if ([tag isEqualToString:@"device_change_ip_desktop_details"]) {
    DBTEAMLOGDeviceChangeIpDesktopDetails *deviceChangeIpDesktopDetails =
        [DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceChangeIpDesktopDetails:deviceChangeIpDesktopDetails];
  } else if ([tag isEqualToString:@"device_change_ip_mobile_details"]) {
    DBTEAMLOGDeviceChangeIpMobileDetails *deviceChangeIpMobileDetails =
        [DBTEAMLOGDeviceChangeIpMobileDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceChangeIpMobileDetails:deviceChangeIpMobileDetails];
  } else if ([tag isEqualToString:@"device_change_ip_web_details"]) {
    DBTEAMLOGDeviceChangeIpWebDetails *deviceChangeIpWebDetails =
        [DBTEAMLOGDeviceChangeIpWebDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceChangeIpWebDetails:deviceChangeIpWebDetails];
  } else if ([tag isEqualToString:@"device_delete_on_unlink_fail_details"]) {
    DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *deviceDeleteOnUnlinkFailDetails =
        [DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceDeleteOnUnlinkFailDetails:deviceDeleteOnUnlinkFailDetails];
  } else if ([tag isEqualToString:@"device_delete_on_unlink_success_details"]) {
    DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *deviceDeleteOnUnlinkSuccessDetails =
        [DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithDeviceDeleteOnUnlinkSuccessDetails:deviceDeleteOnUnlinkSuccessDetails];
  } else if ([tag isEqualToString:@"device_link_fail_details"]) {
    DBTEAMLOGDeviceLinkFailDetails *deviceLinkFailDetails =
        [DBTEAMLOGDeviceLinkFailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceLinkFailDetails:deviceLinkFailDetails];
  } else if ([tag isEqualToString:@"device_link_success_details"]) {
    DBTEAMLOGDeviceLinkSuccessDetails *deviceLinkSuccessDetails =
        [DBTEAMLOGDeviceLinkSuccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceLinkSuccessDetails:deviceLinkSuccessDetails];
  } else if ([tag isEqualToString:@"device_management_disabled_details"]) {
    DBTEAMLOGDeviceManagementDisabledDetails *deviceManagementDisabledDetails =
        [DBTEAMLOGDeviceManagementDisabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceManagementDisabledDetails:deviceManagementDisabledDetails];
  } else if ([tag isEqualToString:@"device_management_enabled_details"]) {
    DBTEAMLOGDeviceManagementEnabledDetails *deviceManagementEnabledDetails =
        [DBTEAMLOGDeviceManagementEnabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceManagementEnabledDetails:deviceManagementEnabledDetails];
  } else if ([tag isEqualToString:@"device_unlink_details"]) {
    DBTEAMLOGDeviceUnlinkDetails *deviceUnlinkDetails = [DBTEAMLOGDeviceUnlinkDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceUnlinkDetails:deviceUnlinkDetails];
  } else if ([tag isEqualToString:@"emm_refresh_auth_token_details"]) {
    DBTEAMLOGEmmRefreshAuthTokenDetails *emmRefreshAuthTokenDetails =
        [DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmRefreshAuthTokenDetails:emmRefreshAuthTokenDetails];
  } else if ([tag isEqualToString:@"account_capture_change_availability_details"]) {
    DBTEAMLOGAccountCaptureChangeAvailabilityDetails *accountCaptureChangeAvailabilityDetails =
        [DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithAccountCaptureChangeAvailabilityDetails:accountCaptureChangeAvailabilityDetails];
  } else if ([tag isEqualToString:@"account_capture_migrate_account_details"]) {
    DBTEAMLOGAccountCaptureMigrateAccountDetails *accountCaptureMigrateAccountDetails =
        [DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithAccountCaptureMigrateAccountDetails:accountCaptureMigrateAccountDetails];
  } else if ([tag isEqualToString:@"account_capture_relinquish_account_details"]) {
    DBTEAMLOGAccountCaptureRelinquishAccountDetails *accountCaptureRelinquishAccountDetails =
        [DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithAccountCaptureRelinquishAccountDetails:accountCaptureRelinquishAccountDetails];
  } else if ([tag isEqualToString:@"disabled_domain_invites_details"]) {
    DBTEAMLOGDisabledDomainInvitesDetails *disabledDomainInvitesDetails =
        [DBTEAMLOGDisabledDomainInvitesDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDisabledDomainInvitesDetails:disabledDomainInvitesDetails];
  } else if ([tag isEqualToString:@"domain_invites_approve_request_to_join_team_details"]) {
    DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *domainInvitesApproveRequestToJoinTeamDetails =
        [DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesApproveRequestToJoinTeamDetails:domainInvitesApproveRequestToJoinTeamDetails];
  } else if ([tag isEqualToString:@"domain_invites_decline_request_to_join_team_details"]) {
    DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *domainInvitesDeclineRequestToJoinTeamDetails =
        [DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesDeclineRequestToJoinTeamDetails:domainInvitesDeclineRequestToJoinTeamDetails];
  } else if ([tag isEqualToString:@"domain_invites_email_existing_users_details"]) {
    DBTEAMLOGDomainInvitesEmailExistingUsersDetails *domainInvitesEmailExistingUsersDetails =
        [DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesEmailExistingUsersDetails:domainInvitesEmailExistingUsersDetails];
  } else if ([tag isEqualToString:@"domain_invites_request_to_join_team_details"]) {
    DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *domainInvitesRequestToJoinTeamDetails =
        [DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesRequestToJoinTeamDetails:domainInvitesRequestToJoinTeamDetails];
  } else if ([tag isEqualToString:@"domain_invites_set_invite_new_user_pref_to_no_details"]) {
    DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *domainInvitesSetInviteNewUserPrefToNoDetails =
        [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesSetInviteNewUserPrefToNoDetails:domainInvitesSetInviteNewUserPrefToNoDetails];
  } else if ([tag isEqualToString:@"domain_invites_set_invite_new_user_pref_to_yes_details"]) {
    DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *domainInvitesSetInviteNewUserPrefToYesDetails =
        [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesSetInviteNewUserPrefToYesDetails:domainInvitesSetInviteNewUserPrefToYesDetails];
  } else if ([tag isEqualToString:@"domain_verification_add_domain_fail_details"]) {
    DBTEAMLOGDomainVerificationAddDomainFailDetails *domainVerificationAddDomainFailDetails =
        [DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainVerificationAddDomainFailDetails:domainVerificationAddDomainFailDetails];
  } else if ([tag isEqualToString:@"domain_verification_add_domain_success_details"]) {
    DBTEAMLOGDomainVerificationAddDomainSuccessDetails *domainVerificationAddDomainSuccessDetails =
        [DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainVerificationAddDomainSuccessDetails:domainVerificationAddDomainSuccessDetails];
  } else if ([tag isEqualToString:@"domain_verification_remove_domain_details"]) {
    DBTEAMLOGDomainVerificationRemoveDomainDetails *domainVerificationRemoveDomainDetails =
        [DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainVerificationRemoveDomainDetails:domainVerificationRemoveDomainDetails];
  } else if ([tag isEqualToString:@"enabled_domain_invites_details"]) {
    DBTEAMLOGEnabledDomainInvitesDetails *enabledDomainInvitesDetails =
        [DBTEAMLOGEnabledDomainInvitesDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEnabledDomainInvitesDetails:enabledDomainInvitesDetails];
  } else if ([tag isEqualToString:@"create_folder_details"]) {
    DBTEAMLOGCreateFolderDetails *createFolderDetails = [DBTEAMLOGCreateFolderDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithCreateFolderDetails:createFolderDetails];
  } else if ([tag isEqualToString:@"file_add_details"]) {
    DBTEAMLOGFileAddDetails *fileAddDetails = [DBTEAMLOGFileAddDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileAddDetails:fileAddDetails];
  } else if ([tag isEqualToString:@"file_copy_details"]) {
    DBTEAMLOGFileCopyDetails *fileCopyDetails = [DBTEAMLOGFileCopyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileCopyDetails:fileCopyDetails];
  } else if ([tag isEqualToString:@"file_delete_details"]) {
    DBTEAMLOGFileDeleteDetails *fileDeleteDetails = [DBTEAMLOGFileDeleteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileDeleteDetails:fileDeleteDetails];
  } else if ([tag isEqualToString:@"file_download_details"]) {
    DBTEAMLOGFileDownloadDetails *fileDownloadDetails = [DBTEAMLOGFileDownloadDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileDownloadDetails:fileDownloadDetails];
  } else if ([tag isEqualToString:@"file_edit_details"]) {
    DBTEAMLOGFileEditDetails *fileEditDetails = [DBTEAMLOGFileEditDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileEditDetails:fileEditDetails];
  } else if ([tag isEqualToString:@"file_get_copy_reference_details"]) {
    DBTEAMLOGFileGetCopyReferenceDetails *fileGetCopyReferenceDetails =
        [DBTEAMLOGFileGetCopyReferenceDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileGetCopyReferenceDetails:fileGetCopyReferenceDetails];
  } else if ([tag isEqualToString:@"file_move_details"]) {
    DBTEAMLOGFileMoveDetails *fileMoveDetails = [DBTEAMLOGFileMoveDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileMoveDetails:fileMoveDetails];
  } else if ([tag isEqualToString:@"file_permanently_delete_details"]) {
    DBTEAMLOGFilePermanentlyDeleteDetails *filePermanentlyDeleteDetails =
        [DBTEAMLOGFilePermanentlyDeleteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFilePermanentlyDeleteDetails:filePermanentlyDeleteDetails];
  } else if ([tag isEqualToString:@"file_preview_details"]) {
    DBTEAMLOGFilePreviewDetails *filePreviewDetails = [DBTEAMLOGFilePreviewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFilePreviewDetails:filePreviewDetails];
  } else if ([tag isEqualToString:@"file_rename_details"]) {
    DBTEAMLOGFileRenameDetails *fileRenameDetails = [DBTEAMLOGFileRenameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRenameDetails:fileRenameDetails];
  } else if ([tag isEqualToString:@"file_restore_details"]) {
    DBTEAMLOGFileRestoreDetails *fileRestoreDetails = [DBTEAMLOGFileRestoreDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRestoreDetails:fileRestoreDetails];
  } else if ([tag isEqualToString:@"file_revert_details"]) {
    DBTEAMLOGFileRevertDetails *fileRevertDetails = [DBTEAMLOGFileRevertDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRevertDetails:fileRevertDetails];
  } else if ([tag isEqualToString:@"file_rollback_changes_details"]) {
    DBTEAMLOGFileRollbackChangesDetails *fileRollbackChangesDetails =
        [DBTEAMLOGFileRollbackChangesDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRollbackChangesDetails:fileRollbackChangesDetails];
  } else if ([tag isEqualToString:@"file_save_copy_reference_details"]) {
    DBTEAMLOGFileSaveCopyReferenceDetails *fileSaveCopyReferenceDetails =
        [DBTEAMLOGFileSaveCopyReferenceDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileSaveCopyReferenceDetails:fileSaveCopyReferenceDetails];
  } else if ([tag isEqualToString:@"file_request_add_deadline_details"]) {
    DBTEAMLOGFileRequestAddDeadlineDetails *fileRequestAddDeadlineDetails =
        [DBTEAMLOGFileRequestAddDeadlineDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestAddDeadlineDetails:fileRequestAddDeadlineDetails];
  } else if ([tag isEqualToString:@"file_request_change_folder_details"]) {
    DBTEAMLOGFileRequestChangeFolderDetails *fileRequestChangeFolderDetails =
        [DBTEAMLOGFileRequestChangeFolderDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestChangeFolderDetails:fileRequestChangeFolderDetails];
  } else if ([tag isEqualToString:@"file_request_change_title_details"]) {
    DBTEAMLOGFileRequestChangeTitleDetails *fileRequestChangeTitleDetails =
        [DBTEAMLOGFileRequestChangeTitleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestChangeTitleDetails:fileRequestChangeTitleDetails];
  } else if ([tag isEqualToString:@"file_request_close_details"]) {
    DBTEAMLOGFileRequestCloseDetails *fileRequestCloseDetails =
        [DBTEAMLOGFileRequestCloseDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestCloseDetails:fileRequestCloseDetails];
  } else if ([tag isEqualToString:@"file_request_create_details"]) {
    DBTEAMLOGFileRequestCreateDetails *fileRequestCreateDetails =
        [DBTEAMLOGFileRequestCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestCreateDetails:fileRequestCreateDetails];
  } else if ([tag isEqualToString:@"file_request_receive_file_details"]) {
    DBTEAMLOGFileRequestReceiveFileDetails *fileRequestReceiveFileDetails =
        [DBTEAMLOGFileRequestReceiveFileDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestReceiveFileDetails:fileRequestReceiveFileDetails];
  } else if ([tag isEqualToString:@"file_request_remove_deadline_details"]) {
    DBTEAMLOGFileRequestRemoveDeadlineDetails *fileRequestRemoveDeadlineDetails =
        [DBTEAMLOGFileRequestRemoveDeadlineDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestRemoveDeadlineDetails:fileRequestRemoveDeadlineDetails];
  } else if ([tag isEqualToString:@"file_request_send_details"]) {
    DBTEAMLOGFileRequestSendDetails *fileRequestSendDetails =
        [DBTEAMLOGFileRequestSendDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestSendDetails:fileRequestSendDetails];
  } else if ([tag isEqualToString:@"group_add_external_id_details"]) {
    DBTEAMLOGGroupAddExternalIdDetails *groupAddExternalIdDetails =
        [DBTEAMLOGGroupAddExternalIdDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupAddExternalIdDetails:groupAddExternalIdDetails];
  } else if ([tag isEqualToString:@"group_add_member_details"]) {
    DBTEAMLOGGroupAddMemberDetails *groupAddMemberDetails =
        [DBTEAMLOGGroupAddMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupAddMemberDetails:groupAddMemberDetails];
  } else if ([tag isEqualToString:@"group_change_external_id_details"]) {
    DBTEAMLOGGroupChangeExternalIdDetails *groupChangeExternalIdDetails =
        [DBTEAMLOGGroupChangeExternalIdDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupChangeExternalIdDetails:groupChangeExternalIdDetails];
  } else if ([tag isEqualToString:@"group_change_management_type_details"]) {
    DBTEAMLOGGroupChangeManagementTypeDetails *groupChangeManagementTypeDetails =
        [DBTEAMLOGGroupChangeManagementTypeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupChangeManagementTypeDetails:groupChangeManagementTypeDetails];
  } else if ([tag isEqualToString:@"group_change_member_role_details"]) {
    DBTEAMLOGGroupChangeMemberRoleDetails *groupChangeMemberRoleDetails =
        [DBTEAMLOGGroupChangeMemberRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupChangeMemberRoleDetails:groupChangeMemberRoleDetails];
  } else if ([tag isEqualToString:@"group_create_details"]) {
    DBTEAMLOGGroupCreateDetails *groupCreateDetails = [DBTEAMLOGGroupCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupCreateDetails:groupCreateDetails];
  } else if ([tag isEqualToString:@"group_delete_details"]) {
    DBTEAMLOGGroupDeleteDetails *groupDeleteDetails = [DBTEAMLOGGroupDeleteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupDeleteDetails:groupDeleteDetails];
  } else if ([tag isEqualToString:@"group_description_updated_details"]) {
    DBTEAMLOGGroupDescriptionUpdatedDetails *groupDescriptionUpdatedDetails =
        [DBTEAMLOGGroupDescriptionUpdatedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupDescriptionUpdatedDetails:groupDescriptionUpdatedDetails];
  } else if ([tag isEqualToString:@"group_join_policy_updated_details"]) {
    DBTEAMLOGGroupJoinPolicyUpdatedDetails *groupJoinPolicyUpdatedDetails =
        [DBTEAMLOGGroupJoinPolicyUpdatedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupJoinPolicyUpdatedDetails:groupJoinPolicyUpdatedDetails];
  } else if ([tag isEqualToString:@"group_moved_details"]) {
    DBTEAMLOGGroupMovedDetails *groupMovedDetails = [DBTEAMLOGGroupMovedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupMovedDetails:groupMovedDetails];
  } else if ([tag isEqualToString:@"group_remove_external_id_details"]) {
    DBTEAMLOGGroupRemoveExternalIdDetails *groupRemoveExternalIdDetails =
        [DBTEAMLOGGroupRemoveExternalIdDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupRemoveExternalIdDetails:groupRemoveExternalIdDetails];
  } else if ([tag isEqualToString:@"group_remove_member_details"]) {
    DBTEAMLOGGroupRemoveMemberDetails *groupRemoveMemberDetails =
        [DBTEAMLOGGroupRemoveMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupRemoveMemberDetails:groupRemoveMemberDetails];
  } else if ([tag isEqualToString:@"group_rename_details"]) {
    DBTEAMLOGGroupRenameDetails *groupRenameDetails = [DBTEAMLOGGroupRenameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupRenameDetails:groupRenameDetails];
  } else if ([tag isEqualToString:@"emm_login_success_details"]) {
    DBTEAMLOGEmmLoginSuccessDetails *emmLoginSuccessDetails =
        [DBTEAMLOGEmmLoginSuccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmLoginSuccessDetails:emmLoginSuccessDetails];
  } else if ([tag isEqualToString:@"logout_details"]) {
    DBTEAMLOGLogoutDetails *logoutDetails = [DBTEAMLOGLogoutDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithLogoutDetails:logoutDetails];
  } else if ([tag isEqualToString:@"password_login_fail_details"]) {
    DBTEAMLOGPasswordLoginFailDetails *passwordLoginFailDetails =
        [DBTEAMLOGPasswordLoginFailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPasswordLoginFailDetails:passwordLoginFailDetails];
  } else if ([tag isEqualToString:@"password_login_success_details"]) {
    DBTEAMLOGPasswordLoginSuccessDetails *passwordLoginSuccessDetails =
        [DBTEAMLOGPasswordLoginSuccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPasswordLoginSuccessDetails:passwordLoginSuccessDetails];
  } else if ([tag isEqualToString:@"reseller_support_session_end_details"]) {
    DBTEAMLOGResellerSupportSessionEndDetails *resellerSupportSessionEndDetails =
        [DBTEAMLOGResellerSupportSessionEndDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithResellerSupportSessionEndDetails:resellerSupportSessionEndDetails];
  } else if ([tag isEqualToString:@"reseller_support_session_start_details"]) {
    DBTEAMLOGResellerSupportSessionStartDetails *resellerSupportSessionStartDetails =
        [DBTEAMLOGResellerSupportSessionStartDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithResellerSupportSessionStartDetails:resellerSupportSessionStartDetails];
  } else if ([tag isEqualToString:@"sign_in_as_session_end_details"]) {
    DBTEAMLOGSignInAsSessionEndDetails *signInAsSessionEndDetails =
        [DBTEAMLOGSignInAsSessionEndDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSignInAsSessionEndDetails:signInAsSessionEndDetails];
  } else if ([tag isEqualToString:@"sign_in_as_session_start_details"]) {
    DBTEAMLOGSignInAsSessionStartDetails *signInAsSessionStartDetails =
        [DBTEAMLOGSignInAsSessionStartDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSignInAsSessionStartDetails:signInAsSessionStartDetails];
  } else if ([tag isEqualToString:@"sso_login_fail_details"]) {
    DBTEAMLOGSsoLoginFailDetails *ssoLoginFailDetails = [DBTEAMLOGSsoLoginFailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoLoginFailDetails:ssoLoginFailDetails];
  } else if ([tag isEqualToString:@"member_add_name_details"]) {
    DBTEAMLOGMemberAddNameDetails *memberAddNameDetails =
        [DBTEAMLOGMemberAddNameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberAddNameDetails:memberAddNameDetails];
  } else if ([tag isEqualToString:@"member_change_email_details"]) {
    DBTEAMLOGMemberChangeEmailDetails *memberChangeEmailDetails =
        [DBTEAMLOGMemberChangeEmailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberChangeEmailDetails:memberChangeEmailDetails];
  } else if ([tag isEqualToString:@"member_change_name_details"]) {
    DBTEAMLOGMemberChangeNameDetails *memberChangeNameDetails =
        [DBTEAMLOGMemberChangeNameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberChangeNameDetails:memberChangeNameDetails];
  } else if ([tag isEqualToString:@"member_change_role_details"]) {
    DBTEAMLOGMemberChangeRoleDetails *memberChangeRoleDetails =
        [DBTEAMLOGMemberChangeRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberChangeRoleDetails:memberChangeRoleDetails];
  } else if ([tag isEqualToString:@"member_invite_details"]) {
    DBTEAMLOGMemberInviteDetails *memberInviteDetails = [DBTEAMLOGMemberInviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberInviteDetails:memberInviteDetails];
  } else if ([tag isEqualToString:@"member_join_details"]) {
    DBTEAMLOGMemberJoinDetails *memberJoinDetails = [DBTEAMLOGMemberJoinDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberJoinDetails:memberJoinDetails];
  } else if ([tag isEqualToString:@"member_leave_details"]) {
    DBTEAMLOGMemberLeaveDetails *memberLeaveDetails = [DBTEAMLOGMemberLeaveDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberLeaveDetails:memberLeaveDetails];
  } else if ([tag isEqualToString:@"member_recover_details"]) {
    DBTEAMLOGMemberRecoverDetails *memberRecoverDetails =
        [DBTEAMLOGMemberRecoverDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberRecoverDetails:memberRecoverDetails];
  } else if ([tag isEqualToString:@"member_suggest_details"]) {
    DBTEAMLOGMemberSuggestDetails *memberSuggestDetails =
        [DBTEAMLOGMemberSuggestDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberSuggestDetails:memberSuggestDetails];
  } else if ([tag isEqualToString:@"member_suspend_details"]) {
    DBTEAMLOGMemberSuspendDetails *memberSuspendDetails =
        [DBTEAMLOGMemberSuspendDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberSuspendDetails:memberSuspendDetails];
  } else if ([tag isEqualToString:@"member_unsuspend_details"]) {
    DBTEAMLOGMemberUnsuspendDetails *memberUnsuspendDetails =
        [DBTEAMLOGMemberUnsuspendDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberUnsuspendDetails:memberUnsuspendDetails];
  } else if ([tag isEqualToString:@"paper_content_add_member_details"]) {
    DBTEAMLOGPaperContentAddMemberDetails *paperContentAddMemberDetails =
        [DBTEAMLOGPaperContentAddMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentAddMemberDetails:paperContentAddMemberDetails];
  } else if ([tag isEqualToString:@"paper_content_add_to_folder_details"]) {
    DBTEAMLOGPaperContentAddToFolderDetails *paperContentAddToFolderDetails =
        [DBTEAMLOGPaperContentAddToFolderDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentAddToFolderDetails:paperContentAddToFolderDetails];
  } else if ([tag isEqualToString:@"paper_content_archive_details"]) {
    DBTEAMLOGPaperContentArchiveDetails *paperContentArchiveDetails =
        [DBTEAMLOGPaperContentArchiveDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentArchiveDetails:paperContentArchiveDetails];
  } else if ([tag isEqualToString:@"paper_content_change_subscription_details"]) {
    DBTEAMLOGPaperContentChangeSubscriptionDetails *paperContentChangeSubscriptionDetails =
        [DBTEAMLOGPaperContentChangeSubscriptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithPaperContentChangeSubscriptionDetails:paperContentChangeSubscriptionDetails];
  } else if ([tag isEqualToString:@"paper_content_create_details"]) {
    DBTEAMLOGPaperContentCreateDetails *paperContentCreateDetails =
        [DBTEAMLOGPaperContentCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentCreateDetails:paperContentCreateDetails];
  } else if ([tag isEqualToString:@"paper_content_permanently_delete_details"]) {
    DBTEAMLOGPaperContentPermanentlyDeleteDetails *paperContentPermanentlyDeleteDetails =
        [DBTEAMLOGPaperContentPermanentlyDeleteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithPaperContentPermanentlyDeleteDetails:paperContentPermanentlyDeleteDetails];
  } else if ([tag isEqualToString:@"paper_content_remove_from_folder_details"]) {
    DBTEAMLOGPaperContentRemoveFromFolderDetails *paperContentRemoveFromFolderDetails =
        [DBTEAMLOGPaperContentRemoveFromFolderDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithPaperContentRemoveFromFolderDetails:paperContentRemoveFromFolderDetails];
  } else if ([tag isEqualToString:@"paper_content_remove_member_details"]) {
    DBTEAMLOGPaperContentRemoveMemberDetails *paperContentRemoveMemberDetails =
        [DBTEAMLOGPaperContentRemoveMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentRemoveMemberDetails:paperContentRemoveMemberDetails];
  } else if ([tag isEqualToString:@"paper_content_rename_details"]) {
    DBTEAMLOGPaperContentRenameDetails *paperContentRenameDetails =
        [DBTEAMLOGPaperContentRenameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentRenameDetails:paperContentRenameDetails];
  } else if ([tag isEqualToString:@"paper_content_restore_details"]) {
    DBTEAMLOGPaperContentRestoreDetails *paperContentRestoreDetails =
        [DBTEAMLOGPaperContentRestoreDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentRestoreDetails:paperContentRestoreDetails];
  } else if ([tag isEqualToString:@"paper_doc_add_comment_details"]) {
    DBTEAMLOGPaperDocAddCommentDetails *paperDocAddCommentDetails =
        [DBTEAMLOGPaperDocAddCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocAddCommentDetails:paperDocAddCommentDetails];
  } else if ([tag isEqualToString:@"paper_doc_change_member_role_details"]) {
    DBTEAMLOGPaperDocChangeMemberRoleDetails *paperDocChangeMemberRoleDetails =
        [DBTEAMLOGPaperDocChangeMemberRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocChangeMemberRoleDetails:paperDocChangeMemberRoleDetails];
  } else if ([tag isEqualToString:@"paper_doc_change_sharing_policy_details"]) {
    DBTEAMLOGPaperDocChangeSharingPolicyDetails *paperDocChangeSharingPolicyDetails =
        [DBTEAMLOGPaperDocChangeSharingPolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithPaperDocChangeSharingPolicyDetails:paperDocChangeSharingPolicyDetails];
  } else if ([tag isEqualToString:@"paper_doc_deleted_details"]) {
    DBTEAMLOGPaperDocDeletedDetails *paperDocDeletedDetails =
        [DBTEAMLOGPaperDocDeletedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocDeletedDetails:paperDocDeletedDetails];
  } else if ([tag isEqualToString:@"paper_doc_delete_comment_details"]) {
    DBTEAMLOGPaperDocDeleteCommentDetails *paperDocDeleteCommentDetails =
        [DBTEAMLOGPaperDocDeleteCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocDeleteCommentDetails:paperDocDeleteCommentDetails];
  } else if ([tag isEqualToString:@"paper_doc_download_details"]) {
    DBTEAMLOGPaperDocDownloadDetails *paperDocDownloadDetails =
        [DBTEAMLOGPaperDocDownloadDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocDownloadDetails:paperDocDownloadDetails];
  } else if ([tag isEqualToString:@"paper_doc_edit_details"]) {
    DBTEAMLOGPaperDocEditDetails *paperDocEditDetails = [DBTEAMLOGPaperDocEditDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocEditDetails:paperDocEditDetails];
  } else if ([tag isEqualToString:@"paper_doc_edit_comment_details"]) {
    DBTEAMLOGPaperDocEditCommentDetails *paperDocEditCommentDetails =
        [DBTEAMLOGPaperDocEditCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocEditCommentDetails:paperDocEditCommentDetails];
  } else if ([tag isEqualToString:@"paper_doc_followed_details"]) {
    DBTEAMLOGPaperDocFollowedDetails *paperDocFollowedDetails =
        [DBTEAMLOGPaperDocFollowedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocFollowedDetails:paperDocFollowedDetails];
  } else if ([tag isEqualToString:@"paper_doc_mention_details"]) {
    DBTEAMLOGPaperDocMentionDetails *paperDocMentionDetails =
        [DBTEAMLOGPaperDocMentionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocMentionDetails:paperDocMentionDetails];
  } else if ([tag isEqualToString:@"paper_doc_request_access_details"]) {
    DBTEAMLOGPaperDocRequestAccessDetails *paperDocRequestAccessDetails =
        [DBTEAMLOGPaperDocRequestAccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocRequestAccessDetails:paperDocRequestAccessDetails];
  } else if ([tag isEqualToString:@"paper_doc_resolve_comment_details"]) {
    DBTEAMLOGPaperDocResolveCommentDetails *paperDocResolveCommentDetails =
        [DBTEAMLOGPaperDocResolveCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocResolveCommentDetails:paperDocResolveCommentDetails];
  } else if ([tag isEqualToString:@"paper_doc_revert_details"]) {
    DBTEAMLOGPaperDocRevertDetails *paperDocRevertDetails =
        [DBTEAMLOGPaperDocRevertDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocRevertDetails:paperDocRevertDetails];
  } else if ([tag isEqualToString:@"paper_doc_slack_share_details"]) {
    DBTEAMLOGPaperDocSlackShareDetails *paperDocSlackShareDetails =
        [DBTEAMLOGPaperDocSlackShareDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocSlackShareDetails:paperDocSlackShareDetails];
  } else if ([tag isEqualToString:@"paper_doc_team_invite_details"]) {
    DBTEAMLOGPaperDocTeamInviteDetails *paperDocTeamInviteDetails =
        [DBTEAMLOGPaperDocTeamInviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocTeamInviteDetails:paperDocTeamInviteDetails];
  } else if ([tag isEqualToString:@"paper_doc_unresolve_comment_details"]) {
    DBTEAMLOGPaperDocUnresolveCommentDetails *paperDocUnresolveCommentDetails =
        [DBTEAMLOGPaperDocUnresolveCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocUnresolveCommentDetails:paperDocUnresolveCommentDetails];
  } else if ([tag isEqualToString:@"paper_doc_view_details"]) {
    DBTEAMLOGPaperDocViewDetails *paperDocViewDetails = [DBTEAMLOGPaperDocViewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocViewDetails:paperDocViewDetails];
  } else if ([tag isEqualToString:@"paper_folder_deleted_details"]) {
    DBTEAMLOGPaperFolderDeletedDetails *paperFolderDeletedDetails =
        [DBTEAMLOGPaperFolderDeletedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperFolderDeletedDetails:paperFolderDeletedDetails];
  } else if ([tag isEqualToString:@"paper_folder_followed_details"]) {
    DBTEAMLOGPaperFolderFollowedDetails *paperFolderFollowedDetails =
        [DBTEAMLOGPaperFolderFollowedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperFolderFollowedDetails:paperFolderFollowedDetails];
  } else if ([tag isEqualToString:@"paper_folder_team_invite_details"]) {
    DBTEAMLOGPaperFolderTeamInviteDetails *paperFolderTeamInviteDetails =
        [DBTEAMLOGPaperFolderTeamInviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperFolderTeamInviteDetails:paperFolderTeamInviteDetails];
  } else if ([tag isEqualToString:@"password_change_details"]) {
    DBTEAMLOGPasswordChangeDetails *passwordChangeDetails =
        [DBTEAMLOGPasswordChangeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPasswordChangeDetails:passwordChangeDetails];
  } else if ([tag isEqualToString:@"password_reset_details"]) {
    DBTEAMLOGPasswordResetDetails *passwordResetDetails =
        [DBTEAMLOGPasswordResetDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPasswordResetDetails:passwordResetDetails];
  } else if ([tag isEqualToString:@"password_reset_all_details"]) {
    DBTEAMLOGPasswordResetAllDetails *passwordResetAllDetails =
        [DBTEAMLOGPasswordResetAllDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPasswordResetAllDetails:passwordResetAllDetails];
  } else if ([tag isEqualToString:@"emm_create_exceptions_report_details"]) {
    DBTEAMLOGEmmCreateExceptionsReportDetails *emmCreateExceptionsReportDetails =
        [DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmCreateExceptionsReportDetails:emmCreateExceptionsReportDetails];
  } else if ([tag isEqualToString:@"emm_create_usage_report_details"]) {
    DBTEAMLOGEmmCreateUsageReportDetails *emmCreateUsageReportDetails =
        [DBTEAMLOGEmmCreateUsageReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmCreateUsageReportDetails:emmCreateUsageReportDetails];
  } else if ([tag isEqualToString:@"smart_sync_create_admin_privilege_report_details"]) {
    DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails *smartSyncCreateAdminPrivilegeReportDetails =
        [DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSmartSyncCreateAdminPrivilegeReportDetails:smartSyncCreateAdminPrivilegeReportDetails];
  } else if ([tag isEqualToString:@"team_activity_create_report_details"]) {
    DBTEAMLOGTeamActivityCreateReportDetails *teamActivityCreateReportDetails =
        [DBTEAMLOGTeamActivityCreateReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamActivityCreateReportDetails:teamActivityCreateReportDetails];
  } else if ([tag isEqualToString:@"collection_share_details"]) {
    DBTEAMLOGCollectionShareDetails *collectionShareDetails =
        [DBTEAMLOGCollectionShareDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithCollectionShareDetails:collectionShareDetails];
  } else if ([tag isEqualToString:@"file_add_comment_details"]) {
    DBTEAMLOGFileAddCommentDetails *fileAddCommentDetails =
        [DBTEAMLOGFileAddCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileAddCommentDetails:fileAddCommentDetails];
  } else if ([tag isEqualToString:@"file_like_comment_details"]) {
    DBTEAMLOGFileLikeCommentDetails *fileLikeCommentDetails =
        [DBTEAMLOGFileLikeCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileLikeCommentDetails:fileLikeCommentDetails];
  } else if ([tag isEqualToString:@"file_unlike_comment_details"]) {
    DBTEAMLOGFileUnlikeCommentDetails *fileUnlikeCommentDetails =
        [DBTEAMLOGFileUnlikeCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileUnlikeCommentDetails:fileUnlikeCommentDetails];
  } else if ([tag isEqualToString:@"note_acl_invite_only_details"]) {
    DBTEAMLOGNoteAclInviteOnlyDetails *noteAclInviteOnlyDetails =
        [DBTEAMLOGNoteAclInviteOnlyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNoteAclInviteOnlyDetails:noteAclInviteOnlyDetails];
  } else if ([tag isEqualToString:@"note_acl_link_details"]) {
    DBTEAMLOGNoteAclLinkDetails *noteAclLinkDetails = [DBTEAMLOGNoteAclLinkDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNoteAclLinkDetails:noteAclLinkDetails];
  } else if ([tag isEqualToString:@"note_acl_team_link_details"]) {
    DBTEAMLOGNoteAclTeamLinkDetails *noteAclTeamLinkDetails =
        [DBTEAMLOGNoteAclTeamLinkDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNoteAclTeamLinkDetails:noteAclTeamLinkDetails];
  } else if ([tag isEqualToString:@"note_shared_details"]) {
    DBTEAMLOGNoteSharedDetails *noteSharedDetails = [DBTEAMLOGNoteSharedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNoteSharedDetails:noteSharedDetails];
  } else if ([tag isEqualToString:@"note_share_receive_details"]) {
    DBTEAMLOGNoteShareReceiveDetails *noteShareReceiveDetails =
        [DBTEAMLOGNoteShareReceiveDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNoteShareReceiveDetails:noteShareReceiveDetails];
  } else if ([tag isEqualToString:@"open_note_shared_details"]) {
    DBTEAMLOGOpenNoteSharedDetails *openNoteSharedDetails =
        [DBTEAMLOGOpenNoteSharedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithOpenNoteSharedDetails:openNoteSharedDetails];
  } else if ([tag isEqualToString:@"sf_add_group_details"]) {
    DBTEAMLOGSfAddGroupDetails *sfAddGroupDetails = [DBTEAMLOGSfAddGroupDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfAddGroupDetails:sfAddGroupDetails];
  } else if ([tag isEqualToString:@"sf_allow_non_members_to_view_shared_links_details"]) {
    DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails *sfAllowNonMembersToViewSharedLinksDetails =
        [DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSfAllowNonMembersToViewSharedLinksDetails:sfAllowNonMembersToViewSharedLinksDetails];
  } else if ([tag isEqualToString:@"sf_invite_group_details"]) {
    DBTEAMLOGSfInviteGroupDetails *sfInviteGroupDetails =
        [DBTEAMLOGSfInviteGroupDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfInviteGroupDetails:sfInviteGroupDetails];
  } else if ([tag isEqualToString:@"sf_nest_details"]) {
    DBTEAMLOGSfNestDetails *sfNestDetails = [DBTEAMLOGSfNestDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfNestDetails:sfNestDetails];
  } else if ([tag isEqualToString:@"sf_team_decline_details"]) {
    DBTEAMLOGSfTeamDeclineDetails *sfTeamDeclineDetails =
        [DBTEAMLOGSfTeamDeclineDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamDeclineDetails:sfTeamDeclineDetails];
  } else if ([tag isEqualToString:@"sf_team_grant_access_details"]) {
    DBTEAMLOGSfTeamGrantAccessDetails *sfTeamGrantAccessDetails =
        [DBTEAMLOGSfTeamGrantAccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamGrantAccessDetails:sfTeamGrantAccessDetails];
  } else if ([tag isEqualToString:@"sf_team_invite_details"]) {
    DBTEAMLOGSfTeamInviteDetails *sfTeamInviteDetails = [DBTEAMLOGSfTeamInviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamInviteDetails:sfTeamInviteDetails];
  } else if ([tag isEqualToString:@"sf_team_invite_change_role_details"]) {
    DBTEAMLOGSfTeamInviteChangeRoleDetails *sfTeamInviteChangeRoleDetails =
        [DBTEAMLOGSfTeamInviteChangeRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamInviteChangeRoleDetails:sfTeamInviteChangeRoleDetails];
  } else if ([tag isEqualToString:@"sf_team_join_details"]) {
    DBTEAMLOGSfTeamJoinDetails *sfTeamJoinDetails = [DBTEAMLOGSfTeamJoinDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamJoinDetails:sfTeamJoinDetails];
  } else if ([tag isEqualToString:@"sf_team_join_from_oob_link_details"]) {
    DBTEAMLOGSfTeamJoinFromOobLinkDetails *sfTeamJoinFromOobLinkDetails =
        [DBTEAMLOGSfTeamJoinFromOobLinkDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamJoinFromOobLinkDetails:sfTeamJoinFromOobLinkDetails];
  } else if ([tag isEqualToString:@"sf_team_uninvite_details"]) {
    DBTEAMLOGSfTeamUninviteDetails *sfTeamUninviteDetails =
        [DBTEAMLOGSfTeamUninviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamUninviteDetails:sfTeamUninviteDetails];
  } else if ([tag isEqualToString:@"shared_content_add_invitees_details"]) {
    DBTEAMLOGSharedContentAddInviteesDetails *sharedContentAddInviteesDetails =
        [DBTEAMLOGSharedContentAddInviteesDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentAddInviteesDetails:sharedContentAddInviteesDetails];
  } else if ([tag isEqualToString:@"shared_content_add_link_expiry_details"]) {
    DBTEAMLOGSharedContentAddLinkExpiryDetails *sharedContentAddLinkExpiryDetails =
        [DBTEAMLOGSharedContentAddLinkExpiryDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentAddLinkExpiryDetails:sharedContentAddLinkExpiryDetails];
  } else if ([tag isEqualToString:@"shared_content_add_link_password_details"]) {
    DBTEAMLOGSharedContentAddLinkPasswordDetails *sharedContentAddLinkPasswordDetails =
        [DBTEAMLOGSharedContentAddLinkPasswordDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithSharedContentAddLinkPasswordDetails:sharedContentAddLinkPasswordDetails];
  } else if ([tag isEqualToString:@"shared_content_add_member_details"]) {
    DBTEAMLOGSharedContentAddMemberDetails *sharedContentAddMemberDetails =
        [DBTEAMLOGSharedContentAddMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentAddMemberDetails:sharedContentAddMemberDetails];
  } else if ([tag isEqualToString:@"shared_content_change_downloads_policy_details"]) {
    DBTEAMLOGSharedContentChangeDownloadsPolicyDetails *sharedContentChangeDownloadsPolicyDetails =
        [DBTEAMLOGSharedContentChangeDownloadsPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeDownloadsPolicyDetails:sharedContentChangeDownloadsPolicyDetails];
  } else if ([tag isEqualToString:@"shared_content_change_invitee_role_details"]) {
    DBTEAMLOGSharedContentChangeInviteeRoleDetails *sharedContentChangeInviteeRoleDetails =
        [DBTEAMLOGSharedContentChangeInviteeRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeInviteeRoleDetails:sharedContentChangeInviteeRoleDetails];
  } else if ([tag isEqualToString:@"shared_content_change_link_audience_details"]) {
    DBTEAMLOGSharedContentChangeLinkAudienceDetails *sharedContentChangeLinkAudienceDetails =
        [DBTEAMLOGSharedContentChangeLinkAudienceDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeLinkAudienceDetails:sharedContentChangeLinkAudienceDetails];
  } else if ([tag isEqualToString:@"shared_content_change_link_expiry_details"]) {
    DBTEAMLOGSharedContentChangeLinkExpiryDetails *sharedContentChangeLinkExpiryDetails =
        [DBTEAMLOGSharedContentChangeLinkExpiryDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeLinkExpiryDetails:sharedContentChangeLinkExpiryDetails];
  } else if ([tag isEqualToString:@"shared_content_change_link_password_details"]) {
    DBTEAMLOGSharedContentChangeLinkPasswordDetails *sharedContentChangeLinkPasswordDetails =
        [DBTEAMLOGSharedContentChangeLinkPasswordDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeLinkPasswordDetails:sharedContentChangeLinkPasswordDetails];
  } else if ([tag isEqualToString:@"shared_content_change_member_role_details"]) {
    DBTEAMLOGSharedContentChangeMemberRoleDetails *sharedContentChangeMemberRoleDetails =
        [DBTEAMLOGSharedContentChangeMemberRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeMemberRoleDetails:sharedContentChangeMemberRoleDetails];
  } else if ([tag isEqualToString:@"shared_content_change_viewer_info_policy_details"]) {
    DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails *sharedContentChangeViewerInfoPolicyDetails =
        [DBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeViewerInfoPolicyDetails:sharedContentChangeViewerInfoPolicyDetails];
  } else if ([tag isEqualToString:@"shared_content_claim_invitation_details"]) {
    DBTEAMLOGSharedContentClaimInvitationDetails *sharedContentClaimInvitationDetails =
        [DBTEAMLOGSharedContentClaimInvitationDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithSharedContentClaimInvitationDetails:sharedContentClaimInvitationDetails];
  } else if ([tag isEqualToString:@"shared_content_copy_details"]) {
    DBTEAMLOGSharedContentCopyDetails *sharedContentCopyDetails =
        [DBTEAMLOGSharedContentCopyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentCopyDetails:sharedContentCopyDetails];
  } else if ([tag isEqualToString:@"shared_content_download_details"]) {
    DBTEAMLOGSharedContentDownloadDetails *sharedContentDownloadDetails =
        [DBTEAMLOGSharedContentDownloadDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentDownloadDetails:sharedContentDownloadDetails];
  } else if ([tag isEqualToString:@"shared_content_relinquish_membership_details"]) {
    DBTEAMLOGSharedContentRelinquishMembershipDetails *sharedContentRelinquishMembershipDetails =
        [DBTEAMLOGSharedContentRelinquishMembershipDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentRelinquishMembershipDetails:sharedContentRelinquishMembershipDetails];
  } else if ([tag isEqualToString:@"shared_content_remove_invitee_details"]) {
    DBTEAMLOGSharedContentRemoveInviteeDetails *sharedContentRemoveInviteeDetails =
        [DBTEAMLOGSharedContentRemoveInviteeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentRemoveInviteeDetails:sharedContentRemoveInviteeDetails];
  } else if ([tag isEqualToString:@"shared_content_remove_link_expiry_details"]) {
    DBTEAMLOGSharedContentRemoveLinkExpiryDetails *sharedContentRemoveLinkExpiryDetails =
        [DBTEAMLOGSharedContentRemoveLinkExpiryDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentRemoveLinkExpiryDetails:sharedContentRemoveLinkExpiryDetails];
  } else if ([tag isEqualToString:@"shared_content_remove_link_password_details"]) {
    DBTEAMLOGSharedContentRemoveLinkPasswordDetails *sharedContentRemoveLinkPasswordDetails =
        [DBTEAMLOGSharedContentRemoveLinkPasswordDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentRemoveLinkPasswordDetails:sharedContentRemoveLinkPasswordDetails];
  } else if ([tag isEqualToString:@"shared_content_remove_member_details"]) {
    DBTEAMLOGSharedContentRemoveMemberDetails *sharedContentRemoveMemberDetails =
        [DBTEAMLOGSharedContentRemoveMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentRemoveMemberDetails:sharedContentRemoveMemberDetails];
  } else if ([tag isEqualToString:@"shared_content_request_access_details"]) {
    DBTEAMLOGSharedContentRequestAccessDetails *sharedContentRequestAccessDetails =
        [DBTEAMLOGSharedContentRequestAccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentRequestAccessDetails:sharedContentRequestAccessDetails];
  } else if ([tag isEqualToString:@"shared_content_unshare_details"]) {
    DBTEAMLOGSharedContentUnshareDetails *sharedContentUnshareDetails =
        [DBTEAMLOGSharedContentUnshareDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentUnshareDetails:sharedContentUnshareDetails];
  } else if ([tag isEqualToString:@"shared_content_view_details"]) {
    DBTEAMLOGSharedContentViewDetails *sharedContentViewDetails =
        [DBTEAMLOGSharedContentViewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentViewDetails:sharedContentViewDetails];
  } else if ([tag isEqualToString:@"shared_folder_change_confidentiality_details"]) {
    DBTEAMLOGSharedFolderChangeConfidentialityDetails *sharedFolderChangeConfidentialityDetails =
        [DBTEAMLOGSharedFolderChangeConfidentialityDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedFolderChangeConfidentialityDetails:sharedFolderChangeConfidentialityDetails];
  } else if ([tag isEqualToString:@"shared_folder_change_link_policy_details"]) {
    DBTEAMLOGSharedFolderChangeLinkPolicyDetails *sharedFolderChangeLinkPolicyDetails =
        [DBTEAMLOGSharedFolderChangeLinkPolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithSharedFolderChangeLinkPolicyDetails:sharedFolderChangeLinkPolicyDetails];
  } else if ([tag isEqualToString:@"shared_folder_change_member_management_policy_details"]) {
    DBTEAMLOGSharedFolderChangeMemberManagementPolicyDetails *sharedFolderChangeMemberManagementPolicyDetails =
        [DBTEAMLOGSharedFolderChangeMemberManagementPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedFolderChangeMemberManagementPolicyDetails:sharedFolderChangeMemberManagementPolicyDetails];
  } else if ([tag isEqualToString:@"shared_folder_change_member_policy_details"]) {
    DBTEAMLOGSharedFolderChangeMemberPolicyDetails *sharedFolderChangeMemberPolicyDetails =
        [DBTEAMLOGSharedFolderChangeMemberPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedFolderChangeMemberPolicyDetails:sharedFolderChangeMemberPolicyDetails];
  } else if ([tag isEqualToString:@"shared_folder_create_details"]) {
    DBTEAMLOGSharedFolderCreateDetails *sharedFolderCreateDetails =
        [DBTEAMLOGSharedFolderCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedFolderCreateDetails:sharedFolderCreateDetails];
  } else if ([tag isEqualToString:@"shared_folder_mount_details"]) {
    DBTEAMLOGSharedFolderMountDetails *sharedFolderMountDetails =
        [DBTEAMLOGSharedFolderMountDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedFolderMountDetails:sharedFolderMountDetails];
  } else if ([tag isEqualToString:@"shared_folder_transfer_ownership_details"]) {
    DBTEAMLOGSharedFolderTransferOwnershipDetails *sharedFolderTransferOwnershipDetails =
        [DBTEAMLOGSharedFolderTransferOwnershipDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedFolderTransferOwnershipDetails:sharedFolderTransferOwnershipDetails];
  } else if ([tag isEqualToString:@"shared_folder_unmount_details"]) {
    DBTEAMLOGSharedFolderUnmountDetails *sharedFolderUnmountDetails =
        [DBTEAMLOGSharedFolderUnmountDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedFolderUnmountDetails:sharedFolderUnmountDetails];
  } else if ([tag isEqualToString:@"shared_note_opened_details"]) {
    DBTEAMLOGSharedNoteOpenedDetails *sharedNoteOpenedDetails =
        [DBTEAMLOGSharedNoteOpenedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedNoteOpenedDetails:sharedNoteOpenedDetails];
  } else if ([tag isEqualToString:@"shmodel_app_create_details"]) {
    DBTEAMLOGShmodelAppCreateDetails *shmodelAppCreateDetails =
        [DBTEAMLOGShmodelAppCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelAppCreateDetails:shmodelAppCreateDetails];
  } else if ([tag isEqualToString:@"shmodel_create_details"]) {
    DBTEAMLOGShmodelCreateDetails *shmodelCreateDetails =
        [DBTEAMLOGShmodelCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelCreateDetails:shmodelCreateDetails];
  } else if ([tag isEqualToString:@"shmodel_disable_details"]) {
    DBTEAMLOGShmodelDisableDetails *shmodelDisableDetails =
        [DBTEAMLOGShmodelDisableDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelDisableDetails:shmodelDisableDetails];
  } else if ([tag isEqualToString:@"shmodel_fb_share_details"]) {
    DBTEAMLOGShmodelFbShareDetails *shmodelFbShareDetails =
        [DBTEAMLOGShmodelFbShareDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelFbShareDetails:shmodelFbShareDetails];
  } else if ([tag isEqualToString:@"shmodel_group_share_details"]) {
    DBTEAMLOGShmodelGroupShareDetails *shmodelGroupShareDetails =
        [DBTEAMLOGShmodelGroupShareDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelGroupShareDetails:shmodelGroupShareDetails];
  } else if ([tag isEqualToString:@"shmodel_remove_expiration_details"]) {
    DBTEAMLOGShmodelRemoveExpirationDetails *shmodelRemoveExpirationDetails =
        [DBTEAMLOGShmodelRemoveExpirationDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelRemoveExpirationDetails:shmodelRemoveExpirationDetails];
  } else if ([tag isEqualToString:@"shmodel_set_expiration_details"]) {
    DBTEAMLOGShmodelSetExpirationDetails *shmodelSetExpirationDetails =
        [DBTEAMLOGShmodelSetExpirationDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelSetExpirationDetails:shmodelSetExpirationDetails];
  } else if ([tag isEqualToString:@"shmodel_team_copy_details"]) {
    DBTEAMLOGShmodelTeamCopyDetails *shmodelTeamCopyDetails =
        [DBTEAMLOGShmodelTeamCopyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelTeamCopyDetails:shmodelTeamCopyDetails];
  } else if ([tag isEqualToString:@"shmodel_team_download_details"]) {
    DBTEAMLOGShmodelTeamDownloadDetails *shmodelTeamDownloadDetails =
        [DBTEAMLOGShmodelTeamDownloadDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelTeamDownloadDetails:shmodelTeamDownloadDetails];
  } else if ([tag isEqualToString:@"shmodel_team_share_details"]) {
    DBTEAMLOGShmodelTeamShareDetails *shmodelTeamShareDetails =
        [DBTEAMLOGShmodelTeamShareDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelTeamShareDetails:shmodelTeamShareDetails];
  } else if ([tag isEqualToString:@"shmodel_team_view_details"]) {
    DBTEAMLOGShmodelTeamViewDetails *shmodelTeamViewDetails =
        [DBTEAMLOGShmodelTeamViewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelTeamViewDetails:shmodelTeamViewDetails];
  } else if ([tag isEqualToString:@"shmodel_visibility_password_details"]) {
    DBTEAMLOGShmodelVisibilityPasswordDetails *shmodelVisibilityPasswordDetails =
        [DBTEAMLOGShmodelVisibilityPasswordDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelVisibilityPasswordDetails:shmodelVisibilityPasswordDetails];
  } else if ([tag isEqualToString:@"shmodel_visibility_public_details"]) {
    DBTEAMLOGShmodelVisibilityPublicDetails *shmodelVisibilityPublicDetails =
        [DBTEAMLOGShmodelVisibilityPublicDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelVisibilityPublicDetails:shmodelVisibilityPublicDetails];
  } else if ([tag isEqualToString:@"shmodel_visibility_team_only_details"]) {
    DBTEAMLOGShmodelVisibilityTeamOnlyDetails *shmodelVisibilityTeamOnlyDetails =
        [DBTEAMLOGShmodelVisibilityTeamOnlyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelVisibilityTeamOnlyDetails:shmodelVisibilityTeamOnlyDetails];
  } else if ([tag isEqualToString:@"remove_logout_url_details"]) {
    DBTEAMLOGRemoveLogoutUrlDetails *removeLogoutUrlDetails =
        [DBTEAMLOGRemoveLogoutUrlDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithRemoveLogoutUrlDetails:removeLogoutUrlDetails];
  } else if ([tag isEqualToString:@"remove_sso_url_details"]) {
    DBTEAMLOGRemoveSsoUrlDetails *removeSsoUrlDetails = [DBTEAMLOGRemoveSsoUrlDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithRemoveSsoUrlDetails:removeSsoUrlDetails];
  } else if ([tag isEqualToString:@"sso_change_cert_details"]) {
    DBTEAMLOGSsoChangeCertDetails *ssoChangeCertDetails =
        [DBTEAMLOGSsoChangeCertDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoChangeCertDetails:ssoChangeCertDetails];
  } else if ([tag isEqualToString:@"sso_change_login_url_details"]) {
    DBTEAMLOGSsoChangeLoginUrlDetails *ssoChangeLoginUrlDetails =
        [DBTEAMLOGSsoChangeLoginUrlDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoChangeLoginUrlDetails:ssoChangeLoginUrlDetails];
  } else if ([tag isEqualToString:@"sso_change_logout_url_details"]) {
    DBTEAMLOGSsoChangeLogoutUrlDetails *ssoChangeLogoutUrlDetails =
        [DBTEAMLOGSsoChangeLogoutUrlDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoChangeLogoutUrlDetails:ssoChangeLogoutUrlDetails];
  } else if ([tag isEqualToString:@"sso_change_saml_identity_mode_details"]) {
    DBTEAMLOGSsoChangeSamlIdentityModeDetails *ssoChangeSamlIdentityModeDetails =
        [DBTEAMLOGSsoChangeSamlIdentityModeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoChangeSamlIdentityModeDetails:ssoChangeSamlIdentityModeDetails];
  } else if ([tag isEqualToString:@"team_folder_change_status_details"]) {
    DBTEAMLOGTeamFolderChangeStatusDetails *teamFolderChangeStatusDetails =
        [DBTEAMLOGTeamFolderChangeStatusDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamFolderChangeStatusDetails:teamFolderChangeStatusDetails];
  } else if ([tag isEqualToString:@"team_folder_create_details"]) {
    DBTEAMLOGTeamFolderCreateDetails *teamFolderCreateDetails =
        [DBTEAMLOGTeamFolderCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamFolderCreateDetails:teamFolderCreateDetails];
  } else if ([tag isEqualToString:@"team_folder_downgrade_details"]) {
    DBTEAMLOGTeamFolderDowngradeDetails *teamFolderDowngradeDetails =
        [DBTEAMLOGTeamFolderDowngradeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamFolderDowngradeDetails:teamFolderDowngradeDetails];
  } else if ([tag isEqualToString:@"team_folder_permanently_delete_details"]) {
    DBTEAMLOGTeamFolderPermanentlyDeleteDetails *teamFolderPermanentlyDeleteDetails =
        [DBTEAMLOGTeamFolderPermanentlyDeleteDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithTeamFolderPermanentlyDeleteDetails:teamFolderPermanentlyDeleteDetails];
  } else if ([tag isEqualToString:@"team_folder_rename_details"]) {
    DBTEAMLOGTeamFolderRenameDetails *teamFolderRenameDetails =
        [DBTEAMLOGTeamFolderRenameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamFolderRenameDetails:teamFolderRenameDetails];
  } else if ([tag isEqualToString:@"account_capture_change_policy_details"]) {
    DBTEAMLOGAccountCaptureChangePolicyDetails *accountCaptureChangePolicyDetails =
        [DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAccountCaptureChangePolicyDetails:accountCaptureChangePolicyDetails];
  } else if ([tag isEqualToString:@"allow_download_disabled_details"]) {
    DBTEAMLOGAllowDownloadDisabledDetails *allowDownloadDisabledDetails =
        [DBTEAMLOGAllowDownloadDisabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAllowDownloadDisabledDetails:allowDownloadDisabledDetails];
  } else if ([tag isEqualToString:@"allow_download_enabled_details"]) {
    DBTEAMLOGAllowDownloadEnabledDetails *allowDownloadEnabledDetails =
        [DBTEAMLOGAllowDownloadEnabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAllowDownloadEnabledDetails:allowDownloadEnabledDetails];
  } else if ([tag isEqualToString:@"data_placement_restriction_change_policy_details"]) {
    DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *dataPlacementRestrictionChangePolicyDetails =
        [DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDataPlacementRestrictionChangePolicyDetails:dataPlacementRestrictionChangePolicyDetails];
  } else if ([tag isEqualToString:@"data_placement_restriction_satisfy_policy_details"]) {
    DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *dataPlacementRestrictionSatisfyPolicyDetails =
        [DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDataPlacementRestrictionSatisfyPolicyDetails:dataPlacementRestrictionSatisfyPolicyDetails];
  } else if ([tag isEqualToString:@"device_approvals_change_desktop_policy_details"]) {
    DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *deviceApprovalsChangeDesktopPolicyDetails =
        [DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDeviceApprovalsChangeDesktopPolicyDetails:deviceApprovalsChangeDesktopPolicyDetails];
  } else if ([tag isEqualToString:@"device_approvals_change_mobile_policy_details"]) {
    DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *deviceApprovalsChangeMobilePolicyDetails =
        [DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDeviceApprovalsChangeMobilePolicyDetails:deviceApprovalsChangeMobilePolicyDetails];
  } else if ([tag isEqualToString:@"device_approvals_change_overage_action_details"]) {
    DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *deviceApprovalsChangeOverageActionDetails =
        [DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDeviceApprovalsChangeOverageActionDetails:deviceApprovalsChangeOverageActionDetails];
  } else if ([tag isEqualToString:@"device_approvals_change_unlink_action_details"]) {
    DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *deviceApprovalsChangeUnlinkActionDetails =
        [DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDeviceApprovalsChangeUnlinkActionDetails:deviceApprovalsChangeUnlinkActionDetails];
  } else if ([tag isEqualToString:@"emm_add_exception_details"]) {
    DBTEAMLOGEmmAddExceptionDetails *emmAddExceptionDetails =
        [DBTEAMLOGEmmAddExceptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmAddExceptionDetails:emmAddExceptionDetails];
  } else if ([tag isEqualToString:@"emm_change_policy_details"]) {
    DBTEAMLOGEmmChangePolicyDetails *emmChangePolicyDetails =
        [DBTEAMLOGEmmChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmChangePolicyDetails:emmChangePolicyDetails];
  } else if ([tag isEqualToString:@"emm_remove_exception_details"]) {
    DBTEAMLOGEmmRemoveExceptionDetails *emmRemoveExceptionDetails =
        [DBTEAMLOGEmmRemoveExceptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmRemoveExceptionDetails:emmRemoveExceptionDetails];
  } else if ([tag isEqualToString:@"extended_version_history_change_policy_details"]) {
    DBTEAMLOGExtendedVersionHistoryChangePolicyDetails *extendedVersionHistoryChangePolicyDetails =
        [DBTEAMLOGExtendedVersionHistoryChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithExtendedVersionHistoryChangePolicyDetails:extendedVersionHistoryChangePolicyDetails];
  } else if ([tag isEqualToString:@"file_comments_change_policy_details"]) {
    DBTEAMLOGFileCommentsChangePolicyDetails *fileCommentsChangePolicyDetails =
        [DBTEAMLOGFileCommentsChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileCommentsChangePolicyDetails:fileCommentsChangePolicyDetails];
  } else if ([tag isEqualToString:@"file_requests_change_policy_details"]) {
    DBTEAMLOGFileRequestsChangePolicyDetails *fileRequestsChangePolicyDetails =
        [DBTEAMLOGFileRequestsChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestsChangePolicyDetails:fileRequestsChangePolicyDetails];
  } else if ([tag isEqualToString:@"file_requests_emails_enabled_details"]) {
    DBTEAMLOGFileRequestsEmailsEnabledDetails *fileRequestsEmailsEnabledDetails =
        [DBTEAMLOGFileRequestsEmailsEnabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestsEmailsEnabledDetails:fileRequestsEmailsEnabledDetails];
  } else if ([tag isEqualToString:@"file_requests_emails_restricted_to_team_only_details"]) {
    DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails *fileRequestsEmailsRestrictedToTeamOnlyDetails =
        [DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithFileRequestsEmailsRestrictedToTeamOnlyDetails:fileRequestsEmailsRestrictedToTeamOnlyDetails];
  } else if ([tag isEqualToString:@"google_sso_change_policy_details"]) {
    DBTEAMLOGGoogleSsoChangePolicyDetails *googleSsoChangePolicyDetails =
        [DBTEAMLOGGoogleSsoChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGoogleSsoChangePolicyDetails:googleSsoChangePolicyDetails];
  } else if ([tag isEqualToString:@"group_user_management_change_policy_details"]) {
    DBTEAMLOGGroupUserManagementChangePolicyDetails *groupUserManagementChangePolicyDetails =
        [DBTEAMLOGGroupUserManagementChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithGroupUserManagementChangePolicyDetails:groupUserManagementChangePolicyDetails];
  } else if ([tag isEqualToString:@"member_requests_change_policy_details"]) {
    DBTEAMLOGMemberRequestsChangePolicyDetails *memberRequestsChangePolicyDetails =
        [DBTEAMLOGMemberRequestsChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberRequestsChangePolicyDetails:memberRequestsChangePolicyDetails];
  } else if ([tag isEqualToString:@"member_space_limits_add_exception_details"]) {
    DBTEAMLOGMemberSpaceLimitsAddExceptionDetails *memberSpaceLimitsAddExceptionDetails =
        [DBTEAMLOGMemberSpaceLimitsAddExceptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsAddExceptionDetails:memberSpaceLimitsAddExceptionDetails];
  } else if ([tag isEqualToString:@"member_space_limits_change_policy_details"]) {
    DBTEAMLOGMemberSpaceLimitsChangePolicyDetails *memberSpaceLimitsChangePolicyDetails =
        [DBTEAMLOGMemberSpaceLimitsChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsChangePolicyDetails:memberSpaceLimitsChangePolicyDetails];
  } else if ([tag isEqualToString:@"member_space_limits_remove_exception_details"]) {
    DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails *memberSpaceLimitsRemoveExceptionDetails =
        [DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsRemoveExceptionDetails:memberSpaceLimitsRemoveExceptionDetails];
  } else if ([tag isEqualToString:@"member_suggestions_change_policy_details"]) {
    DBTEAMLOGMemberSuggestionsChangePolicyDetails *memberSuggestionsChangePolicyDetails =
        [DBTEAMLOGMemberSuggestionsChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSuggestionsChangePolicyDetails:memberSuggestionsChangePolicyDetails];
  } else if ([tag isEqualToString:@"microsoft_office_addin_change_policy_details"]) {
    DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails *microsoftOfficeAddinChangePolicyDetails =
        [DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMicrosoftOfficeAddinChangePolicyDetails:microsoftOfficeAddinChangePolicyDetails];
  } else if ([tag isEqualToString:@"network_control_change_policy_details"]) {
    DBTEAMLOGNetworkControlChangePolicyDetails *networkControlChangePolicyDetails =
        [DBTEAMLOGNetworkControlChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNetworkControlChangePolicyDetails:networkControlChangePolicyDetails];
  } else if ([tag isEqualToString:@"paper_change_deployment_policy_details"]) {
    DBTEAMLOGPaperChangeDeploymentPolicyDetails *paperChangeDeploymentPolicyDetails =
        [DBTEAMLOGPaperChangeDeploymentPolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithPaperChangeDeploymentPolicyDetails:paperChangeDeploymentPolicyDetails];
  } else if ([tag isEqualToString:@"paper_change_member_policy_details"]) {
    DBTEAMLOGPaperChangeMemberPolicyDetails *paperChangeMemberPolicyDetails =
        [DBTEAMLOGPaperChangeMemberPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperChangeMemberPolicyDetails:paperChangeMemberPolicyDetails];
  } else if ([tag isEqualToString:@"paper_change_policy_details"]) {
    DBTEAMLOGPaperChangePolicyDetails *paperChangePolicyDetails =
        [DBTEAMLOGPaperChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperChangePolicyDetails:paperChangePolicyDetails];
  } else if ([tag isEqualToString:@"permanent_delete_change_policy_details"]) {
    DBTEAMLOGPermanentDeleteChangePolicyDetails *permanentDeleteChangePolicyDetails =
        [DBTEAMLOGPermanentDeleteChangePolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithPermanentDeleteChangePolicyDetails:permanentDeleteChangePolicyDetails];
  } else if ([tag isEqualToString:@"sharing_change_folder_join_policy_details"]) {
    DBTEAMLOGSharingChangeFolderJoinPolicyDetails *sharingChangeFolderJoinPolicyDetails =
        [DBTEAMLOGSharingChangeFolderJoinPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharingChangeFolderJoinPolicyDetails:sharingChangeFolderJoinPolicyDetails];
  } else if ([tag isEqualToString:@"sharing_change_link_policy_details"]) {
    DBTEAMLOGSharingChangeLinkPolicyDetails *sharingChangeLinkPolicyDetails =
        [DBTEAMLOGSharingChangeLinkPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharingChangeLinkPolicyDetails:sharingChangeLinkPolicyDetails];
  } else if ([tag isEqualToString:@"sharing_change_member_policy_details"]) {
    DBTEAMLOGSharingChangeMemberPolicyDetails *sharingChangeMemberPolicyDetails =
        [DBTEAMLOGSharingChangeMemberPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharingChangeMemberPolicyDetails:sharingChangeMemberPolicyDetails];
  } else if ([tag isEqualToString:@"smart_sync_change_policy_details"]) {
    DBTEAMLOGSmartSyncChangePolicyDetails *smartSyncChangePolicyDetails =
        [DBTEAMLOGSmartSyncChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSmartSyncChangePolicyDetails:smartSyncChangePolicyDetails];
  } else if ([tag isEqualToString:@"sso_change_policy_details"]) {
    DBTEAMLOGSsoChangePolicyDetails *ssoChangePolicyDetails =
        [DBTEAMLOGSsoChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoChangePolicyDetails:ssoChangePolicyDetails];
  } else if ([tag isEqualToString:@"tfa_change_policy_details"]) {
    DBTEAMLOGTfaChangePolicyDetails *tfaChangePolicyDetails =
        [DBTEAMLOGTfaChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaChangePolicyDetails:tfaChangePolicyDetails];
  } else if ([tag isEqualToString:@"two_account_change_policy_details"]) {
    DBTEAMLOGTwoAccountChangePolicyDetails *twoAccountChangePolicyDetails =
        [DBTEAMLOGTwoAccountChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTwoAccountChangePolicyDetails:twoAccountChangePolicyDetails];
  } else if ([tag isEqualToString:@"web_sessions_change_fixed_length_policy_details"]) {
    DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails *webSessionsChangeFixedLengthPolicyDetails =
        [DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithWebSessionsChangeFixedLengthPolicyDetails:webSessionsChangeFixedLengthPolicyDetails];
  } else if ([tag isEqualToString:@"web_sessions_change_idle_length_policy_details"]) {
    DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails *webSessionsChangeIdleLengthPolicyDetails =
        [DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithWebSessionsChangeIdleLengthPolicyDetails:webSessionsChangeIdleLengthPolicyDetails];
  } else if ([tag isEqualToString:@"team_profile_add_logo_details"]) {
    DBTEAMLOGTeamProfileAddLogoDetails *teamProfileAddLogoDetails =
        [DBTEAMLOGTeamProfileAddLogoDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamProfileAddLogoDetails:teamProfileAddLogoDetails];
  } else if ([tag isEqualToString:@"team_profile_change_logo_details"]) {
    DBTEAMLOGTeamProfileChangeLogoDetails *teamProfileChangeLogoDetails =
        [DBTEAMLOGTeamProfileChangeLogoDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamProfileChangeLogoDetails:teamProfileChangeLogoDetails];
  } else if ([tag isEqualToString:@"team_profile_change_name_details"]) {
    DBTEAMLOGTeamProfileChangeNameDetails *teamProfileChangeNameDetails =
        [DBTEAMLOGTeamProfileChangeNameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamProfileChangeNameDetails:teamProfileChangeNameDetails];
  } else if ([tag isEqualToString:@"team_profile_remove_logo_details"]) {
    DBTEAMLOGTeamProfileRemoveLogoDetails *teamProfileRemoveLogoDetails =
        [DBTEAMLOGTeamProfileRemoveLogoDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamProfileRemoveLogoDetails:teamProfileRemoveLogoDetails];
  } else if ([tag isEqualToString:@"tfa_add_backup_phone_details"]) {
    DBTEAMLOGTfaAddBackupPhoneDetails *tfaAddBackupPhoneDetails =
        [DBTEAMLOGTfaAddBackupPhoneDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaAddBackupPhoneDetails:tfaAddBackupPhoneDetails];
  } else if ([tag isEqualToString:@"tfa_add_security_key_details"]) {
    DBTEAMLOGTfaAddSecurityKeyDetails *tfaAddSecurityKeyDetails =
        [DBTEAMLOGTfaAddSecurityKeyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaAddSecurityKeyDetails:tfaAddSecurityKeyDetails];
  } else if ([tag isEqualToString:@"tfa_change_backup_phone_details"]) {
    DBTEAMLOGTfaChangeBackupPhoneDetails *tfaChangeBackupPhoneDetails =
        [DBTEAMLOGTfaChangeBackupPhoneDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaChangeBackupPhoneDetails:tfaChangeBackupPhoneDetails];
  } else if ([tag isEqualToString:@"tfa_change_status_details"]) {
    DBTEAMLOGTfaChangeStatusDetails *tfaChangeStatusDetails =
        [DBTEAMLOGTfaChangeStatusDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaChangeStatusDetails:tfaChangeStatusDetails];
  } else if ([tag isEqualToString:@"tfa_remove_backup_phone_details"]) {
    DBTEAMLOGTfaRemoveBackupPhoneDetails *tfaRemoveBackupPhoneDetails =
        [DBTEAMLOGTfaRemoveBackupPhoneDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaRemoveBackupPhoneDetails:tfaRemoveBackupPhoneDetails];
  } else if ([tag isEqualToString:@"tfa_remove_security_key_details"]) {
    DBTEAMLOGTfaRemoveSecurityKeyDetails *tfaRemoveSecurityKeyDetails =
        [DBTEAMLOGTfaRemoveSecurityKeyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaRemoveSecurityKeyDetails:tfaRemoveSecurityKeyDetails];
  } else if ([tag isEqualToString:@"tfa_reset_details"]) {
    DBTEAMLOGTfaResetDetails *tfaResetDetails = [DBTEAMLOGTfaResetDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaResetDetails:tfaResetDetails];
  } else if ([tag isEqualToString:@"missing_details"]) {
    DBTEAMLOGMissingDetails *missingDetails = [DBTEAMLOGMissingDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMissingDetails:missingDetails];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGEventDetails alloc] initWithOther];
  } else {
    return [[DBTEAMLOGEventDetails alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEventType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEventType

#pragma mark - Constructors

- (instancetype)initWithMemberChangeMembershipType {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberChangeMembershipType;
  }
  return self;
}

- (instancetype)initWithMemberPermanentlyDeleteAccountContents {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberPermanentlyDeleteAccountContents;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsChangeStatus {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberSpaceLimitsChangeStatus;
  }
  return self;
}

- (instancetype)initWithMemberTransferAccountContents {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberTransferAccountContents;
  }
  return self;
}

- (instancetype)initWithPaperEnabledUsersGroupAddition {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperEnabledUsersGroupAddition;
  }
  return self;
}

- (instancetype)initWithPaperEnabledUsersGroupRemoval {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperEnabledUsersGroupRemoval;
  }
  return self;
}

- (instancetype)initWithPaperExternalViewAllow {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperExternalViewAllow;
  }
  return self;
}

- (instancetype)initWithPaperExternalViewDefaultTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperExternalViewDefaultTeam;
  }
  return self;
}

- (instancetype)initWithPaperExternalViewForbid {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperExternalViewForbid;
  }
  return self;
}

- (instancetype)initWithSfExternalInviteWarn {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfExternalInviteWarn;
  }
  return self;
}

- (instancetype)initWithTeamMerge {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamMerge;
  }
  return self;
}

- (instancetype)initWithAppLinkTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAppLinkTeam;
  }
  return self;
}

- (instancetype)initWithAppLinkUser {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAppLinkUser;
  }
  return self;
}

- (instancetype)initWithAppUnlinkTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAppUnlinkTeam;
  }
  return self;
}

- (instancetype)initWithAppUnlinkUser {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAppUnlinkUser;
  }
  return self;
}

- (instancetype)initWithDeviceChangeIpDesktop {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceChangeIpDesktop;
  }
  return self;
}

- (instancetype)initWithDeviceChangeIpMobile {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceChangeIpMobile;
  }
  return self;
}

- (instancetype)initWithDeviceChangeIpWeb {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceChangeIpWeb;
  }
  return self;
}

- (instancetype)initWithDeviceDeleteOnUnlinkFail {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceDeleteOnUnlinkFail;
  }
  return self;
}

- (instancetype)initWithDeviceDeleteOnUnlinkSuccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceDeleteOnUnlinkSuccess;
  }
  return self;
}

- (instancetype)initWithDeviceLinkFail {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceLinkFail;
  }
  return self;
}

- (instancetype)initWithDeviceLinkSuccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceLinkSuccess;
  }
  return self;
}

- (instancetype)initWithDeviceManagementDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceManagementDisabled;
  }
  return self;
}

- (instancetype)initWithDeviceManagementEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceManagementEnabled;
  }
  return self;
}

- (instancetype)initWithDeviceUnlink {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceUnlink;
  }
  return self;
}

- (instancetype)initWithEmmRefreshAuthToken {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeEmmRefreshAuthToken;
  }
  return self;
}

- (instancetype)initWithAccountCaptureChangeAvailability {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAccountCaptureChangeAvailability;
  }
  return self;
}

- (instancetype)initWithAccountCaptureMigrateAccount {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAccountCaptureMigrateAccount;
  }
  return self;
}

- (instancetype)initWithAccountCaptureRelinquishAccount {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAccountCaptureRelinquishAccount;
  }
  return self;
}

- (instancetype)initWithDisabledDomainInvites {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDisabledDomainInvites;
  }
  return self;
}

- (instancetype)initWithDomainInvitesApproveRequestToJoinTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainInvitesApproveRequestToJoinTeam;
  }
  return self;
}

- (instancetype)initWithDomainInvitesDeclineRequestToJoinTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainInvitesDeclineRequestToJoinTeam;
  }
  return self;
}

- (instancetype)initWithDomainInvitesEmailExistingUsers {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainInvitesEmailExistingUsers;
  }
  return self;
}

- (instancetype)initWithDomainInvitesRequestToJoinTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainInvitesRequestToJoinTeam;
  }
  return self;
}

- (instancetype)initWithDomainInvitesSetInviteNewUserPrefToNo {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToNo;
  }
  return self;
}

- (instancetype)initWithDomainInvitesSetInviteNewUserPrefToYes {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToYes;
  }
  return self;
}

- (instancetype)initWithDomainVerificationAddDomainFail {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainVerificationAddDomainFail;
  }
  return self;
}

- (instancetype)initWithDomainVerificationAddDomainSuccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainVerificationAddDomainSuccess;
  }
  return self;
}

- (instancetype)initWithDomainVerificationRemoveDomain {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDomainVerificationRemoveDomain;
  }
  return self;
}

- (instancetype)initWithEnabledDomainInvites {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeEnabledDomainInvites;
  }
  return self;
}

- (instancetype)initWithCreateFolder {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeCreateFolder;
  }
  return self;
}

- (instancetype)initWithFileAdd {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileAdd;
  }
  return self;
}

- (instancetype)initWithFileCopy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileCopy;
  }
  return self;
}

- (instancetype)initWithFileDelete {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileDelete;
  }
  return self;
}

- (instancetype)initWithFileDownload {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileDownload;
  }
  return self;
}

- (instancetype)initWithFileEdit {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileEdit;
  }
  return self;
}

- (instancetype)initWithFileGetCopyReference {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileGetCopyReference;
  }
  return self;
}

- (instancetype)initWithFileMove {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileMove;
  }
  return self;
}

- (instancetype)initWithFilePermanentlyDelete {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFilePermanentlyDelete;
  }
  return self;
}

- (instancetype)initWithFilePreview {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFilePreview;
  }
  return self;
}

- (instancetype)initWithFileRename {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRename;
  }
  return self;
}

- (instancetype)initWithFileRestore {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRestore;
  }
  return self;
}

- (instancetype)initWithFileRevert {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRevert;
  }
  return self;
}

- (instancetype)initWithFileRollbackChanges {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRollbackChanges;
  }
  return self;
}

- (instancetype)initWithFileSaveCopyReference {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileSaveCopyReference;
  }
  return self;
}

- (instancetype)initWithFileRequestAddDeadline {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestAddDeadline;
  }
  return self;
}

- (instancetype)initWithFileRequestChangeFolder {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestChangeFolder;
  }
  return self;
}

- (instancetype)initWithFileRequestChangeTitle {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestChangeTitle;
  }
  return self;
}

- (instancetype)initWithFileRequestClose {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestClose;
  }
  return self;
}

- (instancetype)initWithFileRequestCreate {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestCreate;
  }
  return self;
}

- (instancetype)initWithFileRequestReceiveFile {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestReceiveFile;
  }
  return self;
}

- (instancetype)initWithFileRequestRemoveDeadline {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestRemoveDeadline;
  }
  return self;
}

- (instancetype)initWithFileRequestSend {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestSend;
  }
  return self;
}

- (instancetype)initWithGroupAddExternalId {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupAddExternalId;
  }
  return self;
}

- (instancetype)initWithGroupAddMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupAddMember;
  }
  return self;
}

- (instancetype)initWithGroupChangeExternalId {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupChangeExternalId;
  }
  return self;
}

- (instancetype)initWithGroupChangeManagementType {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupChangeManagementType;
  }
  return self;
}

- (instancetype)initWithGroupChangeMemberRole {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupChangeMemberRole;
  }
  return self;
}

- (instancetype)initWithGroupCreate {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupCreate;
  }
  return self;
}

- (instancetype)initWithGroupDelete {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupDelete;
  }
  return self;
}

- (instancetype)initWithGroupDescriptionUpdated {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupDescriptionUpdated;
  }
  return self;
}

- (instancetype)initWithGroupJoinPolicyUpdated {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupJoinPolicyUpdated;
  }
  return self;
}

- (instancetype)initWithGroupMoved {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupMoved;
  }
  return self;
}

- (instancetype)initWithGroupRemoveExternalId {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupRemoveExternalId;
  }
  return self;
}

- (instancetype)initWithGroupRemoveMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupRemoveMember;
  }
  return self;
}

- (instancetype)initWithGroupRename {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupRename;
  }
  return self;
}

- (instancetype)initWithEmmLoginSuccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeEmmLoginSuccess;
  }
  return self;
}

- (instancetype)initWithLogout {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeLogout;
  }
  return self;
}

- (instancetype)initWithPasswordLoginFail {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePasswordLoginFail;
  }
  return self;
}

- (instancetype)initWithPasswordLoginSuccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePasswordLoginSuccess;
  }
  return self;
}

- (instancetype)initWithResellerSupportSessionEnd {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeResellerSupportSessionEnd;
  }
  return self;
}

- (instancetype)initWithResellerSupportSessionStart {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeResellerSupportSessionStart;
  }
  return self;
}

- (instancetype)initWithSignInAsSessionEnd {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSignInAsSessionEnd;
  }
  return self;
}

- (instancetype)initWithSignInAsSessionStart {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSignInAsSessionStart;
  }
  return self;
}

- (instancetype)initWithSsoLoginFail {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoLoginFail;
  }
  return self;
}

- (instancetype)initWithMemberAddName {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberAddName;
  }
  return self;
}

- (instancetype)initWithMemberChangeEmail {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberChangeEmail;
  }
  return self;
}

- (instancetype)initWithMemberChangeName {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberChangeName;
  }
  return self;
}

- (instancetype)initWithMemberChangeRole {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberChangeRole;
  }
  return self;
}

- (instancetype)initWithMemberInvite {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberInvite;
  }
  return self;
}

- (instancetype)initWithMemberJoin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberJoin;
  }
  return self;
}

- (instancetype)initWithMemberLeave {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberLeave;
  }
  return self;
}

- (instancetype)initWithMemberRecover {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberRecover;
  }
  return self;
}

- (instancetype)initWithMemberSuggest {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberSuggest;
  }
  return self;
}

- (instancetype)initWithMemberSuspend {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberSuspend;
  }
  return self;
}

- (instancetype)initWithMemberUnsuspend {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberUnsuspend;
  }
  return self;
}

- (instancetype)initWithPaperContentAddMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentAddMember;
  }
  return self;
}

- (instancetype)initWithPaperContentAddToFolder {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentAddToFolder;
  }
  return self;
}

- (instancetype)initWithPaperContentArchive {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentArchive;
  }
  return self;
}

- (instancetype)initWithPaperContentChangeSubscription {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentChangeSubscription;
  }
  return self;
}

- (instancetype)initWithPaperContentCreate {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentCreate;
  }
  return self;
}

- (instancetype)initWithPaperContentPermanentlyDelete {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentPermanentlyDelete;
  }
  return self;
}

- (instancetype)initWithPaperContentRemoveFromFolder {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentRemoveFromFolder;
  }
  return self;
}

- (instancetype)initWithPaperContentRemoveMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentRemoveMember;
  }
  return self;
}

- (instancetype)initWithPaperContentRename {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentRename;
  }
  return self;
}

- (instancetype)initWithPaperContentRestore {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperContentRestore;
  }
  return self;
}

- (instancetype)initWithPaperDocAddComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocAddComment;
  }
  return self;
}

- (instancetype)initWithPaperDocChangeMemberRole {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocChangeMemberRole;
  }
  return self;
}

- (instancetype)initWithPaperDocChangeSharingPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocChangeSharingPolicy;
  }
  return self;
}

- (instancetype)initWithPaperDocDeleted {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocDeleted;
  }
  return self;
}

- (instancetype)initWithPaperDocDeleteComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocDeleteComment;
  }
  return self;
}

- (instancetype)initWithPaperDocDownload {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocDownload;
  }
  return self;
}

- (instancetype)initWithPaperDocEdit {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocEdit;
  }
  return self;
}

- (instancetype)initWithPaperDocEditComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocEditComment;
  }
  return self;
}

- (instancetype)initWithPaperDocFollowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocFollowed;
  }
  return self;
}

- (instancetype)initWithPaperDocMention {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocMention;
  }
  return self;
}

- (instancetype)initWithPaperDocRequestAccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocRequestAccess;
  }
  return self;
}

- (instancetype)initWithPaperDocResolveComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocResolveComment;
  }
  return self;
}

- (instancetype)initWithPaperDocRevert {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocRevert;
  }
  return self;
}

- (instancetype)initWithPaperDocSlackShare {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocSlackShare;
  }
  return self;
}

- (instancetype)initWithPaperDocTeamInvite {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocTeamInvite;
  }
  return self;
}

- (instancetype)initWithPaperDocUnresolveComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocUnresolveComment;
  }
  return self;
}

- (instancetype)initWithPaperDocView {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperDocView;
  }
  return self;
}

- (instancetype)initWithPaperFolderDeleted {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperFolderDeleted;
  }
  return self;
}

- (instancetype)initWithPaperFolderFollowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperFolderFollowed;
  }
  return self;
}

- (instancetype)initWithPaperFolderTeamInvite {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperFolderTeamInvite;
  }
  return self;
}

- (instancetype)initWithPasswordChange {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePasswordChange;
  }
  return self;
}

- (instancetype)initWithPasswordReset {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePasswordReset;
  }
  return self;
}

- (instancetype)initWithPasswordResetAll {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePasswordResetAll;
  }
  return self;
}

- (instancetype)initWithEmmCreateExceptionsReport {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeEmmCreateExceptionsReport;
  }
  return self;
}

- (instancetype)initWithEmmCreateUsageReport {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeEmmCreateUsageReport;
  }
  return self;
}

- (instancetype)initWithSmartSyncCreateAdminPrivilegeReport {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSmartSyncCreateAdminPrivilegeReport;
  }
  return self;
}

- (instancetype)initWithTeamActivityCreateReport {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamActivityCreateReport;
  }
  return self;
}

- (instancetype)initWithCollectionShare {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeCollectionShare;
  }
  return self;
}

- (instancetype)initWithFileAddComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileAddComment;
  }
  return self;
}

- (instancetype)initWithFileLikeComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileLikeComment;
  }
  return self;
}

- (instancetype)initWithFileUnlikeComment {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileUnlikeComment;
  }
  return self;
}

- (instancetype)initWithNoteAclInviteOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeNoteAclInviteOnly;
  }
  return self;
}

- (instancetype)initWithNoteAclLink {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeNoteAclLink;
  }
  return self;
}

- (instancetype)initWithNoteAclTeamLink {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeNoteAclTeamLink;
  }
  return self;
}

- (instancetype)initWithNoteShared {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeNoteShared;
  }
  return self;
}

- (instancetype)initWithNoteShareReceive {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeNoteShareReceive;
  }
  return self;
}

- (instancetype)initWithOpenNoteShared {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeOpenNoteShared;
  }
  return self;
}

- (instancetype)initWithSfAddGroup {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfAddGroup;
  }
  return self;
}

- (instancetype)initWithSfAllowNonMembersToViewSharedLinks {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfAllowNonMembersToViewSharedLinks;
  }
  return self;
}

- (instancetype)initWithSfInviteGroup {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfInviteGroup;
  }
  return self;
}

- (instancetype)initWithSfNest {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfNest;
  }
  return self;
}

- (instancetype)initWithSfTeamDecline {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfTeamDecline;
  }
  return self;
}

- (instancetype)initWithSfTeamGrantAccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfTeamGrantAccess;
  }
  return self;
}

- (instancetype)initWithSfTeamInvite {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfTeamInvite;
  }
  return self;
}

- (instancetype)initWithSfTeamInviteChangeRole {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfTeamInviteChangeRole;
  }
  return self;
}

- (instancetype)initWithSfTeamJoin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfTeamJoin;
  }
  return self;
}

- (instancetype)initWithSfTeamJoinFromOobLink {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfTeamJoinFromOobLink;
  }
  return self;
}

- (instancetype)initWithSfTeamUninvite {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSfTeamUninvite;
  }
  return self;
}

- (instancetype)initWithSharedContentAddInvitees {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentAddInvitees;
  }
  return self;
}

- (instancetype)initWithSharedContentAddLinkExpiry {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentAddLinkExpiry;
  }
  return self;
}

- (instancetype)initWithSharedContentAddLinkPassword {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentAddLinkPassword;
  }
  return self;
}

- (instancetype)initWithSharedContentAddMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentAddMember;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeDownloadsPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentChangeDownloadsPolicy;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeInviteeRole {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentChangeInviteeRole;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeLinkAudience {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentChangeLinkAudience;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeLinkExpiry {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentChangeLinkExpiry;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeLinkPassword {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentChangeLinkPassword;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeMemberRole {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentChangeMemberRole;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeViewerInfoPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentChangeViewerInfoPolicy;
  }
  return self;
}

- (instancetype)initWithSharedContentClaimInvitation {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentClaimInvitation;
  }
  return self;
}

- (instancetype)initWithSharedContentCopy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentCopy;
  }
  return self;
}

- (instancetype)initWithSharedContentDownload {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentDownload;
  }
  return self;
}

- (instancetype)initWithSharedContentRelinquishMembership {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentRelinquishMembership;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveInvitee {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentRemoveInvitee;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveLinkExpiry {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentRemoveLinkExpiry;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveLinkPassword {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentRemoveLinkPassword;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentRemoveMember;
  }
  return self;
}

- (instancetype)initWithSharedContentRequestAccess {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentRequestAccess;
  }
  return self;
}

- (instancetype)initWithSharedContentUnshare {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentUnshare;
  }
  return self;
}

- (instancetype)initWithSharedContentView {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedContentView;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeConfidentiality {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderChangeConfidentiality;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeLinkPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderChangeLinkPolicy;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeMemberManagementPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderChangeMemberManagementPolicy;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeMemberPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderChangeMemberPolicy;
  }
  return self;
}

- (instancetype)initWithSharedFolderCreate {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderCreate;
  }
  return self;
}

- (instancetype)initWithSharedFolderMount {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderMount;
  }
  return self;
}

- (instancetype)initWithSharedFolderTransferOwnership {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderTransferOwnership;
  }
  return self;
}

- (instancetype)initWithSharedFolderUnmount {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedFolderUnmount;
  }
  return self;
}

- (instancetype)initWithSharedNoteOpened {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharedNoteOpened;
  }
  return self;
}

- (instancetype)initWithShmodelAppCreate {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShmodelAppCreate;
  }
  return self;
}

- (instancetype)initWithShmodelCreate {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShmodelCreate;
  }
  return self;
}

- (instancetype)initWithShmodelDisable {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShmodelDisable;
  }
  return self;
}

- (instancetype)initWithShmodelFbShare {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShmodelFbShare;
  }
  return self;
}

- (instancetype)initWithShmodelGroupShare {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShmodelGroupShare;
  }
  return self;
}

- (instancetype)initWithShmodelRemoveExpiration {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShmodelRemoveExpiration;
  }
  return self;
}

- (instancetype)initWithShmodelSetExpiration {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShmodelSetExpiration;
  }
  return self;
}

- (instancetype)initWithShmodelTeamCopy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShmodelTeamCopy;
  }
  return self;
}

- (instancetype)initWithShmodelTeamDownload {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShmodelTeamDownload;
  }
  return self;
}

- (instancetype)initWithShmodelTeamShare {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShmodelTeamShare;
  }
  return self;
}

- (instancetype)initWithShmodelTeamView {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShmodelTeamView;
  }
  return self;
}

- (instancetype)initWithShmodelVisibilityPassword {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShmodelVisibilityPassword;
  }
  return self;
}

- (instancetype)initWithShmodelVisibilityPublic {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShmodelVisibilityPublic;
  }
  return self;
}

- (instancetype)initWithShmodelVisibilityTeamOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeShmodelVisibilityTeamOnly;
  }
  return self;
}

- (instancetype)initWithRemoveLogoutUrl {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeRemoveLogoutUrl;
  }
  return self;
}

- (instancetype)initWithRemoveSsoUrl {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeRemoveSsoUrl;
  }
  return self;
}

- (instancetype)initWithSsoChangeCert {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoChangeCert;
  }
  return self;
}

- (instancetype)initWithSsoChangeLoginUrl {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoChangeLoginUrl;
  }
  return self;
}

- (instancetype)initWithSsoChangeLogoutUrl {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoChangeLogoutUrl;
  }
  return self;
}

- (instancetype)initWithSsoChangeSamlIdentityMode {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoChangeSamlIdentityMode;
  }
  return self;
}

- (instancetype)initWithTeamFolderChangeStatus {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamFolderChangeStatus;
  }
  return self;
}

- (instancetype)initWithTeamFolderCreate {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamFolderCreate;
  }
  return self;
}

- (instancetype)initWithTeamFolderDowngrade {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamFolderDowngrade;
  }
  return self;
}

- (instancetype)initWithTeamFolderPermanentlyDelete {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamFolderPermanentlyDelete;
  }
  return self;
}

- (instancetype)initWithTeamFolderRename {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamFolderRename;
  }
  return self;
}

- (instancetype)initWithAccountCaptureChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAccountCaptureChangePolicy;
  }
  return self;
}

- (instancetype)initWithAllowDownloadDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAllowDownloadDisabled;
  }
  return self;
}

- (instancetype)initWithAllowDownloadEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeAllowDownloadEnabled;
  }
  return self;
}

- (instancetype)initWithDataPlacementRestrictionChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDataPlacementRestrictionChangePolicy;
  }
  return self;
}

- (instancetype)initWithDataPlacementRestrictionSatisfyPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDataPlacementRestrictionSatisfyPolicy;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeDesktopPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceApprovalsChangeDesktopPolicy;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeMobilePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceApprovalsChangeMobilePolicy;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeOverageAction {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceApprovalsChangeOverageAction;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeUnlinkAction {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeDeviceApprovalsChangeUnlinkAction;
  }
  return self;
}

- (instancetype)initWithEmmAddException {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeEmmAddException;
  }
  return self;
}

- (instancetype)initWithEmmChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeEmmChangePolicy;
  }
  return self;
}

- (instancetype)initWithEmmRemoveException {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeEmmRemoveException;
  }
  return self;
}

- (instancetype)initWithExtendedVersionHistoryChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeExtendedVersionHistoryChangePolicy;
  }
  return self;
}

- (instancetype)initWithFileCommentsChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileCommentsChangePolicy;
  }
  return self;
}

- (instancetype)initWithFileRequestsChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestsChangePolicy;
  }
  return self;
}

- (instancetype)initWithFileRequestsEmailsEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestsEmailsEnabled;
  }
  return self;
}

- (instancetype)initWithFileRequestsEmailsRestrictedToTeamOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeFileRequestsEmailsRestrictedToTeamOnly;
  }
  return self;
}

- (instancetype)initWithGoogleSsoChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGoogleSsoChangePolicy;
  }
  return self;
}

- (instancetype)initWithGroupUserManagementChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeGroupUserManagementChangePolicy;
  }
  return self;
}

- (instancetype)initWithMemberRequestsChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberRequestsChangePolicy;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsAddException {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberSpaceLimitsAddException;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberSpaceLimitsChangePolicy;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsRemoveException {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberSpaceLimitsRemoveException;
  }
  return self;
}

- (instancetype)initWithMemberSuggestionsChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMemberSuggestionsChangePolicy;
  }
  return self;
}

- (instancetype)initWithMicrosoftOfficeAddinChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeMicrosoftOfficeAddinChangePolicy;
  }
  return self;
}

- (instancetype)initWithNetworkControlChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeNetworkControlChangePolicy;
  }
  return self;
}

- (instancetype)initWithPaperChangeDeploymentPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperChangeDeploymentPolicy;
  }
  return self;
}

- (instancetype)initWithPaperChangeMemberPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperChangeMemberPolicy;
  }
  return self;
}

- (instancetype)initWithPaperChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePaperChangePolicy;
  }
  return self;
}

- (instancetype)initWithPermanentDeleteChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypePermanentDeleteChangePolicy;
  }
  return self;
}

- (instancetype)initWithSharingChangeFolderJoinPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharingChangeFolderJoinPolicy;
  }
  return self;
}

- (instancetype)initWithSharingChangeLinkPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharingChangeLinkPolicy;
  }
  return self;
}

- (instancetype)initWithSharingChangeMemberPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSharingChangeMemberPolicy;
  }
  return self;
}

- (instancetype)initWithSmartSyncChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSmartSyncChangePolicy;
  }
  return self;
}

- (instancetype)initWithSsoChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeSsoChangePolicy;
  }
  return self;
}

- (instancetype)initWithTfaChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTfaChangePolicy;
  }
  return self;
}

- (instancetype)initWithTwoAccountChangePolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTwoAccountChangePolicy;
  }
  return self;
}

- (instancetype)initWithWebSessionsChangeFixedLengthPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeWebSessionsChangeFixedLengthPolicy;
  }
  return self;
}

- (instancetype)initWithWebSessionsChangeIdleLengthPolicy {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeWebSessionsChangeIdleLengthPolicy;
  }
  return self;
}

- (instancetype)initWithTeamProfileAddLogo {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamProfileAddLogo;
  }
  return self;
}

- (instancetype)initWithTeamProfileChangeLogo {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamProfileChangeLogo;
  }
  return self;
}

- (instancetype)initWithTeamProfileChangeName {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamProfileChangeName;
  }
  return self;
}

- (instancetype)initWithTeamProfileRemoveLogo {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTeamProfileRemoveLogo;
  }
  return self;
}

- (instancetype)initWithTfaAddBackupPhone {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTfaAddBackupPhone;
  }
  return self;
}

- (instancetype)initWithTfaAddSecurityKey {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTfaAddSecurityKey;
  }
  return self;
}

- (instancetype)initWithTfaChangeBackupPhone {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTfaChangeBackupPhone;
  }
  return self;
}

- (instancetype)initWithTfaChangeStatus {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTfaChangeStatus;
  }
  return self;
}

- (instancetype)initWithTfaRemoveBackupPhone {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTfaRemoveBackupPhone;
  }
  return self;
}

- (instancetype)initWithTfaRemoveSecurityKey {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTfaRemoveSecurityKey;
  }
  return self;
}

- (instancetype)initWithTfaReset {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeTfaReset;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isMemberChangeMembershipType {
  return _tag == DBTEAMLOGEventTypeMemberChangeMembershipType;
}

- (BOOL)isMemberPermanentlyDeleteAccountContents {
  return _tag == DBTEAMLOGEventTypeMemberPermanentlyDeleteAccountContents;
}

- (BOOL)isMemberSpaceLimitsChangeStatus {
  return _tag == DBTEAMLOGEventTypeMemberSpaceLimitsChangeStatus;
}

- (BOOL)isMemberTransferAccountContents {
  return _tag == DBTEAMLOGEventTypeMemberTransferAccountContents;
}

- (BOOL)isPaperEnabledUsersGroupAddition {
  return _tag == DBTEAMLOGEventTypePaperEnabledUsersGroupAddition;
}

- (BOOL)isPaperEnabledUsersGroupRemoval {
  return _tag == DBTEAMLOGEventTypePaperEnabledUsersGroupRemoval;
}

- (BOOL)isPaperExternalViewAllow {
  return _tag == DBTEAMLOGEventTypePaperExternalViewAllow;
}

- (BOOL)isPaperExternalViewDefaultTeam {
  return _tag == DBTEAMLOGEventTypePaperExternalViewDefaultTeam;
}

- (BOOL)isPaperExternalViewForbid {
  return _tag == DBTEAMLOGEventTypePaperExternalViewForbid;
}

- (BOOL)isSfExternalInviteWarn {
  return _tag == DBTEAMLOGEventTypeSfExternalInviteWarn;
}

- (BOOL)isTeamMerge {
  return _tag == DBTEAMLOGEventTypeTeamMerge;
}

- (BOOL)isAppLinkTeam {
  return _tag == DBTEAMLOGEventTypeAppLinkTeam;
}

- (BOOL)isAppLinkUser {
  return _tag == DBTEAMLOGEventTypeAppLinkUser;
}

- (BOOL)isAppUnlinkTeam {
  return _tag == DBTEAMLOGEventTypeAppUnlinkTeam;
}

- (BOOL)isAppUnlinkUser {
  return _tag == DBTEAMLOGEventTypeAppUnlinkUser;
}

- (BOOL)isDeviceChangeIpDesktop {
  return _tag == DBTEAMLOGEventTypeDeviceChangeIpDesktop;
}

- (BOOL)isDeviceChangeIpMobile {
  return _tag == DBTEAMLOGEventTypeDeviceChangeIpMobile;
}

- (BOOL)isDeviceChangeIpWeb {
  return _tag == DBTEAMLOGEventTypeDeviceChangeIpWeb;
}

- (BOOL)isDeviceDeleteOnUnlinkFail {
  return _tag == DBTEAMLOGEventTypeDeviceDeleteOnUnlinkFail;
}

- (BOOL)isDeviceDeleteOnUnlinkSuccess {
  return _tag == DBTEAMLOGEventTypeDeviceDeleteOnUnlinkSuccess;
}

- (BOOL)isDeviceLinkFail {
  return _tag == DBTEAMLOGEventTypeDeviceLinkFail;
}

- (BOOL)isDeviceLinkSuccess {
  return _tag == DBTEAMLOGEventTypeDeviceLinkSuccess;
}

- (BOOL)isDeviceManagementDisabled {
  return _tag == DBTEAMLOGEventTypeDeviceManagementDisabled;
}

- (BOOL)isDeviceManagementEnabled {
  return _tag == DBTEAMLOGEventTypeDeviceManagementEnabled;
}

- (BOOL)isDeviceUnlink {
  return _tag == DBTEAMLOGEventTypeDeviceUnlink;
}

- (BOOL)isEmmRefreshAuthToken {
  return _tag == DBTEAMLOGEventTypeEmmRefreshAuthToken;
}

- (BOOL)isAccountCaptureChangeAvailability {
  return _tag == DBTEAMLOGEventTypeAccountCaptureChangeAvailability;
}

- (BOOL)isAccountCaptureMigrateAccount {
  return _tag == DBTEAMLOGEventTypeAccountCaptureMigrateAccount;
}

- (BOOL)isAccountCaptureRelinquishAccount {
  return _tag == DBTEAMLOGEventTypeAccountCaptureRelinquishAccount;
}

- (BOOL)isDisabledDomainInvites {
  return _tag == DBTEAMLOGEventTypeDisabledDomainInvites;
}

- (BOOL)isDomainInvitesApproveRequestToJoinTeam {
  return _tag == DBTEAMLOGEventTypeDomainInvitesApproveRequestToJoinTeam;
}

- (BOOL)isDomainInvitesDeclineRequestToJoinTeam {
  return _tag == DBTEAMLOGEventTypeDomainInvitesDeclineRequestToJoinTeam;
}

- (BOOL)isDomainInvitesEmailExistingUsers {
  return _tag == DBTEAMLOGEventTypeDomainInvitesEmailExistingUsers;
}

- (BOOL)isDomainInvitesRequestToJoinTeam {
  return _tag == DBTEAMLOGEventTypeDomainInvitesRequestToJoinTeam;
}

- (BOOL)isDomainInvitesSetInviteNewUserPrefToNo {
  return _tag == DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToNo;
}

- (BOOL)isDomainInvitesSetInviteNewUserPrefToYes {
  return _tag == DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToYes;
}

- (BOOL)isDomainVerificationAddDomainFail {
  return _tag == DBTEAMLOGEventTypeDomainVerificationAddDomainFail;
}

- (BOOL)isDomainVerificationAddDomainSuccess {
  return _tag == DBTEAMLOGEventTypeDomainVerificationAddDomainSuccess;
}

- (BOOL)isDomainVerificationRemoveDomain {
  return _tag == DBTEAMLOGEventTypeDomainVerificationRemoveDomain;
}

- (BOOL)isEnabledDomainInvites {
  return _tag == DBTEAMLOGEventTypeEnabledDomainInvites;
}

- (BOOL)isCreateFolder {
  return _tag == DBTEAMLOGEventTypeCreateFolder;
}

- (BOOL)isFileAdd {
  return _tag == DBTEAMLOGEventTypeFileAdd;
}

- (BOOL)isFileCopy {
  return _tag == DBTEAMLOGEventTypeFileCopy;
}

- (BOOL)isFileDelete {
  return _tag == DBTEAMLOGEventTypeFileDelete;
}

- (BOOL)isFileDownload {
  return _tag == DBTEAMLOGEventTypeFileDownload;
}

- (BOOL)isFileEdit {
  return _tag == DBTEAMLOGEventTypeFileEdit;
}

- (BOOL)isFileGetCopyReference {
  return _tag == DBTEAMLOGEventTypeFileGetCopyReference;
}

- (BOOL)isFileMove {
  return _tag == DBTEAMLOGEventTypeFileMove;
}

- (BOOL)isFilePermanentlyDelete {
  return _tag == DBTEAMLOGEventTypeFilePermanentlyDelete;
}

- (BOOL)isFilePreview {
  return _tag == DBTEAMLOGEventTypeFilePreview;
}

- (BOOL)isFileRename {
  return _tag == DBTEAMLOGEventTypeFileRename;
}

- (BOOL)isFileRestore {
  return _tag == DBTEAMLOGEventTypeFileRestore;
}

- (BOOL)isFileRevert {
  return _tag == DBTEAMLOGEventTypeFileRevert;
}

- (BOOL)isFileRollbackChanges {
  return _tag == DBTEAMLOGEventTypeFileRollbackChanges;
}

- (BOOL)isFileSaveCopyReference {
  return _tag == DBTEAMLOGEventTypeFileSaveCopyReference;
}

- (BOOL)isFileRequestAddDeadline {
  return _tag == DBTEAMLOGEventTypeFileRequestAddDeadline;
}

- (BOOL)isFileRequestChangeFolder {
  return _tag == DBTEAMLOGEventTypeFileRequestChangeFolder;
}

- (BOOL)isFileRequestChangeTitle {
  return _tag == DBTEAMLOGEventTypeFileRequestChangeTitle;
}

- (BOOL)isFileRequestClose {
  return _tag == DBTEAMLOGEventTypeFileRequestClose;
}

- (BOOL)isFileRequestCreate {
  return _tag == DBTEAMLOGEventTypeFileRequestCreate;
}

- (BOOL)isFileRequestReceiveFile {
  return _tag == DBTEAMLOGEventTypeFileRequestReceiveFile;
}

- (BOOL)isFileRequestRemoveDeadline {
  return _tag == DBTEAMLOGEventTypeFileRequestRemoveDeadline;
}

- (BOOL)isFileRequestSend {
  return _tag == DBTEAMLOGEventTypeFileRequestSend;
}

- (BOOL)isGroupAddExternalId {
  return _tag == DBTEAMLOGEventTypeGroupAddExternalId;
}

- (BOOL)isGroupAddMember {
  return _tag == DBTEAMLOGEventTypeGroupAddMember;
}

- (BOOL)isGroupChangeExternalId {
  return _tag == DBTEAMLOGEventTypeGroupChangeExternalId;
}

- (BOOL)isGroupChangeManagementType {
  return _tag == DBTEAMLOGEventTypeGroupChangeManagementType;
}

- (BOOL)isGroupChangeMemberRole {
  return _tag == DBTEAMLOGEventTypeGroupChangeMemberRole;
}

- (BOOL)isGroupCreate {
  return _tag == DBTEAMLOGEventTypeGroupCreate;
}

- (BOOL)isGroupDelete {
  return _tag == DBTEAMLOGEventTypeGroupDelete;
}

- (BOOL)isGroupDescriptionUpdated {
  return _tag == DBTEAMLOGEventTypeGroupDescriptionUpdated;
}

- (BOOL)isGroupJoinPolicyUpdated {
  return _tag == DBTEAMLOGEventTypeGroupJoinPolicyUpdated;
}

- (BOOL)isGroupMoved {
  return _tag == DBTEAMLOGEventTypeGroupMoved;
}

- (BOOL)isGroupRemoveExternalId {
  return _tag == DBTEAMLOGEventTypeGroupRemoveExternalId;
}

- (BOOL)isGroupRemoveMember {
  return _tag == DBTEAMLOGEventTypeGroupRemoveMember;
}

- (BOOL)isGroupRename {
  return _tag == DBTEAMLOGEventTypeGroupRename;
}

- (BOOL)isEmmLoginSuccess {
  return _tag == DBTEAMLOGEventTypeEmmLoginSuccess;
}

- (BOOL)isLogout {
  return _tag == DBTEAMLOGEventTypeLogout;
}

- (BOOL)isPasswordLoginFail {
  return _tag == DBTEAMLOGEventTypePasswordLoginFail;
}

- (BOOL)isPasswordLoginSuccess {
  return _tag == DBTEAMLOGEventTypePasswordLoginSuccess;
}

- (BOOL)isResellerSupportSessionEnd {
  return _tag == DBTEAMLOGEventTypeResellerSupportSessionEnd;
}

- (BOOL)isResellerSupportSessionStart {
  return _tag == DBTEAMLOGEventTypeResellerSupportSessionStart;
}

- (BOOL)isSignInAsSessionEnd {
  return _tag == DBTEAMLOGEventTypeSignInAsSessionEnd;
}

- (BOOL)isSignInAsSessionStart {
  return _tag == DBTEAMLOGEventTypeSignInAsSessionStart;
}

- (BOOL)isSsoLoginFail {
  return _tag == DBTEAMLOGEventTypeSsoLoginFail;
}

- (BOOL)isMemberAddName {
  return _tag == DBTEAMLOGEventTypeMemberAddName;
}

- (BOOL)isMemberChangeEmail {
  return _tag == DBTEAMLOGEventTypeMemberChangeEmail;
}

- (BOOL)isMemberChangeName {
  return _tag == DBTEAMLOGEventTypeMemberChangeName;
}

- (BOOL)isMemberChangeRole {
  return _tag == DBTEAMLOGEventTypeMemberChangeRole;
}

- (BOOL)isMemberInvite {
  return _tag == DBTEAMLOGEventTypeMemberInvite;
}

- (BOOL)isMemberJoin {
  return _tag == DBTEAMLOGEventTypeMemberJoin;
}

- (BOOL)isMemberLeave {
  return _tag == DBTEAMLOGEventTypeMemberLeave;
}

- (BOOL)isMemberRecover {
  return _tag == DBTEAMLOGEventTypeMemberRecover;
}

- (BOOL)isMemberSuggest {
  return _tag == DBTEAMLOGEventTypeMemberSuggest;
}

- (BOOL)isMemberSuspend {
  return _tag == DBTEAMLOGEventTypeMemberSuspend;
}

- (BOOL)isMemberUnsuspend {
  return _tag == DBTEAMLOGEventTypeMemberUnsuspend;
}

- (BOOL)isPaperContentAddMember {
  return _tag == DBTEAMLOGEventTypePaperContentAddMember;
}

- (BOOL)isPaperContentAddToFolder {
  return _tag == DBTEAMLOGEventTypePaperContentAddToFolder;
}

- (BOOL)isPaperContentArchive {
  return _tag == DBTEAMLOGEventTypePaperContentArchive;
}

- (BOOL)isPaperContentChangeSubscription {
  return _tag == DBTEAMLOGEventTypePaperContentChangeSubscription;
}

- (BOOL)isPaperContentCreate {
  return _tag == DBTEAMLOGEventTypePaperContentCreate;
}

- (BOOL)isPaperContentPermanentlyDelete {
  return _tag == DBTEAMLOGEventTypePaperContentPermanentlyDelete;
}

- (BOOL)isPaperContentRemoveFromFolder {
  return _tag == DBTEAMLOGEventTypePaperContentRemoveFromFolder;
}

- (BOOL)isPaperContentRemoveMember {
  return _tag == DBTEAMLOGEventTypePaperContentRemoveMember;
}

- (BOOL)isPaperContentRename {
  return _tag == DBTEAMLOGEventTypePaperContentRename;
}

- (BOOL)isPaperContentRestore {
  return _tag == DBTEAMLOGEventTypePaperContentRestore;
}

- (BOOL)isPaperDocAddComment {
  return _tag == DBTEAMLOGEventTypePaperDocAddComment;
}

- (BOOL)isPaperDocChangeMemberRole {
  return _tag == DBTEAMLOGEventTypePaperDocChangeMemberRole;
}

- (BOOL)isPaperDocChangeSharingPolicy {
  return _tag == DBTEAMLOGEventTypePaperDocChangeSharingPolicy;
}

- (BOOL)isPaperDocDeleted {
  return _tag == DBTEAMLOGEventTypePaperDocDeleted;
}

- (BOOL)isPaperDocDeleteComment {
  return _tag == DBTEAMLOGEventTypePaperDocDeleteComment;
}

- (BOOL)isPaperDocDownload {
  return _tag == DBTEAMLOGEventTypePaperDocDownload;
}

- (BOOL)isPaperDocEdit {
  return _tag == DBTEAMLOGEventTypePaperDocEdit;
}

- (BOOL)isPaperDocEditComment {
  return _tag == DBTEAMLOGEventTypePaperDocEditComment;
}

- (BOOL)isPaperDocFollowed {
  return _tag == DBTEAMLOGEventTypePaperDocFollowed;
}

- (BOOL)isPaperDocMention {
  return _tag == DBTEAMLOGEventTypePaperDocMention;
}

- (BOOL)isPaperDocRequestAccess {
  return _tag == DBTEAMLOGEventTypePaperDocRequestAccess;
}

- (BOOL)isPaperDocResolveComment {
  return _tag == DBTEAMLOGEventTypePaperDocResolveComment;
}

- (BOOL)isPaperDocRevert {
  return _tag == DBTEAMLOGEventTypePaperDocRevert;
}

- (BOOL)isPaperDocSlackShare {
  return _tag == DBTEAMLOGEventTypePaperDocSlackShare;
}

- (BOOL)isPaperDocTeamInvite {
  return _tag == DBTEAMLOGEventTypePaperDocTeamInvite;
}

- (BOOL)isPaperDocUnresolveComment {
  return _tag == DBTEAMLOGEventTypePaperDocUnresolveComment;
}

- (BOOL)isPaperDocView {
  return _tag == DBTEAMLOGEventTypePaperDocView;
}

- (BOOL)isPaperFolderDeleted {
  return _tag == DBTEAMLOGEventTypePaperFolderDeleted;
}

- (BOOL)isPaperFolderFollowed {
  return _tag == DBTEAMLOGEventTypePaperFolderFollowed;
}

- (BOOL)isPaperFolderTeamInvite {
  return _tag == DBTEAMLOGEventTypePaperFolderTeamInvite;
}

- (BOOL)isPasswordChange {
  return _tag == DBTEAMLOGEventTypePasswordChange;
}

- (BOOL)isPasswordReset {
  return _tag == DBTEAMLOGEventTypePasswordReset;
}

- (BOOL)isPasswordResetAll {
  return _tag == DBTEAMLOGEventTypePasswordResetAll;
}

- (BOOL)isEmmCreateExceptionsReport {
  return _tag == DBTEAMLOGEventTypeEmmCreateExceptionsReport;
}

- (BOOL)isEmmCreateUsageReport {
  return _tag == DBTEAMLOGEventTypeEmmCreateUsageReport;
}

- (BOOL)isSmartSyncCreateAdminPrivilegeReport {
  return _tag == DBTEAMLOGEventTypeSmartSyncCreateAdminPrivilegeReport;
}

- (BOOL)isTeamActivityCreateReport {
  return _tag == DBTEAMLOGEventTypeTeamActivityCreateReport;
}

- (BOOL)isCollectionShare {
  return _tag == DBTEAMLOGEventTypeCollectionShare;
}

- (BOOL)isFileAddComment {
  return _tag == DBTEAMLOGEventTypeFileAddComment;
}

- (BOOL)isFileLikeComment {
  return _tag == DBTEAMLOGEventTypeFileLikeComment;
}

- (BOOL)isFileUnlikeComment {
  return _tag == DBTEAMLOGEventTypeFileUnlikeComment;
}

- (BOOL)isNoteAclInviteOnly {
  return _tag == DBTEAMLOGEventTypeNoteAclInviteOnly;
}

- (BOOL)isNoteAclLink {
  return _tag == DBTEAMLOGEventTypeNoteAclLink;
}

- (BOOL)isNoteAclTeamLink {
  return _tag == DBTEAMLOGEventTypeNoteAclTeamLink;
}

- (BOOL)isNoteShared {
  return _tag == DBTEAMLOGEventTypeNoteShared;
}

- (BOOL)isNoteShareReceive {
  return _tag == DBTEAMLOGEventTypeNoteShareReceive;
}

- (BOOL)isOpenNoteShared {
  return _tag == DBTEAMLOGEventTypeOpenNoteShared;
}

- (BOOL)isSfAddGroup {
  return _tag == DBTEAMLOGEventTypeSfAddGroup;
}

- (BOOL)isSfAllowNonMembersToViewSharedLinks {
  return _tag == DBTEAMLOGEventTypeSfAllowNonMembersToViewSharedLinks;
}

- (BOOL)isSfInviteGroup {
  return _tag == DBTEAMLOGEventTypeSfInviteGroup;
}

- (BOOL)isSfNest {
  return _tag == DBTEAMLOGEventTypeSfNest;
}

- (BOOL)isSfTeamDecline {
  return _tag == DBTEAMLOGEventTypeSfTeamDecline;
}

- (BOOL)isSfTeamGrantAccess {
  return _tag == DBTEAMLOGEventTypeSfTeamGrantAccess;
}

- (BOOL)isSfTeamInvite {
  return _tag == DBTEAMLOGEventTypeSfTeamInvite;
}

- (BOOL)isSfTeamInviteChangeRole {
  return _tag == DBTEAMLOGEventTypeSfTeamInviteChangeRole;
}

- (BOOL)isSfTeamJoin {
  return _tag == DBTEAMLOGEventTypeSfTeamJoin;
}

- (BOOL)isSfTeamJoinFromOobLink {
  return _tag == DBTEAMLOGEventTypeSfTeamJoinFromOobLink;
}

- (BOOL)isSfTeamUninvite {
  return _tag == DBTEAMLOGEventTypeSfTeamUninvite;
}

- (BOOL)isSharedContentAddInvitees {
  return _tag == DBTEAMLOGEventTypeSharedContentAddInvitees;
}

- (BOOL)isSharedContentAddLinkExpiry {
  return _tag == DBTEAMLOGEventTypeSharedContentAddLinkExpiry;
}

- (BOOL)isSharedContentAddLinkPassword {
  return _tag == DBTEAMLOGEventTypeSharedContentAddLinkPassword;
}

- (BOOL)isSharedContentAddMember {
  return _tag == DBTEAMLOGEventTypeSharedContentAddMember;
}

- (BOOL)isSharedContentChangeDownloadsPolicy {
  return _tag == DBTEAMLOGEventTypeSharedContentChangeDownloadsPolicy;
}

- (BOOL)isSharedContentChangeInviteeRole {
  return _tag == DBTEAMLOGEventTypeSharedContentChangeInviteeRole;
}

- (BOOL)isSharedContentChangeLinkAudience {
  return _tag == DBTEAMLOGEventTypeSharedContentChangeLinkAudience;
}

- (BOOL)isSharedContentChangeLinkExpiry {
  return _tag == DBTEAMLOGEventTypeSharedContentChangeLinkExpiry;
}

- (BOOL)isSharedContentChangeLinkPassword {
  return _tag == DBTEAMLOGEventTypeSharedContentChangeLinkPassword;
}

- (BOOL)isSharedContentChangeMemberRole {
  return _tag == DBTEAMLOGEventTypeSharedContentChangeMemberRole;
}

- (BOOL)isSharedContentChangeViewerInfoPolicy {
  return _tag == DBTEAMLOGEventTypeSharedContentChangeViewerInfoPolicy;
}

- (BOOL)isSharedContentClaimInvitation {
  return _tag == DBTEAMLOGEventTypeSharedContentClaimInvitation;
}

- (BOOL)isSharedContentCopy {
  return _tag == DBTEAMLOGEventTypeSharedContentCopy;
}

- (BOOL)isSharedContentDownload {
  return _tag == DBTEAMLOGEventTypeSharedContentDownload;
}

- (BOOL)isSharedContentRelinquishMembership {
  return _tag == DBTEAMLOGEventTypeSharedContentRelinquishMembership;
}

- (BOOL)isSharedContentRemoveInvitee {
  return _tag == DBTEAMLOGEventTypeSharedContentRemoveInvitee;
}

- (BOOL)isSharedContentRemoveLinkExpiry {
  return _tag == DBTEAMLOGEventTypeSharedContentRemoveLinkExpiry;
}

- (BOOL)isSharedContentRemoveLinkPassword {
  return _tag == DBTEAMLOGEventTypeSharedContentRemoveLinkPassword;
}

- (BOOL)isSharedContentRemoveMember {
  return _tag == DBTEAMLOGEventTypeSharedContentRemoveMember;
}

- (BOOL)isSharedContentRequestAccess {
  return _tag == DBTEAMLOGEventTypeSharedContentRequestAccess;
}

- (BOOL)isSharedContentUnshare {
  return _tag == DBTEAMLOGEventTypeSharedContentUnshare;
}

- (BOOL)isSharedContentView {
  return _tag == DBTEAMLOGEventTypeSharedContentView;
}

- (BOOL)isSharedFolderChangeConfidentiality {
  return _tag == DBTEAMLOGEventTypeSharedFolderChangeConfidentiality;
}

- (BOOL)isSharedFolderChangeLinkPolicy {
  return _tag == DBTEAMLOGEventTypeSharedFolderChangeLinkPolicy;
}

- (BOOL)isSharedFolderChangeMemberManagementPolicy {
  return _tag == DBTEAMLOGEventTypeSharedFolderChangeMemberManagementPolicy;
}

- (BOOL)isSharedFolderChangeMemberPolicy {
  return _tag == DBTEAMLOGEventTypeSharedFolderChangeMemberPolicy;
}

- (BOOL)isSharedFolderCreate {
  return _tag == DBTEAMLOGEventTypeSharedFolderCreate;
}

- (BOOL)isSharedFolderMount {
  return _tag == DBTEAMLOGEventTypeSharedFolderMount;
}

- (BOOL)isSharedFolderTransferOwnership {
  return _tag == DBTEAMLOGEventTypeSharedFolderTransferOwnership;
}

- (BOOL)isSharedFolderUnmount {
  return _tag == DBTEAMLOGEventTypeSharedFolderUnmount;
}

- (BOOL)isSharedNoteOpened {
  return _tag == DBTEAMLOGEventTypeSharedNoteOpened;
}

- (BOOL)isShmodelAppCreate {
  return _tag == DBTEAMLOGEventTypeShmodelAppCreate;
}

- (BOOL)isShmodelCreate {
  return _tag == DBTEAMLOGEventTypeShmodelCreate;
}

- (BOOL)isShmodelDisable {
  return _tag == DBTEAMLOGEventTypeShmodelDisable;
}

- (BOOL)isShmodelFbShare {
  return _tag == DBTEAMLOGEventTypeShmodelFbShare;
}

- (BOOL)isShmodelGroupShare {
  return _tag == DBTEAMLOGEventTypeShmodelGroupShare;
}

- (BOOL)isShmodelRemoveExpiration {
  return _tag == DBTEAMLOGEventTypeShmodelRemoveExpiration;
}

- (BOOL)isShmodelSetExpiration {
  return _tag == DBTEAMLOGEventTypeShmodelSetExpiration;
}

- (BOOL)isShmodelTeamCopy {
  return _tag == DBTEAMLOGEventTypeShmodelTeamCopy;
}

- (BOOL)isShmodelTeamDownload {
  return _tag == DBTEAMLOGEventTypeShmodelTeamDownload;
}

- (BOOL)isShmodelTeamShare {
  return _tag == DBTEAMLOGEventTypeShmodelTeamShare;
}

- (BOOL)isShmodelTeamView {
  return _tag == DBTEAMLOGEventTypeShmodelTeamView;
}

- (BOOL)isShmodelVisibilityPassword {
  return _tag == DBTEAMLOGEventTypeShmodelVisibilityPassword;
}

- (BOOL)isShmodelVisibilityPublic {
  return _tag == DBTEAMLOGEventTypeShmodelVisibilityPublic;
}

- (BOOL)isShmodelVisibilityTeamOnly {
  return _tag == DBTEAMLOGEventTypeShmodelVisibilityTeamOnly;
}

- (BOOL)isRemoveLogoutUrl {
  return _tag == DBTEAMLOGEventTypeRemoveLogoutUrl;
}

- (BOOL)isRemoveSsoUrl {
  return _tag == DBTEAMLOGEventTypeRemoveSsoUrl;
}

- (BOOL)isSsoChangeCert {
  return _tag == DBTEAMLOGEventTypeSsoChangeCert;
}

- (BOOL)isSsoChangeLoginUrl {
  return _tag == DBTEAMLOGEventTypeSsoChangeLoginUrl;
}

- (BOOL)isSsoChangeLogoutUrl {
  return _tag == DBTEAMLOGEventTypeSsoChangeLogoutUrl;
}

- (BOOL)isSsoChangeSamlIdentityMode {
  return _tag == DBTEAMLOGEventTypeSsoChangeSamlIdentityMode;
}

- (BOOL)isTeamFolderChangeStatus {
  return _tag == DBTEAMLOGEventTypeTeamFolderChangeStatus;
}

- (BOOL)isTeamFolderCreate {
  return _tag == DBTEAMLOGEventTypeTeamFolderCreate;
}

- (BOOL)isTeamFolderDowngrade {
  return _tag == DBTEAMLOGEventTypeTeamFolderDowngrade;
}

- (BOOL)isTeamFolderPermanentlyDelete {
  return _tag == DBTEAMLOGEventTypeTeamFolderPermanentlyDelete;
}

- (BOOL)isTeamFolderRename {
  return _tag == DBTEAMLOGEventTypeTeamFolderRename;
}

- (BOOL)isAccountCaptureChangePolicy {
  return _tag == DBTEAMLOGEventTypeAccountCaptureChangePolicy;
}

- (BOOL)isAllowDownloadDisabled {
  return _tag == DBTEAMLOGEventTypeAllowDownloadDisabled;
}

- (BOOL)isAllowDownloadEnabled {
  return _tag == DBTEAMLOGEventTypeAllowDownloadEnabled;
}

- (BOOL)isDataPlacementRestrictionChangePolicy {
  return _tag == DBTEAMLOGEventTypeDataPlacementRestrictionChangePolicy;
}

- (BOOL)isDataPlacementRestrictionSatisfyPolicy {
  return _tag == DBTEAMLOGEventTypeDataPlacementRestrictionSatisfyPolicy;
}

- (BOOL)isDeviceApprovalsChangeDesktopPolicy {
  return _tag == DBTEAMLOGEventTypeDeviceApprovalsChangeDesktopPolicy;
}

- (BOOL)isDeviceApprovalsChangeMobilePolicy {
  return _tag == DBTEAMLOGEventTypeDeviceApprovalsChangeMobilePolicy;
}

- (BOOL)isDeviceApprovalsChangeOverageAction {
  return _tag == DBTEAMLOGEventTypeDeviceApprovalsChangeOverageAction;
}

- (BOOL)isDeviceApprovalsChangeUnlinkAction {
  return _tag == DBTEAMLOGEventTypeDeviceApprovalsChangeUnlinkAction;
}

- (BOOL)isEmmAddException {
  return _tag == DBTEAMLOGEventTypeEmmAddException;
}

- (BOOL)isEmmChangePolicy {
  return _tag == DBTEAMLOGEventTypeEmmChangePolicy;
}

- (BOOL)isEmmRemoveException {
  return _tag == DBTEAMLOGEventTypeEmmRemoveException;
}

- (BOOL)isExtendedVersionHistoryChangePolicy {
  return _tag == DBTEAMLOGEventTypeExtendedVersionHistoryChangePolicy;
}

- (BOOL)isFileCommentsChangePolicy {
  return _tag == DBTEAMLOGEventTypeFileCommentsChangePolicy;
}

- (BOOL)isFileRequestsChangePolicy {
  return _tag == DBTEAMLOGEventTypeFileRequestsChangePolicy;
}

- (BOOL)isFileRequestsEmailsEnabled {
  return _tag == DBTEAMLOGEventTypeFileRequestsEmailsEnabled;
}

- (BOOL)isFileRequestsEmailsRestrictedToTeamOnly {
  return _tag == DBTEAMLOGEventTypeFileRequestsEmailsRestrictedToTeamOnly;
}

- (BOOL)isGoogleSsoChangePolicy {
  return _tag == DBTEAMLOGEventTypeGoogleSsoChangePolicy;
}

- (BOOL)isGroupUserManagementChangePolicy {
  return _tag == DBTEAMLOGEventTypeGroupUserManagementChangePolicy;
}

- (BOOL)isMemberRequestsChangePolicy {
  return _tag == DBTEAMLOGEventTypeMemberRequestsChangePolicy;
}

- (BOOL)isMemberSpaceLimitsAddException {
  return _tag == DBTEAMLOGEventTypeMemberSpaceLimitsAddException;
}

- (BOOL)isMemberSpaceLimitsChangePolicy {
  return _tag == DBTEAMLOGEventTypeMemberSpaceLimitsChangePolicy;
}

- (BOOL)isMemberSpaceLimitsRemoveException {
  return _tag == DBTEAMLOGEventTypeMemberSpaceLimitsRemoveException;
}

- (BOOL)isMemberSuggestionsChangePolicy {
  return _tag == DBTEAMLOGEventTypeMemberSuggestionsChangePolicy;
}

- (BOOL)isMicrosoftOfficeAddinChangePolicy {
  return _tag == DBTEAMLOGEventTypeMicrosoftOfficeAddinChangePolicy;
}

- (BOOL)isNetworkControlChangePolicy {
  return _tag == DBTEAMLOGEventTypeNetworkControlChangePolicy;
}

- (BOOL)isPaperChangeDeploymentPolicy {
  return _tag == DBTEAMLOGEventTypePaperChangeDeploymentPolicy;
}

- (BOOL)isPaperChangeMemberPolicy {
  return _tag == DBTEAMLOGEventTypePaperChangeMemberPolicy;
}

- (BOOL)isPaperChangePolicy {
  return _tag == DBTEAMLOGEventTypePaperChangePolicy;
}

- (BOOL)isPermanentDeleteChangePolicy {
  return _tag == DBTEAMLOGEventTypePermanentDeleteChangePolicy;
}

- (BOOL)isSharingChangeFolderJoinPolicy {
  return _tag == DBTEAMLOGEventTypeSharingChangeFolderJoinPolicy;
}

- (BOOL)isSharingChangeLinkPolicy {
  return _tag == DBTEAMLOGEventTypeSharingChangeLinkPolicy;
}

- (BOOL)isSharingChangeMemberPolicy {
  return _tag == DBTEAMLOGEventTypeSharingChangeMemberPolicy;
}

- (BOOL)isSmartSyncChangePolicy {
  return _tag == DBTEAMLOGEventTypeSmartSyncChangePolicy;
}

- (BOOL)isSsoChangePolicy {
  return _tag == DBTEAMLOGEventTypeSsoChangePolicy;
}

- (BOOL)isTfaChangePolicy {
  return _tag == DBTEAMLOGEventTypeTfaChangePolicy;
}

- (BOOL)isTwoAccountChangePolicy {
  return _tag == DBTEAMLOGEventTypeTwoAccountChangePolicy;
}

- (BOOL)isWebSessionsChangeFixedLengthPolicy {
  return _tag == DBTEAMLOGEventTypeWebSessionsChangeFixedLengthPolicy;
}

- (BOOL)isWebSessionsChangeIdleLengthPolicy {
  return _tag == DBTEAMLOGEventTypeWebSessionsChangeIdleLengthPolicy;
}

- (BOOL)isTeamProfileAddLogo {
  return _tag == DBTEAMLOGEventTypeTeamProfileAddLogo;
}

- (BOOL)isTeamProfileChangeLogo {
  return _tag == DBTEAMLOGEventTypeTeamProfileChangeLogo;
}

- (BOOL)isTeamProfileChangeName {
  return _tag == DBTEAMLOGEventTypeTeamProfileChangeName;
}

- (BOOL)isTeamProfileRemoveLogo {
  return _tag == DBTEAMLOGEventTypeTeamProfileRemoveLogo;
}

- (BOOL)isTfaAddBackupPhone {
  return _tag == DBTEAMLOGEventTypeTfaAddBackupPhone;
}

- (BOOL)isTfaAddSecurityKey {
  return _tag == DBTEAMLOGEventTypeTfaAddSecurityKey;
}

- (BOOL)isTfaChangeBackupPhone {
  return _tag == DBTEAMLOGEventTypeTfaChangeBackupPhone;
}

- (BOOL)isTfaChangeStatus {
  return _tag == DBTEAMLOGEventTypeTfaChangeStatus;
}

- (BOOL)isTfaRemoveBackupPhone {
  return _tag == DBTEAMLOGEventTypeTfaRemoveBackupPhone;
}

- (BOOL)isTfaRemoveSecurityKey {
  return _tag == DBTEAMLOGEventTypeTfaRemoveSecurityKey;
}

- (BOOL)isTfaReset {
  return _tag == DBTEAMLOGEventTypeTfaReset;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGEventTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGEventTypeMemberChangeMembershipType:
    return @"DBTEAMLOGEventTypeMemberChangeMembershipType";
  case DBTEAMLOGEventTypeMemberPermanentlyDeleteAccountContents:
    return @"DBTEAMLOGEventTypeMemberPermanentlyDeleteAccountContents";
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangeStatus:
    return @"DBTEAMLOGEventTypeMemberSpaceLimitsChangeStatus";
  case DBTEAMLOGEventTypeMemberTransferAccountContents:
    return @"DBTEAMLOGEventTypeMemberTransferAccountContents";
  case DBTEAMLOGEventTypePaperEnabledUsersGroupAddition:
    return @"DBTEAMLOGEventTypePaperEnabledUsersGroupAddition";
  case DBTEAMLOGEventTypePaperEnabledUsersGroupRemoval:
    return @"DBTEAMLOGEventTypePaperEnabledUsersGroupRemoval";
  case DBTEAMLOGEventTypePaperExternalViewAllow:
    return @"DBTEAMLOGEventTypePaperExternalViewAllow";
  case DBTEAMLOGEventTypePaperExternalViewDefaultTeam:
    return @"DBTEAMLOGEventTypePaperExternalViewDefaultTeam";
  case DBTEAMLOGEventTypePaperExternalViewForbid:
    return @"DBTEAMLOGEventTypePaperExternalViewForbid";
  case DBTEAMLOGEventTypeSfExternalInviteWarn:
    return @"DBTEAMLOGEventTypeSfExternalInviteWarn";
  case DBTEAMLOGEventTypeTeamMerge:
    return @"DBTEAMLOGEventTypeTeamMerge";
  case DBTEAMLOGEventTypeAppLinkTeam:
    return @"DBTEAMLOGEventTypeAppLinkTeam";
  case DBTEAMLOGEventTypeAppLinkUser:
    return @"DBTEAMLOGEventTypeAppLinkUser";
  case DBTEAMLOGEventTypeAppUnlinkTeam:
    return @"DBTEAMLOGEventTypeAppUnlinkTeam";
  case DBTEAMLOGEventTypeAppUnlinkUser:
    return @"DBTEAMLOGEventTypeAppUnlinkUser";
  case DBTEAMLOGEventTypeDeviceChangeIpDesktop:
    return @"DBTEAMLOGEventTypeDeviceChangeIpDesktop";
  case DBTEAMLOGEventTypeDeviceChangeIpMobile:
    return @"DBTEAMLOGEventTypeDeviceChangeIpMobile";
  case DBTEAMLOGEventTypeDeviceChangeIpWeb:
    return @"DBTEAMLOGEventTypeDeviceChangeIpWeb";
  case DBTEAMLOGEventTypeDeviceDeleteOnUnlinkFail:
    return @"DBTEAMLOGEventTypeDeviceDeleteOnUnlinkFail";
  case DBTEAMLOGEventTypeDeviceDeleteOnUnlinkSuccess:
    return @"DBTEAMLOGEventTypeDeviceDeleteOnUnlinkSuccess";
  case DBTEAMLOGEventTypeDeviceLinkFail:
    return @"DBTEAMLOGEventTypeDeviceLinkFail";
  case DBTEAMLOGEventTypeDeviceLinkSuccess:
    return @"DBTEAMLOGEventTypeDeviceLinkSuccess";
  case DBTEAMLOGEventTypeDeviceManagementDisabled:
    return @"DBTEAMLOGEventTypeDeviceManagementDisabled";
  case DBTEAMLOGEventTypeDeviceManagementEnabled:
    return @"DBTEAMLOGEventTypeDeviceManagementEnabled";
  case DBTEAMLOGEventTypeDeviceUnlink:
    return @"DBTEAMLOGEventTypeDeviceUnlink";
  case DBTEAMLOGEventTypeEmmRefreshAuthToken:
    return @"DBTEAMLOGEventTypeEmmRefreshAuthToken";
  case DBTEAMLOGEventTypeAccountCaptureChangeAvailability:
    return @"DBTEAMLOGEventTypeAccountCaptureChangeAvailability";
  case DBTEAMLOGEventTypeAccountCaptureMigrateAccount:
    return @"DBTEAMLOGEventTypeAccountCaptureMigrateAccount";
  case DBTEAMLOGEventTypeAccountCaptureRelinquishAccount:
    return @"DBTEAMLOGEventTypeAccountCaptureRelinquishAccount";
  case DBTEAMLOGEventTypeDisabledDomainInvites:
    return @"DBTEAMLOGEventTypeDisabledDomainInvites";
  case DBTEAMLOGEventTypeDomainInvitesApproveRequestToJoinTeam:
    return @"DBTEAMLOGEventTypeDomainInvitesApproveRequestToJoinTeam";
  case DBTEAMLOGEventTypeDomainInvitesDeclineRequestToJoinTeam:
    return @"DBTEAMLOGEventTypeDomainInvitesDeclineRequestToJoinTeam";
  case DBTEAMLOGEventTypeDomainInvitesEmailExistingUsers:
    return @"DBTEAMLOGEventTypeDomainInvitesEmailExistingUsers";
  case DBTEAMLOGEventTypeDomainInvitesRequestToJoinTeam:
    return @"DBTEAMLOGEventTypeDomainInvitesRequestToJoinTeam";
  case DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToNo:
    return @"DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToNo";
  case DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToYes:
    return @"DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToYes";
  case DBTEAMLOGEventTypeDomainVerificationAddDomainFail:
    return @"DBTEAMLOGEventTypeDomainVerificationAddDomainFail";
  case DBTEAMLOGEventTypeDomainVerificationAddDomainSuccess:
    return @"DBTEAMLOGEventTypeDomainVerificationAddDomainSuccess";
  case DBTEAMLOGEventTypeDomainVerificationRemoveDomain:
    return @"DBTEAMLOGEventTypeDomainVerificationRemoveDomain";
  case DBTEAMLOGEventTypeEnabledDomainInvites:
    return @"DBTEAMLOGEventTypeEnabledDomainInvites";
  case DBTEAMLOGEventTypeCreateFolder:
    return @"DBTEAMLOGEventTypeCreateFolder";
  case DBTEAMLOGEventTypeFileAdd:
    return @"DBTEAMLOGEventTypeFileAdd";
  case DBTEAMLOGEventTypeFileCopy:
    return @"DBTEAMLOGEventTypeFileCopy";
  case DBTEAMLOGEventTypeFileDelete:
    return @"DBTEAMLOGEventTypeFileDelete";
  case DBTEAMLOGEventTypeFileDownload:
    return @"DBTEAMLOGEventTypeFileDownload";
  case DBTEAMLOGEventTypeFileEdit:
    return @"DBTEAMLOGEventTypeFileEdit";
  case DBTEAMLOGEventTypeFileGetCopyReference:
    return @"DBTEAMLOGEventTypeFileGetCopyReference";
  case DBTEAMLOGEventTypeFileMove:
    return @"DBTEAMLOGEventTypeFileMove";
  case DBTEAMLOGEventTypeFilePermanentlyDelete:
    return @"DBTEAMLOGEventTypeFilePermanentlyDelete";
  case DBTEAMLOGEventTypeFilePreview:
    return @"DBTEAMLOGEventTypeFilePreview";
  case DBTEAMLOGEventTypeFileRename:
    return @"DBTEAMLOGEventTypeFileRename";
  case DBTEAMLOGEventTypeFileRestore:
    return @"DBTEAMLOGEventTypeFileRestore";
  case DBTEAMLOGEventTypeFileRevert:
    return @"DBTEAMLOGEventTypeFileRevert";
  case DBTEAMLOGEventTypeFileRollbackChanges:
    return @"DBTEAMLOGEventTypeFileRollbackChanges";
  case DBTEAMLOGEventTypeFileSaveCopyReference:
    return @"DBTEAMLOGEventTypeFileSaveCopyReference";
  case DBTEAMLOGEventTypeFileRequestAddDeadline:
    return @"DBTEAMLOGEventTypeFileRequestAddDeadline";
  case DBTEAMLOGEventTypeFileRequestChangeFolder:
    return @"DBTEAMLOGEventTypeFileRequestChangeFolder";
  case DBTEAMLOGEventTypeFileRequestChangeTitle:
    return @"DBTEAMLOGEventTypeFileRequestChangeTitle";
  case DBTEAMLOGEventTypeFileRequestClose:
    return @"DBTEAMLOGEventTypeFileRequestClose";
  case DBTEAMLOGEventTypeFileRequestCreate:
    return @"DBTEAMLOGEventTypeFileRequestCreate";
  case DBTEAMLOGEventTypeFileRequestReceiveFile:
    return @"DBTEAMLOGEventTypeFileRequestReceiveFile";
  case DBTEAMLOGEventTypeFileRequestRemoveDeadline:
    return @"DBTEAMLOGEventTypeFileRequestRemoveDeadline";
  case DBTEAMLOGEventTypeFileRequestSend:
    return @"DBTEAMLOGEventTypeFileRequestSend";
  case DBTEAMLOGEventTypeGroupAddExternalId:
    return @"DBTEAMLOGEventTypeGroupAddExternalId";
  case DBTEAMLOGEventTypeGroupAddMember:
    return @"DBTEAMLOGEventTypeGroupAddMember";
  case DBTEAMLOGEventTypeGroupChangeExternalId:
    return @"DBTEAMLOGEventTypeGroupChangeExternalId";
  case DBTEAMLOGEventTypeGroupChangeManagementType:
    return @"DBTEAMLOGEventTypeGroupChangeManagementType";
  case DBTEAMLOGEventTypeGroupChangeMemberRole:
    return @"DBTEAMLOGEventTypeGroupChangeMemberRole";
  case DBTEAMLOGEventTypeGroupCreate:
    return @"DBTEAMLOGEventTypeGroupCreate";
  case DBTEAMLOGEventTypeGroupDelete:
    return @"DBTEAMLOGEventTypeGroupDelete";
  case DBTEAMLOGEventTypeGroupDescriptionUpdated:
    return @"DBTEAMLOGEventTypeGroupDescriptionUpdated";
  case DBTEAMLOGEventTypeGroupJoinPolicyUpdated:
    return @"DBTEAMLOGEventTypeGroupJoinPolicyUpdated";
  case DBTEAMLOGEventTypeGroupMoved:
    return @"DBTEAMLOGEventTypeGroupMoved";
  case DBTEAMLOGEventTypeGroupRemoveExternalId:
    return @"DBTEAMLOGEventTypeGroupRemoveExternalId";
  case DBTEAMLOGEventTypeGroupRemoveMember:
    return @"DBTEAMLOGEventTypeGroupRemoveMember";
  case DBTEAMLOGEventTypeGroupRename:
    return @"DBTEAMLOGEventTypeGroupRename";
  case DBTEAMLOGEventTypeEmmLoginSuccess:
    return @"DBTEAMLOGEventTypeEmmLoginSuccess";
  case DBTEAMLOGEventTypeLogout:
    return @"DBTEAMLOGEventTypeLogout";
  case DBTEAMLOGEventTypePasswordLoginFail:
    return @"DBTEAMLOGEventTypePasswordLoginFail";
  case DBTEAMLOGEventTypePasswordLoginSuccess:
    return @"DBTEAMLOGEventTypePasswordLoginSuccess";
  case DBTEAMLOGEventTypeResellerSupportSessionEnd:
    return @"DBTEAMLOGEventTypeResellerSupportSessionEnd";
  case DBTEAMLOGEventTypeResellerSupportSessionStart:
    return @"DBTEAMLOGEventTypeResellerSupportSessionStart";
  case DBTEAMLOGEventTypeSignInAsSessionEnd:
    return @"DBTEAMLOGEventTypeSignInAsSessionEnd";
  case DBTEAMLOGEventTypeSignInAsSessionStart:
    return @"DBTEAMLOGEventTypeSignInAsSessionStart";
  case DBTEAMLOGEventTypeSsoLoginFail:
    return @"DBTEAMLOGEventTypeSsoLoginFail";
  case DBTEAMLOGEventTypeMemberAddName:
    return @"DBTEAMLOGEventTypeMemberAddName";
  case DBTEAMLOGEventTypeMemberChangeEmail:
    return @"DBTEAMLOGEventTypeMemberChangeEmail";
  case DBTEAMLOGEventTypeMemberChangeName:
    return @"DBTEAMLOGEventTypeMemberChangeName";
  case DBTEAMLOGEventTypeMemberChangeRole:
    return @"DBTEAMLOGEventTypeMemberChangeRole";
  case DBTEAMLOGEventTypeMemberInvite:
    return @"DBTEAMLOGEventTypeMemberInvite";
  case DBTEAMLOGEventTypeMemberJoin:
    return @"DBTEAMLOGEventTypeMemberJoin";
  case DBTEAMLOGEventTypeMemberLeave:
    return @"DBTEAMLOGEventTypeMemberLeave";
  case DBTEAMLOGEventTypeMemberRecover:
    return @"DBTEAMLOGEventTypeMemberRecover";
  case DBTEAMLOGEventTypeMemberSuggest:
    return @"DBTEAMLOGEventTypeMemberSuggest";
  case DBTEAMLOGEventTypeMemberSuspend:
    return @"DBTEAMLOGEventTypeMemberSuspend";
  case DBTEAMLOGEventTypeMemberUnsuspend:
    return @"DBTEAMLOGEventTypeMemberUnsuspend";
  case DBTEAMLOGEventTypePaperContentAddMember:
    return @"DBTEAMLOGEventTypePaperContentAddMember";
  case DBTEAMLOGEventTypePaperContentAddToFolder:
    return @"DBTEAMLOGEventTypePaperContentAddToFolder";
  case DBTEAMLOGEventTypePaperContentArchive:
    return @"DBTEAMLOGEventTypePaperContentArchive";
  case DBTEAMLOGEventTypePaperContentChangeSubscription:
    return @"DBTEAMLOGEventTypePaperContentChangeSubscription";
  case DBTEAMLOGEventTypePaperContentCreate:
    return @"DBTEAMLOGEventTypePaperContentCreate";
  case DBTEAMLOGEventTypePaperContentPermanentlyDelete:
    return @"DBTEAMLOGEventTypePaperContentPermanentlyDelete";
  case DBTEAMLOGEventTypePaperContentRemoveFromFolder:
    return @"DBTEAMLOGEventTypePaperContentRemoveFromFolder";
  case DBTEAMLOGEventTypePaperContentRemoveMember:
    return @"DBTEAMLOGEventTypePaperContentRemoveMember";
  case DBTEAMLOGEventTypePaperContentRename:
    return @"DBTEAMLOGEventTypePaperContentRename";
  case DBTEAMLOGEventTypePaperContentRestore:
    return @"DBTEAMLOGEventTypePaperContentRestore";
  case DBTEAMLOGEventTypePaperDocAddComment:
    return @"DBTEAMLOGEventTypePaperDocAddComment";
  case DBTEAMLOGEventTypePaperDocChangeMemberRole:
    return @"DBTEAMLOGEventTypePaperDocChangeMemberRole";
  case DBTEAMLOGEventTypePaperDocChangeSharingPolicy:
    return @"DBTEAMLOGEventTypePaperDocChangeSharingPolicy";
  case DBTEAMLOGEventTypePaperDocDeleted:
    return @"DBTEAMLOGEventTypePaperDocDeleted";
  case DBTEAMLOGEventTypePaperDocDeleteComment:
    return @"DBTEAMLOGEventTypePaperDocDeleteComment";
  case DBTEAMLOGEventTypePaperDocDownload:
    return @"DBTEAMLOGEventTypePaperDocDownload";
  case DBTEAMLOGEventTypePaperDocEdit:
    return @"DBTEAMLOGEventTypePaperDocEdit";
  case DBTEAMLOGEventTypePaperDocEditComment:
    return @"DBTEAMLOGEventTypePaperDocEditComment";
  case DBTEAMLOGEventTypePaperDocFollowed:
    return @"DBTEAMLOGEventTypePaperDocFollowed";
  case DBTEAMLOGEventTypePaperDocMention:
    return @"DBTEAMLOGEventTypePaperDocMention";
  case DBTEAMLOGEventTypePaperDocRequestAccess:
    return @"DBTEAMLOGEventTypePaperDocRequestAccess";
  case DBTEAMLOGEventTypePaperDocResolveComment:
    return @"DBTEAMLOGEventTypePaperDocResolveComment";
  case DBTEAMLOGEventTypePaperDocRevert:
    return @"DBTEAMLOGEventTypePaperDocRevert";
  case DBTEAMLOGEventTypePaperDocSlackShare:
    return @"DBTEAMLOGEventTypePaperDocSlackShare";
  case DBTEAMLOGEventTypePaperDocTeamInvite:
    return @"DBTEAMLOGEventTypePaperDocTeamInvite";
  case DBTEAMLOGEventTypePaperDocUnresolveComment:
    return @"DBTEAMLOGEventTypePaperDocUnresolveComment";
  case DBTEAMLOGEventTypePaperDocView:
    return @"DBTEAMLOGEventTypePaperDocView";
  case DBTEAMLOGEventTypePaperFolderDeleted:
    return @"DBTEAMLOGEventTypePaperFolderDeleted";
  case DBTEAMLOGEventTypePaperFolderFollowed:
    return @"DBTEAMLOGEventTypePaperFolderFollowed";
  case DBTEAMLOGEventTypePaperFolderTeamInvite:
    return @"DBTEAMLOGEventTypePaperFolderTeamInvite";
  case DBTEAMLOGEventTypePasswordChange:
    return @"DBTEAMLOGEventTypePasswordChange";
  case DBTEAMLOGEventTypePasswordReset:
    return @"DBTEAMLOGEventTypePasswordReset";
  case DBTEAMLOGEventTypePasswordResetAll:
    return @"DBTEAMLOGEventTypePasswordResetAll";
  case DBTEAMLOGEventTypeEmmCreateExceptionsReport:
    return @"DBTEAMLOGEventTypeEmmCreateExceptionsReport";
  case DBTEAMLOGEventTypeEmmCreateUsageReport:
    return @"DBTEAMLOGEventTypeEmmCreateUsageReport";
  case DBTEAMLOGEventTypeSmartSyncCreateAdminPrivilegeReport:
    return @"DBTEAMLOGEventTypeSmartSyncCreateAdminPrivilegeReport";
  case DBTEAMLOGEventTypeTeamActivityCreateReport:
    return @"DBTEAMLOGEventTypeTeamActivityCreateReport";
  case DBTEAMLOGEventTypeCollectionShare:
    return @"DBTEAMLOGEventTypeCollectionShare";
  case DBTEAMLOGEventTypeFileAddComment:
    return @"DBTEAMLOGEventTypeFileAddComment";
  case DBTEAMLOGEventTypeFileLikeComment:
    return @"DBTEAMLOGEventTypeFileLikeComment";
  case DBTEAMLOGEventTypeFileUnlikeComment:
    return @"DBTEAMLOGEventTypeFileUnlikeComment";
  case DBTEAMLOGEventTypeNoteAclInviteOnly:
    return @"DBTEAMLOGEventTypeNoteAclInviteOnly";
  case DBTEAMLOGEventTypeNoteAclLink:
    return @"DBTEAMLOGEventTypeNoteAclLink";
  case DBTEAMLOGEventTypeNoteAclTeamLink:
    return @"DBTEAMLOGEventTypeNoteAclTeamLink";
  case DBTEAMLOGEventTypeNoteShared:
    return @"DBTEAMLOGEventTypeNoteShared";
  case DBTEAMLOGEventTypeNoteShareReceive:
    return @"DBTEAMLOGEventTypeNoteShareReceive";
  case DBTEAMLOGEventTypeOpenNoteShared:
    return @"DBTEAMLOGEventTypeOpenNoteShared";
  case DBTEAMLOGEventTypeSfAddGroup:
    return @"DBTEAMLOGEventTypeSfAddGroup";
  case DBTEAMLOGEventTypeSfAllowNonMembersToViewSharedLinks:
    return @"DBTEAMLOGEventTypeSfAllowNonMembersToViewSharedLinks";
  case DBTEAMLOGEventTypeSfInviteGroup:
    return @"DBTEAMLOGEventTypeSfInviteGroup";
  case DBTEAMLOGEventTypeSfNest:
    return @"DBTEAMLOGEventTypeSfNest";
  case DBTEAMLOGEventTypeSfTeamDecline:
    return @"DBTEAMLOGEventTypeSfTeamDecline";
  case DBTEAMLOGEventTypeSfTeamGrantAccess:
    return @"DBTEAMLOGEventTypeSfTeamGrantAccess";
  case DBTEAMLOGEventTypeSfTeamInvite:
    return @"DBTEAMLOGEventTypeSfTeamInvite";
  case DBTEAMLOGEventTypeSfTeamInviteChangeRole:
    return @"DBTEAMLOGEventTypeSfTeamInviteChangeRole";
  case DBTEAMLOGEventTypeSfTeamJoin:
    return @"DBTEAMLOGEventTypeSfTeamJoin";
  case DBTEAMLOGEventTypeSfTeamJoinFromOobLink:
    return @"DBTEAMLOGEventTypeSfTeamJoinFromOobLink";
  case DBTEAMLOGEventTypeSfTeamUninvite:
    return @"DBTEAMLOGEventTypeSfTeamUninvite";
  case DBTEAMLOGEventTypeSharedContentAddInvitees:
    return @"DBTEAMLOGEventTypeSharedContentAddInvitees";
  case DBTEAMLOGEventTypeSharedContentAddLinkExpiry:
    return @"DBTEAMLOGEventTypeSharedContentAddLinkExpiry";
  case DBTEAMLOGEventTypeSharedContentAddLinkPassword:
    return @"DBTEAMLOGEventTypeSharedContentAddLinkPassword";
  case DBTEAMLOGEventTypeSharedContentAddMember:
    return @"DBTEAMLOGEventTypeSharedContentAddMember";
  case DBTEAMLOGEventTypeSharedContentChangeDownloadsPolicy:
    return @"DBTEAMLOGEventTypeSharedContentChangeDownloadsPolicy";
  case DBTEAMLOGEventTypeSharedContentChangeInviteeRole:
    return @"DBTEAMLOGEventTypeSharedContentChangeInviteeRole";
  case DBTEAMLOGEventTypeSharedContentChangeLinkAudience:
    return @"DBTEAMLOGEventTypeSharedContentChangeLinkAudience";
  case DBTEAMLOGEventTypeSharedContentChangeLinkExpiry:
    return @"DBTEAMLOGEventTypeSharedContentChangeLinkExpiry";
  case DBTEAMLOGEventTypeSharedContentChangeLinkPassword:
    return @"DBTEAMLOGEventTypeSharedContentChangeLinkPassword";
  case DBTEAMLOGEventTypeSharedContentChangeMemberRole:
    return @"DBTEAMLOGEventTypeSharedContentChangeMemberRole";
  case DBTEAMLOGEventTypeSharedContentChangeViewerInfoPolicy:
    return @"DBTEAMLOGEventTypeSharedContentChangeViewerInfoPolicy";
  case DBTEAMLOGEventTypeSharedContentClaimInvitation:
    return @"DBTEAMLOGEventTypeSharedContentClaimInvitation";
  case DBTEAMLOGEventTypeSharedContentCopy:
    return @"DBTEAMLOGEventTypeSharedContentCopy";
  case DBTEAMLOGEventTypeSharedContentDownload:
    return @"DBTEAMLOGEventTypeSharedContentDownload";
  case DBTEAMLOGEventTypeSharedContentRelinquishMembership:
    return @"DBTEAMLOGEventTypeSharedContentRelinquishMembership";
  case DBTEAMLOGEventTypeSharedContentRemoveInvitee:
    return @"DBTEAMLOGEventTypeSharedContentRemoveInvitee";
  case DBTEAMLOGEventTypeSharedContentRemoveLinkExpiry:
    return @"DBTEAMLOGEventTypeSharedContentRemoveLinkExpiry";
  case DBTEAMLOGEventTypeSharedContentRemoveLinkPassword:
    return @"DBTEAMLOGEventTypeSharedContentRemoveLinkPassword";
  case DBTEAMLOGEventTypeSharedContentRemoveMember:
    return @"DBTEAMLOGEventTypeSharedContentRemoveMember";
  case DBTEAMLOGEventTypeSharedContentRequestAccess:
    return @"DBTEAMLOGEventTypeSharedContentRequestAccess";
  case DBTEAMLOGEventTypeSharedContentUnshare:
    return @"DBTEAMLOGEventTypeSharedContentUnshare";
  case DBTEAMLOGEventTypeSharedContentView:
    return @"DBTEAMLOGEventTypeSharedContentView";
  case DBTEAMLOGEventTypeSharedFolderChangeConfidentiality:
    return @"DBTEAMLOGEventTypeSharedFolderChangeConfidentiality";
  case DBTEAMLOGEventTypeSharedFolderChangeLinkPolicy:
    return @"DBTEAMLOGEventTypeSharedFolderChangeLinkPolicy";
  case DBTEAMLOGEventTypeSharedFolderChangeMemberManagementPolicy:
    return @"DBTEAMLOGEventTypeSharedFolderChangeMemberManagementPolicy";
  case DBTEAMLOGEventTypeSharedFolderChangeMemberPolicy:
    return @"DBTEAMLOGEventTypeSharedFolderChangeMemberPolicy";
  case DBTEAMLOGEventTypeSharedFolderCreate:
    return @"DBTEAMLOGEventTypeSharedFolderCreate";
  case DBTEAMLOGEventTypeSharedFolderMount:
    return @"DBTEAMLOGEventTypeSharedFolderMount";
  case DBTEAMLOGEventTypeSharedFolderTransferOwnership:
    return @"DBTEAMLOGEventTypeSharedFolderTransferOwnership";
  case DBTEAMLOGEventTypeSharedFolderUnmount:
    return @"DBTEAMLOGEventTypeSharedFolderUnmount";
  case DBTEAMLOGEventTypeSharedNoteOpened:
    return @"DBTEAMLOGEventTypeSharedNoteOpened";
  case DBTEAMLOGEventTypeShmodelAppCreate:
    return @"DBTEAMLOGEventTypeShmodelAppCreate";
  case DBTEAMLOGEventTypeShmodelCreate:
    return @"DBTEAMLOGEventTypeShmodelCreate";
  case DBTEAMLOGEventTypeShmodelDisable:
    return @"DBTEAMLOGEventTypeShmodelDisable";
  case DBTEAMLOGEventTypeShmodelFbShare:
    return @"DBTEAMLOGEventTypeShmodelFbShare";
  case DBTEAMLOGEventTypeShmodelGroupShare:
    return @"DBTEAMLOGEventTypeShmodelGroupShare";
  case DBTEAMLOGEventTypeShmodelRemoveExpiration:
    return @"DBTEAMLOGEventTypeShmodelRemoveExpiration";
  case DBTEAMLOGEventTypeShmodelSetExpiration:
    return @"DBTEAMLOGEventTypeShmodelSetExpiration";
  case DBTEAMLOGEventTypeShmodelTeamCopy:
    return @"DBTEAMLOGEventTypeShmodelTeamCopy";
  case DBTEAMLOGEventTypeShmodelTeamDownload:
    return @"DBTEAMLOGEventTypeShmodelTeamDownload";
  case DBTEAMLOGEventTypeShmodelTeamShare:
    return @"DBTEAMLOGEventTypeShmodelTeamShare";
  case DBTEAMLOGEventTypeShmodelTeamView:
    return @"DBTEAMLOGEventTypeShmodelTeamView";
  case DBTEAMLOGEventTypeShmodelVisibilityPassword:
    return @"DBTEAMLOGEventTypeShmodelVisibilityPassword";
  case DBTEAMLOGEventTypeShmodelVisibilityPublic:
    return @"DBTEAMLOGEventTypeShmodelVisibilityPublic";
  case DBTEAMLOGEventTypeShmodelVisibilityTeamOnly:
    return @"DBTEAMLOGEventTypeShmodelVisibilityTeamOnly";
  case DBTEAMLOGEventTypeRemoveLogoutUrl:
    return @"DBTEAMLOGEventTypeRemoveLogoutUrl";
  case DBTEAMLOGEventTypeRemoveSsoUrl:
    return @"DBTEAMLOGEventTypeRemoveSsoUrl";
  case DBTEAMLOGEventTypeSsoChangeCert:
    return @"DBTEAMLOGEventTypeSsoChangeCert";
  case DBTEAMLOGEventTypeSsoChangeLoginUrl:
    return @"DBTEAMLOGEventTypeSsoChangeLoginUrl";
  case DBTEAMLOGEventTypeSsoChangeLogoutUrl:
    return @"DBTEAMLOGEventTypeSsoChangeLogoutUrl";
  case DBTEAMLOGEventTypeSsoChangeSamlIdentityMode:
    return @"DBTEAMLOGEventTypeSsoChangeSamlIdentityMode";
  case DBTEAMLOGEventTypeTeamFolderChangeStatus:
    return @"DBTEAMLOGEventTypeTeamFolderChangeStatus";
  case DBTEAMLOGEventTypeTeamFolderCreate:
    return @"DBTEAMLOGEventTypeTeamFolderCreate";
  case DBTEAMLOGEventTypeTeamFolderDowngrade:
    return @"DBTEAMLOGEventTypeTeamFolderDowngrade";
  case DBTEAMLOGEventTypeTeamFolderPermanentlyDelete:
    return @"DBTEAMLOGEventTypeTeamFolderPermanentlyDelete";
  case DBTEAMLOGEventTypeTeamFolderRename:
    return @"DBTEAMLOGEventTypeTeamFolderRename";
  case DBTEAMLOGEventTypeAccountCaptureChangePolicy:
    return @"DBTEAMLOGEventTypeAccountCaptureChangePolicy";
  case DBTEAMLOGEventTypeAllowDownloadDisabled:
    return @"DBTEAMLOGEventTypeAllowDownloadDisabled";
  case DBTEAMLOGEventTypeAllowDownloadEnabled:
    return @"DBTEAMLOGEventTypeAllowDownloadEnabled";
  case DBTEAMLOGEventTypeDataPlacementRestrictionChangePolicy:
    return @"DBTEAMLOGEventTypeDataPlacementRestrictionChangePolicy";
  case DBTEAMLOGEventTypeDataPlacementRestrictionSatisfyPolicy:
    return @"DBTEAMLOGEventTypeDataPlacementRestrictionSatisfyPolicy";
  case DBTEAMLOGEventTypeDeviceApprovalsChangeDesktopPolicy:
    return @"DBTEAMLOGEventTypeDeviceApprovalsChangeDesktopPolicy";
  case DBTEAMLOGEventTypeDeviceApprovalsChangeMobilePolicy:
    return @"DBTEAMLOGEventTypeDeviceApprovalsChangeMobilePolicy";
  case DBTEAMLOGEventTypeDeviceApprovalsChangeOverageAction:
    return @"DBTEAMLOGEventTypeDeviceApprovalsChangeOverageAction";
  case DBTEAMLOGEventTypeDeviceApprovalsChangeUnlinkAction:
    return @"DBTEAMLOGEventTypeDeviceApprovalsChangeUnlinkAction";
  case DBTEAMLOGEventTypeEmmAddException:
    return @"DBTEAMLOGEventTypeEmmAddException";
  case DBTEAMLOGEventTypeEmmChangePolicy:
    return @"DBTEAMLOGEventTypeEmmChangePolicy";
  case DBTEAMLOGEventTypeEmmRemoveException:
    return @"DBTEAMLOGEventTypeEmmRemoveException";
  case DBTEAMLOGEventTypeExtendedVersionHistoryChangePolicy:
    return @"DBTEAMLOGEventTypeExtendedVersionHistoryChangePolicy";
  case DBTEAMLOGEventTypeFileCommentsChangePolicy:
    return @"DBTEAMLOGEventTypeFileCommentsChangePolicy";
  case DBTEAMLOGEventTypeFileRequestsChangePolicy:
    return @"DBTEAMLOGEventTypeFileRequestsChangePolicy";
  case DBTEAMLOGEventTypeFileRequestsEmailsEnabled:
    return @"DBTEAMLOGEventTypeFileRequestsEmailsEnabled";
  case DBTEAMLOGEventTypeFileRequestsEmailsRestrictedToTeamOnly:
    return @"DBTEAMLOGEventTypeFileRequestsEmailsRestrictedToTeamOnly";
  case DBTEAMLOGEventTypeGoogleSsoChangePolicy:
    return @"DBTEAMLOGEventTypeGoogleSsoChangePolicy";
  case DBTEAMLOGEventTypeGroupUserManagementChangePolicy:
    return @"DBTEAMLOGEventTypeGroupUserManagementChangePolicy";
  case DBTEAMLOGEventTypeMemberRequestsChangePolicy:
    return @"DBTEAMLOGEventTypeMemberRequestsChangePolicy";
  case DBTEAMLOGEventTypeMemberSpaceLimitsAddException:
    return @"DBTEAMLOGEventTypeMemberSpaceLimitsAddException";
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangePolicy:
    return @"DBTEAMLOGEventTypeMemberSpaceLimitsChangePolicy";
  case DBTEAMLOGEventTypeMemberSpaceLimitsRemoveException:
    return @"DBTEAMLOGEventTypeMemberSpaceLimitsRemoveException";
  case DBTEAMLOGEventTypeMemberSuggestionsChangePolicy:
    return @"DBTEAMLOGEventTypeMemberSuggestionsChangePolicy";
  case DBTEAMLOGEventTypeMicrosoftOfficeAddinChangePolicy:
    return @"DBTEAMLOGEventTypeMicrosoftOfficeAddinChangePolicy";
  case DBTEAMLOGEventTypeNetworkControlChangePolicy:
    return @"DBTEAMLOGEventTypeNetworkControlChangePolicy";
  case DBTEAMLOGEventTypePaperChangeDeploymentPolicy:
    return @"DBTEAMLOGEventTypePaperChangeDeploymentPolicy";
  case DBTEAMLOGEventTypePaperChangeMemberPolicy:
    return @"DBTEAMLOGEventTypePaperChangeMemberPolicy";
  case DBTEAMLOGEventTypePaperChangePolicy:
    return @"DBTEAMLOGEventTypePaperChangePolicy";
  case DBTEAMLOGEventTypePermanentDeleteChangePolicy:
    return @"DBTEAMLOGEventTypePermanentDeleteChangePolicy";
  case DBTEAMLOGEventTypeSharingChangeFolderJoinPolicy:
    return @"DBTEAMLOGEventTypeSharingChangeFolderJoinPolicy";
  case DBTEAMLOGEventTypeSharingChangeLinkPolicy:
    return @"DBTEAMLOGEventTypeSharingChangeLinkPolicy";
  case DBTEAMLOGEventTypeSharingChangeMemberPolicy:
    return @"DBTEAMLOGEventTypeSharingChangeMemberPolicy";
  case DBTEAMLOGEventTypeSmartSyncChangePolicy:
    return @"DBTEAMLOGEventTypeSmartSyncChangePolicy";
  case DBTEAMLOGEventTypeSsoChangePolicy:
    return @"DBTEAMLOGEventTypeSsoChangePolicy";
  case DBTEAMLOGEventTypeTfaChangePolicy:
    return @"DBTEAMLOGEventTypeTfaChangePolicy";
  case DBTEAMLOGEventTypeTwoAccountChangePolicy:
    return @"DBTEAMLOGEventTypeTwoAccountChangePolicy";
  case DBTEAMLOGEventTypeWebSessionsChangeFixedLengthPolicy:
    return @"DBTEAMLOGEventTypeWebSessionsChangeFixedLengthPolicy";
  case DBTEAMLOGEventTypeWebSessionsChangeIdleLengthPolicy:
    return @"DBTEAMLOGEventTypeWebSessionsChangeIdleLengthPolicy";
  case DBTEAMLOGEventTypeTeamProfileAddLogo:
    return @"DBTEAMLOGEventTypeTeamProfileAddLogo";
  case DBTEAMLOGEventTypeTeamProfileChangeLogo:
    return @"DBTEAMLOGEventTypeTeamProfileChangeLogo";
  case DBTEAMLOGEventTypeTeamProfileChangeName:
    return @"DBTEAMLOGEventTypeTeamProfileChangeName";
  case DBTEAMLOGEventTypeTeamProfileRemoveLogo:
    return @"DBTEAMLOGEventTypeTeamProfileRemoveLogo";
  case DBTEAMLOGEventTypeTfaAddBackupPhone:
    return @"DBTEAMLOGEventTypeTfaAddBackupPhone";
  case DBTEAMLOGEventTypeTfaAddSecurityKey:
    return @"DBTEAMLOGEventTypeTfaAddSecurityKey";
  case DBTEAMLOGEventTypeTfaChangeBackupPhone:
    return @"DBTEAMLOGEventTypeTfaChangeBackupPhone";
  case DBTEAMLOGEventTypeTfaChangeStatus:
    return @"DBTEAMLOGEventTypeTfaChangeStatus";
  case DBTEAMLOGEventTypeTfaRemoveBackupPhone:
    return @"DBTEAMLOGEventTypeTfaRemoveBackupPhone";
  case DBTEAMLOGEventTypeTfaRemoveSecurityKey:
    return @"DBTEAMLOGEventTypeTfaRemoveSecurityKey";
  case DBTEAMLOGEventTypeTfaReset:
    return @"DBTEAMLOGEventTypeTfaReset";
  case DBTEAMLOGEventTypeOther:
    return @"DBTEAMLOGEventTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGEventTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGEventTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGEventTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGEventTypeMemberChangeMembershipType:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberPermanentlyDeleteAccountContents:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangeStatus:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberTransferAccountContents:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperEnabledUsersGroupAddition:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperEnabledUsersGroupRemoval:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperExternalViewAllow:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperExternalViewDefaultTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperExternalViewForbid:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSfExternalInviteWarn:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTeamMerge:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeAppLinkTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeAppLinkUser:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeAppUnlinkTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeAppUnlinkUser:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDeviceChangeIpDesktop:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDeviceChangeIpMobile:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDeviceChangeIpWeb:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDeviceDeleteOnUnlinkFail:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDeviceDeleteOnUnlinkSuccess:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDeviceLinkFail:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDeviceLinkSuccess:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDeviceManagementDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDeviceManagementEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDeviceUnlink:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeEmmRefreshAuthToken:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeAccountCaptureChangeAvailability:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeAccountCaptureMigrateAccount:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeAccountCaptureRelinquishAccount:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDisabledDomainInvites:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDomainInvitesApproveRequestToJoinTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDomainInvitesDeclineRequestToJoinTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDomainInvitesEmailExistingUsers:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDomainInvitesRequestToJoinTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToNo:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToYes:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDomainVerificationAddDomainFail:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDomainVerificationAddDomainSuccess:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDomainVerificationRemoveDomain:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeEnabledDomainInvites:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeCreateFolder:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileAdd:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileCopy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileDelete:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileDownload:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileEdit:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileGetCopyReference:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileMove:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFilePermanentlyDelete:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFilePreview:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileRename:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileRestore:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileRevert:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileRollbackChanges:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileSaveCopyReference:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileRequestAddDeadline:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileRequestChangeFolder:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileRequestChangeTitle:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileRequestClose:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileRequestCreate:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileRequestReceiveFile:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileRequestRemoveDeadline:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileRequestSend:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeGroupAddExternalId:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeGroupAddMember:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeGroupChangeExternalId:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeGroupChangeManagementType:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeGroupChangeMemberRole:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeGroupCreate:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeGroupDelete:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeGroupDescriptionUpdated:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeGroupJoinPolicyUpdated:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeGroupMoved:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeGroupRemoveExternalId:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeGroupRemoveMember:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeGroupRename:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeEmmLoginSuccess:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeLogout:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePasswordLoginFail:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePasswordLoginSuccess:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeResellerSupportSessionEnd:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeResellerSupportSessionStart:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSignInAsSessionEnd:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSignInAsSessionStart:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSsoLoginFail:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberAddName:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberChangeEmail:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberChangeName:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberChangeRole:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberInvite:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberJoin:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberLeave:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberRecover:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberSuggest:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberSuspend:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberUnsuspend:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperContentAddMember:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperContentAddToFolder:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperContentArchive:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperContentChangeSubscription:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperContentCreate:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperContentPermanentlyDelete:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperContentRemoveFromFolder:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperContentRemoveMember:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperContentRename:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperContentRestore:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperDocAddComment:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperDocChangeMemberRole:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperDocChangeSharingPolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperDocDeleted:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperDocDeleteComment:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperDocDownload:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperDocEdit:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperDocEditComment:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperDocFollowed:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperDocMention:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperDocRequestAccess:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperDocResolveComment:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperDocRevert:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperDocSlackShare:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperDocTeamInvite:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperDocUnresolveComment:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperDocView:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperFolderDeleted:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperFolderFollowed:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperFolderTeamInvite:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePasswordChange:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePasswordReset:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePasswordResetAll:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeEmmCreateExceptionsReport:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeEmmCreateUsageReport:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSmartSyncCreateAdminPrivilegeReport:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTeamActivityCreateReport:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeCollectionShare:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileAddComment:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileLikeComment:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileUnlikeComment:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeNoteAclInviteOnly:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeNoteAclLink:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeNoteAclTeamLink:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeNoteShared:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeNoteShareReceive:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeOpenNoteShared:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSfAddGroup:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSfAllowNonMembersToViewSharedLinks:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSfInviteGroup:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSfNest:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSfTeamDecline:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSfTeamGrantAccess:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSfTeamInvite:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSfTeamInviteChangeRole:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSfTeamJoin:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSfTeamJoinFromOobLink:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSfTeamUninvite:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentAddInvitees:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentAddLinkExpiry:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentAddLinkPassword:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentAddMember:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentChangeDownloadsPolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentChangeInviteeRole:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentChangeLinkAudience:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentChangeLinkExpiry:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentChangeLinkPassword:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentChangeMemberRole:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentChangeViewerInfoPolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentClaimInvitation:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentCopy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentDownload:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentRelinquishMembership:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentRemoveInvitee:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentRemoveLinkExpiry:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentRemoveLinkPassword:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentRemoveMember:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentRequestAccess:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentUnshare:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedContentView:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedFolderChangeConfidentiality:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedFolderChangeLinkPolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedFolderChangeMemberManagementPolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedFolderChangeMemberPolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedFolderCreate:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedFolderMount:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedFolderTransferOwnership:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedFolderUnmount:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharedNoteOpened:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeShmodelAppCreate:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeShmodelCreate:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeShmodelDisable:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeShmodelFbShare:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeShmodelGroupShare:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeShmodelRemoveExpiration:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeShmodelSetExpiration:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeShmodelTeamCopy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeShmodelTeamDownload:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeShmodelTeamShare:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeShmodelTeamView:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeShmodelVisibilityPassword:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeShmodelVisibilityPublic:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeShmodelVisibilityTeamOnly:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeRemoveLogoutUrl:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeRemoveSsoUrl:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSsoChangeCert:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSsoChangeLoginUrl:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSsoChangeLogoutUrl:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSsoChangeSamlIdentityMode:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTeamFolderChangeStatus:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTeamFolderCreate:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTeamFolderDowngrade:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTeamFolderPermanentlyDelete:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTeamFolderRename:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeAccountCaptureChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeAllowDownloadDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeAllowDownloadEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDataPlacementRestrictionChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDataPlacementRestrictionSatisfyPolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDeviceApprovalsChangeDesktopPolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDeviceApprovalsChangeMobilePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDeviceApprovalsChangeOverageAction:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeDeviceApprovalsChangeUnlinkAction:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeEmmAddException:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeEmmChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeEmmRemoveException:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeExtendedVersionHistoryChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileCommentsChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileRequestsChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileRequestsEmailsEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeFileRequestsEmailsRestrictedToTeamOnly:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeGoogleSsoChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeGroupUserManagementChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberRequestsChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberSpaceLimitsAddException:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberSpaceLimitsRemoveException:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMemberSuggestionsChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeMicrosoftOfficeAddinChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeNetworkControlChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperChangeDeploymentPolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperChangeMemberPolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePaperChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypePermanentDeleteChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharingChangeFolderJoinPolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharingChangeLinkPolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSharingChangeMemberPolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSmartSyncChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeSsoChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTfaChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTwoAccountChangePolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeWebSessionsChangeFixedLengthPolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeWebSessionsChangeIdleLengthPolicy:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTeamProfileAddLogo:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTeamProfileChangeLogo:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTeamProfileChangeName:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTeamProfileRemoveLogo:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTfaAddBackupPhone:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTfaAddSecurityKey:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTfaChangeBackupPhone:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTfaChangeStatus:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTfaRemoveBackupPhone:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTfaRemoveSecurityKey:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeTfaReset:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGEventTypeOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEventType:other];
}

- (BOOL)isEqualToEventType:(DBTEAMLOGEventType *)anEventType {
  if (self == anEventType) {
    return YES;
  }
  if (self.tag != anEventType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGEventTypeMemberChangeMembershipType:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberPermanentlyDeleteAccountContents:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangeStatus:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberTransferAccountContents:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperEnabledUsersGroupAddition:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperEnabledUsersGroupRemoval:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperExternalViewAllow:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperExternalViewDefaultTeam:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperExternalViewForbid:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSfExternalInviteWarn:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTeamMerge:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeAppLinkTeam:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeAppLinkUser:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeAppUnlinkTeam:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeAppUnlinkUser:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDeviceChangeIpDesktop:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDeviceChangeIpMobile:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDeviceChangeIpWeb:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDeviceDeleteOnUnlinkFail:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDeviceDeleteOnUnlinkSuccess:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDeviceLinkFail:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDeviceLinkSuccess:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDeviceManagementDisabled:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDeviceManagementEnabled:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDeviceUnlink:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeEmmRefreshAuthToken:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeAccountCaptureChangeAvailability:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeAccountCaptureMigrateAccount:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeAccountCaptureRelinquishAccount:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDisabledDomainInvites:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDomainInvitesApproveRequestToJoinTeam:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDomainInvitesDeclineRequestToJoinTeam:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDomainInvitesEmailExistingUsers:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDomainInvitesRequestToJoinTeam:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToNo:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDomainInvitesSetInviteNewUserPrefToYes:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDomainVerificationAddDomainFail:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDomainVerificationAddDomainSuccess:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDomainVerificationRemoveDomain:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeEnabledDomainInvites:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeCreateFolder:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileAdd:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileCopy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileDelete:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileDownload:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileEdit:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileGetCopyReference:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileMove:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFilePermanentlyDelete:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFilePreview:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileRename:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileRestore:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileRevert:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileRollbackChanges:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileSaveCopyReference:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileRequestAddDeadline:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileRequestChangeFolder:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileRequestChangeTitle:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileRequestClose:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileRequestCreate:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileRequestReceiveFile:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileRequestRemoveDeadline:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileRequestSend:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeGroupAddExternalId:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeGroupAddMember:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeGroupChangeExternalId:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeGroupChangeManagementType:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeGroupChangeMemberRole:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeGroupCreate:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeGroupDelete:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeGroupDescriptionUpdated:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeGroupJoinPolicyUpdated:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeGroupMoved:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeGroupRemoveExternalId:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeGroupRemoveMember:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeGroupRename:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeEmmLoginSuccess:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeLogout:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePasswordLoginFail:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePasswordLoginSuccess:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeResellerSupportSessionEnd:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeResellerSupportSessionStart:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSignInAsSessionEnd:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSignInAsSessionStart:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSsoLoginFail:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberAddName:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberChangeEmail:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberChangeName:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberChangeRole:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberInvite:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberJoin:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberLeave:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberRecover:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberSuggest:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberSuspend:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberUnsuspend:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperContentAddMember:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperContentAddToFolder:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperContentArchive:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperContentChangeSubscription:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperContentCreate:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperContentPermanentlyDelete:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperContentRemoveFromFolder:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperContentRemoveMember:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperContentRename:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperContentRestore:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperDocAddComment:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperDocChangeMemberRole:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperDocChangeSharingPolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperDocDeleted:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperDocDeleteComment:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperDocDownload:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperDocEdit:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperDocEditComment:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperDocFollowed:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperDocMention:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperDocRequestAccess:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperDocResolveComment:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperDocRevert:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperDocSlackShare:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperDocTeamInvite:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperDocUnresolveComment:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperDocView:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperFolderDeleted:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperFolderFollowed:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperFolderTeamInvite:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePasswordChange:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePasswordReset:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePasswordResetAll:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeEmmCreateExceptionsReport:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeEmmCreateUsageReport:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSmartSyncCreateAdminPrivilegeReport:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTeamActivityCreateReport:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeCollectionShare:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileAddComment:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileLikeComment:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileUnlikeComment:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeNoteAclInviteOnly:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeNoteAclLink:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeNoteAclTeamLink:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeNoteShared:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeNoteShareReceive:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeOpenNoteShared:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSfAddGroup:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSfAllowNonMembersToViewSharedLinks:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSfInviteGroup:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSfNest:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSfTeamDecline:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSfTeamGrantAccess:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSfTeamInvite:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSfTeamInviteChangeRole:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSfTeamJoin:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSfTeamJoinFromOobLink:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSfTeamUninvite:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentAddInvitees:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentAddLinkExpiry:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentAddLinkPassword:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentAddMember:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentChangeDownloadsPolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentChangeInviteeRole:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentChangeLinkAudience:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentChangeLinkExpiry:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentChangeLinkPassword:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentChangeMemberRole:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentChangeViewerInfoPolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentClaimInvitation:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentCopy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentDownload:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentRelinquishMembership:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentRemoveInvitee:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentRemoveLinkExpiry:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentRemoveLinkPassword:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentRemoveMember:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentRequestAccess:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentUnshare:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedContentView:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedFolderChangeConfidentiality:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedFolderChangeLinkPolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedFolderChangeMemberManagementPolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedFolderChangeMemberPolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedFolderCreate:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedFolderMount:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedFolderTransferOwnership:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedFolderUnmount:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharedNoteOpened:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeShmodelAppCreate:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeShmodelCreate:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeShmodelDisable:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeShmodelFbShare:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeShmodelGroupShare:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeShmodelRemoveExpiration:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeShmodelSetExpiration:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeShmodelTeamCopy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeShmodelTeamDownload:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeShmodelTeamShare:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeShmodelTeamView:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeShmodelVisibilityPassword:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeShmodelVisibilityPublic:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeShmodelVisibilityTeamOnly:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeRemoveLogoutUrl:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeRemoveSsoUrl:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSsoChangeCert:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSsoChangeLoginUrl:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSsoChangeLogoutUrl:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSsoChangeSamlIdentityMode:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTeamFolderChangeStatus:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTeamFolderCreate:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTeamFolderDowngrade:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTeamFolderPermanentlyDelete:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTeamFolderRename:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeAccountCaptureChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeAllowDownloadDisabled:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeAllowDownloadEnabled:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDataPlacementRestrictionChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDataPlacementRestrictionSatisfyPolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDeviceApprovalsChangeDesktopPolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDeviceApprovalsChangeMobilePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDeviceApprovalsChangeOverageAction:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeDeviceApprovalsChangeUnlinkAction:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeEmmAddException:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeEmmChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeEmmRemoveException:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeExtendedVersionHistoryChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileCommentsChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileRequestsChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileRequestsEmailsEnabled:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeFileRequestsEmailsRestrictedToTeamOnly:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeGoogleSsoChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeGroupUserManagementChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberRequestsChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberSpaceLimitsAddException:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberSpaceLimitsChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberSpaceLimitsRemoveException:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMemberSuggestionsChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeMicrosoftOfficeAddinChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeNetworkControlChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperChangeDeploymentPolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperChangeMemberPolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePaperChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypePermanentDeleteChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharingChangeFolderJoinPolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharingChangeLinkPolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSharingChangeMemberPolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSmartSyncChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeSsoChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTfaChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTwoAccountChangePolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeWebSessionsChangeFixedLengthPolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeWebSessionsChangeIdleLengthPolicy:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTeamProfileAddLogo:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTeamProfileChangeLogo:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTeamProfileChangeName:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTeamProfileRemoveLogo:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTfaAddBackupPhone:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTfaAddSecurityKey:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTfaChangeBackupPhone:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTfaChangeStatus:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTfaRemoveBackupPhone:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTfaRemoveSecurityKey:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeTfaReset:
    return [[self tagName] isEqual:[anEventType tagName]];
  case DBTEAMLOGEventTypeOther:
    return [[self tagName] isEqual:[anEventType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEventTypeSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGEventType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isMemberChangeMembershipType]) {
    jsonDict[@".tag"] = @"member_change_membership_type";
  } else if ([valueObj isMemberPermanentlyDeleteAccountContents]) {
    jsonDict[@".tag"] = @"member_permanently_delete_account_contents";
  } else if ([valueObj isMemberSpaceLimitsChangeStatus]) {
    jsonDict[@".tag"] = @"member_space_limits_change_status";
  } else if ([valueObj isMemberTransferAccountContents]) {
    jsonDict[@".tag"] = @"member_transfer_account_contents";
  } else if ([valueObj isPaperEnabledUsersGroupAddition]) {
    jsonDict[@".tag"] = @"paper_enabled_users_group_addition";
  } else if ([valueObj isPaperEnabledUsersGroupRemoval]) {
    jsonDict[@".tag"] = @"paper_enabled_users_group_removal";
  } else if ([valueObj isPaperExternalViewAllow]) {
    jsonDict[@".tag"] = @"paper_external_view_allow";
  } else if ([valueObj isPaperExternalViewDefaultTeam]) {
    jsonDict[@".tag"] = @"paper_external_view_default_team";
  } else if ([valueObj isPaperExternalViewForbid]) {
    jsonDict[@".tag"] = @"paper_external_view_forbid";
  } else if ([valueObj isSfExternalInviteWarn]) {
    jsonDict[@".tag"] = @"sf_external_invite_warn";
  } else if ([valueObj isTeamMerge]) {
    jsonDict[@".tag"] = @"team_merge";
  } else if ([valueObj isAppLinkTeam]) {
    jsonDict[@".tag"] = @"app_link_team";
  } else if ([valueObj isAppLinkUser]) {
    jsonDict[@".tag"] = @"app_link_user";
  } else if ([valueObj isAppUnlinkTeam]) {
    jsonDict[@".tag"] = @"app_unlink_team";
  } else if ([valueObj isAppUnlinkUser]) {
    jsonDict[@".tag"] = @"app_unlink_user";
  } else if ([valueObj isDeviceChangeIpDesktop]) {
    jsonDict[@".tag"] = @"device_change_ip_desktop";
  } else if ([valueObj isDeviceChangeIpMobile]) {
    jsonDict[@".tag"] = @"device_change_ip_mobile";
  } else if ([valueObj isDeviceChangeIpWeb]) {
    jsonDict[@".tag"] = @"device_change_ip_web";
  } else if ([valueObj isDeviceDeleteOnUnlinkFail]) {
    jsonDict[@".tag"] = @"device_delete_on_unlink_fail";
  } else if ([valueObj isDeviceDeleteOnUnlinkSuccess]) {
    jsonDict[@".tag"] = @"device_delete_on_unlink_success";
  } else if ([valueObj isDeviceLinkFail]) {
    jsonDict[@".tag"] = @"device_link_fail";
  } else if ([valueObj isDeviceLinkSuccess]) {
    jsonDict[@".tag"] = @"device_link_success";
  } else if ([valueObj isDeviceManagementDisabled]) {
    jsonDict[@".tag"] = @"device_management_disabled";
  } else if ([valueObj isDeviceManagementEnabled]) {
    jsonDict[@".tag"] = @"device_management_enabled";
  } else if ([valueObj isDeviceUnlink]) {
    jsonDict[@".tag"] = @"device_unlink";
  } else if ([valueObj isEmmRefreshAuthToken]) {
    jsonDict[@".tag"] = @"emm_refresh_auth_token";
  } else if ([valueObj isAccountCaptureChangeAvailability]) {
    jsonDict[@".tag"] = @"account_capture_change_availability";
  } else if ([valueObj isAccountCaptureMigrateAccount]) {
    jsonDict[@".tag"] = @"account_capture_migrate_account";
  } else if ([valueObj isAccountCaptureRelinquishAccount]) {
    jsonDict[@".tag"] = @"account_capture_relinquish_account";
  } else if ([valueObj isDisabledDomainInvites]) {
    jsonDict[@".tag"] = @"disabled_domain_invites";
  } else if ([valueObj isDomainInvitesApproveRequestToJoinTeam]) {
    jsonDict[@".tag"] = @"domain_invites_approve_request_to_join_team";
  } else if ([valueObj isDomainInvitesDeclineRequestToJoinTeam]) {
    jsonDict[@".tag"] = @"domain_invites_decline_request_to_join_team";
  } else if ([valueObj isDomainInvitesEmailExistingUsers]) {
    jsonDict[@".tag"] = @"domain_invites_email_existing_users";
  } else if ([valueObj isDomainInvitesRequestToJoinTeam]) {
    jsonDict[@".tag"] = @"domain_invites_request_to_join_team";
  } else if ([valueObj isDomainInvitesSetInviteNewUserPrefToNo]) {
    jsonDict[@".tag"] = @"domain_invites_set_invite_new_user_pref_to_no";
  } else if ([valueObj isDomainInvitesSetInviteNewUserPrefToYes]) {
    jsonDict[@".tag"] = @"domain_invites_set_invite_new_user_pref_to_yes";
  } else if ([valueObj isDomainVerificationAddDomainFail]) {
    jsonDict[@".tag"] = @"domain_verification_add_domain_fail";
  } else if ([valueObj isDomainVerificationAddDomainSuccess]) {
    jsonDict[@".tag"] = @"domain_verification_add_domain_success";
  } else if ([valueObj isDomainVerificationRemoveDomain]) {
    jsonDict[@".tag"] = @"domain_verification_remove_domain";
  } else if ([valueObj isEnabledDomainInvites]) {
    jsonDict[@".tag"] = @"enabled_domain_invites";
  } else if ([valueObj isCreateFolder]) {
    jsonDict[@".tag"] = @"create_folder";
  } else if ([valueObj isFileAdd]) {
    jsonDict[@".tag"] = @"file_add";
  } else if ([valueObj isFileCopy]) {
    jsonDict[@".tag"] = @"file_copy";
  } else if ([valueObj isFileDelete]) {
    jsonDict[@".tag"] = @"file_delete";
  } else if ([valueObj isFileDownload]) {
    jsonDict[@".tag"] = @"file_download";
  } else if ([valueObj isFileEdit]) {
    jsonDict[@".tag"] = @"file_edit";
  } else if ([valueObj isFileGetCopyReference]) {
    jsonDict[@".tag"] = @"file_get_copy_reference";
  } else if ([valueObj isFileMove]) {
    jsonDict[@".tag"] = @"file_move";
  } else if ([valueObj isFilePermanentlyDelete]) {
    jsonDict[@".tag"] = @"file_permanently_delete";
  } else if ([valueObj isFilePreview]) {
    jsonDict[@".tag"] = @"file_preview";
  } else if ([valueObj isFileRename]) {
    jsonDict[@".tag"] = @"file_rename";
  } else if ([valueObj isFileRestore]) {
    jsonDict[@".tag"] = @"file_restore";
  } else if ([valueObj isFileRevert]) {
    jsonDict[@".tag"] = @"file_revert";
  } else if ([valueObj isFileRollbackChanges]) {
    jsonDict[@".tag"] = @"file_rollback_changes";
  } else if ([valueObj isFileSaveCopyReference]) {
    jsonDict[@".tag"] = @"file_save_copy_reference";
  } else if ([valueObj isFileRequestAddDeadline]) {
    jsonDict[@".tag"] = @"file_request_add_deadline";
  } else if ([valueObj isFileRequestChangeFolder]) {
    jsonDict[@".tag"] = @"file_request_change_folder";
  } else if ([valueObj isFileRequestChangeTitle]) {
    jsonDict[@".tag"] = @"file_request_change_title";
  } else if ([valueObj isFileRequestClose]) {
    jsonDict[@".tag"] = @"file_request_close";
  } else if ([valueObj isFileRequestCreate]) {
    jsonDict[@".tag"] = @"file_request_create";
  } else if ([valueObj isFileRequestReceiveFile]) {
    jsonDict[@".tag"] = @"file_request_receive_file";
  } else if ([valueObj isFileRequestRemoveDeadline]) {
    jsonDict[@".tag"] = @"file_request_remove_deadline";
  } else if ([valueObj isFileRequestSend]) {
    jsonDict[@".tag"] = @"file_request_send";
  } else if ([valueObj isGroupAddExternalId]) {
    jsonDict[@".tag"] = @"group_add_external_id";
  } else if ([valueObj isGroupAddMember]) {
    jsonDict[@".tag"] = @"group_add_member";
  } else if ([valueObj isGroupChangeExternalId]) {
    jsonDict[@".tag"] = @"group_change_external_id";
  } else if ([valueObj isGroupChangeManagementType]) {
    jsonDict[@".tag"] = @"group_change_management_type";
  } else if ([valueObj isGroupChangeMemberRole]) {
    jsonDict[@".tag"] = @"group_change_member_role";
  } else if ([valueObj isGroupCreate]) {
    jsonDict[@".tag"] = @"group_create";
  } else if ([valueObj isGroupDelete]) {
    jsonDict[@".tag"] = @"group_delete";
  } else if ([valueObj isGroupDescriptionUpdated]) {
    jsonDict[@".tag"] = @"group_description_updated";
  } else if ([valueObj isGroupJoinPolicyUpdated]) {
    jsonDict[@".tag"] = @"group_join_policy_updated";
  } else if ([valueObj isGroupMoved]) {
    jsonDict[@".tag"] = @"group_moved";
  } else if ([valueObj isGroupRemoveExternalId]) {
    jsonDict[@".tag"] = @"group_remove_external_id";
  } else if ([valueObj isGroupRemoveMember]) {
    jsonDict[@".tag"] = @"group_remove_member";
  } else if ([valueObj isGroupRename]) {
    jsonDict[@".tag"] = @"group_rename";
  } else if ([valueObj isEmmLoginSuccess]) {
    jsonDict[@".tag"] = @"emm_login_success";
  } else if ([valueObj isLogout]) {
    jsonDict[@".tag"] = @"logout";
  } else if ([valueObj isPasswordLoginFail]) {
    jsonDict[@".tag"] = @"password_login_fail";
  } else if ([valueObj isPasswordLoginSuccess]) {
    jsonDict[@".tag"] = @"password_login_success";
  } else if ([valueObj isResellerSupportSessionEnd]) {
    jsonDict[@".tag"] = @"reseller_support_session_end";
  } else if ([valueObj isResellerSupportSessionStart]) {
    jsonDict[@".tag"] = @"reseller_support_session_start";
  } else if ([valueObj isSignInAsSessionEnd]) {
    jsonDict[@".tag"] = @"sign_in_as_session_end";
  } else if ([valueObj isSignInAsSessionStart]) {
    jsonDict[@".tag"] = @"sign_in_as_session_start";
  } else if ([valueObj isSsoLoginFail]) {
    jsonDict[@".tag"] = @"sso_login_fail";
  } else if ([valueObj isMemberAddName]) {
    jsonDict[@".tag"] = @"member_add_name";
  } else if ([valueObj isMemberChangeEmail]) {
    jsonDict[@".tag"] = @"member_change_email";
  } else if ([valueObj isMemberChangeName]) {
    jsonDict[@".tag"] = @"member_change_name";
  } else if ([valueObj isMemberChangeRole]) {
    jsonDict[@".tag"] = @"member_change_role";
  } else if ([valueObj isMemberInvite]) {
    jsonDict[@".tag"] = @"member_invite";
  } else if ([valueObj isMemberJoin]) {
    jsonDict[@".tag"] = @"member_join";
  } else if ([valueObj isMemberLeave]) {
    jsonDict[@".tag"] = @"member_leave";
  } else if ([valueObj isMemberRecover]) {
    jsonDict[@".tag"] = @"member_recover";
  } else if ([valueObj isMemberSuggest]) {
    jsonDict[@".tag"] = @"member_suggest";
  } else if ([valueObj isMemberSuspend]) {
    jsonDict[@".tag"] = @"member_suspend";
  } else if ([valueObj isMemberUnsuspend]) {
    jsonDict[@".tag"] = @"member_unsuspend";
  } else if ([valueObj isPaperContentAddMember]) {
    jsonDict[@".tag"] = @"paper_content_add_member";
  } else if ([valueObj isPaperContentAddToFolder]) {
    jsonDict[@".tag"] = @"paper_content_add_to_folder";
  } else if ([valueObj isPaperContentArchive]) {
    jsonDict[@".tag"] = @"paper_content_archive";
  } else if ([valueObj isPaperContentChangeSubscription]) {
    jsonDict[@".tag"] = @"paper_content_change_subscription";
  } else if ([valueObj isPaperContentCreate]) {
    jsonDict[@".tag"] = @"paper_content_create";
  } else if ([valueObj isPaperContentPermanentlyDelete]) {
    jsonDict[@".tag"] = @"paper_content_permanently_delete";
  } else if ([valueObj isPaperContentRemoveFromFolder]) {
    jsonDict[@".tag"] = @"paper_content_remove_from_folder";
  } else if ([valueObj isPaperContentRemoveMember]) {
    jsonDict[@".tag"] = @"paper_content_remove_member";
  } else if ([valueObj isPaperContentRename]) {
    jsonDict[@".tag"] = @"paper_content_rename";
  } else if ([valueObj isPaperContentRestore]) {
    jsonDict[@".tag"] = @"paper_content_restore";
  } else if ([valueObj isPaperDocAddComment]) {
    jsonDict[@".tag"] = @"paper_doc_add_comment";
  } else if ([valueObj isPaperDocChangeMemberRole]) {
    jsonDict[@".tag"] = @"paper_doc_change_member_role";
  } else if ([valueObj isPaperDocChangeSharingPolicy]) {
    jsonDict[@".tag"] = @"paper_doc_change_sharing_policy";
  } else if ([valueObj isPaperDocDeleted]) {
    jsonDict[@".tag"] = @"paper_doc_deleted";
  } else if ([valueObj isPaperDocDeleteComment]) {
    jsonDict[@".tag"] = @"paper_doc_delete_comment";
  } else if ([valueObj isPaperDocDownload]) {
    jsonDict[@".tag"] = @"paper_doc_download";
  } else if ([valueObj isPaperDocEdit]) {
    jsonDict[@".tag"] = @"paper_doc_edit";
  } else if ([valueObj isPaperDocEditComment]) {
    jsonDict[@".tag"] = @"paper_doc_edit_comment";
  } else if ([valueObj isPaperDocFollowed]) {
    jsonDict[@".tag"] = @"paper_doc_followed";
  } else if ([valueObj isPaperDocMention]) {
    jsonDict[@".tag"] = @"paper_doc_mention";
  } else if ([valueObj isPaperDocRequestAccess]) {
    jsonDict[@".tag"] = @"paper_doc_request_access";
  } else if ([valueObj isPaperDocResolveComment]) {
    jsonDict[@".tag"] = @"paper_doc_resolve_comment";
  } else if ([valueObj isPaperDocRevert]) {
    jsonDict[@".tag"] = @"paper_doc_revert";
  } else if ([valueObj isPaperDocSlackShare]) {
    jsonDict[@".tag"] = @"paper_doc_slack_share";
  } else if ([valueObj isPaperDocTeamInvite]) {
    jsonDict[@".tag"] = @"paper_doc_team_invite";
  } else if ([valueObj isPaperDocUnresolveComment]) {
    jsonDict[@".tag"] = @"paper_doc_unresolve_comment";
  } else if ([valueObj isPaperDocView]) {
    jsonDict[@".tag"] = @"paper_doc_view";
  } else if ([valueObj isPaperFolderDeleted]) {
    jsonDict[@".tag"] = @"paper_folder_deleted";
  } else if ([valueObj isPaperFolderFollowed]) {
    jsonDict[@".tag"] = @"paper_folder_followed";
  } else if ([valueObj isPaperFolderTeamInvite]) {
    jsonDict[@".tag"] = @"paper_folder_team_invite";
  } else if ([valueObj isPasswordChange]) {
    jsonDict[@".tag"] = @"password_change";
  } else if ([valueObj isPasswordReset]) {
    jsonDict[@".tag"] = @"password_reset";
  } else if ([valueObj isPasswordResetAll]) {
    jsonDict[@".tag"] = @"password_reset_all";
  } else if ([valueObj isEmmCreateExceptionsReport]) {
    jsonDict[@".tag"] = @"emm_create_exceptions_report";
  } else if ([valueObj isEmmCreateUsageReport]) {
    jsonDict[@".tag"] = @"emm_create_usage_report";
  } else if ([valueObj isSmartSyncCreateAdminPrivilegeReport]) {
    jsonDict[@".tag"] = @"smart_sync_create_admin_privilege_report";
  } else if ([valueObj isTeamActivityCreateReport]) {
    jsonDict[@".tag"] = @"team_activity_create_report";
  } else if ([valueObj isCollectionShare]) {
    jsonDict[@".tag"] = @"collection_share";
  } else if ([valueObj isFileAddComment]) {
    jsonDict[@".tag"] = @"file_add_comment";
  } else if ([valueObj isFileLikeComment]) {
    jsonDict[@".tag"] = @"file_like_comment";
  } else if ([valueObj isFileUnlikeComment]) {
    jsonDict[@".tag"] = @"file_unlike_comment";
  } else if ([valueObj isNoteAclInviteOnly]) {
    jsonDict[@".tag"] = @"note_acl_invite_only";
  } else if ([valueObj isNoteAclLink]) {
    jsonDict[@".tag"] = @"note_acl_link";
  } else if ([valueObj isNoteAclTeamLink]) {
    jsonDict[@".tag"] = @"note_acl_team_link";
  } else if ([valueObj isNoteShared]) {
    jsonDict[@".tag"] = @"note_shared";
  } else if ([valueObj isNoteShareReceive]) {
    jsonDict[@".tag"] = @"note_share_receive";
  } else if ([valueObj isOpenNoteShared]) {
    jsonDict[@".tag"] = @"open_note_shared";
  } else if ([valueObj isSfAddGroup]) {
    jsonDict[@".tag"] = @"sf_add_group";
  } else if ([valueObj isSfAllowNonMembersToViewSharedLinks]) {
    jsonDict[@".tag"] = @"sf_allow_non_members_to_view_shared_links";
  } else if ([valueObj isSfInviteGroup]) {
    jsonDict[@".tag"] = @"sf_invite_group";
  } else if ([valueObj isSfNest]) {
    jsonDict[@".tag"] = @"sf_nest";
  } else if ([valueObj isSfTeamDecline]) {
    jsonDict[@".tag"] = @"sf_team_decline";
  } else if ([valueObj isSfTeamGrantAccess]) {
    jsonDict[@".tag"] = @"sf_team_grant_access";
  } else if ([valueObj isSfTeamInvite]) {
    jsonDict[@".tag"] = @"sf_team_invite";
  } else if ([valueObj isSfTeamInviteChangeRole]) {
    jsonDict[@".tag"] = @"sf_team_invite_change_role";
  } else if ([valueObj isSfTeamJoin]) {
    jsonDict[@".tag"] = @"sf_team_join";
  } else if ([valueObj isSfTeamJoinFromOobLink]) {
    jsonDict[@".tag"] = @"sf_team_join_from_oob_link";
  } else if ([valueObj isSfTeamUninvite]) {
    jsonDict[@".tag"] = @"sf_team_uninvite";
  } else if ([valueObj isSharedContentAddInvitees]) {
    jsonDict[@".tag"] = @"shared_content_add_invitees";
  } else if ([valueObj isSharedContentAddLinkExpiry]) {
    jsonDict[@".tag"] = @"shared_content_add_link_expiry";
  } else if ([valueObj isSharedContentAddLinkPassword]) {
    jsonDict[@".tag"] = @"shared_content_add_link_password";
  } else if ([valueObj isSharedContentAddMember]) {
    jsonDict[@".tag"] = @"shared_content_add_member";
  } else if ([valueObj isSharedContentChangeDownloadsPolicy]) {
    jsonDict[@".tag"] = @"shared_content_change_downloads_policy";
  } else if ([valueObj isSharedContentChangeInviteeRole]) {
    jsonDict[@".tag"] = @"shared_content_change_invitee_role";
  } else if ([valueObj isSharedContentChangeLinkAudience]) {
    jsonDict[@".tag"] = @"shared_content_change_link_audience";
  } else if ([valueObj isSharedContentChangeLinkExpiry]) {
    jsonDict[@".tag"] = @"shared_content_change_link_expiry";
  } else if ([valueObj isSharedContentChangeLinkPassword]) {
    jsonDict[@".tag"] = @"shared_content_change_link_password";
  } else if ([valueObj isSharedContentChangeMemberRole]) {
    jsonDict[@".tag"] = @"shared_content_change_member_role";
  } else if ([valueObj isSharedContentChangeViewerInfoPolicy]) {
    jsonDict[@".tag"] = @"shared_content_change_viewer_info_policy";
  } else if ([valueObj isSharedContentClaimInvitation]) {
    jsonDict[@".tag"] = @"shared_content_claim_invitation";
  } else if ([valueObj isSharedContentCopy]) {
    jsonDict[@".tag"] = @"shared_content_copy";
  } else if ([valueObj isSharedContentDownload]) {
    jsonDict[@".tag"] = @"shared_content_download";
  } else if ([valueObj isSharedContentRelinquishMembership]) {
    jsonDict[@".tag"] = @"shared_content_relinquish_membership";
  } else if ([valueObj isSharedContentRemoveInvitee]) {
    jsonDict[@".tag"] = @"shared_content_remove_invitee";
  } else if ([valueObj isSharedContentRemoveLinkExpiry]) {
    jsonDict[@".tag"] = @"shared_content_remove_link_expiry";
  } else if ([valueObj isSharedContentRemoveLinkPassword]) {
    jsonDict[@".tag"] = @"shared_content_remove_link_password";
  } else if ([valueObj isSharedContentRemoveMember]) {
    jsonDict[@".tag"] = @"shared_content_remove_member";
  } else if ([valueObj isSharedContentRequestAccess]) {
    jsonDict[@".tag"] = @"shared_content_request_access";
  } else if ([valueObj isSharedContentUnshare]) {
    jsonDict[@".tag"] = @"shared_content_unshare";
  } else if ([valueObj isSharedContentView]) {
    jsonDict[@".tag"] = @"shared_content_view";
  } else if ([valueObj isSharedFolderChangeConfidentiality]) {
    jsonDict[@".tag"] = @"shared_folder_change_confidentiality";
  } else if ([valueObj isSharedFolderChangeLinkPolicy]) {
    jsonDict[@".tag"] = @"shared_folder_change_link_policy";
  } else if ([valueObj isSharedFolderChangeMemberManagementPolicy]) {
    jsonDict[@".tag"] = @"shared_folder_change_member_management_policy";
  } else if ([valueObj isSharedFolderChangeMemberPolicy]) {
    jsonDict[@".tag"] = @"shared_folder_change_member_policy";
  } else if ([valueObj isSharedFolderCreate]) {
    jsonDict[@".tag"] = @"shared_folder_create";
  } else if ([valueObj isSharedFolderMount]) {
    jsonDict[@".tag"] = @"shared_folder_mount";
  } else if ([valueObj isSharedFolderTransferOwnership]) {
    jsonDict[@".tag"] = @"shared_folder_transfer_ownership";
  } else if ([valueObj isSharedFolderUnmount]) {
    jsonDict[@".tag"] = @"shared_folder_unmount";
  } else if ([valueObj isSharedNoteOpened]) {
    jsonDict[@".tag"] = @"shared_note_opened";
  } else if ([valueObj isShmodelAppCreate]) {
    jsonDict[@".tag"] = @"shmodel_app_create";
  } else if ([valueObj isShmodelCreate]) {
    jsonDict[@".tag"] = @"shmodel_create";
  } else if ([valueObj isShmodelDisable]) {
    jsonDict[@".tag"] = @"shmodel_disable";
  } else if ([valueObj isShmodelFbShare]) {
    jsonDict[@".tag"] = @"shmodel_fb_share";
  } else if ([valueObj isShmodelGroupShare]) {
    jsonDict[@".tag"] = @"shmodel_group_share";
  } else if ([valueObj isShmodelRemoveExpiration]) {
    jsonDict[@".tag"] = @"shmodel_remove_expiration";
  } else if ([valueObj isShmodelSetExpiration]) {
    jsonDict[@".tag"] = @"shmodel_set_expiration";
  } else if ([valueObj isShmodelTeamCopy]) {
    jsonDict[@".tag"] = @"shmodel_team_copy";
  } else if ([valueObj isShmodelTeamDownload]) {
    jsonDict[@".tag"] = @"shmodel_team_download";
  } else if ([valueObj isShmodelTeamShare]) {
    jsonDict[@".tag"] = @"shmodel_team_share";
  } else if ([valueObj isShmodelTeamView]) {
    jsonDict[@".tag"] = @"shmodel_team_view";
  } else if ([valueObj isShmodelVisibilityPassword]) {
    jsonDict[@".tag"] = @"shmodel_visibility_password";
  } else if ([valueObj isShmodelVisibilityPublic]) {
    jsonDict[@".tag"] = @"shmodel_visibility_public";
  } else if ([valueObj isShmodelVisibilityTeamOnly]) {
    jsonDict[@".tag"] = @"shmodel_visibility_team_only";
  } else if ([valueObj isRemoveLogoutUrl]) {
    jsonDict[@".tag"] = @"remove_logout_url";
  } else if ([valueObj isRemoveSsoUrl]) {
    jsonDict[@".tag"] = @"remove_sso_url";
  } else if ([valueObj isSsoChangeCert]) {
    jsonDict[@".tag"] = @"sso_change_cert";
  } else if ([valueObj isSsoChangeLoginUrl]) {
    jsonDict[@".tag"] = @"sso_change_login_url";
  } else if ([valueObj isSsoChangeLogoutUrl]) {
    jsonDict[@".tag"] = @"sso_change_logout_url";
  } else if ([valueObj isSsoChangeSamlIdentityMode]) {
    jsonDict[@".tag"] = @"sso_change_saml_identity_mode";
  } else if ([valueObj isTeamFolderChangeStatus]) {
    jsonDict[@".tag"] = @"team_folder_change_status";
  } else if ([valueObj isTeamFolderCreate]) {
    jsonDict[@".tag"] = @"team_folder_create";
  } else if ([valueObj isTeamFolderDowngrade]) {
    jsonDict[@".tag"] = @"team_folder_downgrade";
  } else if ([valueObj isTeamFolderPermanentlyDelete]) {
    jsonDict[@".tag"] = @"team_folder_permanently_delete";
  } else if ([valueObj isTeamFolderRename]) {
    jsonDict[@".tag"] = @"team_folder_rename";
  } else if ([valueObj isAccountCaptureChangePolicy]) {
    jsonDict[@".tag"] = @"account_capture_change_policy";
  } else if ([valueObj isAllowDownloadDisabled]) {
    jsonDict[@".tag"] = @"allow_download_disabled";
  } else if ([valueObj isAllowDownloadEnabled]) {
    jsonDict[@".tag"] = @"allow_download_enabled";
  } else if ([valueObj isDataPlacementRestrictionChangePolicy]) {
    jsonDict[@".tag"] = @"data_placement_restriction_change_policy";
  } else if ([valueObj isDataPlacementRestrictionSatisfyPolicy]) {
    jsonDict[@".tag"] = @"data_placement_restriction_satisfy_policy";
  } else if ([valueObj isDeviceApprovalsChangeDesktopPolicy]) {
    jsonDict[@".tag"] = @"device_approvals_change_desktop_policy";
  } else if ([valueObj isDeviceApprovalsChangeMobilePolicy]) {
    jsonDict[@".tag"] = @"device_approvals_change_mobile_policy";
  } else if ([valueObj isDeviceApprovalsChangeOverageAction]) {
    jsonDict[@".tag"] = @"device_approvals_change_overage_action";
  } else if ([valueObj isDeviceApprovalsChangeUnlinkAction]) {
    jsonDict[@".tag"] = @"device_approvals_change_unlink_action";
  } else if ([valueObj isEmmAddException]) {
    jsonDict[@".tag"] = @"emm_add_exception";
  } else if ([valueObj isEmmChangePolicy]) {
    jsonDict[@".tag"] = @"emm_change_policy";
  } else if ([valueObj isEmmRemoveException]) {
    jsonDict[@".tag"] = @"emm_remove_exception";
  } else if ([valueObj isExtendedVersionHistoryChangePolicy]) {
    jsonDict[@".tag"] = @"extended_version_history_change_policy";
  } else if ([valueObj isFileCommentsChangePolicy]) {
    jsonDict[@".tag"] = @"file_comments_change_policy";
  } else if ([valueObj isFileRequestsChangePolicy]) {
    jsonDict[@".tag"] = @"file_requests_change_policy";
  } else if ([valueObj isFileRequestsEmailsEnabled]) {
    jsonDict[@".tag"] = @"file_requests_emails_enabled";
  } else if ([valueObj isFileRequestsEmailsRestrictedToTeamOnly]) {
    jsonDict[@".tag"] = @"file_requests_emails_restricted_to_team_only";
  } else if ([valueObj isGoogleSsoChangePolicy]) {
    jsonDict[@".tag"] = @"google_sso_change_policy";
  } else if ([valueObj isGroupUserManagementChangePolicy]) {
    jsonDict[@".tag"] = @"group_user_management_change_policy";
  } else if ([valueObj isMemberRequestsChangePolicy]) {
    jsonDict[@".tag"] = @"member_requests_change_policy";
  } else if ([valueObj isMemberSpaceLimitsAddException]) {
    jsonDict[@".tag"] = @"member_space_limits_add_exception";
  } else if ([valueObj isMemberSpaceLimitsChangePolicy]) {
    jsonDict[@".tag"] = @"member_space_limits_change_policy";
  } else if ([valueObj isMemberSpaceLimitsRemoveException]) {
    jsonDict[@".tag"] = @"member_space_limits_remove_exception";
  } else if ([valueObj isMemberSuggestionsChangePolicy]) {
    jsonDict[@".tag"] = @"member_suggestions_change_policy";
  } else if ([valueObj isMicrosoftOfficeAddinChangePolicy]) {
    jsonDict[@".tag"] = @"microsoft_office_addin_change_policy";
  } else if ([valueObj isNetworkControlChangePolicy]) {
    jsonDict[@".tag"] = @"network_control_change_policy";
  } else if ([valueObj isPaperChangeDeploymentPolicy]) {
    jsonDict[@".tag"] = @"paper_change_deployment_policy";
  } else if ([valueObj isPaperChangeMemberPolicy]) {
    jsonDict[@".tag"] = @"paper_change_member_policy";
  } else if ([valueObj isPaperChangePolicy]) {
    jsonDict[@".tag"] = @"paper_change_policy";
  } else if ([valueObj isPermanentDeleteChangePolicy]) {
    jsonDict[@".tag"] = @"permanent_delete_change_policy";
  } else if ([valueObj isSharingChangeFolderJoinPolicy]) {
    jsonDict[@".tag"] = @"sharing_change_folder_join_policy";
  } else if ([valueObj isSharingChangeLinkPolicy]) {
    jsonDict[@".tag"] = @"sharing_change_link_policy";
  } else if ([valueObj isSharingChangeMemberPolicy]) {
    jsonDict[@".tag"] = @"sharing_change_member_policy";
  } else if ([valueObj isSmartSyncChangePolicy]) {
    jsonDict[@".tag"] = @"smart_sync_change_policy";
  } else if ([valueObj isSsoChangePolicy]) {
    jsonDict[@".tag"] = @"sso_change_policy";
  } else if ([valueObj isTfaChangePolicy]) {
    jsonDict[@".tag"] = @"tfa_change_policy";
  } else if ([valueObj isTwoAccountChangePolicy]) {
    jsonDict[@".tag"] = @"two_account_change_policy";
  } else if ([valueObj isWebSessionsChangeFixedLengthPolicy]) {
    jsonDict[@".tag"] = @"web_sessions_change_fixed_length_policy";
  } else if ([valueObj isWebSessionsChangeIdleLengthPolicy]) {
    jsonDict[@".tag"] = @"web_sessions_change_idle_length_policy";
  } else if ([valueObj isTeamProfileAddLogo]) {
    jsonDict[@".tag"] = @"team_profile_add_logo";
  } else if ([valueObj isTeamProfileChangeLogo]) {
    jsonDict[@".tag"] = @"team_profile_change_logo";
  } else if ([valueObj isTeamProfileChangeName]) {
    jsonDict[@".tag"] = @"team_profile_change_name";
  } else if ([valueObj isTeamProfileRemoveLogo]) {
    jsonDict[@".tag"] = @"team_profile_remove_logo";
  } else if ([valueObj isTfaAddBackupPhone]) {
    jsonDict[@".tag"] = @"tfa_add_backup_phone";
  } else if ([valueObj isTfaAddSecurityKey]) {
    jsonDict[@".tag"] = @"tfa_add_security_key";
  } else if ([valueObj isTfaChangeBackupPhone]) {
    jsonDict[@".tag"] = @"tfa_change_backup_phone";
  } else if ([valueObj isTfaChangeStatus]) {
    jsonDict[@".tag"] = @"tfa_change_status";
  } else if ([valueObj isTfaRemoveBackupPhone]) {
    jsonDict[@".tag"] = @"tfa_remove_backup_phone";
  } else if ([valueObj isTfaRemoveSecurityKey]) {
    jsonDict[@".tag"] = @"tfa_remove_security_key";
  } else if ([valueObj isTfaReset]) {
    jsonDict[@".tag"] = @"tfa_reset";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGEventType *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"member_change_membership_type"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberChangeMembershipType];
  } else if ([tag isEqualToString:@"member_permanently_delete_account_contents"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberPermanentlyDeleteAccountContents];
  } else if ([tag isEqualToString:@"member_space_limits_change_status"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberSpaceLimitsChangeStatus];
  } else if ([tag isEqualToString:@"member_transfer_account_contents"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberTransferAccountContents];
  } else if ([tag isEqualToString:@"paper_enabled_users_group_addition"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperEnabledUsersGroupAddition];
  } else if ([tag isEqualToString:@"paper_enabled_users_group_removal"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperEnabledUsersGroupRemoval];
  } else if ([tag isEqualToString:@"paper_external_view_allow"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperExternalViewAllow];
  } else if ([tag isEqualToString:@"paper_external_view_default_team"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperExternalViewDefaultTeam];
  } else if ([tag isEqualToString:@"paper_external_view_forbid"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperExternalViewForbid];
  } else if ([tag isEqualToString:@"sf_external_invite_warn"]) {
    return [[DBTEAMLOGEventType alloc] initWithSfExternalInviteWarn];
  } else if ([tag isEqualToString:@"team_merge"]) {
    return [[DBTEAMLOGEventType alloc] initWithTeamMerge];
  } else if ([tag isEqualToString:@"app_link_team"]) {
    return [[DBTEAMLOGEventType alloc] initWithAppLinkTeam];
  } else if ([tag isEqualToString:@"app_link_user"]) {
    return [[DBTEAMLOGEventType alloc] initWithAppLinkUser];
  } else if ([tag isEqualToString:@"app_unlink_team"]) {
    return [[DBTEAMLOGEventType alloc] initWithAppUnlinkTeam];
  } else if ([tag isEqualToString:@"app_unlink_user"]) {
    return [[DBTEAMLOGEventType alloc] initWithAppUnlinkUser];
  } else if ([tag isEqualToString:@"device_change_ip_desktop"]) {
    return [[DBTEAMLOGEventType alloc] initWithDeviceChangeIpDesktop];
  } else if ([tag isEqualToString:@"device_change_ip_mobile"]) {
    return [[DBTEAMLOGEventType alloc] initWithDeviceChangeIpMobile];
  } else if ([tag isEqualToString:@"device_change_ip_web"]) {
    return [[DBTEAMLOGEventType alloc] initWithDeviceChangeIpWeb];
  } else if ([tag isEqualToString:@"device_delete_on_unlink_fail"]) {
    return [[DBTEAMLOGEventType alloc] initWithDeviceDeleteOnUnlinkFail];
  } else if ([tag isEqualToString:@"device_delete_on_unlink_success"]) {
    return [[DBTEAMLOGEventType alloc] initWithDeviceDeleteOnUnlinkSuccess];
  } else if ([tag isEqualToString:@"device_link_fail"]) {
    return [[DBTEAMLOGEventType alloc] initWithDeviceLinkFail];
  } else if ([tag isEqualToString:@"device_link_success"]) {
    return [[DBTEAMLOGEventType alloc] initWithDeviceLinkSuccess];
  } else if ([tag isEqualToString:@"device_management_disabled"]) {
    return [[DBTEAMLOGEventType alloc] initWithDeviceManagementDisabled];
  } else if ([tag isEqualToString:@"device_management_enabled"]) {
    return [[DBTEAMLOGEventType alloc] initWithDeviceManagementEnabled];
  } else if ([tag isEqualToString:@"device_unlink"]) {
    return [[DBTEAMLOGEventType alloc] initWithDeviceUnlink];
  } else if ([tag isEqualToString:@"emm_refresh_auth_token"]) {
    return [[DBTEAMLOGEventType alloc] initWithEmmRefreshAuthToken];
  } else if ([tag isEqualToString:@"account_capture_change_availability"]) {
    return [[DBTEAMLOGEventType alloc] initWithAccountCaptureChangeAvailability];
  } else if ([tag isEqualToString:@"account_capture_migrate_account"]) {
    return [[DBTEAMLOGEventType alloc] initWithAccountCaptureMigrateAccount];
  } else if ([tag isEqualToString:@"account_capture_relinquish_account"]) {
    return [[DBTEAMLOGEventType alloc] initWithAccountCaptureRelinquishAccount];
  } else if ([tag isEqualToString:@"disabled_domain_invites"]) {
    return [[DBTEAMLOGEventType alloc] initWithDisabledDomainInvites];
  } else if ([tag isEqualToString:@"domain_invites_approve_request_to_join_team"]) {
    return [[DBTEAMLOGEventType alloc] initWithDomainInvitesApproveRequestToJoinTeam];
  } else if ([tag isEqualToString:@"domain_invites_decline_request_to_join_team"]) {
    return [[DBTEAMLOGEventType alloc] initWithDomainInvitesDeclineRequestToJoinTeam];
  } else if ([tag isEqualToString:@"domain_invites_email_existing_users"]) {
    return [[DBTEAMLOGEventType alloc] initWithDomainInvitesEmailExistingUsers];
  } else if ([tag isEqualToString:@"domain_invites_request_to_join_team"]) {
    return [[DBTEAMLOGEventType alloc] initWithDomainInvitesRequestToJoinTeam];
  } else if ([tag isEqualToString:@"domain_invites_set_invite_new_user_pref_to_no"]) {
    return [[DBTEAMLOGEventType alloc] initWithDomainInvitesSetInviteNewUserPrefToNo];
  } else if ([tag isEqualToString:@"domain_invites_set_invite_new_user_pref_to_yes"]) {
    return [[DBTEAMLOGEventType alloc] initWithDomainInvitesSetInviteNewUserPrefToYes];
  } else if ([tag isEqualToString:@"domain_verification_add_domain_fail"]) {
    return [[DBTEAMLOGEventType alloc] initWithDomainVerificationAddDomainFail];
  } else if ([tag isEqualToString:@"domain_verification_add_domain_success"]) {
    return [[DBTEAMLOGEventType alloc] initWithDomainVerificationAddDomainSuccess];
  } else if ([tag isEqualToString:@"domain_verification_remove_domain"]) {
    return [[DBTEAMLOGEventType alloc] initWithDomainVerificationRemoveDomain];
  } else if ([tag isEqualToString:@"enabled_domain_invites"]) {
    return [[DBTEAMLOGEventType alloc] initWithEnabledDomainInvites];
  } else if ([tag isEqualToString:@"create_folder"]) {
    return [[DBTEAMLOGEventType alloc] initWithCreateFolder];
  } else if ([tag isEqualToString:@"file_add"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileAdd];
  } else if ([tag isEqualToString:@"file_copy"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileCopy];
  } else if ([tag isEqualToString:@"file_delete"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileDelete];
  } else if ([tag isEqualToString:@"file_download"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileDownload];
  } else if ([tag isEqualToString:@"file_edit"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileEdit];
  } else if ([tag isEqualToString:@"file_get_copy_reference"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileGetCopyReference];
  } else if ([tag isEqualToString:@"file_move"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileMove];
  } else if ([tag isEqualToString:@"file_permanently_delete"]) {
    return [[DBTEAMLOGEventType alloc] initWithFilePermanentlyDelete];
  } else if ([tag isEqualToString:@"file_preview"]) {
    return [[DBTEAMLOGEventType alloc] initWithFilePreview];
  } else if ([tag isEqualToString:@"file_rename"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileRename];
  } else if ([tag isEqualToString:@"file_restore"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileRestore];
  } else if ([tag isEqualToString:@"file_revert"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileRevert];
  } else if ([tag isEqualToString:@"file_rollback_changes"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileRollbackChanges];
  } else if ([tag isEqualToString:@"file_save_copy_reference"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileSaveCopyReference];
  } else if ([tag isEqualToString:@"file_request_add_deadline"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileRequestAddDeadline];
  } else if ([tag isEqualToString:@"file_request_change_folder"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileRequestChangeFolder];
  } else if ([tag isEqualToString:@"file_request_change_title"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileRequestChangeTitle];
  } else if ([tag isEqualToString:@"file_request_close"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileRequestClose];
  } else if ([tag isEqualToString:@"file_request_create"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileRequestCreate];
  } else if ([tag isEqualToString:@"file_request_receive_file"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileRequestReceiveFile];
  } else if ([tag isEqualToString:@"file_request_remove_deadline"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileRequestRemoveDeadline];
  } else if ([tag isEqualToString:@"file_request_send"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileRequestSend];
  } else if ([tag isEqualToString:@"group_add_external_id"]) {
    return [[DBTEAMLOGEventType alloc] initWithGroupAddExternalId];
  } else if ([tag isEqualToString:@"group_add_member"]) {
    return [[DBTEAMLOGEventType alloc] initWithGroupAddMember];
  } else if ([tag isEqualToString:@"group_change_external_id"]) {
    return [[DBTEAMLOGEventType alloc] initWithGroupChangeExternalId];
  } else if ([tag isEqualToString:@"group_change_management_type"]) {
    return [[DBTEAMLOGEventType alloc] initWithGroupChangeManagementType];
  } else if ([tag isEqualToString:@"group_change_member_role"]) {
    return [[DBTEAMLOGEventType alloc] initWithGroupChangeMemberRole];
  } else if ([tag isEqualToString:@"group_create"]) {
    return [[DBTEAMLOGEventType alloc] initWithGroupCreate];
  } else if ([tag isEqualToString:@"group_delete"]) {
    return [[DBTEAMLOGEventType alloc] initWithGroupDelete];
  } else if ([tag isEqualToString:@"group_description_updated"]) {
    return [[DBTEAMLOGEventType alloc] initWithGroupDescriptionUpdated];
  } else if ([tag isEqualToString:@"group_join_policy_updated"]) {
    return [[DBTEAMLOGEventType alloc] initWithGroupJoinPolicyUpdated];
  } else if ([tag isEqualToString:@"group_moved"]) {
    return [[DBTEAMLOGEventType alloc] initWithGroupMoved];
  } else if ([tag isEqualToString:@"group_remove_external_id"]) {
    return [[DBTEAMLOGEventType alloc] initWithGroupRemoveExternalId];
  } else if ([tag isEqualToString:@"group_remove_member"]) {
    return [[DBTEAMLOGEventType alloc] initWithGroupRemoveMember];
  } else if ([tag isEqualToString:@"group_rename"]) {
    return [[DBTEAMLOGEventType alloc] initWithGroupRename];
  } else if ([tag isEqualToString:@"emm_login_success"]) {
    return [[DBTEAMLOGEventType alloc] initWithEmmLoginSuccess];
  } else if ([tag isEqualToString:@"logout"]) {
    return [[DBTEAMLOGEventType alloc] initWithLogout];
  } else if ([tag isEqualToString:@"password_login_fail"]) {
    return [[DBTEAMLOGEventType alloc] initWithPasswordLoginFail];
  } else if ([tag isEqualToString:@"password_login_success"]) {
    return [[DBTEAMLOGEventType alloc] initWithPasswordLoginSuccess];
  } else if ([tag isEqualToString:@"reseller_support_session_end"]) {
    return [[DBTEAMLOGEventType alloc] initWithResellerSupportSessionEnd];
  } else if ([tag isEqualToString:@"reseller_support_session_start"]) {
    return [[DBTEAMLOGEventType alloc] initWithResellerSupportSessionStart];
  } else if ([tag isEqualToString:@"sign_in_as_session_end"]) {
    return [[DBTEAMLOGEventType alloc] initWithSignInAsSessionEnd];
  } else if ([tag isEqualToString:@"sign_in_as_session_start"]) {
    return [[DBTEAMLOGEventType alloc] initWithSignInAsSessionStart];
  } else if ([tag isEqualToString:@"sso_login_fail"]) {
    return [[DBTEAMLOGEventType alloc] initWithSsoLoginFail];
  } else if ([tag isEqualToString:@"member_add_name"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberAddName];
  } else if ([tag isEqualToString:@"member_change_email"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberChangeEmail];
  } else if ([tag isEqualToString:@"member_change_name"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberChangeName];
  } else if ([tag isEqualToString:@"member_change_role"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberChangeRole];
  } else if ([tag isEqualToString:@"member_invite"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberInvite];
  } else if ([tag isEqualToString:@"member_join"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberJoin];
  } else if ([tag isEqualToString:@"member_leave"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberLeave];
  } else if ([tag isEqualToString:@"member_recover"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberRecover];
  } else if ([tag isEqualToString:@"member_suggest"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberSuggest];
  } else if ([tag isEqualToString:@"member_suspend"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberSuspend];
  } else if ([tag isEqualToString:@"member_unsuspend"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberUnsuspend];
  } else if ([tag isEqualToString:@"paper_content_add_member"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperContentAddMember];
  } else if ([tag isEqualToString:@"paper_content_add_to_folder"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperContentAddToFolder];
  } else if ([tag isEqualToString:@"paper_content_archive"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperContentArchive];
  } else if ([tag isEqualToString:@"paper_content_change_subscription"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperContentChangeSubscription];
  } else if ([tag isEqualToString:@"paper_content_create"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperContentCreate];
  } else if ([tag isEqualToString:@"paper_content_permanently_delete"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperContentPermanentlyDelete];
  } else if ([tag isEqualToString:@"paper_content_remove_from_folder"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperContentRemoveFromFolder];
  } else if ([tag isEqualToString:@"paper_content_remove_member"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperContentRemoveMember];
  } else if ([tag isEqualToString:@"paper_content_rename"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperContentRename];
  } else if ([tag isEqualToString:@"paper_content_restore"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperContentRestore];
  } else if ([tag isEqualToString:@"paper_doc_add_comment"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperDocAddComment];
  } else if ([tag isEqualToString:@"paper_doc_change_member_role"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperDocChangeMemberRole];
  } else if ([tag isEqualToString:@"paper_doc_change_sharing_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperDocChangeSharingPolicy];
  } else if ([tag isEqualToString:@"paper_doc_deleted"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperDocDeleted];
  } else if ([tag isEqualToString:@"paper_doc_delete_comment"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperDocDeleteComment];
  } else if ([tag isEqualToString:@"paper_doc_download"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperDocDownload];
  } else if ([tag isEqualToString:@"paper_doc_edit"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperDocEdit];
  } else if ([tag isEqualToString:@"paper_doc_edit_comment"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperDocEditComment];
  } else if ([tag isEqualToString:@"paper_doc_followed"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperDocFollowed];
  } else if ([tag isEqualToString:@"paper_doc_mention"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperDocMention];
  } else if ([tag isEqualToString:@"paper_doc_request_access"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperDocRequestAccess];
  } else if ([tag isEqualToString:@"paper_doc_resolve_comment"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperDocResolveComment];
  } else if ([tag isEqualToString:@"paper_doc_revert"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperDocRevert];
  } else if ([tag isEqualToString:@"paper_doc_slack_share"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperDocSlackShare];
  } else if ([tag isEqualToString:@"paper_doc_team_invite"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperDocTeamInvite];
  } else if ([tag isEqualToString:@"paper_doc_unresolve_comment"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperDocUnresolveComment];
  } else if ([tag isEqualToString:@"paper_doc_view"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperDocView];
  } else if ([tag isEqualToString:@"paper_folder_deleted"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperFolderDeleted];
  } else if ([tag isEqualToString:@"paper_folder_followed"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperFolderFollowed];
  } else if ([tag isEqualToString:@"paper_folder_team_invite"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperFolderTeamInvite];
  } else if ([tag isEqualToString:@"password_change"]) {
    return [[DBTEAMLOGEventType alloc] initWithPasswordChange];
  } else if ([tag isEqualToString:@"password_reset"]) {
    return [[DBTEAMLOGEventType alloc] initWithPasswordReset];
  } else if ([tag isEqualToString:@"password_reset_all"]) {
    return [[DBTEAMLOGEventType alloc] initWithPasswordResetAll];
  } else if ([tag isEqualToString:@"emm_create_exceptions_report"]) {
    return [[DBTEAMLOGEventType alloc] initWithEmmCreateExceptionsReport];
  } else if ([tag isEqualToString:@"emm_create_usage_report"]) {
    return [[DBTEAMLOGEventType alloc] initWithEmmCreateUsageReport];
  } else if ([tag isEqualToString:@"smart_sync_create_admin_privilege_report"]) {
    return [[DBTEAMLOGEventType alloc] initWithSmartSyncCreateAdminPrivilegeReport];
  } else if ([tag isEqualToString:@"team_activity_create_report"]) {
    return [[DBTEAMLOGEventType alloc] initWithTeamActivityCreateReport];
  } else if ([tag isEqualToString:@"collection_share"]) {
    return [[DBTEAMLOGEventType alloc] initWithCollectionShare];
  } else if ([tag isEqualToString:@"file_add_comment"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileAddComment];
  } else if ([tag isEqualToString:@"file_like_comment"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileLikeComment];
  } else if ([tag isEqualToString:@"file_unlike_comment"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileUnlikeComment];
  } else if ([tag isEqualToString:@"note_acl_invite_only"]) {
    return [[DBTEAMLOGEventType alloc] initWithNoteAclInviteOnly];
  } else if ([tag isEqualToString:@"note_acl_link"]) {
    return [[DBTEAMLOGEventType alloc] initWithNoteAclLink];
  } else if ([tag isEqualToString:@"note_acl_team_link"]) {
    return [[DBTEAMLOGEventType alloc] initWithNoteAclTeamLink];
  } else if ([tag isEqualToString:@"note_shared"]) {
    return [[DBTEAMLOGEventType alloc] initWithNoteShared];
  } else if ([tag isEqualToString:@"note_share_receive"]) {
    return [[DBTEAMLOGEventType alloc] initWithNoteShareReceive];
  } else if ([tag isEqualToString:@"open_note_shared"]) {
    return [[DBTEAMLOGEventType alloc] initWithOpenNoteShared];
  } else if ([tag isEqualToString:@"sf_add_group"]) {
    return [[DBTEAMLOGEventType alloc] initWithSfAddGroup];
  } else if ([tag isEqualToString:@"sf_allow_non_members_to_view_shared_links"]) {
    return [[DBTEAMLOGEventType alloc] initWithSfAllowNonMembersToViewSharedLinks];
  } else if ([tag isEqualToString:@"sf_invite_group"]) {
    return [[DBTEAMLOGEventType alloc] initWithSfInviteGroup];
  } else if ([tag isEqualToString:@"sf_nest"]) {
    return [[DBTEAMLOGEventType alloc] initWithSfNest];
  } else if ([tag isEqualToString:@"sf_team_decline"]) {
    return [[DBTEAMLOGEventType alloc] initWithSfTeamDecline];
  } else if ([tag isEqualToString:@"sf_team_grant_access"]) {
    return [[DBTEAMLOGEventType alloc] initWithSfTeamGrantAccess];
  } else if ([tag isEqualToString:@"sf_team_invite"]) {
    return [[DBTEAMLOGEventType alloc] initWithSfTeamInvite];
  } else if ([tag isEqualToString:@"sf_team_invite_change_role"]) {
    return [[DBTEAMLOGEventType alloc] initWithSfTeamInviteChangeRole];
  } else if ([tag isEqualToString:@"sf_team_join"]) {
    return [[DBTEAMLOGEventType alloc] initWithSfTeamJoin];
  } else if ([tag isEqualToString:@"sf_team_join_from_oob_link"]) {
    return [[DBTEAMLOGEventType alloc] initWithSfTeamJoinFromOobLink];
  } else if ([tag isEqualToString:@"sf_team_uninvite"]) {
    return [[DBTEAMLOGEventType alloc] initWithSfTeamUninvite];
  } else if ([tag isEqualToString:@"shared_content_add_invitees"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentAddInvitees];
  } else if ([tag isEqualToString:@"shared_content_add_link_expiry"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentAddLinkExpiry];
  } else if ([tag isEqualToString:@"shared_content_add_link_password"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentAddLinkPassword];
  } else if ([tag isEqualToString:@"shared_content_add_member"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentAddMember];
  } else if ([tag isEqualToString:@"shared_content_change_downloads_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentChangeDownloadsPolicy];
  } else if ([tag isEqualToString:@"shared_content_change_invitee_role"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentChangeInviteeRole];
  } else if ([tag isEqualToString:@"shared_content_change_link_audience"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentChangeLinkAudience];
  } else if ([tag isEqualToString:@"shared_content_change_link_expiry"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentChangeLinkExpiry];
  } else if ([tag isEqualToString:@"shared_content_change_link_password"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentChangeLinkPassword];
  } else if ([tag isEqualToString:@"shared_content_change_member_role"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentChangeMemberRole];
  } else if ([tag isEqualToString:@"shared_content_change_viewer_info_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentChangeViewerInfoPolicy];
  } else if ([tag isEqualToString:@"shared_content_claim_invitation"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentClaimInvitation];
  } else if ([tag isEqualToString:@"shared_content_copy"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentCopy];
  } else if ([tag isEqualToString:@"shared_content_download"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentDownload];
  } else if ([tag isEqualToString:@"shared_content_relinquish_membership"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentRelinquishMembership];
  } else if ([tag isEqualToString:@"shared_content_remove_invitee"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentRemoveInvitee];
  } else if ([tag isEqualToString:@"shared_content_remove_link_expiry"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentRemoveLinkExpiry];
  } else if ([tag isEqualToString:@"shared_content_remove_link_password"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentRemoveLinkPassword];
  } else if ([tag isEqualToString:@"shared_content_remove_member"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentRemoveMember];
  } else if ([tag isEqualToString:@"shared_content_request_access"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentRequestAccess];
  } else if ([tag isEqualToString:@"shared_content_unshare"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentUnshare];
  } else if ([tag isEqualToString:@"shared_content_view"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedContentView];
  } else if ([tag isEqualToString:@"shared_folder_change_confidentiality"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedFolderChangeConfidentiality];
  } else if ([tag isEqualToString:@"shared_folder_change_link_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedFolderChangeLinkPolicy];
  } else if ([tag isEqualToString:@"shared_folder_change_member_management_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedFolderChangeMemberManagementPolicy];
  } else if ([tag isEqualToString:@"shared_folder_change_member_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedFolderChangeMemberPolicy];
  } else if ([tag isEqualToString:@"shared_folder_create"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedFolderCreate];
  } else if ([tag isEqualToString:@"shared_folder_mount"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedFolderMount];
  } else if ([tag isEqualToString:@"shared_folder_transfer_ownership"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedFolderTransferOwnership];
  } else if ([tag isEqualToString:@"shared_folder_unmount"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedFolderUnmount];
  } else if ([tag isEqualToString:@"shared_note_opened"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharedNoteOpened];
  } else if ([tag isEqualToString:@"shmodel_app_create"]) {
    return [[DBTEAMLOGEventType alloc] initWithShmodelAppCreate];
  } else if ([tag isEqualToString:@"shmodel_create"]) {
    return [[DBTEAMLOGEventType alloc] initWithShmodelCreate];
  } else if ([tag isEqualToString:@"shmodel_disable"]) {
    return [[DBTEAMLOGEventType alloc] initWithShmodelDisable];
  } else if ([tag isEqualToString:@"shmodel_fb_share"]) {
    return [[DBTEAMLOGEventType alloc] initWithShmodelFbShare];
  } else if ([tag isEqualToString:@"shmodel_group_share"]) {
    return [[DBTEAMLOGEventType alloc] initWithShmodelGroupShare];
  } else if ([tag isEqualToString:@"shmodel_remove_expiration"]) {
    return [[DBTEAMLOGEventType alloc] initWithShmodelRemoveExpiration];
  } else if ([tag isEqualToString:@"shmodel_set_expiration"]) {
    return [[DBTEAMLOGEventType alloc] initWithShmodelSetExpiration];
  } else if ([tag isEqualToString:@"shmodel_team_copy"]) {
    return [[DBTEAMLOGEventType alloc] initWithShmodelTeamCopy];
  } else if ([tag isEqualToString:@"shmodel_team_download"]) {
    return [[DBTEAMLOGEventType alloc] initWithShmodelTeamDownload];
  } else if ([tag isEqualToString:@"shmodel_team_share"]) {
    return [[DBTEAMLOGEventType alloc] initWithShmodelTeamShare];
  } else if ([tag isEqualToString:@"shmodel_team_view"]) {
    return [[DBTEAMLOGEventType alloc] initWithShmodelTeamView];
  } else if ([tag isEqualToString:@"shmodel_visibility_password"]) {
    return [[DBTEAMLOGEventType alloc] initWithShmodelVisibilityPassword];
  } else if ([tag isEqualToString:@"shmodel_visibility_public"]) {
    return [[DBTEAMLOGEventType alloc] initWithShmodelVisibilityPublic];
  } else if ([tag isEqualToString:@"shmodel_visibility_team_only"]) {
    return [[DBTEAMLOGEventType alloc] initWithShmodelVisibilityTeamOnly];
  } else if ([tag isEqualToString:@"remove_logout_url"]) {
    return [[DBTEAMLOGEventType alloc] initWithRemoveLogoutUrl];
  } else if ([tag isEqualToString:@"remove_sso_url"]) {
    return [[DBTEAMLOGEventType alloc] initWithRemoveSsoUrl];
  } else if ([tag isEqualToString:@"sso_change_cert"]) {
    return [[DBTEAMLOGEventType alloc] initWithSsoChangeCert];
  } else if ([tag isEqualToString:@"sso_change_login_url"]) {
    return [[DBTEAMLOGEventType alloc] initWithSsoChangeLoginUrl];
  } else if ([tag isEqualToString:@"sso_change_logout_url"]) {
    return [[DBTEAMLOGEventType alloc] initWithSsoChangeLogoutUrl];
  } else if ([tag isEqualToString:@"sso_change_saml_identity_mode"]) {
    return [[DBTEAMLOGEventType alloc] initWithSsoChangeSamlIdentityMode];
  } else if ([tag isEqualToString:@"team_folder_change_status"]) {
    return [[DBTEAMLOGEventType alloc] initWithTeamFolderChangeStatus];
  } else if ([tag isEqualToString:@"team_folder_create"]) {
    return [[DBTEAMLOGEventType alloc] initWithTeamFolderCreate];
  } else if ([tag isEqualToString:@"team_folder_downgrade"]) {
    return [[DBTEAMLOGEventType alloc] initWithTeamFolderDowngrade];
  } else if ([tag isEqualToString:@"team_folder_permanently_delete"]) {
    return [[DBTEAMLOGEventType alloc] initWithTeamFolderPermanentlyDelete];
  } else if ([tag isEqualToString:@"team_folder_rename"]) {
    return [[DBTEAMLOGEventType alloc] initWithTeamFolderRename];
  } else if ([tag isEqualToString:@"account_capture_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithAccountCaptureChangePolicy];
  } else if ([tag isEqualToString:@"allow_download_disabled"]) {
    return [[DBTEAMLOGEventType alloc] initWithAllowDownloadDisabled];
  } else if ([tag isEqualToString:@"allow_download_enabled"]) {
    return [[DBTEAMLOGEventType alloc] initWithAllowDownloadEnabled];
  } else if ([tag isEqualToString:@"data_placement_restriction_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithDataPlacementRestrictionChangePolicy];
  } else if ([tag isEqualToString:@"data_placement_restriction_satisfy_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithDataPlacementRestrictionSatisfyPolicy];
  } else if ([tag isEqualToString:@"device_approvals_change_desktop_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithDeviceApprovalsChangeDesktopPolicy];
  } else if ([tag isEqualToString:@"device_approvals_change_mobile_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithDeviceApprovalsChangeMobilePolicy];
  } else if ([tag isEqualToString:@"device_approvals_change_overage_action"]) {
    return [[DBTEAMLOGEventType alloc] initWithDeviceApprovalsChangeOverageAction];
  } else if ([tag isEqualToString:@"device_approvals_change_unlink_action"]) {
    return [[DBTEAMLOGEventType alloc] initWithDeviceApprovalsChangeUnlinkAction];
  } else if ([tag isEqualToString:@"emm_add_exception"]) {
    return [[DBTEAMLOGEventType alloc] initWithEmmAddException];
  } else if ([tag isEqualToString:@"emm_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithEmmChangePolicy];
  } else if ([tag isEqualToString:@"emm_remove_exception"]) {
    return [[DBTEAMLOGEventType alloc] initWithEmmRemoveException];
  } else if ([tag isEqualToString:@"extended_version_history_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithExtendedVersionHistoryChangePolicy];
  } else if ([tag isEqualToString:@"file_comments_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileCommentsChangePolicy];
  } else if ([tag isEqualToString:@"file_requests_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileRequestsChangePolicy];
  } else if ([tag isEqualToString:@"file_requests_emails_enabled"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileRequestsEmailsEnabled];
  } else if ([tag isEqualToString:@"file_requests_emails_restricted_to_team_only"]) {
    return [[DBTEAMLOGEventType alloc] initWithFileRequestsEmailsRestrictedToTeamOnly];
  } else if ([tag isEqualToString:@"google_sso_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithGoogleSsoChangePolicy];
  } else if ([tag isEqualToString:@"group_user_management_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithGroupUserManagementChangePolicy];
  } else if ([tag isEqualToString:@"member_requests_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberRequestsChangePolicy];
  } else if ([tag isEqualToString:@"member_space_limits_add_exception"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberSpaceLimitsAddException];
  } else if ([tag isEqualToString:@"member_space_limits_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberSpaceLimitsChangePolicy];
  } else if ([tag isEqualToString:@"member_space_limits_remove_exception"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberSpaceLimitsRemoveException];
  } else if ([tag isEqualToString:@"member_suggestions_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithMemberSuggestionsChangePolicy];
  } else if ([tag isEqualToString:@"microsoft_office_addin_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithMicrosoftOfficeAddinChangePolicy];
  } else if ([tag isEqualToString:@"network_control_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithNetworkControlChangePolicy];
  } else if ([tag isEqualToString:@"paper_change_deployment_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperChangeDeploymentPolicy];
  } else if ([tag isEqualToString:@"paper_change_member_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperChangeMemberPolicy];
  } else if ([tag isEqualToString:@"paper_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithPaperChangePolicy];
  } else if ([tag isEqualToString:@"permanent_delete_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithPermanentDeleteChangePolicy];
  } else if ([tag isEqualToString:@"sharing_change_folder_join_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharingChangeFolderJoinPolicy];
  } else if ([tag isEqualToString:@"sharing_change_link_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharingChangeLinkPolicy];
  } else if ([tag isEqualToString:@"sharing_change_member_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithSharingChangeMemberPolicy];
  } else if ([tag isEqualToString:@"smart_sync_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithSmartSyncChangePolicy];
  } else if ([tag isEqualToString:@"sso_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithSsoChangePolicy];
  } else if ([tag isEqualToString:@"tfa_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithTfaChangePolicy];
  } else if ([tag isEqualToString:@"two_account_change_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithTwoAccountChangePolicy];
  } else if ([tag isEqualToString:@"web_sessions_change_fixed_length_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithWebSessionsChangeFixedLengthPolicy];
  } else if ([tag isEqualToString:@"web_sessions_change_idle_length_policy"]) {
    return [[DBTEAMLOGEventType alloc] initWithWebSessionsChangeIdleLengthPolicy];
  } else if ([tag isEqualToString:@"team_profile_add_logo"]) {
    return [[DBTEAMLOGEventType alloc] initWithTeamProfileAddLogo];
  } else if ([tag isEqualToString:@"team_profile_change_logo"]) {
    return [[DBTEAMLOGEventType alloc] initWithTeamProfileChangeLogo];
  } else if ([tag isEqualToString:@"team_profile_change_name"]) {
    return [[DBTEAMLOGEventType alloc] initWithTeamProfileChangeName];
  } else if ([tag isEqualToString:@"team_profile_remove_logo"]) {
    return [[DBTEAMLOGEventType alloc] initWithTeamProfileRemoveLogo];
  } else if ([tag isEqualToString:@"tfa_add_backup_phone"]) {
    return [[DBTEAMLOGEventType alloc] initWithTfaAddBackupPhone];
  } else if ([tag isEqualToString:@"tfa_add_security_key"]) {
    return [[DBTEAMLOGEventType alloc] initWithTfaAddSecurityKey];
  } else if ([tag isEqualToString:@"tfa_change_backup_phone"]) {
    return [[DBTEAMLOGEventType alloc] initWithTfaChangeBackupPhone];
  } else if ([tag isEqualToString:@"tfa_change_status"]) {
    return [[DBTEAMLOGEventType alloc] initWithTfaChangeStatus];
  } else if ([tag isEqualToString:@"tfa_remove_backup_phone"]) {
    return [[DBTEAMLOGEventType alloc] initWithTfaRemoveBackupPhone];
  } else if ([tag isEqualToString:@"tfa_remove_security_key"]) {
    return [[DBTEAMLOGEventType alloc] initWithTfaRemoveSecurityKey];
  } else if ([tag isEqualToString:@"tfa_reset"]) {
    return [[DBTEAMLOGEventType alloc] initWithTfaReset];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGEventType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGEventType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGExtendedVersionHistoryChangePolicyDetails.h"
#import "DBTEAMLOGExtendedVersionHistoryPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGExtendedVersionHistoryChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGExtendedVersionHistoryPolicy *)dNewValue
                    previousValue:(DBTEAMLOGExtendedVersionHistoryPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGExtendedVersionHistoryPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGExtendedVersionHistoryChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGExtendedVersionHistoryChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGExtendedVersionHistoryChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExtendedVersionHistoryChangePolicyDetails:other];
}

- (BOOL)isEqualToExtendedVersionHistoryChangePolicyDetails:
    (DBTEAMLOGExtendedVersionHistoryChangePolicyDetails *)anExtendedVersionHistoryChangePolicyDetails {
  if (self == anExtendedVersionHistoryChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:anExtendedVersionHistoryChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:anExtendedVersionHistoryChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGExtendedVersionHistoryChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGExtendedVersionHistoryChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGExtendedVersionHistoryPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGExtendedVersionHistoryPolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGExtendedVersionHistoryChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGExtendedVersionHistoryPolicy *dNewValue =
      [DBTEAMLOGExtendedVersionHistoryPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGExtendedVersionHistoryPolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGExtendedVersionHistoryPolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGExtendedVersionHistoryChangePolicyDetails alloc] initWithDNewValue:dNewValue
                                                                         previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGExtendedVersionHistoryPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGExtendedVersionHistoryPolicy

#pragma mark - Constructors

- (instancetype)initWithLimited {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGExtendedVersionHistoryPolicyLimited;
  }
  return self;
}

- (instancetype)initWithUnlimited {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGExtendedVersionHistoryPolicyUnlimited;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGExtendedVersionHistoryPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isLimited {
  return _tag == DBTEAMLOGExtendedVersionHistoryPolicyLimited;
}

- (BOOL)isUnlimited {
  return _tag == DBTEAMLOGExtendedVersionHistoryPolicyUnlimited;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGExtendedVersionHistoryPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGExtendedVersionHistoryPolicyLimited:
    return @"DBTEAMLOGExtendedVersionHistoryPolicyLimited";
  case DBTEAMLOGExtendedVersionHistoryPolicyUnlimited:
    return @"DBTEAMLOGExtendedVersionHistoryPolicyUnlimited";
  case DBTEAMLOGExtendedVersionHistoryPolicyOther:
    return @"DBTEAMLOGExtendedVersionHistoryPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGExtendedVersionHistoryPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGExtendedVersionHistoryPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGExtendedVersionHistoryPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGExtendedVersionHistoryPolicyLimited:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGExtendedVersionHistoryPolicyUnlimited:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGExtendedVersionHistoryPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExtendedVersionHistoryPolicy:other];
}

- (BOOL)isEqualToExtendedVersionHistoryPolicy:(DBTEAMLOGExtendedVersionHistoryPolicy *)anExtendedVersionHistoryPolicy {
  if (self == anExtendedVersionHistoryPolicy) {
    return YES;
  }
  if (self.tag != anExtendedVersionHistoryPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGExtendedVersionHistoryPolicyLimited:
    return [[self tagName] isEqual:[anExtendedVersionHistoryPolicy tagName]];
  case DBTEAMLOGExtendedVersionHistoryPolicyUnlimited:
    return [[self tagName] isEqual:[anExtendedVersionHistoryPolicy tagName]];
  case DBTEAMLOGExtendedVersionHistoryPolicyOther:
    return [[self tagName] isEqual:[anExtendedVersionHistoryPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGExtendedVersionHistoryPolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGExtendedVersionHistoryPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isLimited]) {
    jsonDict[@".tag"] = @"limited";
  } else if ([valueObj isUnlimited]) {
    jsonDict[@".tag"] = @"unlimited";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGExtendedVersionHistoryPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"limited"]) {
    return [[DBTEAMLOGExtendedVersionHistoryPolicy alloc] initWithLimited];
  } else if ([tag isEqualToString:@"unlimited"]) {
    return [[DBTEAMLOGExtendedVersionHistoryPolicy alloc] initWithUnlimited];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGExtendedVersionHistoryPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGExtendedVersionHistoryPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGExternalSharingAccessibilityPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGExternalSharingAccessibilityPolicy

#pragma mark - Constructors

- (instancetype)initWithTeamOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGExternalSharingAccessibilityPolicyTeamOnly;
  }
  return self;
}

- (instancetype)initWithDefaultTeamOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGExternalSharingAccessibilityPolicyDefaultTeamOnly;
  }
  return self;
}

- (instancetype)initWithDefaultAnyone {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGExternalSharingAccessibilityPolicyDefaultAnyone;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGExternalSharingAccessibilityPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isTeamOnly {
  return _tag == DBTEAMLOGExternalSharingAccessibilityPolicyTeamOnly;
}

- (BOOL)isDefaultTeamOnly {
  return _tag == DBTEAMLOGExternalSharingAccessibilityPolicyDefaultTeamOnly;
}

- (BOOL)isDefaultAnyone {
  return _tag == DBTEAMLOGExternalSharingAccessibilityPolicyDefaultAnyone;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGExternalSharingAccessibilityPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGExternalSharingAccessibilityPolicyTeamOnly:
    return @"DBTEAMLOGExternalSharingAccessibilityPolicyTeamOnly";
  case DBTEAMLOGExternalSharingAccessibilityPolicyDefaultTeamOnly:
    return @"DBTEAMLOGExternalSharingAccessibilityPolicyDefaultTeamOnly";
  case DBTEAMLOGExternalSharingAccessibilityPolicyDefaultAnyone:
    return @"DBTEAMLOGExternalSharingAccessibilityPolicyDefaultAnyone";
  case DBTEAMLOGExternalSharingAccessibilityPolicyOther:
    return @"DBTEAMLOGExternalSharingAccessibilityPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGExternalSharingAccessibilityPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGExternalSharingAccessibilityPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGExternalSharingAccessibilityPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGExternalSharingAccessibilityPolicyTeamOnly:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGExternalSharingAccessibilityPolicyDefaultTeamOnly:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGExternalSharingAccessibilityPolicyDefaultAnyone:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGExternalSharingAccessibilityPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExternalSharingAccessibilityPolicy:other];
}

- (BOOL)isEqualToExternalSharingAccessibilityPolicy:
    (DBTEAMLOGExternalSharingAccessibilityPolicy *)anExternalSharingAccessibilityPolicy {
  if (self == anExternalSharingAccessibilityPolicy) {
    return YES;
  }
  if (self.tag != anExternalSharingAccessibilityPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGExternalSharingAccessibilityPolicyTeamOnly:
    return [[self tagName] isEqual:[anExternalSharingAccessibilityPolicy tagName]];
  case DBTEAMLOGExternalSharingAccessibilityPolicyDefaultTeamOnly:
    return [[self tagName] isEqual:[anExternalSharingAccessibilityPolicy tagName]];
  case DBTEAMLOGExternalSharingAccessibilityPolicyDefaultAnyone:
    return [[self tagName] isEqual:[anExternalSharingAccessibilityPolicy tagName]];
  case DBTEAMLOGExternalSharingAccessibilityPolicyOther:
    return [[self tagName] isEqual:[anExternalSharingAccessibilityPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGExternalSharingAccessibilityPolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGExternalSharingAccessibilityPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTeamOnly]) {
    jsonDict[@".tag"] = @"team_only";
  } else if ([valueObj isDefaultTeamOnly]) {
    jsonDict[@".tag"] = @"default_team_only";
  } else if ([valueObj isDefaultAnyone]) {
    jsonDict[@".tag"] = @"default_anyone";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGExternalSharingAccessibilityPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"team_only"]) {
    return [[DBTEAMLOGExternalSharingAccessibilityPolicy alloc] initWithTeamOnly];
  } else if ([tag isEqualToString:@"default_team_only"]) {
    return [[DBTEAMLOGExternalSharingAccessibilityPolicy alloc] initWithDefaultTeamOnly];
  } else if ([tag isEqualToString:@"default_anyone"]) {
    return [[DBTEAMLOGExternalSharingAccessibilityPolicy alloc] initWithDefaultAnyone];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGExternalSharingAccessibilityPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGExternalSharingAccessibilityPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGExternalSharingPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGExternalSharingPolicy

#pragma mark - Constructors

- (instancetype)initWithTeamOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGExternalSharingPolicyTeamOnly;
  }
  return self;
}

- (instancetype)initWithAnyone {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGExternalSharingPolicyAnyone;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGExternalSharingPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isTeamOnly {
  return _tag == DBTEAMLOGExternalSharingPolicyTeamOnly;
}

- (BOOL)isAnyone {
  return _tag == DBTEAMLOGExternalSharingPolicyAnyone;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGExternalSharingPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGExternalSharingPolicyTeamOnly:
    return @"DBTEAMLOGExternalSharingPolicyTeamOnly";
  case DBTEAMLOGExternalSharingPolicyAnyone:
    return @"DBTEAMLOGExternalSharingPolicyAnyone";
  case DBTEAMLOGExternalSharingPolicyOther:
    return @"DBTEAMLOGExternalSharingPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGExternalSharingPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGExternalSharingPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGExternalSharingPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGExternalSharingPolicyTeamOnly:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGExternalSharingPolicyAnyone:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGExternalSharingPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToExternalSharingPolicy:other];
}

- (BOOL)isEqualToExternalSharingPolicy:(DBTEAMLOGExternalSharingPolicy *)anExternalSharingPolicy {
  if (self == anExternalSharingPolicy) {
    return YES;
  }
  if (self.tag != anExternalSharingPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGExternalSharingPolicyTeamOnly:
    return [[self tagName] isEqual:[anExternalSharingPolicy tagName]];
  case DBTEAMLOGExternalSharingPolicyAnyone:
    return [[self tagName] isEqual:[anExternalSharingPolicy tagName]];
  case DBTEAMLOGExternalSharingPolicyOther:
    return [[self tagName] isEqual:[anExternalSharingPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGExternalSharingPolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGExternalSharingPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTeamOnly]) {
    jsonDict[@".tag"] = @"team_only";
  } else if ([valueObj isAnyone]) {
    jsonDict[@".tag"] = @"anyone";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGExternalSharingPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"team_only"]) {
    return [[DBTEAMLOGExternalSharingPolicy alloc] initWithTeamOnly];
  } else if ([tag isEqualToString:@"anyone"]) {
    return [[DBTEAMLOGExternalSharingPolicy alloc] initWithAnyone];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGExternalSharingPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGExternalSharingPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileAddCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileAddCommentDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex commentText:(NSString *)commentText {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex {
  return [self initWithTargetIndex:targetIndex commentText:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileAddCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileAddCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileAddCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  if (self.commentText) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileAddCommentDetails:other];
}

- (BOOL)isEqualToFileAddCommentDetails:(DBTEAMLOGFileAddCommentDetails *)aFileAddCommentDetails {
  if (self == aFileAddCommentDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aFileAddCommentDetails.targetIndex]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aFileAddCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileAddCommentDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileAddCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return jsonDict;
}

+ (DBTEAMLOGFileAddCommentDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGFileAddCommentDetails alloc] initWithTargetIndex:targetIndex commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileAddDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileAddDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileAddDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileAddDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileAddDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileAddDetails:other];
}

- (BOOL)isEqualToFileAddDetails:(DBTEAMLOGFileAddDetails *)aFileAddDetails {
  if (self == aFileAddDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileAddDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileAddDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGFileAddDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileAddDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnableDisableChangePolicy.h"
#import "DBTEAMLOGFileCommentsChangePolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileCommentsChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue
                    previousValue:(DBTEAMLOGEnableDisableChangePolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileCommentsChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileCommentsChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileCommentsChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileCommentsChangePolicyDetails:other];
}

- (BOOL)isEqualToFileCommentsChangePolicyDetails:
    (DBTEAMLOGFileCommentsChangePolicyDetails *)aFileCommentsChangePolicyDetails {
  if (self == aFileCommentsChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aFileCommentsChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aFileCommentsChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileCommentsChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileCommentsChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGFileCommentsChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGEnableDisableChangePolicy *dNewValue =
      [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGEnableDisableChangePolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGFileCommentsChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileCopyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileCopyDetails

#pragma mark - Constructors

- (instancetype)initWithSrcIndex:(NSNumber *)srcIndex destIndex:(NSNumber *)destIndex {

  self = [super init];
  if (self) {
    _srcIndex = srcIndex;
    _destIndex = destIndex;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileCopyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileCopyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileCopyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.srcIndex hash];
  result = prime * result + [self.destIndex hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileCopyDetails:other];
}

- (BOOL)isEqualToFileCopyDetails:(DBTEAMLOGFileCopyDetails *)aFileCopyDetails {
  if (self == aFileCopyDetails) {
    return YES;
  }
  if (![self.srcIndex isEqual:aFileCopyDetails.srcIndex]) {
    return NO;
  }
  if (![self.destIndex isEqual:aFileCopyDetails.destIndex]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileCopyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileCopyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"src_index"] = valueObj.srcIndex;
  jsonDict[@"dest_index"] = valueObj.destIndex;

  return jsonDict;
}

+ (DBTEAMLOGFileCopyDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *srcIndex = valueDict[@"src_index"];
  NSNumber *destIndex = valueDict[@"dest_index"];

  return [[DBTEAMLOGFileCopyDetails alloc] initWithSrcIndex:srcIndex destIndex:destIndex];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileDeleteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileDeleteDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileDeleteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileDeleteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileDeleteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileDeleteDetails:other];
}

- (BOOL)isEqualToFileDeleteDetails:(DBTEAMLOGFileDeleteDetails *)aFileDeleteDetails {
  if (self == aFileDeleteDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileDeleteDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileDeleteDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGFileDeleteDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileDeleteDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileDownloadDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileDownloadDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileDownloadDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileDownloadDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileDownloadDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileDownloadDetails:other];
}

- (BOOL)isEqualToFileDownloadDetails:(DBTEAMLOGFileDownloadDetails *)aFileDownloadDetails {
  if (self == aFileDownloadDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileDownloadDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileDownloadDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGFileDownloadDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileDownloadDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileEditDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileEditDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileEditDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileEditDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileEditDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileEditDetails:other];
}

- (BOOL)isEqualToFileEditDetails:(DBTEAMLOGFileEditDetails *)aFileEditDetails {
  if (self == aFileEditDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileEditDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileEditDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGFileEditDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileEditDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileGetCopyReferenceDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileGetCopyReferenceDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileGetCopyReferenceDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileGetCopyReferenceDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileGetCopyReferenceDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileGetCopyReferenceDetails:other];
}

- (BOOL)isEqualToFileGetCopyReferenceDetails:(DBTEAMLOGFileGetCopyReferenceDetails *)aFileGetCopyReferenceDetails {
  if (self == aFileGetCopyReferenceDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileGetCopyReferenceDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileGetCopyReferenceDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGFileGetCopyReferenceDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileGetCopyReferenceDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileLikeCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileLikeCommentDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex commentText:(NSString *)commentText {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex {
  return [self initWithTargetIndex:targetIndex commentText:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileLikeCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileLikeCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileLikeCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  if (self.commentText) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileLikeCommentDetails:other];
}

- (BOOL)isEqualToFileLikeCommentDetails:(DBTEAMLOGFileLikeCommentDetails *)aFileLikeCommentDetails {
  if (self == aFileLikeCommentDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aFileLikeCommentDetails.targetIndex]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aFileLikeCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileLikeCommentDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileLikeCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return jsonDict;
}

+ (DBTEAMLOGFileLikeCommentDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGFileLikeCommentDetails alloc] initWithTargetIndex:targetIndex commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileOrFolderLogInfo.h"
#import "DBTEAMLOGPathLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileOrFolderLogInfo

#pragma mark - Constructors

- (instancetype)initWithPath:(DBTEAMLOGPathLogInfo *)path
                 displayName:(NSString *)displayName
                      fileId:(NSString *)fileId {

  self = [super init];
  if (self) {
    _path = path;
    _displayName = displayName;
    _fileId = fileId;
  }
  return self;
}

- (instancetype)initWithPath:(DBTEAMLOGPathLogInfo *)path {
  return [self initWithPath:path displayName:nil fileId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileOrFolderLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileOrFolderLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileOrFolderLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.path hash];
  if (self.displayName) {
    result = prime * result + [self.displayName hash];
  }
  if (self.fileId) {
    result = prime * result + [self.fileId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileOrFolderLogInfo:other];
}

- (BOOL)isEqualToFileOrFolderLogInfo:(DBTEAMLOGFileOrFolderLogInfo *)aFileOrFolderLogInfo {
  if (self == aFileOrFolderLogInfo) {
    return YES;
  }
  if (![self.path isEqual:aFileOrFolderLogInfo.path]) {
    return NO;
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aFileOrFolderLogInfo.displayName]) {
      return NO;
    }
  }
  if (self.fileId) {
    if (![self.fileId isEqual:aFileOrFolderLogInfo.fileId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileOrFolderLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileOrFolderLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"path"] = [DBTEAMLOGPathLogInfoSerializer serialize:valueObj.path];
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }
  if (valueObj.fileId) {
    jsonDict[@"file_id"] = valueObj.fileId;
  }

  return jsonDict;
}

+ (DBTEAMLOGFileOrFolderLogInfo *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGPathLogInfo *path = [DBTEAMLOGPathLogInfoSerializer deserialize:valueDict[@"path"]];
  NSString *displayName = valueDict[@"display_name"] ?: nil;
  NSString *fileId = valueDict[@"file_id"] ?: nil;

  return [[DBTEAMLOGFileOrFolderLogInfo alloc] initWithPath:path displayName:displayName fileId:fileId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileLogInfo.h"
#import "DBTEAMLOGFileOrFolderLogInfo.h"
#import "DBTEAMLOGPathLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileLogInfo

#pragma mark - Constructors

- (instancetype)initWithPath:(DBTEAMLOGPathLogInfo *)path
                 displayName:(NSString *)displayName
                      fileId:(NSString *)fileId {

  self = [super initWithPath:path displayName:displayName fileId:fileId];
  if (self) {
  }
  return self;
}

- (instancetype)initWithPath:(DBTEAMLOGPathLogInfo *)path {
  return [self initWithPath:path displayName:nil fileId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.path hash];
  if (self.displayName) {
    result = prime * result + [self.displayName hash];
  }
  if (self.fileId) {
    result = prime * result + [self.fileId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileLogInfo:other];
}

- (BOOL)isEqualToFileLogInfo:(DBTEAMLOGFileLogInfo *)aFileLogInfo {
  if (self == aFileLogInfo) {
    return YES;
  }
  if (![self.path isEqual:aFileLogInfo.path]) {
    return NO;
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aFileLogInfo.displayName]) {
      return NO;
    }
  }
  if (self.fileId) {
    if (![self.fileId isEqual:aFileLogInfo.fileId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"path"] = [DBTEAMLOGPathLogInfoSerializer serialize:valueObj.path];
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }
  if (valueObj.fileId) {
    jsonDict[@"file_id"] = valueObj.fileId;
  }

  return jsonDict;
}

+ (DBTEAMLOGFileLogInfo *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGPathLogInfo *path = [DBTEAMLOGPathLogInfoSerializer deserialize:valueDict[@"path"]];
  NSString *displayName = valueDict[@"display_name"] ?: nil;
  NSString *fileId = valueDict[@"file_id"] ?: nil;

  return [[DBTEAMLOGFileLogInfo alloc] initWithPath:path displayName:displayName fileId:fileId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileMoveDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileMoveDetails

#pragma mark - Constructors

- (instancetype)initWithSrcIndex:(NSNumber *)srcIndex destIndex:(NSNumber *)destIndex {

  self = [super init];
  if (self) {
    _srcIndex = srcIndex;
    _destIndex = destIndex;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileMoveDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileMoveDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileMoveDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.srcIndex hash];
  result = prime * result + [self.destIndex hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileMoveDetails:other];
}

- (BOOL)isEqualToFileMoveDetails:(DBTEAMLOGFileMoveDetails *)aFileMoveDetails {
  if (self == aFileMoveDetails) {
    return YES;
  }
  if (![self.srcIndex isEqual:aFileMoveDetails.srcIndex]) {
    return NO;
  }
  if (![self.destIndex isEqual:aFileMoveDetails.destIndex]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileMoveDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileMoveDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"src_index"] = valueObj.srcIndex;
  jsonDict[@"dest_index"] = valueObj.destIndex;

  return jsonDict;
}

+ (DBTEAMLOGFileMoveDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *srcIndex = valueDict[@"src_index"];
  NSNumber *destIndex = valueDict[@"dest_index"];

  return [[DBTEAMLOGFileMoveDetails alloc] initWithSrcIndex:srcIndex destIndex:destIndex];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFilePermanentlyDeleteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFilePermanentlyDeleteDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFilePermanentlyDeleteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFilePermanentlyDeleteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFilePermanentlyDeleteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFilePermanentlyDeleteDetails:other];
}

- (BOOL)isEqualToFilePermanentlyDeleteDetails:(DBTEAMLOGFilePermanentlyDeleteDetails *)aFilePermanentlyDeleteDetails {
  if (self == aFilePermanentlyDeleteDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFilePermanentlyDeleteDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFilePermanentlyDeleteDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGFilePermanentlyDeleteDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFilePermanentlyDeleteDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFilePreviewDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFilePreviewDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFilePreviewDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFilePreviewDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFilePreviewDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFilePreviewDetails:other];
}

- (BOOL)isEqualToFilePreviewDetails:(DBTEAMLOGFilePreviewDetails *)aFilePreviewDetails {
  if (self == aFilePreviewDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFilePreviewDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFilePreviewDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGFilePreviewDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFilePreviewDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRenameDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRenameDetails

#pragma mark - Constructors

- (instancetype)initWithSrcIndex:(NSNumber *)srcIndex destIndex:(NSNumber *)destIndex {

  self = [super init];
  if (self) {
    _srcIndex = srcIndex;
    _destIndex = destIndex;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileRenameDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileRenameDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRenameDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.srcIndex hash];
  result = prime * result + [self.destIndex hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRenameDetails:other];
}

- (BOOL)isEqualToFileRenameDetails:(DBTEAMLOGFileRenameDetails *)aFileRenameDetails {
  if (self == aFileRenameDetails) {
    return YES;
  }
  if (![self.srcIndex isEqual:aFileRenameDetails.srcIndex]) {
    return NO;
  }
  if (![self.destIndex isEqual:aFileRenameDetails.destIndex]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRenameDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileRenameDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"src_index"] = valueObj.srcIndex;
  jsonDict[@"dest_index"] = valueObj.destIndex;

  return jsonDict;
}

+ (DBTEAMLOGFileRenameDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *srcIndex = valueDict[@"src_index"];
  NSNumber *destIndex = valueDict[@"dest_index"];

  return [[DBTEAMLOGFileRenameDetails alloc] initWithSrcIndex:srcIndex destIndex:destIndex];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestAddDeadlineDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestAddDeadlineDetails

#pragma mark - Constructors

- (instancetype)initWithRequestTitle:(NSString *)requestTitle {

  self = [super init];
  if (self) {
    _requestTitle = requestTitle;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestAddDeadlineDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileRequestAddDeadlineDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestAddDeadlineDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.requestTitle hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestAddDeadlineDetails:other];
}

- (BOOL)isEqualToFileRequestAddDeadlineDetails:
    (DBTEAMLOGFileRequestAddDeadlineDetails *)aFileRequestAddDeadlineDetails {
  if (self == aFileRequestAddDeadlineDetails) {
    return YES;
  }
  if (![self.requestTitle isEqual:aFileRequestAddDeadlineDetails.requestTitle]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestAddDeadlineDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileRequestAddDeadlineDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"request_title"] = valueObj.requestTitle;

  return jsonDict;
}

+ (DBTEAMLOGFileRequestAddDeadlineDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *requestTitle = valueDict[@"request_title"];

  return [[DBTEAMLOGFileRequestAddDeadlineDetails alloc] initWithRequestTitle:requestTitle];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestChangeFolderDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestChangeFolderDetails

#pragma mark - Constructors

- (instancetype)initWithRequestTitle:(NSString *)requestTitle {

  self = [super init];
  if (self) {
    _requestTitle = requestTitle;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestChangeFolderDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileRequestChangeFolderDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestChangeFolderDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.requestTitle hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestChangeFolderDetails:other];
}

- (BOOL)isEqualToFileRequestChangeFolderDetails:
    (DBTEAMLOGFileRequestChangeFolderDetails *)aFileRequestChangeFolderDetails {
  if (self == aFileRequestChangeFolderDetails) {
    return YES;
  }
  if (![self.requestTitle isEqual:aFileRequestChangeFolderDetails.requestTitle]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestChangeFolderDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileRequestChangeFolderDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"request_title"] = valueObj.requestTitle;

  return jsonDict;
}

+ (DBTEAMLOGFileRequestChangeFolderDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *requestTitle = valueDict[@"request_title"];

  return [[DBTEAMLOGFileRequestChangeFolderDetails alloc] initWithRequestTitle:requestTitle];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestChangeTitleDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestChangeTitleDetails

#pragma mark - Constructors

- (instancetype)initWithRequestTitle:(NSString *)requestTitle {

  self = [super init];
  if (self) {
    _requestTitle = requestTitle;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestChangeTitleDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileRequestChangeTitleDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestChangeTitleDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.requestTitle hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestChangeTitleDetails:other];
}

- (BOOL)isEqualToFileRequestChangeTitleDetails:
    (DBTEAMLOGFileRequestChangeTitleDetails *)aFileRequestChangeTitleDetails {
  if (self == aFileRequestChangeTitleDetails) {
    return YES;
  }
  if (![self.requestTitle isEqual:aFileRequestChangeTitleDetails.requestTitle]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestChangeTitleDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileRequestChangeTitleDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"request_title"] = valueObj.requestTitle;

  return jsonDict;
}

+ (DBTEAMLOGFileRequestChangeTitleDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *requestTitle = valueDict[@"request_title"];

  return [[DBTEAMLOGFileRequestChangeTitleDetails alloc] initWithRequestTitle:requestTitle];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestCloseDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestCloseDetails

#pragma mark - Constructors

- (instancetype)initWithRequestTitle:(NSString *)requestTitle {

  self = [super init];
  if (self) {
    _requestTitle = requestTitle;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestCloseDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileRequestCloseDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestCloseDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.requestTitle hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestCloseDetails:other];
}

- (BOOL)isEqualToFileRequestCloseDetails:(DBTEAMLOGFileRequestCloseDetails *)aFileRequestCloseDetails {
  if (self == aFileRequestCloseDetails) {
    return YES;
  }
  if (![self.requestTitle isEqual:aFileRequestCloseDetails.requestTitle]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestCloseDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileRequestCloseDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"request_title"] = valueObj.requestTitle;

  return jsonDict;
}

+ (DBTEAMLOGFileRequestCloseDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *requestTitle = valueDict[@"request_title"];

  return [[DBTEAMLOGFileRequestCloseDetails alloc] initWithRequestTitle:requestTitle];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestCreateDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestCreateDetails

#pragma mark - Constructors

- (instancetype)initWithRequestTitle:(NSString *)requestTitle {

  self = [super init];
  if (self) {
    _requestTitle = requestTitle;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestCreateDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileRequestCreateDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestCreateDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.requestTitle hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestCreateDetails:other];
}

- (BOOL)isEqualToFileRequestCreateDetails:(DBTEAMLOGFileRequestCreateDetails *)aFileRequestCreateDetails {
  if (self == aFileRequestCreateDetails) {
    return YES;
  }
  if (![self.requestTitle isEqual:aFileRequestCreateDetails.requestTitle]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestCreateDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileRequestCreateDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"request_title"] = valueObj.requestTitle;

  return jsonDict;
}

+ (DBTEAMLOGFileRequestCreateDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *requestTitle = valueDict[@"request_title"];

  return [[DBTEAMLOGFileRequestCreateDetails alloc] initWithRequestTitle:requestTitle];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestReceiveFileDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestReceiveFileDetails

#pragma mark - Constructors

- (instancetype)initWithRequestTitle:(NSString *)requestTitle
                  submittedFileNames:(NSArray<NSString *> *)submittedFileNames {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](submittedFileNames);

  self = [super init];
  if (self) {
    _requestTitle = requestTitle;
    _submittedFileNames = submittedFileNames;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestReceiveFileDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileRequestReceiveFileDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestReceiveFileDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.requestTitle hash];
  result = prime * result + [self.submittedFileNames hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestReceiveFileDetails:other];
}

- (BOOL)isEqualToFileRequestReceiveFileDetails:
    (DBTEAMLOGFileRequestReceiveFileDetails *)aFileRequestReceiveFileDetails {
  if (self == aFileRequestReceiveFileDetails) {
    return YES;
  }
  if (![self.requestTitle isEqual:aFileRequestReceiveFileDetails.requestTitle]) {
    return NO;
  }
  if (![self.submittedFileNames isEqual:aFileRequestReceiveFileDetails.submittedFileNames]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestReceiveFileDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileRequestReceiveFileDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"request_title"] = valueObj.requestTitle;
  jsonDict[@"submitted_file_names"] = [DBArraySerializer serialize:valueObj.submittedFileNames
                                                         withBlock:^id(id elem0) {
                                                           return elem0;
                                                         }];

  return jsonDict;
}

+ (DBTEAMLOGFileRequestReceiveFileDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *requestTitle = valueDict[@"request_title"];
  NSArray<NSString *> *submittedFileNames = [DBArraySerializer deserialize:valueDict[@"submitted_file_names"]
                                                                 withBlock:^id(id elem0) {
                                                                   return elem0;
                                                                 }];

  return [[DBTEAMLOGFileRequestReceiveFileDetails alloc] initWithRequestTitle:requestTitle
                                                           submittedFileNames:submittedFileNames];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestRemoveDeadlineDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestRemoveDeadlineDetails

#pragma mark - Constructors

- (instancetype)initWithRequestTitle:(NSString *)requestTitle {

  self = [super init];
  if (self) {
    _requestTitle = requestTitle;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestRemoveDeadlineDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileRequestRemoveDeadlineDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestRemoveDeadlineDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.requestTitle hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestRemoveDeadlineDetails:other];
}

- (BOOL)isEqualToFileRequestRemoveDeadlineDetails:
    (DBTEAMLOGFileRequestRemoveDeadlineDetails *)aFileRequestRemoveDeadlineDetails {
  if (self == aFileRequestRemoveDeadlineDetails) {
    return YES;
  }
  if (![self.requestTitle isEqual:aFileRequestRemoveDeadlineDetails.requestTitle]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestRemoveDeadlineDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileRequestRemoveDeadlineDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"request_title"] = valueObj.requestTitle;

  return jsonDict;
}

+ (DBTEAMLOGFileRequestRemoveDeadlineDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *requestTitle = valueDict[@"request_title"];

  return [[DBTEAMLOGFileRequestRemoveDeadlineDetails alloc] initWithRequestTitle:requestTitle];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestSendDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestSendDetails

#pragma mark - Constructors

- (instancetype)initWithRequestTitle:(NSString *)requestTitle {

  self = [super init];
  if (self) {
    _requestTitle = requestTitle;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestSendDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileRequestSendDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestSendDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.requestTitle hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestSendDetails:other];
}

- (BOOL)isEqualToFileRequestSendDetails:(DBTEAMLOGFileRequestSendDetails *)aFileRequestSendDetails {
  if (self == aFileRequestSendDetails) {
    return YES;
  }
  if (![self.requestTitle isEqual:aFileRequestSendDetails.requestTitle]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestSendDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileRequestSendDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"request_title"] = valueObj.requestTitle;

  return jsonDict;
}

+ (DBTEAMLOGFileRequestSendDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *requestTitle = valueDict[@"request_title"];

  return [[DBTEAMLOGFileRequestSendDetails alloc] initWithRequestTitle:requestTitle];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnableDisableChangePolicy.h"
#import "DBTEAMLOGFileRequestsChangePolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestsChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue
                    previousValue:(DBTEAMLOGEnableDisableChangePolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestsChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileRequestsChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestsChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestsChangePolicyDetails:other];
}

- (BOOL)isEqualToFileRequestsChangePolicyDetails:
    (DBTEAMLOGFileRequestsChangePolicyDetails *)aFileRequestsChangePolicyDetails {
  if (self == aFileRequestsChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aFileRequestsChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aFileRequestsChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestsChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileRequestsChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGFileRequestsChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGEnableDisableChangePolicy *dNewValue =
      [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGEnableDisableChangePolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGFileRequestsChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestsEmailsEnabledDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestsEmailsEnabledDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestsEmailsEnabledDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileRequestsEmailsEnabledDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestsEmailsEnabledDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestsEmailsEnabledDetails:other];
}

- (BOOL)isEqualToFileRequestsEmailsEnabledDetails:
    (DBTEAMLOGFileRequestsEmailsEnabledDetails *)aFileRequestsEmailsEnabledDetails {
  if (self == aFileRequestsEmailsEnabledDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestsEmailsEnabledDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileRequestsEmailsEnabledDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGFileRequestsEmailsEnabledDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileRequestsEmailsEnabledDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRequestsEmailsRestrictedToTeamOnlyDetails:other];
}

- (BOOL)isEqualToFileRequestsEmailsRestrictedToTeamOnlyDetails:
    (DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails *)aFileRequestsEmailsRestrictedToTeamOnlyDetails {
  if (self == aFileRequestsEmailsRestrictedToTeamOnlyDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRestoreDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRestoreDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileRestoreDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileRestoreDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRestoreDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRestoreDetails:other];
}

- (BOOL)isEqualToFileRestoreDetails:(DBTEAMLOGFileRestoreDetails *)aFileRestoreDetails {
  if (self == aFileRestoreDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRestoreDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileRestoreDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGFileRestoreDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileRestoreDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRevertDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRevertDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileRevertDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileRevertDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRevertDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRevertDetails:other];
}

- (BOOL)isEqualToFileRevertDetails:(DBTEAMLOGFileRevertDetails *)aFileRevertDetails {
  if (self == aFileRevertDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRevertDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileRevertDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGFileRevertDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileRevertDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileRollbackChangesDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileRollbackChangesDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileRollbackChangesDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileRollbackChangesDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileRollbackChangesDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileRollbackChangesDetails:other];
}

- (BOOL)isEqualToFileRollbackChangesDetails:(DBTEAMLOGFileRollbackChangesDetails *)aFileRollbackChangesDetails {
  if (self == aFileRollbackChangesDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileRollbackChangesDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileRollbackChangesDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGFileRollbackChangesDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGFileRollbackChangesDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileSaveCopyReferenceDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileSaveCopyReferenceDetails

#pragma mark - Constructors

- (instancetype)initWithSrcIndex:(NSNumber *)srcIndex destIndex:(NSNumber *)destIndex {

  self = [super init];
  if (self) {
    _srcIndex = srcIndex;
    _destIndex = destIndex;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileSaveCopyReferenceDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileSaveCopyReferenceDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileSaveCopyReferenceDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.srcIndex hash];
  result = prime * result + [self.destIndex hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileSaveCopyReferenceDetails:other];
}

- (BOOL)isEqualToFileSaveCopyReferenceDetails:(DBTEAMLOGFileSaveCopyReferenceDetails *)aFileSaveCopyReferenceDetails {
  if (self == aFileSaveCopyReferenceDetails) {
    return YES;
  }
  if (![self.srcIndex isEqual:aFileSaveCopyReferenceDetails.srcIndex]) {
    return NO;
  }
  if (![self.destIndex isEqual:aFileSaveCopyReferenceDetails.destIndex]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileSaveCopyReferenceDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileSaveCopyReferenceDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"src_index"] = valueObj.srcIndex;
  jsonDict[@"dest_index"] = valueObj.destIndex;

  return jsonDict;
}

+ (DBTEAMLOGFileSaveCopyReferenceDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *srcIndex = valueDict[@"src_index"];
  NSNumber *destIndex = valueDict[@"dest_index"];

  return [[DBTEAMLOGFileSaveCopyReferenceDetails alloc] initWithSrcIndex:srcIndex destIndex:destIndex];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileUnlikeCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGFileUnlikeCommentDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex commentText:(NSString *)commentText {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex {
  return [self initWithTargetIndex:targetIndex commentText:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFileUnlikeCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFileUnlikeCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFileUnlikeCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  if (self.commentText) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFileUnlikeCommentDetails:other];
}

- (BOOL)isEqualToFileUnlikeCommentDetails:(DBTEAMLOGFileUnlikeCommentDetails *)aFileUnlikeCommentDetails {
  if (self == aFileUnlikeCommentDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aFileUnlikeCommentDetails.targetIndex]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aFileUnlikeCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFileUnlikeCommentDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFileUnlikeCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return jsonDict;
}

+ (DBTEAMLOGFileUnlikeCommentDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGFileUnlikeCommentDetails alloc] initWithTargetIndex:targetIndex commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGFileOrFolderLogInfo.h"
#import "DBTEAMLOGFolderLogInfo.h"
#import "DBTEAMLOGPathLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGFolderLogInfo

#pragma mark - Constructors

- (instancetype)initWithPath:(DBTEAMLOGPathLogInfo *)path
                 displayName:(NSString *)displayName
                      fileId:(NSString *)fileId {

  self = [super initWithPath:path displayName:displayName fileId:fileId];
  if (self) {
  }
  return self;
}

- (instancetype)initWithPath:(DBTEAMLOGPathLogInfo *)path {
  return [self initWithPath:path displayName:nil fileId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGFolderLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGFolderLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGFolderLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.path hash];
  if (self.displayName) {
    result = prime * result + [self.displayName hash];
  }
  if (self.fileId) {
    result = prime * result + [self.fileId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFolderLogInfo:other];
}

- (BOOL)isEqualToFolderLogInfo:(DBTEAMLOGFolderLogInfo *)aFolderLogInfo {
  if (self == aFolderLogInfo) {
    return YES;
  }
  if (![self.path isEqual:aFolderLogInfo.path]) {
    return NO;
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aFolderLogInfo.displayName]) {
      return NO;
    }
  }
  if (self.fileId) {
    if (![self.fileId isEqual:aFolderLogInfo.fileId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGFolderLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGFolderLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"path"] = [DBTEAMLOGPathLogInfoSerializer serialize:valueObj.path];
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }
  if (valueObj.fileId) {
    jsonDict[@"file_id"] = valueObj.fileId;
  }

  return jsonDict;
}

+ (DBTEAMLOGFolderLogInfo *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGPathLogInfo *path = [DBTEAMLOGPathLogInfoSerializer deserialize:valueDict[@"path"]];
  NSString *displayName = valueDict[@"display_name"] ?: nil;
  NSString *fileId = valueDict[@"file_id"] ?: nil;

  return [[DBTEAMLOGFolderLogInfo alloc] initWithPath:path displayName:displayName fileId:fileId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGeoLocationLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGGeoLocationLogInfo

#pragma mark - Constructors

- (instancetype)initWithIpAddress:(NSString *)ipAddress
                             city:(NSString *)city
                           region:(NSString *)region
                          country:(NSString *)country {
  [DBStoneValidators stringValidator:nil maxLength:nil
                             pattern:@"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$"](ipAddress);

  self = [super init];
  if (self) {
    _city = city;
    _region = region;
    _country = country;
    _ipAddress = ipAddress;
  }
  return self;
}

- (instancetype)initWithIpAddress:(NSString *)ipAddress {
  return [self initWithIpAddress:ipAddress city:nil region:nil country:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGeoLocationLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGeoLocationLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGeoLocationLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.ipAddress hash];
  if (self.city) {
    result = prime * result + [self.city hash];
  }
  if (self.region) {
    result = prime * result + [self.region hash];
  }
  if (self.country) {
    result = prime * result + [self.country hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGeoLocationLogInfo:other];
}

- (BOOL)isEqualToGeoLocationLogInfo:(DBTEAMLOGGeoLocationLogInfo *)aGeoLocationLogInfo {
  if (self == aGeoLocationLogInfo) {
    return YES;
  }
  if (![self.ipAddress isEqual:aGeoLocationLogInfo.ipAddress]) {
    return NO;
  }
  if (self.city) {
    if (![self.city isEqual:aGeoLocationLogInfo.city]) {
      return NO;
    }
  }
  if (self.region) {
    if (![self.region isEqual:aGeoLocationLogInfo.region]) {
      return NO;
    }
  }
  if (self.country) {
    if (![self.country isEqual:aGeoLocationLogInfo.country]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGeoLocationLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGeoLocationLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"ip_address"] = valueObj.ipAddress;
  if (valueObj.city) {
    jsonDict[@"city"] = valueObj.city;
  }
  if (valueObj.region) {
    jsonDict[@"region"] = valueObj.region;
  }
  if (valueObj.country) {
    jsonDict[@"country"] = valueObj.country;
  }

  return jsonDict;
}

+ (DBTEAMLOGGeoLocationLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *ipAddress = valueDict[@"ip_address"];
  NSString *city = valueDict[@"city"] ?: nil;
  NSString *region = valueDict[@"region"] ?: nil;
  NSString *country = valueDict[@"country"] ?: nil;

  return [[DBTEAMLOGGeoLocationLogInfo alloc] initWithIpAddress:ipAddress city:city region:region country:country];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMCOMMONTimeRange.h"
#import "DBTEAMLOGGetTeamEventsArg.h"

#pragma mark - API Object

@implementation DBTEAMLOGGetTeamEventsArg

#pragma mark - Constructors

- (instancetype)initWithLimit:(NSNumber *)limit accountId:(NSString *)accountId time:(DBTEAMCOMMONTimeRange *)time {
  [DBStoneValidators numericValidator:@(1) maxValue:@(1000)](limit ?: @(1000));
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(40) maxLength:@(40) pattern:nil]](accountId);

  self = [super init];
  if (self) {
    _limit = limit ?: @(1000);
    _accountId = accountId;
    _time = time;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithLimit:nil accountId:nil time:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGetTeamEventsArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGetTeamEventsArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGetTeamEventsArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.limit hash];
  if (self.accountId) {
    result = prime * result + [self.accountId hash];
  }
  if (self.time) {
    result = prime * result + [self.time hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetTeamEventsArg:other];
}

- (BOOL)isEqualToGetTeamEventsArg:(DBTEAMLOGGetTeamEventsArg *)aGetTeamEventsArg {
  if (self == aGetTeamEventsArg) {
    return YES;
  }
  if (![self.limit isEqual:aGetTeamEventsArg.limit]) {
    return NO;
  }
  if (self.accountId) {
    if (![self.accountId isEqual:aGetTeamEventsArg.accountId]) {
      return NO;
    }
  }
  if (self.time) {
    if (![self.time isEqual:aGetTeamEventsArg.time]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGetTeamEventsArgSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGetTeamEventsArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"limit"] = valueObj.limit;
  if (valueObj.accountId) {
    jsonDict[@"account_id"] = valueObj.accountId;
  }
  if (valueObj.time) {
    jsonDict[@"time"] = [DBTEAMCOMMONTimeRangeSerializer serialize:valueObj.time];
  }

  return jsonDict;
}

+ (DBTEAMLOGGetTeamEventsArg *)deserialize:(NSDictionary *)valueDict {
  NSNumber *limit = valueDict[@"limit"] ?: @(1000);
  NSString *accountId = valueDict[@"account_id"] ?: nil;
  DBTEAMCOMMONTimeRange *time =
      valueDict[@"time"] ? [DBTEAMCOMMONTimeRangeSerializer deserialize:valueDict[@"time"]] : nil;

  return [[DBTEAMLOGGetTeamEventsArg alloc] initWithLimit:limit accountId:accountId time:time];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGetTeamEventsContinueArg.h"

#pragma mark - API Object

@implementation DBTEAMLOGGetTeamEventsContinueArg

#pragma mark - Constructors

- (instancetype)initWithCursor:(NSString *)cursor {

  self = [super init];
  if (self) {
    _cursor = cursor;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGetTeamEventsContinueArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGetTeamEventsContinueArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGetTeamEventsContinueArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.cursor hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetTeamEventsContinueArg:other];
}

- (BOOL)isEqualToGetTeamEventsContinueArg:(DBTEAMLOGGetTeamEventsContinueArg *)aGetTeamEventsContinueArg {
  if (self == aGetTeamEventsContinueArg) {
    return YES;
  }
  if (![self.cursor isEqual:aGetTeamEventsContinueArg.cursor]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGetTeamEventsContinueArgSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGetTeamEventsContinueArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"cursor"] = valueObj.cursor;

  return jsonDict;
}

+ (DBTEAMLOGGetTeamEventsContinueArg *)deserialize:(NSDictionary *)valueDict {
  NSString *cursor = valueDict[@"cursor"];

  return [[DBTEAMLOGGetTeamEventsContinueArg alloc] initWithCursor:cursor];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGetTeamEventsContinueError.h"

#pragma mark - API Object

@implementation DBTEAMLOGGetTeamEventsContinueError

#pragma mark - Constructors

- (instancetype)initWithBadCursor {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGetTeamEventsContinueErrorBadCursor;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGetTeamEventsContinueErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isBadCursor {
  return _tag == DBTEAMLOGGetTeamEventsContinueErrorBadCursor;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGGetTeamEventsContinueErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGGetTeamEventsContinueErrorBadCursor:
    return @"DBTEAMLOGGetTeamEventsContinueErrorBadCursor";
  case DBTEAMLOGGetTeamEventsContinueErrorOther:
    return @"DBTEAMLOGGetTeamEventsContinueErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGetTeamEventsContinueErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGetTeamEventsContinueErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGetTeamEventsContinueErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGGetTeamEventsContinueErrorBadCursor:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGGetTeamEventsContinueErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetTeamEventsContinueError:other];
}

- (BOOL)isEqualToGetTeamEventsContinueError:(DBTEAMLOGGetTeamEventsContinueError *)aGetTeamEventsContinueError {
  if (self == aGetTeamEventsContinueError) {
    return YES;
  }
  if (self.tag != aGetTeamEventsContinueError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGGetTeamEventsContinueErrorBadCursor:
    return [[self tagName] isEqual:[aGetTeamEventsContinueError tagName]];
  case DBTEAMLOGGetTeamEventsContinueErrorOther:
    return [[self tagName] isEqual:[aGetTeamEventsContinueError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGetTeamEventsContinueErrorSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGetTeamEventsContinueError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isBadCursor]) {
    jsonDict[@".tag"] = @"bad_cursor";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGGetTeamEventsContinueError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"bad_cursor"]) {
    return [[DBTEAMLOGGetTeamEventsContinueError alloc] initWithBadCursor];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGGetTeamEventsContinueError alloc] initWithOther];
  } else {
    return [[DBTEAMLOGGetTeamEventsContinueError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGetTeamEventsError.h"

#pragma mark - API Object

@implementation DBTEAMLOGGetTeamEventsError

#pragma mark - Constructors

- (instancetype)initWithAccountIdNotFound {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGetTeamEventsErrorAccountIdNotFound;
  }
  return self;
}

- (instancetype)initWithInvalidTimeRange {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGetTeamEventsErrorInvalidTimeRange;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGetTeamEventsErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAccountIdNotFound {
  return _tag == DBTEAMLOGGetTeamEventsErrorAccountIdNotFound;
}

- (BOOL)isInvalidTimeRange {
  return _tag == DBTEAMLOGGetTeamEventsErrorInvalidTimeRange;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGGetTeamEventsErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGGetTeamEventsErrorAccountIdNotFound:
    return @"DBTEAMLOGGetTeamEventsErrorAccountIdNotFound";
  case DBTEAMLOGGetTeamEventsErrorInvalidTimeRange:
    return @"DBTEAMLOGGetTeamEventsErrorInvalidTimeRange";
  case DBTEAMLOGGetTeamEventsErrorOther:
    return @"DBTEAMLOGGetTeamEventsErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGetTeamEventsErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGetTeamEventsErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGetTeamEventsErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGGetTeamEventsErrorAccountIdNotFound:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGGetTeamEventsErrorInvalidTimeRange:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGGetTeamEventsErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetTeamEventsError:other];
}

- (BOOL)isEqualToGetTeamEventsError:(DBTEAMLOGGetTeamEventsError *)aGetTeamEventsError {
  if (self == aGetTeamEventsError) {
    return YES;
  }
  if (self.tag != aGetTeamEventsError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGGetTeamEventsErrorAccountIdNotFound:
    return [[self tagName] isEqual:[aGetTeamEventsError tagName]];
  case DBTEAMLOGGetTeamEventsErrorInvalidTimeRange:
    return [[self tagName] isEqual:[aGetTeamEventsError tagName]];
  case DBTEAMLOGGetTeamEventsErrorOther:
    return [[self tagName] isEqual:[aGetTeamEventsError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGetTeamEventsErrorSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGetTeamEventsError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccountIdNotFound]) {
    jsonDict[@".tag"] = @"account_id_not_found";
  } else if ([valueObj isInvalidTimeRange]) {
    jsonDict[@".tag"] = @"invalid_time_range";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGGetTeamEventsError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"account_id_not_found"]) {
    return [[DBTEAMLOGGetTeamEventsError alloc] initWithAccountIdNotFound];
  } else if ([tag isEqualToString:@"invalid_time_range"]) {
    return [[DBTEAMLOGGetTeamEventsError alloc] initWithInvalidTimeRange];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGGetTeamEventsError alloc] initWithOther];
  } else {
    return [[DBTEAMLOGGetTeamEventsError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGetTeamEventsResult.h"
#import "DBTEAMLOGTeamEvent.h"

#pragma mark - API Object

@implementation DBTEAMLOGGetTeamEventsResult

#pragma mark - Constructors

- (instancetype)initWithEvents:(NSArray<DBTEAMLOGTeamEvent *> *)events
                        cursor:(NSString *)cursor
                       hasMore:(NSNumber *)hasMore {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](events);

  self = [super init];
  if (self) {
    _events = events;
    _cursor = cursor;
    _hasMore = hasMore;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGetTeamEventsResultSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGetTeamEventsResultSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGetTeamEventsResultSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.events hash];
  result = prime * result + [self.cursor hash];
  result = prime * result + [self.hasMore hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetTeamEventsResult:other];
}

- (BOOL)isEqualToGetTeamEventsResult:(DBTEAMLOGGetTeamEventsResult *)aGetTeamEventsResult {
  if (self == aGetTeamEventsResult) {
    return YES;
  }
  if (![self.events isEqual:aGetTeamEventsResult.events]) {
    return NO;
  }
  if (![self.cursor isEqual:aGetTeamEventsResult.cursor]) {
    return NO;
  }
  if (![self.hasMore isEqual:aGetTeamEventsResult.hasMore]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGetTeamEventsResultSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGetTeamEventsResult *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"events"] = [DBArraySerializer serialize:valueObj.events
                                           withBlock:^id(id elem0) {
                                             return [DBTEAMLOGTeamEventSerializer serialize:elem0];
                                           }];
  jsonDict[@"cursor"] = valueObj.cursor;
  jsonDict[@"has_more"] = valueObj.hasMore;

  return jsonDict;
}

+ (DBTEAMLOGGetTeamEventsResult *)deserialize:(NSDictionary *)valueDict {
  NSArray<DBTEAMLOGTeamEvent *> *events =
      [DBArraySerializer deserialize:valueDict[@"events"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMLOGTeamEventSerializer deserialize:elem0];
                           }];
  NSString *cursor = valueDict[@"cursor"];
  NSNumber *hasMore = valueDict[@"has_more"];

  return [[DBTEAMLOGGetTeamEventsResult alloc] initWithEvents:events cursor:cursor hasMore:hasMore];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnableDisableChangePolicy.h"
#import "DBTEAMLOGGoogleSsoChangePolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGGoogleSsoChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue
                    previousValue:(DBTEAMLOGEnableDisableChangePolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGoogleSsoChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGoogleSsoChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGoogleSsoChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGoogleSsoChangePolicyDetails:other];
}

- (BOOL)isEqualToGoogleSsoChangePolicyDetails:(DBTEAMLOGGoogleSsoChangePolicyDetails *)aGoogleSsoChangePolicyDetails {
  if (self == aGoogleSsoChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aGoogleSsoChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aGoogleSsoChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGoogleSsoChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGoogleSsoChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGGoogleSsoChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGEnableDisableChangePolicy *dNewValue =
      [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGEnableDisableChangePolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGGoogleSsoChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupAddExternalIdDetails.h"
#import "DBTEAMLOGGroupLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupAddExternalIdDetails

#pragma mark - Constructors

- (instancetype)initWithGroupInfo:(DBTEAMLOGGroupLogInfo *)groupInfo dNewValue:(NSString *)dNewValue {

  self = [super init];
  if (self) {
    _groupInfo = groupInfo;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupAddExternalIdDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupAddExternalIdDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupAddExternalIdDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.groupInfo hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupAddExternalIdDetails:other];
}

- (BOOL)isEqualToGroupAddExternalIdDetails:(DBTEAMLOGGroupAddExternalIdDetails *)aGroupAddExternalIdDetails {
  if (self == aGroupAddExternalIdDetails) {
    return YES;
  }
  if (![self.groupInfo isEqual:aGroupAddExternalIdDetails.groupInfo]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aGroupAddExternalIdDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupAddExternalIdDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupAddExternalIdDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_info"] = [DBTEAMLOGGroupLogInfoSerializer serialize:valueObj.groupInfo];
  jsonDict[@"new_value"] = valueObj.dNewValue;

  return jsonDict;
}

+ (DBTEAMLOGGroupAddExternalIdDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGGroupLogInfo *groupInfo = [DBTEAMLOGGroupLogInfoSerializer deserialize:valueDict[@"group_info"]];
  NSString *dNewValue = valueDict[@"new_value"];

  return [[DBTEAMLOGGroupAddExternalIdDetails alloc] initWithGroupInfo:groupInfo dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupAddMemberDetails.h"
#import "DBTEAMLOGGroupLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupAddMemberDetails

#pragma mark - Constructors

- (instancetype)initWithGroupInfo:(DBTEAMLOGGroupLogInfo *)groupInfo isGroupOwner:(NSNumber *)isGroupOwner {

  self = [super init];
  if (self) {
    _groupInfo = groupInfo;
    _isGroupOwner = isGroupOwner;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupAddMemberDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupAddMemberDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupAddMemberDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.groupInfo hash];
  result = prime * result + [self.isGroupOwner hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupAddMemberDetails:other];
}

- (BOOL)isEqualToGroupAddMemberDetails:(DBTEAMLOGGroupAddMemberDetails *)aGroupAddMemberDetails {
  if (self == aGroupAddMemberDetails) {
    return YES;
  }
  if (![self.groupInfo isEqual:aGroupAddMemberDetails.groupInfo]) {
    return NO;
  }
  if (![self.isGroupOwner isEqual:aGroupAddMemberDetails.isGroupOwner]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupAddMemberDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupAddMemberDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_info"] = [DBTEAMLOGGroupLogInfoSerializer serialize:valueObj.groupInfo];
  jsonDict[@"is_group_owner"] = valueObj.isGroupOwner;

  return jsonDict;
}

+ (DBTEAMLOGGroupAddMemberDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGGroupLogInfo *groupInfo = [DBTEAMLOGGroupLogInfoSerializer deserialize:valueDict[@"group_info"]];
  NSNumber *isGroupOwner = valueDict[@"is_group_owner"];

  return [[DBTEAMLOGGroupAddMemberDetails alloc] initWithGroupInfo:groupInfo isGroupOwner:isGroupOwner];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupChangeExternalIdDetails.h"
#import "DBTEAMLOGGroupLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupChangeExternalIdDetails

#pragma mark - Constructors

- (instancetype)initWithGroupInfo:(DBTEAMLOGGroupLogInfo *)groupInfo
                        dNewValue:(NSString *)dNewValue
                    previousValue:(NSString *)previousValue {

  self = [super init];
  if (self) {
    _groupInfo = groupInfo;
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupChangeExternalIdDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupChangeExternalIdDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupChangeExternalIdDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.groupInfo hash];
  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupChangeExternalIdDetails:other];
}

- (BOOL)isEqualToGroupChangeExternalIdDetails:(DBTEAMLOGGroupChangeExternalIdDetails *)aGroupChangeExternalIdDetails {
  if (self == aGroupChangeExternalIdDetails) {
    return YES;
  }
  if (![self.groupInfo isEqual:aGroupChangeExternalIdDetails.groupInfo]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aGroupChangeExternalIdDetails.dNewValue]) {
    return NO;
  }
  if (![self.previousValue isEqual:aGroupChangeExternalIdDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupChangeExternalIdDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupChangeExternalIdDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_info"] = [DBTEAMLOGGroupLogInfoSerializer serialize:valueObj.groupInfo];
  jsonDict[@"new_value"] = valueObj.dNewValue;
  jsonDict[@"previous_value"] = valueObj.previousValue;

  return jsonDict;
}

+ (DBTEAMLOGGroupChangeExternalIdDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGGroupLogInfo *groupInfo = [DBTEAMLOGGroupLogInfoSerializer deserialize:valueDict[@"group_info"]];
  NSString *dNewValue = valueDict[@"new_value"];
  NSString *previousValue = valueDict[@"previous_value"];

  return [[DBTEAMLOGGroupChangeExternalIdDetails alloc] initWithGroupInfo:groupInfo
                                                                dNewValue:dNewValue
                                                            previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupChangeManagementTypeDetails.h"
#import "DBTEAMLOGGroupLogInfo.h"
#import "DBTEAMLOGGroupManagementType.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupChangeManagementTypeDetails

#pragma mark - Constructors

- (instancetype)initWithGroupInfo:(DBTEAMLOGGroupLogInfo *)groupInfo
                        dNewValue:(DBTEAMLOGGroupManagementType *)dNewValue
                    previousValue:(DBTEAMLOGGroupManagementType *)previousValue {

  self = [super init];
  if (self) {
    _groupInfo = groupInfo;
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithGroupInfo:(DBTEAMLOGGroupLogInfo *)groupInfo
                        dNewValue:(DBTEAMLOGGroupManagementType *)dNewValue {
  return [self initWithGroupInfo:groupInfo dNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupChangeManagementTypeDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupChangeManagementTypeDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupChangeManagementTypeDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.groupInfo hash];
  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupChangeManagementTypeDetails:other];
}

- (BOOL)isEqualToGroupChangeManagementTypeDetails:
    (DBTEAMLOGGroupChangeManagementTypeDetails *)aGroupChangeManagementTypeDetails {
  if (self == aGroupChangeManagementTypeDetails) {
    return YES;
  }
  if (![self.groupInfo isEqual:aGroupChangeManagementTypeDetails.groupInfo]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aGroupChangeManagementTypeDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aGroupChangeManagementTypeDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupChangeManagementTypeDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupChangeManagementTypeDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_info"] = [DBTEAMLOGGroupLogInfoSerializer serialize:valueObj.groupInfo];
  jsonDict[@"new_value"] = [DBTEAMLOGGroupManagementTypeSerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGGroupManagementTypeSerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGGroupChangeManagementTypeDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGGroupLogInfo *groupInfo = [DBTEAMLOGGroupLogInfoSerializer deserialize:valueDict[@"group_info"]];
  DBTEAMLOGGroupManagementType *dNewValue =
      [DBTEAMLOGGroupManagementTypeSerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGGroupManagementType *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGGroupManagementTypeSerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGGroupChangeManagementTypeDetails alloc] initWithGroupInfo:groupInfo
                                                                    dNewValue:dNewValue
                                                                previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupChangeMemberRoleDetails.h"
#import "DBTEAMLOGGroupLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupChangeMemberRoleDetails

#pragma mark - Constructors

- (instancetype)initWithGroupInfo:(DBTEAMLOGGroupLogInfo *)groupInfo isGroupOwner:(NSNumber *)isGroupOwner {

  self = [super init];
  if (self) {
    _groupInfo = groupInfo;
    _isGroupOwner = isGroupOwner;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupChangeMemberRoleDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupChangeMemberRoleDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupChangeMemberRoleDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.groupInfo hash];
  result = prime * result + [self.isGroupOwner hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupChangeMemberRoleDetails:other];
}

- (BOOL)isEqualToGroupChangeMemberRoleDetails:(DBTEAMLOGGroupChangeMemberRoleDetails *)aGroupChangeMemberRoleDetails {
  if (self == aGroupChangeMemberRoleDetails) {
    return YES;
  }
  if (![self.groupInfo isEqual:aGroupChangeMemberRoleDetails.groupInfo]) {
    return NO;
  }
  if (![self.isGroupOwner isEqual:aGroupChangeMemberRoleDetails.isGroupOwner]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupChangeMemberRoleDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupChangeMemberRoleDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_info"] = [DBTEAMLOGGroupLogInfoSerializer serialize:valueObj.groupInfo];
  jsonDict[@"is_group_owner"] = valueObj.isGroupOwner;

  return jsonDict;
}

+ (DBTEAMLOGGroupChangeMemberRoleDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGGroupLogInfo *groupInfo = [DBTEAMLOGGroupLogInfoSerializer deserialize:valueDict[@"group_info"]];
  NSNumber *isGroupOwner = valueDict[@"is_group_owner"];

  return [[DBTEAMLOGGroupChangeMemberRoleDetails alloc] initWithGroupInfo:groupInfo isGroupOwner:isGroupOwner];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupCreateDetails.h"
#import "DBTEAMLOGGroupJoinPolicy.h"
#import "DBTEAMLOGGroupLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupCreateDetails

#pragma mark - Constructors

- (instancetype)initWithGroupInfo:(DBTEAMLOGGroupLogInfo *)groupInfo
                       joinPolicy:(DBTEAMLOGGroupJoinPolicy *)joinPolicy
                   isAdminManaged:(NSNumber *)isAdminManaged {

  self = [super init];
  if (self) {
    _groupInfo = groupInfo;
    _isAdminManaged = isAdminManaged;
    _joinPolicy = joinPolicy;
  }
  return self;
}

- (instancetype)initWithGroupInfo:(DBTEAMLOGGroupLogInfo *)groupInfo joinPolicy:(DBTEAMLOGGroupJoinPolicy *)joinPolicy {
  return [self initWithGroupInfo:groupInfo joinPolicy:joinPolicy isAdminManaged:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupCreateDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupCreateDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupCreateDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.groupInfo hash];
  result = prime * result + [self.joinPolicy hash];
  if (self.isAdminManaged) {
    result = prime * result + [self.isAdminManaged hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupCreateDetails:other];
}

- (BOOL)isEqualToGroupCreateDetails:(DBTEAMLOGGroupCreateDetails *)aGroupCreateDetails {
  if (self == aGroupCreateDetails) {
    return YES;
  }
  if (![self.groupInfo isEqual:aGroupCreateDetails.groupInfo]) {
    return NO;
  }
  if (![self.joinPolicy isEqual:aGroupCreateDetails.joinPolicy]) {
    return NO;
  }
  if (self.isAdminManaged) {
    if (![self.isAdminManaged isEqual:aGroupCreateDetails.isAdminManaged]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupCreateDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupCreateDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_info"] = [DBTEAMLOGGroupLogInfoSerializer serialize:valueObj.groupInfo];
  jsonDict[@"join_policy"] = [DBTEAMLOGGroupJoinPolicySerializer serialize:valueObj.joinPolicy];
  if (valueObj.isAdminManaged) {
    jsonDict[@"is_admin_managed"] = valueObj.isAdminManaged;
  }

  return jsonDict;
}

+ (DBTEAMLOGGroupCreateDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGGroupLogInfo *groupInfo = [DBTEAMLOGGroupLogInfoSerializer deserialize:valueDict[@"group_info"]];
  DBTEAMLOGGroupJoinPolicy *joinPolicy = [DBTEAMLOGGroupJoinPolicySerializer deserialize:valueDict[@"join_policy"]];
  NSNumber *isAdminManaged = valueDict[@"is_admin_managed"] ?: nil;

  return [[DBTEAMLOGGroupCreateDetails alloc] initWithGroupInfo:groupInfo
                                                     joinPolicy:joinPolicy
                                                 isAdminManaged:isAdminManaged];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupDeleteDetails.h"
#import "DBTEAMLOGGroupLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupDeleteDetails

#pragma mark - Constructors

- (instancetype)initWithGroupInfo:(DBTEAMLOGGroupLogInfo *)groupInfo isAdminManaged:(NSNumber *)isAdminManaged {

  self = [super init];
  if (self) {
    _groupInfo = groupInfo;
    _isAdminManaged = isAdminManaged;
  }
  return self;
}

- (instancetype)initWithGroupInfo:(DBTEAMLOGGroupLogInfo *)groupInfo {
  return [self initWithGroupInfo:groupInfo isAdminManaged:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupDeleteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupDeleteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupDeleteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.groupInfo hash];
  if (self.isAdminManaged) {
    result = prime * result + [self.isAdminManaged hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupDeleteDetails:other];
}

- (BOOL)isEqualToGroupDeleteDetails:(DBTEAMLOGGroupDeleteDetails *)aGroupDeleteDetails {
  if (self == aGroupDeleteDetails) {
    return YES;
  }
  if (![self.groupInfo isEqual:aGroupDeleteDetails.groupInfo]) {
    return NO;
  }
  if (self.isAdminManaged) {
    if (![self.isAdminManaged isEqual:aGroupDeleteDetails.isAdminManaged]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupDeleteDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupDeleteDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_info"] = [DBTEAMLOGGroupLogInfoSerializer serialize:valueObj.groupInfo];
  if (valueObj.isAdminManaged) {
    jsonDict[@"is_admin_managed"] = valueObj.isAdminManaged;
  }

  return jsonDict;
}

+ (DBTEAMLOGGroupDeleteDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGGroupLogInfo *groupInfo = [DBTEAMLOGGroupLogInfoSerializer deserialize:valueDict[@"group_info"]];
  NSNumber *isAdminManaged = valueDict[@"is_admin_managed"] ?: nil;

  return [[DBTEAMLOGGroupDeleteDetails alloc] initWithGroupInfo:groupInfo isAdminManaged:isAdminManaged];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupDescriptionUpdatedDetails.h"
#import "DBTEAMLOGGroupLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupDescriptionUpdatedDetails

#pragma mark - Constructors

- (instancetype)initWithGroupInfo:(DBTEAMLOGGroupLogInfo *)groupInfo {

  self = [super init];
  if (self) {
    _groupInfo = groupInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupDescriptionUpdatedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupDescriptionUpdatedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupDescriptionUpdatedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.groupInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupDescriptionUpdatedDetails:other];
}

- (BOOL)isEqualToGroupDescriptionUpdatedDetails:
    (DBTEAMLOGGroupDescriptionUpdatedDetails *)aGroupDescriptionUpdatedDetails {
  if (self == aGroupDescriptionUpdatedDetails) {
    return YES;
  }
  if (![self.groupInfo isEqual:aGroupDescriptionUpdatedDetails.groupInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupDescriptionUpdatedDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupDescriptionUpdatedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_info"] = [DBTEAMLOGGroupLogInfoSerializer serialize:valueObj.groupInfo];

  return jsonDict;
}

+ (DBTEAMLOGGroupDescriptionUpdatedDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGGroupLogInfo *groupInfo = [DBTEAMLOGGroupLogInfoSerializer deserialize:valueDict[@"group_info"]];

  return [[DBTEAMLOGGroupDescriptionUpdatedDetails alloc] initWithGroupInfo:groupInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupJoinPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupJoinPolicy

#pragma mark - Constructors

- (instancetype)initWithOpen {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGroupJoinPolicyOpen;
  }
  return self;
}

- (instancetype)initWithRequestToJoin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGroupJoinPolicyRequestToJoin;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGroupJoinPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isOpen {
  return _tag == DBTEAMLOGGroupJoinPolicyOpen;
}

- (BOOL)isRequestToJoin {
  return _tag == DBTEAMLOGGroupJoinPolicyRequestToJoin;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGGroupJoinPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGGroupJoinPolicyOpen:
    return @"DBTEAMLOGGroupJoinPolicyOpen";
  case DBTEAMLOGGroupJoinPolicyRequestToJoin:
    return @"DBTEAMLOGGroupJoinPolicyRequestToJoin";
  case DBTEAMLOGGroupJoinPolicyOther:
    return @"DBTEAMLOGGroupJoinPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupJoinPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupJoinPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupJoinPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGGroupJoinPolicyOpen:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGGroupJoinPolicyRequestToJoin:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGGroupJoinPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupJoinPolicy:other];
}

- (BOOL)isEqualToGroupJoinPolicy:(DBTEAMLOGGroupJoinPolicy *)aGroupJoinPolicy {
  if (self == aGroupJoinPolicy) {
    return YES;
  }
  if (self.tag != aGroupJoinPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGGroupJoinPolicyOpen:
    return [[self tagName] isEqual:[aGroupJoinPolicy tagName]];
  case DBTEAMLOGGroupJoinPolicyRequestToJoin:
    return [[self tagName] isEqual:[aGroupJoinPolicy tagName]];
  case DBTEAMLOGGroupJoinPolicyOther:
    return [[self tagName] isEqual:[aGroupJoinPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupJoinPolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupJoinPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isOpen]) {
    jsonDict[@".tag"] = @"open";
  } else if ([valueObj isRequestToJoin]) {
    jsonDict[@".tag"] = @"request_to_join";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGGroupJoinPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"open"]) {
    return [[DBTEAMLOGGroupJoinPolicy alloc] initWithOpen];
  } else if ([tag isEqualToString:@"request_to_join"]) {
    return [[DBTEAMLOGGroupJoinPolicy alloc] initWithRequestToJoin];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGGroupJoinPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGGroupJoinPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupJoinPolicy.h"
#import "DBTEAMLOGGroupJoinPolicyUpdatedDetails.h"
#import "DBTEAMLOGGroupLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupJoinPolicyUpdatedDetails

#pragma mark - Constructors

- (instancetype)initWithGroupInfo:(DBTEAMLOGGroupLogInfo *)groupInfo
                       joinPolicy:(DBTEAMLOGGroupJoinPolicy *)joinPolicy
                   isAdminManaged:(NSNumber *)isAdminManaged {

  self = [super init];
  if (self) {
    _groupInfo = groupInfo;
    _isAdminManaged = isAdminManaged;
    _joinPolicy = joinPolicy;
  }
  return self;
}

- (instancetype)initWithGroupInfo:(DBTEAMLOGGroupLogInfo *)groupInfo joinPolicy:(DBTEAMLOGGroupJoinPolicy *)joinPolicy {
  return [self initWithGroupInfo:groupInfo joinPolicy:joinPolicy isAdminManaged:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupJoinPolicyUpdatedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupJoinPolicyUpdatedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupJoinPolicyUpdatedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.groupInfo hash];
  result = prime * result + [self.joinPolicy hash];
  if (self.isAdminManaged) {
    result = prime * result + [self.isAdminManaged hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupJoinPolicyUpdatedDetails:other];
}

- (BOOL)isEqualToGroupJoinPolicyUpdatedDetails:
    (DBTEAMLOGGroupJoinPolicyUpdatedDetails *)aGroupJoinPolicyUpdatedDetails {
  if (self == aGroupJoinPolicyUpdatedDetails) {
    return YES;
  }
  if (![self.groupInfo isEqual:aGroupJoinPolicyUpdatedDetails.groupInfo]) {
    return NO;
  }
  if (![self.joinPolicy isEqual:aGroupJoinPolicyUpdatedDetails.joinPolicy]) {
    return NO;
  }
  if (self.isAdminManaged) {
    if (![self.isAdminManaged isEqual:aGroupJoinPolicyUpdatedDetails.isAdminManaged]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupJoinPolicyUpdatedDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupJoinPolicyUpdatedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_info"] = [DBTEAMLOGGroupLogInfoSerializer serialize:valueObj.groupInfo];
  jsonDict[@"join_policy"] = [DBTEAMLOGGroupJoinPolicySerializer serialize:valueObj.joinPolicy];
  if (valueObj.isAdminManaged) {
    jsonDict[@"is_admin_managed"] = valueObj.isAdminManaged;
  }

  return jsonDict;
}

+ (DBTEAMLOGGroupJoinPolicyUpdatedDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGGroupLogInfo *groupInfo = [DBTEAMLOGGroupLogInfoSerializer deserialize:valueDict[@"group_info"]];
  DBTEAMLOGGroupJoinPolicy *joinPolicy = [DBTEAMLOGGroupJoinPolicySerializer deserialize:valueDict[@"join_policy"]];
  NSNumber *isAdminManaged = valueDict[@"is_admin_managed"] ?: nil;

  return [[DBTEAMLOGGroupJoinPolicyUpdatedDetails alloc] initWithGroupInfo:groupInfo
                                                                joinPolicy:joinPolicy
                                                            isAdminManaged:isAdminManaged];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupLogInfo

#pragma mark - Constructors

- (instancetype)initWithDisplayName:(NSString *)displayName
                            groupId:(NSString *)groupId
                         externalId:(NSString *)externalId {

  self = [super init];
  if (self) {
    _groupId = groupId;
    _displayName = displayName;
    _externalId = externalId;
  }
  return self;
}

- (instancetype)initWithDisplayName:(NSString *)displayName {
  return [self initWithDisplayName:displayName groupId:nil externalId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.displayName hash];
  if (self.groupId) {
    result = prime * result + [self.groupId hash];
  }
  if (self.externalId) {
    result = prime * result + [self.externalId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupLogInfo:other];
}

- (BOOL)isEqualToGroupLogInfo:(DBTEAMLOGGroupLogInfo *)aGroupLogInfo {
  if (self == aGroupLogInfo) {
    return YES;
  }
  if (![self.displayName isEqual:aGroupLogInfo.displayName]) {
    return NO;
  }
  if (self.groupId) {
    if (![self.groupId isEqual:aGroupLogInfo.groupId]) {
      return NO;
    }
  }
  if (self.externalId) {
    if (![self.externalId isEqual:aGroupLogInfo.externalId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"display_name"] = valueObj.displayName;
  if (valueObj.groupId) {
    jsonDict[@"group_id"] = valueObj.groupId;
  }
  if (valueObj.externalId) {
    jsonDict[@"external_id"] = valueObj.externalId;
  }

  return jsonDict;
}

+ (DBTEAMLOGGroupLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *displayName = valueDict[@"display_name"];
  NSString *groupId = valueDict[@"group_id"] ?: nil;
  NSString *externalId = valueDict[@"external_id"] ?: nil;

  return [[DBTEAMLOGGroupLogInfo alloc] initWithDisplayName:displayName groupId:groupId externalId:externalId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupManagementType.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupManagementType

#pragma mark - Constructors

- (instancetype)initWithAdminManagementGroup {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGroupManagementTypeAdminManagementGroup;
  }
  return self;
}

- (instancetype)initWithMemberManagementGroup {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGroupManagementTypeMemberManagementGroup;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGroupManagementTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAdminManagementGroup {
  return _tag == DBTEAMLOGGroupManagementTypeAdminManagementGroup;
}

- (BOOL)isMemberManagementGroup {
  return _tag == DBTEAMLOGGroupManagementTypeMemberManagementGroup;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGGroupManagementTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGGroupManagementTypeAdminManagementGroup:
    return @"DBTEAMLOGGroupManagementTypeAdminManagementGroup";
  case DBTEAMLOGGroupManagementTypeMemberManagementGroup:
    return @"DBTEAMLOGGroupManagementTypeMemberManagementGroup";
  case DBTEAMLOGGroupManagementTypeOther:
    return @"DBTEAMLOGGroupManagementTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupManagementTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupManagementTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupManagementTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGGroupManagementTypeAdminManagementGroup:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGGroupManagementTypeMemberManagementGroup:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGGroupManagementTypeOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupManagementType:other];
}

- (BOOL)isEqualToGroupManagementType:(DBTEAMLOGGroupManagementType *)aGroupManagementType {
  if (self == aGroupManagementType) {
    return YES;
  }
  if (self.tag != aGroupManagementType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGGroupManagementTypeAdminManagementGroup:
    return [[self tagName] isEqual:[aGroupManagementType tagName]];
  case DBTEAMLOGGroupManagementTypeMemberManagementGroup:
    return [[self tagName] isEqual:[aGroupManagementType tagName]];
  case DBTEAMLOGGroupManagementTypeOther:
    return [[self tagName] isEqual:[aGroupManagementType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupManagementTypeSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupManagementType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAdminManagementGroup]) {
    jsonDict[@".tag"] = @"admin_management_group";
  } else if ([valueObj isMemberManagementGroup]) {
    jsonDict[@".tag"] = @"member_management_group";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGGroupManagementType *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"admin_management_group"]) {
    return [[DBTEAMLOGGroupManagementType alloc] initWithAdminManagementGroup];
  } else if ([tag isEqualToString:@"member_management_group"]) {
    return [[DBTEAMLOGGroupManagementType alloc] initWithMemberManagementGroup];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGGroupManagementType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGGroupManagementType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupLogInfo.h"
#import "DBTEAMLOGGroupMovedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupMovedDetails

#pragma mark - Constructors

- (instancetype)initWithGroupInfo:(DBTEAMLOGGroupLogInfo *)groupInfo {

  self = [super init];
  if (self) {
    _groupInfo = groupInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupMovedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupMovedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupMovedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.groupInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupMovedDetails:other];
}

- (BOOL)isEqualToGroupMovedDetails:(DBTEAMLOGGroupMovedDetails *)aGroupMovedDetails {
  if (self == aGroupMovedDetails) {
    return YES;
  }
  if (![self.groupInfo isEqual:aGroupMovedDetails.groupInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupMovedDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupMovedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_info"] = [DBTEAMLOGGroupLogInfoSerializer serialize:valueObj.groupInfo];

  return jsonDict;
}

+ (DBTEAMLOGGroupMovedDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGGroupLogInfo *groupInfo = [DBTEAMLOGGroupLogInfoSerializer deserialize:valueDict[@"group_info"]];

  return [[DBTEAMLOGGroupMovedDetails alloc] initWithGroupInfo:groupInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupLogInfo.h"
#import "DBTEAMLOGGroupRemoveExternalIdDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupRemoveExternalIdDetails

#pragma mark - Constructors

- (instancetype)initWithGroupInfo:(DBTEAMLOGGroupLogInfo *)groupInfo previousValue:(NSString *)previousValue {

  self = [super init];
  if (self) {
    _groupInfo = groupInfo;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupRemoveExternalIdDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupRemoveExternalIdDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupRemoveExternalIdDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.groupInfo hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupRemoveExternalIdDetails:other];
}

- (BOOL)isEqualToGroupRemoveExternalIdDetails:(DBTEAMLOGGroupRemoveExternalIdDetails *)aGroupRemoveExternalIdDetails {
  if (self == aGroupRemoveExternalIdDetails) {
    return YES;
  }
  if (![self.groupInfo isEqual:aGroupRemoveExternalIdDetails.groupInfo]) {
    return NO;
  }
  if (![self.previousValue isEqual:aGroupRemoveExternalIdDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupRemoveExternalIdDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupRemoveExternalIdDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_info"] = [DBTEAMLOGGroupLogInfoSerializer serialize:valueObj.groupInfo];
  jsonDict[@"previous_value"] = valueObj.previousValue;

  return jsonDict;
}

+ (DBTEAMLOGGroupRemoveExternalIdDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGGroupLogInfo *groupInfo = [DBTEAMLOGGroupLogInfoSerializer deserialize:valueDict[@"group_info"]];
  NSString *previousValue = valueDict[@"previous_value"];

  return [[DBTEAMLOGGroupRemoveExternalIdDetails alloc] initWithGroupInfo:groupInfo previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupLogInfo.h"
#import "DBTEAMLOGGroupRemoveMemberDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupRemoveMemberDetails

#pragma mark - Constructors

- (instancetype)initWithGroupInfo:(DBTEAMLOGGroupLogInfo *)groupInfo {

  self = [super init];
  if (self) {
    _groupInfo = groupInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupRemoveMemberDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupRemoveMemberDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupRemoveMemberDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.groupInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupRemoveMemberDetails:other];
}

- (BOOL)isEqualToGroupRemoveMemberDetails:(DBTEAMLOGGroupRemoveMemberDetails *)aGroupRemoveMemberDetails {
  if (self == aGroupRemoveMemberDetails) {
    return YES;
  }
  if (![self.groupInfo isEqual:aGroupRemoveMemberDetails.groupInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupRemoveMemberDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupRemoveMemberDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_info"] = [DBTEAMLOGGroupLogInfoSerializer serialize:valueObj.groupInfo];

  return jsonDict;
}

+ (DBTEAMLOGGroupRemoveMemberDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGGroupLogInfo *groupInfo = [DBTEAMLOGGroupLogInfoSerializer deserialize:valueDict[@"group_info"]];

  return [[DBTEAMLOGGroupRemoveMemberDetails alloc] initWithGroupInfo:groupInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupLogInfo.h"
#import "DBTEAMLOGGroupRenameDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupRenameDetails

#pragma mark - Constructors

- (instancetype)initWithGroupInfo:(DBTEAMLOGGroupLogInfo *)groupInfo previousValue:(NSString *)previousValue {

  self = [super init];
  if (self) {
    _groupInfo = groupInfo;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupRenameDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupRenameDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupRenameDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.groupInfo hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupRenameDetails:other];
}

- (BOOL)isEqualToGroupRenameDetails:(DBTEAMLOGGroupRenameDetails *)aGroupRenameDetails {
  if (self == aGroupRenameDetails) {
    return YES;
  }
  if (![self.groupInfo isEqual:aGroupRenameDetails.groupInfo]) {
    return NO;
  }
  if (![self.previousValue isEqual:aGroupRenameDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupRenameDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupRenameDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"group_info"] = [DBTEAMLOGGroupLogInfoSerializer serialize:valueObj.groupInfo];
  jsonDict[@"previous_value"] = valueObj.previousValue;

  return jsonDict;
}

+ (DBTEAMLOGGroupRenameDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGGroupLogInfo *groupInfo = [DBTEAMLOGGroupLogInfoSerializer deserialize:valueDict[@"group_info"]];
  NSString *previousValue = valueDict[@"previous_value"];

  return [[DBTEAMLOGGroupRenameDetails alloc] initWithGroupInfo:groupInfo previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupUserManagementChangePolicyDetails.h"
#import "DBTEAMLOGGroupsUserManagementPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupUserManagementChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGGroupsUserManagementPolicy *)dNewValue
                    previousValue:(DBTEAMLOGGroupsUserManagementPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGGroupsUserManagementPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupUserManagementChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupUserManagementChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupUserManagementChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupUserManagementChangePolicyDetails:other];
}

- (BOOL)isEqualToGroupUserManagementChangePolicyDetails:
    (DBTEAMLOGGroupUserManagementChangePolicyDetails *)aGroupUserManagementChangePolicyDetails {
  if (self == aGroupUserManagementChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aGroupUserManagementChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aGroupUserManagementChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupUserManagementChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupUserManagementChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGGroupsUserManagementPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGGroupsUserManagementPolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGGroupUserManagementChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGGroupsUserManagementPolicy *dNewValue =
      [DBTEAMLOGGroupsUserManagementPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGGroupsUserManagementPolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGGroupsUserManagementPolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return
      [[DBTEAMLOGGroupUserManagementChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupsUserManagementPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGGroupsUserManagementPolicy

#pragma mark - Constructors

- (instancetype)initWithAllUsers {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGroupsUserManagementPolicyAllUsers;
  }
  return self;
}

- (instancetype)initWithOnlyAdmins {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGroupsUserManagementPolicyOnlyAdmins;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGGroupsUserManagementPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAllUsers {
  return _tag == DBTEAMLOGGroupsUserManagementPolicyAllUsers;
}

- (BOOL)isOnlyAdmins {
  return _tag == DBTEAMLOGGroupsUserManagementPolicyOnlyAdmins;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGGroupsUserManagementPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGGroupsUserManagementPolicyAllUsers:
    return @"DBTEAMLOGGroupsUserManagementPolicyAllUsers";
  case DBTEAMLOGGroupsUserManagementPolicyOnlyAdmins:
    return @"DBTEAMLOGGroupsUserManagementPolicyOnlyAdmins";
  case DBTEAMLOGGroupsUserManagementPolicyOther:
    return @"DBTEAMLOGGroupsUserManagementPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGGroupsUserManagementPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGGroupsUserManagementPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGGroupsUserManagementPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGGroupsUserManagementPolicyAllUsers:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGGroupsUserManagementPolicyOnlyAdmins:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGGroupsUserManagementPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGroupsUserManagementPolicy:other];
}

- (BOOL)isEqualToGroupsUserManagementPolicy:(DBTEAMLOGGroupsUserManagementPolicy *)aGroupsUserManagementPolicy {
  if (self == aGroupsUserManagementPolicy) {
    return YES;
  }
  if (self.tag != aGroupsUserManagementPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGGroupsUserManagementPolicyAllUsers:
    return [[self tagName] isEqual:[aGroupsUserManagementPolicy tagName]];
  case DBTEAMLOGGroupsUserManagementPolicyOnlyAdmins:
    return [[self tagName] isEqual:[aGroupsUserManagementPolicy tagName]];
  case DBTEAMLOGGroupsUserManagementPolicyOther:
    return [[self tagName] isEqual:[aGroupsUserManagementPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGGroupsUserManagementPolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGGroupsUserManagementPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAllUsers]) {
    jsonDict[@".tag"] = @"all_users";
  } else if ([valueObj isOnlyAdmins]) {
    jsonDict[@".tag"] = @"only_admins";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGGroupsUserManagementPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"all_users"]) {
    return [[DBTEAMLOGGroupsUserManagementPolicy alloc] initWithAllUsers];
  } else if ([tag isEqualToString:@"only_admins"]) {
    return [[DBTEAMLOGGroupsUserManagementPolicy alloc] initWithOnlyAdmins];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGGroupsUserManagementPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGGroupsUserManagementPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGHostLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGHostLogInfo

#pragma mark - Constructors

- (instancetype)initWithHostId:(NSNumber *)hostId hostName:(NSString *)hostName {

  self = [super init];
  if (self) {
    _hostId = hostId;
    _hostName = hostName;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithHostId:nil hostName:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGHostLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGHostLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGHostLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.hostId) {
    result = prime * result + [self.hostId hash];
  }
  if (self.hostName) {
    result = prime * result + [self.hostName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToHostLogInfo:other];
}

- (BOOL)isEqualToHostLogInfo:(DBTEAMLOGHostLogInfo *)aHostLogInfo {
  if (self == aHostLogInfo) {
    return YES;
  }
  if (self.hostId) {
    if (![self.hostId isEqual:aHostLogInfo.hostId]) {
      return NO;
    }
  }
  if (self.hostName) {
    if (![self.hostName isEqual:aHostLogInfo.hostName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGHostLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGHostLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.hostId) {
    jsonDict[@"host_id"] = valueObj.hostId;
  }
  if (valueObj.hostName) {
    jsonDict[@"host_name"] = valueObj.hostName;
  }

  return jsonDict;
}

+ (DBTEAMLOGHostLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSNumber *hostId = valueDict[@"host_id"] ?: nil;
  NSString *hostName = valueDict[@"host_name"] ?: nil;

  return [[DBTEAMLOGHostLogInfo alloc] initWithHostId:hostId hostName:hostName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGLinkAudience.h"

#pragma mark - API Object

@implementation DBTEAMLOGLinkAudience

#pragma mark - Constructors

- (instancetype)initWithPublic {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGLinkAudiencePublic;
  }
  return self;
}

- (instancetype)initWithTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGLinkAudienceTeam;
  }
  return self;
}

- (instancetype)initWithMembers {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGLinkAudienceMembers;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGLinkAudienceOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isPublic {
  return _tag == DBTEAMLOGLinkAudiencePublic;
}

- (BOOL)isTeam {
  return _tag == DBTEAMLOGLinkAudienceTeam;
}

- (BOOL)isMembers {
  return _tag == DBTEAMLOGLinkAudienceMembers;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGLinkAudienceOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGLinkAudiencePublic:
    return @"DBTEAMLOGLinkAudiencePublic";
  case DBTEAMLOGLinkAudienceTeam:
    return @"DBTEAMLOGLinkAudienceTeam";
  case DBTEAMLOGLinkAudienceMembers:
    return @"DBTEAMLOGLinkAudienceMembers";
  case DBTEAMLOGLinkAudienceOther:
    return @"DBTEAMLOGLinkAudienceOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGLinkAudienceSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGLinkAudienceSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGLinkAudienceSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGLinkAudiencePublic:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGLinkAudienceTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGLinkAudienceMembers:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGLinkAudienceOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToLinkAudience:other];
}

- (BOOL)isEqualToLinkAudience:(DBTEAMLOGLinkAudience *)aLinkAudience {
  if (self == aLinkAudience) {
    return YES;
  }
  if (self.tag != aLinkAudience.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGLinkAudiencePublic:
    return [[self tagName] isEqual:[aLinkAudience tagName]];
  case DBTEAMLOGLinkAudienceTeam:
    return [[self tagName] isEqual:[aLinkAudience tagName]];
  case DBTEAMLOGLinkAudienceMembers:
    return [[self tagName] isEqual:[aLinkAudience tagName]];
  case DBTEAMLOGLinkAudienceOther:
    return [[self tagName] isEqual:[aLinkAudience tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGLinkAudienceSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGLinkAudience *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isPublic]) {
    jsonDict[@".tag"] = @"public";
  } else if ([valueObj isTeam]) {
    jsonDict[@".tag"] = @"team";
  } else if ([valueObj isMembers]) {
    jsonDict[@".tag"] = @"members";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGLinkAudience *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"public"]) {
    return [[DBTEAMLOGLinkAudience alloc] initWithPublic];
  } else if ([tag isEqualToString:@"team"]) {
    return [[DBTEAMLOGLinkAudience alloc] initWithTeam];
  } else if ([tag isEqualToString:@"members"]) {
    return [[DBTEAMLOGLinkAudience alloc] initWithMembers];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGLinkAudience alloc] initWithOther];
  } else {
    return [[DBTEAMLOGLinkAudience alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGLogoutDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGLogoutDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGLogoutDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGLogoutDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGLogoutDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToLogoutDetails:other];
}

- (BOOL)isEqualToLogoutDetails:(DBTEAMLOGLogoutDetails *)aLogoutDetails {
  if (self == aLogoutDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGLogoutDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGLogoutDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGLogoutDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGLogoutDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberAddNameDetails.h"
#import "DBTEAMLOGUserNameLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberAddNameDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGUserNameLogInfo *)dNewValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberAddNameDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberAddNameDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberAddNameDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberAddNameDetails:other];
}

- (BOOL)isEqualToMemberAddNameDetails:(DBTEAMLOGMemberAddNameDetails *)aMemberAddNameDetails {
  if (self == aMemberAddNameDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aMemberAddNameDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberAddNameDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberAddNameDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGUserNameLogInfoSerializer serialize:valueObj.dNewValue];

  return jsonDict;
}

+ (DBTEAMLOGMemberAddNameDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGUserNameLogInfo *dNewValue = [DBTEAMLOGUserNameLogInfoSerializer deserialize:valueDict[@"new_value"]];

  return [[DBTEAMLOGMemberAddNameDetails alloc] initWithDNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberChangeEmailDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberChangeEmailDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(NSString *)dNewValue previousValue:(NSString *)previousValue {
  [DBStoneValidators stringValidator:nil maxLength:@(255)
                             pattern:@"^['&A-Za-z0-9._%+-]+@[A-Za-z0-9-][A-Za-z0-9.-]*.[A-Za-z]{2,15}$"](dNewValue);
  [DBStoneValidators nullableValidator:[DBStoneValidators stringValidator:nil
                                                                maxLength:@(255)
                                                                  pattern:@"^['&A-Za-z0-9._%+-]+@[A-Za-z0-9-][A-Za-z0-"
                                                                          @"9.-]*.[A-Za-z]{2,15}$"]](previousValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(NSString *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberChangeEmailDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberChangeEmailDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberChangeEmailDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberChangeEmailDetails:other];
}

- (BOOL)isEqualToMemberChangeEmailDetails:(DBTEAMLOGMemberChangeEmailDetails *)aMemberChangeEmailDetails {
  if (self == aMemberChangeEmailDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aMemberChangeEmailDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aMemberChangeEmailDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberChangeEmailDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberChangeEmailDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = valueObj.dNewValue;
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = valueObj.previousValue;
  }

  return jsonDict;
}

+ (DBTEAMLOGMemberChangeEmailDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *dNewValue = valueDict[@"new_value"];
  NSString *previousValue = valueDict[@"previous_value"] ?: nil;

  return [[DBTEAMLOGMemberChangeEmailDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberChangeMembershipTypeDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberChangeMembershipTypeDetails

#pragma mark - Constructors

- (instancetype)initWithPrevMembershipType:(NSNumber *)prevMembershipType
                        dNewMembershipType:(NSNumber *)dNewMembershipType {

  self = [super init];
  if (self) {
    _prevMembershipType = prevMembershipType;
    _dNewMembershipType = dNewMembershipType;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberChangeMembershipTypeDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberChangeMembershipTypeDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberChangeMembershipTypeDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.prevMembershipType hash];
  result = prime * result + [self.dNewMembershipType hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberChangeMembershipTypeDetails:other];
}

- (BOOL)isEqualToMemberChangeMembershipTypeDetails:
    (DBTEAMLOGMemberChangeMembershipTypeDetails *)aMemberChangeMembershipTypeDetails {
  if (self == aMemberChangeMembershipTypeDetails) {
    return YES;
  }
  if (![self.prevMembershipType isEqual:aMemberChangeMembershipTypeDetails.prevMembershipType]) {
    return NO;
  }
  if (![self.dNewMembershipType isEqual:aMemberChangeMembershipTypeDetails.dNewMembershipType]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberChangeMembershipTypeDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberChangeMembershipTypeDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"prev_membership_type"] = valueObj.prevMembershipType;
  jsonDict[@"new_membership_type"] = valueObj.dNewMembershipType;

  return jsonDict;
}

+ (DBTEAMLOGMemberChangeMembershipTypeDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *prevMembershipType = valueDict[@"prev_membership_type"];
  NSNumber *dNewMembershipType = valueDict[@"new_membership_type"];

  return [[DBTEAMLOGMemberChangeMembershipTypeDetails alloc] initWithPrevMembershipType:prevMembershipType
                                                                     dNewMembershipType:dNewMembershipType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberChangeNameDetails.h"
#import "DBTEAMLOGUserNameLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberChangeNameDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGUserNameLogInfo *)dNewValue
                    previousValue:(DBTEAMLOGUserNameLogInfo *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberChangeNameDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberChangeNameDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberChangeNameDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberChangeNameDetails:other];
}

- (BOOL)isEqualToMemberChangeNameDetails:(DBTEAMLOGMemberChangeNameDetails *)aMemberChangeNameDetails {
  if (self == aMemberChangeNameDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aMemberChangeNameDetails.dNewValue]) {
    return NO;
  }
  if (![self.previousValue isEqual:aMemberChangeNameDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberChangeNameDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberChangeNameDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGUserNameLogInfoSerializer serialize:valueObj.dNewValue];
  jsonDict[@"previous_value"] = [DBTEAMLOGUserNameLogInfoSerializer serialize:valueObj.previousValue];

  return jsonDict;
}

+ (DBTEAMLOGMemberChangeNameDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGUserNameLogInfo *dNewValue = [DBTEAMLOGUserNameLogInfoSerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGUserNameLogInfo *previousValue =
      [DBTEAMLOGUserNameLogInfoSerializer deserialize:valueDict[@"previous_value"]];

  return [[DBTEAMLOGMemberChangeNameDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberChangeRoleDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberChangeRoleDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(NSString *)dNewValue previousValue:(NSString *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberChangeRoleDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberChangeRoleDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberChangeRoleDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberChangeRoleDetails:other];
}

- (BOOL)isEqualToMemberChangeRoleDetails:(DBTEAMLOGMemberChangeRoleDetails *)aMemberChangeRoleDetails {
  if (self == aMemberChangeRoleDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aMemberChangeRoleDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aMemberChangeRoleDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberChangeRoleDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberChangeRoleDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = valueObj.dNewValue;
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = valueObj.previousValue;
  }

  return jsonDict;
}

+ (DBTEAMLOGMemberChangeRoleDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *dNewValue = valueDict[@"new_value"] ?: nil;
  NSString *previousValue = valueDict[@"previous_value"] ?: nil;

  return [[DBTEAMLOGMemberChangeRoleDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberInviteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberInviteDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberInviteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberInviteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberInviteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberInviteDetails:other];
}

- (BOOL)isEqualToMemberInviteDetails:(DBTEAMLOGMemberInviteDetails *)aMemberInviteDetails {
  if (self == aMemberInviteDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberInviteDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberInviteDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGMemberInviteDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGMemberInviteDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGDeviceLogInfo.h"
#import "DBTEAMLOGMemberJoinDetails.h"
#import "DBTEAMLOGSharedFolderLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberJoinDetails

#pragma mark - Constructors

- (instancetype)initWithLinkedApps:(NSArray<DBTEAMLOGAppLogInfo *> *)linkedApps
              initialSharedFolders:(NSArray<DBTEAMLOGSharedFolderLogInfo *> *)initialSharedFolders
                     linkedDevices:(NSArray<DBTEAMLOGDeviceLogInfo *> *)linkedDevices {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](linkedApps);
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](initialSharedFolders);
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](linkedDevices);

  self = [super init];
  if (self) {
    _linkedApps = linkedApps;
    _initialSharedFolders = initialSharedFolders;
    _linkedDevices = linkedDevices;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberJoinDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberJoinDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberJoinDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.linkedApps hash];
  result = prime * result + [self.initialSharedFolders hash];
  result = prime * result + [self.linkedDevices hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberJoinDetails:other];
}

- (BOOL)isEqualToMemberJoinDetails:(DBTEAMLOGMemberJoinDetails *)aMemberJoinDetails {
  if (self == aMemberJoinDetails) {
    return YES;
  }
  if (![self.linkedApps isEqual:aMemberJoinDetails.linkedApps]) {
    return NO;
  }
  if (![self.initialSharedFolders isEqual:aMemberJoinDetails.initialSharedFolders]) {
    return NO;
  }
  if (![self.linkedDevices isEqual:aMemberJoinDetails.linkedDevices]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberJoinDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberJoinDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"linked_apps"] = [DBArraySerializer serialize:valueObj.linkedApps
                                                withBlock:^id(id elem0) {
                                                  return [DBTEAMLOGAppLogInfoSerializer serialize:elem0];
                                                }];
  jsonDict[@"initial_shared_folders"] =
      [DBArraySerializer serialize:valueObj.initialSharedFolders
                         withBlock:^id(id elem0) {
                           return [DBTEAMLOGSharedFolderLogInfoSerializer serialize:elem0];
                         }];
  jsonDict[@"linked_devices"] = [DBArraySerializer serialize:valueObj.linkedDevices
                                                   withBlock:^id(id elem0) {
                                                     return [DBTEAMLOGDeviceLogInfoSerializer serialize:elem0];
                                                   }];

  return jsonDict;
}

+ (DBTEAMLOGMemberJoinDetails *)deserialize:(NSDictionary *)valueDict {
  NSArray<DBTEAMLOGAppLogInfo *> *linkedApps =
      [DBArraySerializer deserialize:valueDict[@"linked_apps"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMLOGAppLogInfoSerializer deserialize:elem0];
                           }];
  NSArray<DBTEAMLOGSharedFolderLogInfo *> *initialSharedFolders =
      [DBArraySerializer deserialize:valueDict[@"initial_shared_folders"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMLOGSharedFolderLogInfoSerializer deserialize:elem0];
                           }];
  NSArray<DBTEAMLOGDeviceLogInfo *> *linkedDevices =
      [DBArraySerializer deserialize:valueDict[@"linked_devices"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMLOGDeviceLogInfoSerializer deserialize:elem0];
                           }];

  return [[DBTEAMLOGMemberJoinDetails alloc] initWithLinkedApps:linkedApps
                                           initialSharedFolders:initialSharedFolders
                                                  linkedDevices:linkedDevices];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberLeaveDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberLeaveDetails

#pragma mark - Constructors

- (instancetype)initWithMemberWasOnTeam:(NSNumber *)memberWasOnTeam {

  self = [super init];
  if (self) {
    _memberWasOnTeam = memberWasOnTeam;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberLeaveDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberLeaveDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberLeaveDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.memberWasOnTeam hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberLeaveDetails:other];
}

- (BOOL)isEqualToMemberLeaveDetails:(DBTEAMLOGMemberLeaveDetails *)aMemberLeaveDetails {
  if (self == aMemberLeaveDetails) {
    return YES;
  }
  if (![self.memberWasOnTeam isEqual:aMemberLeaveDetails.memberWasOnTeam]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberLeaveDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberLeaveDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"member_was_on_team"] = valueObj.memberWasOnTeam;

  return jsonDict;
}

+ (DBTEAMLOGMemberLeaveDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *memberWasOnTeam = valueDict[@"member_was_on_team"];

  return [[DBTEAMLOGMemberLeaveDetails alloc] initWithMemberWasOnTeam:memberWasOnTeam];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberPermanentlyDeleteAccountContentsDetails:other];
}

- (BOOL)isEqualToMemberPermanentlyDeleteAccountContentsDetails:
    (DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails *)aMemberPermanentlyDeleteAccountContentsDetails {
  if (self == aMemberPermanentlyDeleteAccountContentsDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberRecoverDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberRecoverDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberRecoverDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberRecoverDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberRecoverDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberRecoverDetails:other];
}

- (BOOL)isEqualToMemberRecoverDetails:(DBTEAMLOGMemberRecoverDetails *)aMemberRecoverDetails {
  if (self == aMemberRecoverDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberRecoverDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberRecoverDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGMemberRecoverDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGMemberRecoverDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberRequestsChangePolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberRequestsChangePolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberRequestsChangePolicyDisabled;
  }
  return self;
}

- (instancetype)initWithRequireApproval {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberRequestsChangePolicyRequireApproval;
  }
  return self;
}

- (instancetype)initWithAutoApproval {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberRequestsChangePolicyAutoApproval;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGMemberRequestsChangePolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGMemberRequestsChangePolicyDisabled;
}

- (BOOL)isRequireApproval {
  return _tag == DBTEAMLOGMemberRequestsChangePolicyRequireApproval;
}

- (BOOL)isAutoApproval {
  return _tag == DBTEAMLOGMemberRequestsChangePolicyAutoApproval;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGMemberRequestsChangePolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGMemberRequestsChangePolicyDisabled:
    return @"DBTEAMLOGMemberRequestsChangePolicyDisabled";
  case DBTEAMLOGMemberRequestsChangePolicyRequireApproval:
    return @"DBTEAMLOGMemberRequestsChangePolicyRequireApproval";
  case DBTEAMLOGMemberRequestsChangePolicyAutoApproval:
    return @"DBTEAMLOGMemberRequestsChangePolicyAutoApproval";
  case DBTEAMLOGMemberRequestsChangePolicyOther:
    return @"DBTEAMLOGMemberRequestsChangePolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberRequestsChangePolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberRequestsChangePolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberRequestsChangePolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGMemberRequestsChangePolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMemberRequestsChangePolicyRequireApproval:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMemberRequestsChangePolicyAutoApproval:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGMemberRequestsChangePolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberRequestsChangePolicy:other];
}

- (BOOL)isEqualToMemberRequestsChangePolicy:(DBTEAMLOGMemberRequestsChangePolicy *)aMemberRequestsChangePolicy {
  if (self == aMemberRequestsChangePolicy) {
    return YES;
  }
  if (self.tag != aMemberRequestsChangePolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGMemberRequestsChangePolicyDisabled:
    return [[self tagName] isEqual:[aMemberRequestsChangePolicy tagName]];
  case DBTEAMLOGMemberRequestsChangePolicyRequireApproval:
    return [[self tagName] isEqual:[aMemberRequestsChangePolicy tagName]];
  case DBTEAMLOGMemberRequestsChangePolicyAutoApproval:
    return [[self tagName] isEqual:[aMemberRequestsChangePolicy tagName]];
  case DBTEAMLOGMemberRequestsChangePolicyOther:
    return [[self tagName] isEqual:[aMemberRequestsChangePolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberRequestsChangePolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberRequestsChangePolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isRequireApproval]) {
    jsonDict[@".tag"] = @"require_approval";
  } else if ([valueObj isAutoApproval]) {
    jsonDict[@".tag"] = @"auto_approval";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGMemberRequestsChangePolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGMemberRequestsChangePolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"require_approval"]) {
    return [[DBTEAMLOGMemberRequestsChangePolicy alloc] initWithRequireApproval];
  } else if ([tag isEqualToString:@"auto_approval"]) {
    return [[DBTEAMLOGMemberRequestsChangePolicy alloc] initWithAutoApproval];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGMemberRequestsChangePolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGMemberRequestsChangePolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberRequestsChangePolicy.h"
#import "DBTEAMLOGMemberRequestsChangePolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberRequestsChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGMemberRequestsChangePolicy *)dNewValue
                    previousValue:(DBTEAMLOGMemberRequestsChangePolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGMemberRequestsChangePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberRequestsChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberRequestsChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberRequestsChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberRequestsChangePolicyDetails:other];
}

- (BOOL)isEqualToMemberRequestsChangePolicyDetails:
    (DBTEAMLOGMemberRequestsChangePolicyDetails *)aMemberRequestsChangePolicyDetails {
  if (self == aMemberRequestsChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aMemberRequestsChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aMemberRequestsChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberRequestsChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberRequestsChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGMemberRequestsChangePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGMemberRequestsChangePolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGMemberRequestsChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGMemberRequestsChangePolicy *dNewValue =
      [DBTEAMLOGMemberRequestsChangePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGMemberRequestsChangePolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGMemberRequestsChangePolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGMemberRequestsChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsAddExceptionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsAddExceptionDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsAddExceptionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberSpaceLimitsAddExceptionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsAddExceptionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsAddExceptionDetails:other];
}

- (BOOL)isEqualToMemberSpaceLimitsAddExceptionDetails:
    (DBTEAMLOGMemberSpaceLimitsAddExceptionDetails *)aMemberSpaceLimitsAddExceptionDetails {
  if (self == aMemberSpaceLimitsAddExceptionDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsAddExceptionDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberSpaceLimitsAddExceptionDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGMemberSpaceLimitsAddExceptionDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGMemberSpaceLimitsAddExceptionDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsChangePolicyDetails.h"
#import "DBTEAMLOGSpaceLimitsLevel.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(DBTEAMLOGSpaceLimitsLevel *)previousValue
                            dNewValue:(DBTEAMLOGSpaceLimitsLevel *)dNewValue {

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberSpaceLimitsChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsChangePolicyDetails:other];
}

- (BOOL)isEqualToMemberSpaceLimitsChangePolicyDetails:
    (DBTEAMLOGMemberSpaceLimitsChangePolicyDetails *)aMemberSpaceLimitsChangePolicyDetails {
  if (self == aMemberSpaceLimitsChangePolicyDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aMemberSpaceLimitsChangePolicyDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aMemberSpaceLimitsChangePolicyDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberSpaceLimitsChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = [DBTEAMLOGSpaceLimitsLevelSerializer serialize:valueObj.previousValue];
  jsonDict[@"new_value"] = [DBTEAMLOGSpaceLimitsLevelSerializer serialize:valueObj.dNewValue];

  return jsonDict;
}

+ (DBTEAMLOGMemberSpaceLimitsChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGSpaceLimitsLevel *previousValue =
      [DBTEAMLOGSpaceLimitsLevelSerializer deserialize:valueDict[@"previous_value"]];
  DBTEAMLOGSpaceLimitsLevel *dNewValue = [DBTEAMLOGSpaceLimitsLevelSerializer deserialize:valueDict[@"new_value"]];

  return
      [[DBTEAMLOGMemberSpaceLimitsChangePolicyDetails alloc] initWithPreviousValue:previousValue dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsChangeStatusDetails.h"
#import "DBTEAMLOGSpaceLimitsStatus.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsChangeStatusDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousStatus:(DBTEAMLOGSpaceLimitsStatus *)previousStatus
                            dNewStatus:(DBTEAMLOGSpaceLimitsStatus *)dNewStatus {

  self = [super init];
  if (self) {
    _previousStatus = previousStatus;
    _dNewStatus = dNewStatus;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsChangeStatusDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberSpaceLimitsChangeStatusDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsChangeStatusDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousStatus hash];
  result = prime * result + [self.dNewStatus hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsChangeStatusDetails:other];
}

- (BOOL)isEqualToMemberSpaceLimitsChangeStatusDetails:
    (DBTEAMLOGMemberSpaceLimitsChangeStatusDetails *)aMemberSpaceLimitsChangeStatusDetails {
  if (self == aMemberSpaceLimitsChangeStatusDetails) {
    return YES;
  }
  if (![self.previousStatus isEqual:aMemberSpaceLimitsChangeStatusDetails.previousStatus]) {
    return NO;
  }
  if (![self.dNewStatus isEqual:aMemberSpaceLimitsChangeStatusDetails.dNewStatus]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsChangeStatusDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberSpaceLimitsChangeStatusDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_status"] = [DBTEAMLOGSpaceLimitsStatusSerializer serialize:valueObj.previousStatus];
  jsonDict[@"new_status"] = [DBTEAMLOGSpaceLimitsStatusSerializer serialize:valueObj.dNewStatus];

  return jsonDict;
}

+ (DBTEAMLOGMemberSpaceLimitsChangeStatusDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGSpaceLimitsStatus *previousStatus =
      [DBTEAMLOGSpaceLimitsStatusSerializer deserialize:valueDict[@"previous_status"]];
  DBTEAMLOGSpaceLimitsStatus *dNewStatus = [DBTEAMLOGSpaceLimitsStatusSerializer deserialize:valueDict[@"new_status"]];

  return [[DBTEAMLOGMemberSpaceLimitsChangeStatusDetails alloc] initWithPreviousStatus:previousStatus
                                                                            dNewStatus:dNewStatus];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSpaceLimitsRemoveExceptionDetails:other];
}

- (BOOL)isEqualToMemberSpaceLimitsRemoveExceptionDetails:
    (DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails *)aMemberSpaceLimitsRemoveExceptionDetails {
  if (self == aMemberSpaceLimitsRemoveExceptionDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSuggestDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSuggestDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberSuggestDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberSuggestDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSuggestDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSuggestDetails:other];
}

- (BOOL)isEqualToMemberSuggestDetails:(DBTEAMLOGMemberSuggestDetails *)aMemberSuggestDetails {
  if (self == aMemberSuggestDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSuggestDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberSuggestDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGMemberSuggestDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGMemberSuggestDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnableDisableChangePolicy.h"
#import "DBTEAMLOGMemberSuggestionsChangePolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSuggestionsChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue
                    previousValue:(DBTEAMLOGEnableDisableChangePolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberSuggestionsChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberSuggestionsChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSuggestionsChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSuggestionsChangePolicyDetails:other];
}

- (BOOL)isEqualToMemberSuggestionsChangePolicyDetails:
    (DBTEAMLOGMemberSuggestionsChangePolicyDetails *)aMemberSuggestionsChangePolicyDetails {
  if (self == aMemberSuggestionsChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aMemberSuggestionsChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aMemberSuggestionsChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSuggestionsChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberSuggestionsChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGMemberSuggestionsChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGEnableDisableChangePolicy *dNewValue =
      [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGEnableDisableChangePolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return
      [[DBTEAMLOGMemberSuggestionsChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberSuspendDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberSuspendDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberSuspendDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberSuspendDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberSuspendDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberSuspendDetails:other];
}

- (BOOL)isEqualToMemberSuspendDetails:(DBTEAMLOGMemberSuspendDetails *)aMemberSuspendDetails {
  if (self == aMemberSuspendDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberSuspendDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberSuspendDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGMemberSuspendDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGMemberSuspendDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberTransferAccountContentsDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberTransferAccountContentsDetails

#pragma mark - Constructors

- (instancetype)initWithSrcIndex:(NSNumber *)srcIndex destIndex:(NSNumber *)destIndex {

  self = [super init];
  if (self) {
    _srcIndex = srcIndex;
    _destIndex = destIndex;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberTransferAccountContentsDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberTransferAccountContentsDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberTransferAccountContentsDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.srcIndex hash];
  result = prime * result + [self.destIndex hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberTransferAccountContentsDetails:other];
}

- (BOOL)isEqualToMemberTransferAccountContentsDetails:
    (DBTEAMLOGMemberTransferAccountContentsDetails *)aMemberTransferAccountContentsDetails {
  if (self == aMemberTransferAccountContentsDetails) {
    return YES;
  }
  if (![self.srcIndex isEqual:aMemberTransferAccountContentsDetails.srcIndex]) {
    return NO;
  }
  if (![self.destIndex isEqual:aMemberTransferAccountContentsDetails.destIndex]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberTransferAccountContentsDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberTransferAccountContentsDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"src_index"] = valueObj.srcIndex;
  jsonDict[@"dest_index"] = valueObj.destIndex;

  return jsonDict;
}

+ (DBTEAMLOGMemberTransferAccountContentsDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *srcIndex = valueDict[@"src_index"];
  NSNumber *destIndex = valueDict[@"dest_index"];

  return [[DBTEAMLOGMemberTransferAccountContentsDetails alloc] initWithSrcIndex:srcIndex destIndex:destIndex];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMemberUnsuspendDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMemberUnsuspendDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMemberUnsuspendDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMemberUnsuspendDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMemberUnsuspendDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMemberUnsuspendDetails:other];
}

- (BOOL)isEqualToMemberUnsuspendDetails:(DBTEAMLOGMemberUnsuspendDetails *)aMemberUnsuspendDetails {
  if (self == aMemberUnsuspendDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMemberUnsuspendDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMemberUnsuspendDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGMemberUnsuspendDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGMemberUnsuspendDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnableDisableChangePolicy.h"
#import "DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue
                    previousValue:(DBTEAMLOGEnableDisableChangePolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMicrosoftOfficeAddinChangePolicyDetails:other];
}

- (BOOL)isEqualToMicrosoftOfficeAddinChangePolicyDetails:
    (DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails *)aMicrosoftOfficeAddinChangePolicyDetails {
  if (self == aMicrosoftOfficeAddinChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aMicrosoftOfficeAddinChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aMicrosoftOfficeAddinChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGEnableDisableChangePolicy *dNewValue =
      [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGEnableDisableChangePolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails alloc] initWithDNewValue:dNewValue
                                                                       previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMissingDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGMissingDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMissingDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMissingDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMissingDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMissingDetails:other];
}

- (BOOL)isEqualToMissingDetails:(DBTEAMLOGMissingDetails *)aMissingDetails {
  if (self == aMissingDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMissingDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMissingDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGMissingDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGMissingDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGMobileSessionLogInfo.h"
#import "DBTEAMLOGSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGMobileSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithSessionId:(NSString *)sessionId {

  self = [super initWithSessionId:sessionId];
  if (self) {
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSessionId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGMobileSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGMobileSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGMobileSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sessionId) {
    result = prime * result + [self.sessionId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToMobileSessionLogInfo:other];
}

- (BOOL)isEqualToMobileSessionLogInfo:(DBTEAMLOGMobileSessionLogInfo *)aMobileSessionLogInfo {
  if (self == aMobileSessionLogInfo) {
    return YES;
  }
  if (self.sessionId) {
    if (![self.sessionId isEqual:aMobileSessionLogInfo.sessionId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGMobileSessionLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGMobileSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sessionId) {
    jsonDict[@"session_id"] = valueObj.sessionId;
  }

  return jsonDict;
}

+ (DBTEAMLOGMobileSessionLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *sessionId = valueDict[@"session_id"] ?: nil;

  return [[DBTEAMLOGMobileSessionLogInfo alloc] initWithSessionId:sessionId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNamespaceRelativePathLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGNamespaceRelativePathLogInfo

#pragma mark - Constructors

- (instancetype)initWithNsId:(NSString *)nsId relativePath:(NSString *)relativePath {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](nsId);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"/(.|[\\r\\n])*"]](relativePath);

  self = [super init];
  if (self) {
    _nsId = nsId;
    _relativePath = relativePath;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithNsId:nil relativePath:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGNamespaceRelativePathLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGNamespaceRelativePathLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNamespaceRelativePathLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.nsId) {
    result = prime * result + [self.nsId hash];
  }
  if (self.relativePath) {
    result = prime * result + [self.relativePath hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNamespaceRelativePathLogInfo:other];
}

- (BOOL)isEqualToNamespaceRelativePathLogInfo:(DBTEAMLOGNamespaceRelativePathLogInfo *)aNamespaceRelativePathLogInfo {
  if (self == aNamespaceRelativePathLogInfo) {
    return YES;
  }
  if (self.nsId) {
    if (![self.nsId isEqual:aNamespaceRelativePathLogInfo.nsId]) {
      return NO;
    }
  }
  if (self.relativePath) {
    if (![self.relativePath isEqual:aNamespaceRelativePathLogInfo.relativePath]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNamespaceRelativePathLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGNamespaceRelativePathLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.nsId) {
    jsonDict[@"ns_id"] = valueObj.nsId;
  }
  if (valueObj.relativePath) {
    jsonDict[@"relative_path"] = valueObj.relativePath;
  }

  return jsonDict;
}

+ (DBTEAMLOGNamespaceRelativePathLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *nsId = valueDict[@"ns_id"] ?: nil;
  NSString *relativePath = valueDict[@"relative_path"] ?: nil;

  return [[DBTEAMLOGNamespaceRelativePathLogInfo alloc] initWithNsId:nsId relativePath:relativePath];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnableDisableChangePolicy.h"
#import "DBTEAMLOGNetworkControlChangePolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGNetworkControlChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue
                    previousValue:(DBTEAMLOGEnableDisableChangePolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGNetworkControlChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGNetworkControlChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNetworkControlChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNetworkControlChangePolicyDetails:other];
}

- (BOOL)isEqualToNetworkControlChangePolicyDetails:
    (DBTEAMLOGNetworkControlChangePolicyDetails *)aNetworkControlChangePolicyDetails {
  if (self == aNetworkControlChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aNetworkControlChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aNetworkControlChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNetworkControlChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGNetworkControlChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGNetworkControlChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGEnableDisableChangePolicy *dNewValue =
      [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGEnableDisableChangePolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGNetworkControlChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNonTeamMemberLogInfo.h"
#import "DBTEAMLOGTeamMemberLogInfo.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGUserLogInfo

#pragma mark - Constructors

- (instancetype)initWithAccountId:(NSString *)accountId displayName:(NSString *)displayName email:(NSString *)email {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(40) maxLength:@(40) pattern:nil]](accountId);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"[^/:?*<>\"|]*"]](displayName);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators
                         stringValidator:nil
                               maxLength:@(255)
                                 pattern:@"^['&A-Za-z0-9._%+-]+@[A-Za-z0-9-][A-Za-z0-9.-]*.[A-Za-z]{2,15}$"]](email);

  self = [super init];
  if (self) {
    _accountId = accountId;
    _displayName = displayName;
    _email = email;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithAccountId:nil displayName:nil email:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGUserLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGUserLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGUserLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.accountId) {
    result = prime * result + [self.accountId hash];
  }
  if (self.displayName) {
    result = prime * result + [self.displayName hash];
  }
  if (self.email) {
    result = prime * result + [self.email hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUserLogInfo:other];
}

- (BOOL)isEqualToUserLogInfo:(DBTEAMLOGUserLogInfo *)anUserLogInfo {
  if (self == anUserLogInfo) {
    return YES;
  }
  if (self.accountId) {
    if (![self.accountId isEqual:anUserLogInfo.accountId]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:anUserLogInfo.displayName]) {
      return NO;
    }
  }
  if (self.email) {
    if (![self.email isEqual:anUserLogInfo.email]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGUserLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGUserLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.accountId) {
    jsonDict[@"account_id"] = valueObj.accountId;
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }
  if (valueObj.email) {
    jsonDict[@"email"] = valueObj.email;
  }

  if ([valueObj isKindOfClass:[DBTEAMLOGTeamMemberLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGTeamMemberLogInfoSerializer serialize:(DBTEAMLOGTeamMemberLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"teamMember";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGNonTeamMemberLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGNonTeamMemberLogInfoSerializer serialize:(DBTEAMLOGNonTeamMemberLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"nonTeamMember";
  }

  return jsonDict;
}

+ (DBTEAMLOGUserLogInfo *)deserialize:(NSDictionary *)valueDict {
  if ([valueDict[@".tag"] isEqualToString:@"teamMember"]) {
    return [DBTEAMLOGTeamMemberLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"nonTeamMember"]) {
    return [DBTEAMLOGNonTeamMemberLogInfoSerializer deserialize:valueDict];
  }

  @throw([NSException
      exceptionWithName:@"InvalidTag"
                 reason:[NSString stringWithFormat:@"Tag has an invalid value: \"%@\".", valueDict[@".tag"]]
               userInfo:nil]);
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNonTeamMemberLogInfo.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGNonTeamMemberLogInfo

#pragma mark - Constructors

- (instancetype)initWithAccountId:(NSString *)accountId displayName:(NSString *)displayName email:(NSString *)email {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(40) maxLength:@(40) pattern:nil]](accountId);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"[^/:?*<>\"|]*"]](displayName);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators
                         stringValidator:nil
                               maxLength:@(255)
                                 pattern:@"^['&A-Za-z0-9._%+-]+@[A-Za-z0-9-][A-Za-z0-9.-]*.[A-Za-z]{2,15}$"]](email);

  self = [super initWithAccountId:accountId displayName:displayName email:email];
  if (self) {
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithAccountId:nil displayName:nil email:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGNonTeamMemberLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGNonTeamMemberLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNonTeamMemberLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.accountId) {
    result = prime * result + [self.accountId hash];
  }
  if (self.displayName) {
    result = prime * result + [self.displayName hash];
  }
  if (self.email) {
    result = prime * result + [self.email hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNonTeamMemberLogInfo:other];
}

- (BOOL)isEqualToNonTeamMemberLogInfo:(DBTEAMLOGNonTeamMemberLogInfo *)aNonTeamMemberLogInfo {
  if (self == aNonTeamMemberLogInfo) {
    return YES;
  }
  if (self.accountId) {
    if (![self.accountId isEqual:aNonTeamMemberLogInfo.accountId]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aNonTeamMemberLogInfo.displayName]) {
      return NO;
    }
  }
  if (self.email) {
    if (![self.email isEqual:aNonTeamMemberLogInfo.email]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNonTeamMemberLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGNonTeamMemberLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.accountId) {
    jsonDict[@"account_id"] = valueObj.accountId;
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }
  if (valueObj.email) {
    jsonDict[@"email"] = valueObj.email;
  }

  return jsonDict;
}

+ (DBTEAMLOGNonTeamMemberLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *accountId = valueDict[@"account_id"] ?: nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;
  NSString *email = valueDict[@"email"] ?: nil;

  return [[DBTEAMLOGNonTeamMemberLogInfo alloc] initWithAccountId:accountId displayName:displayName email:email];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNoteAclInviteOnlyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGNoteAclInviteOnlyDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGNoteAclInviteOnlyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGNoteAclInviteOnlyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNoteAclInviteOnlyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNoteAclInviteOnlyDetails:other];
}

- (BOOL)isEqualToNoteAclInviteOnlyDetails:(DBTEAMLOGNoteAclInviteOnlyDetails *)aNoteAclInviteOnlyDetails {
  if (self == aNoteAclInviteOnlyDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNoteAclInviteOnlyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGNoteAclInviteOnlyDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGNoteAclInviteOnlyDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGNoteAclInviteOnlyDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNoteAclLinkDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGNoteAclLinkDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGNoteAclLinkDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGNoteAclLinkDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNoteAclLinkDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNoteAclLinkDetails:other];
}

- (BOOL)isEqualToNoteAclLinkDetails:(DBTEAMLOGNoteAclLinkDetails *)aNoteAclLinkDetails {
  if (self == aNoteAclLinkDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNoteAclLinkDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGNoteAclLinkDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGNoteAclLinkDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGNoteAclLinkDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNoteAclTeamLinkDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGNoteAclTeamLinkDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGNoteAclTeamLinkDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGNoteAclTeamLinkDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNoteAclTeamLinkDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNoteAclTeamLinkDetails:other];
}

- (BOOL)isEqualToNoteAclTeamLinkDetails:(DBTEAMLOGNoteAclTeamLinkDetails *)aNoteAclTeamLinkDetails {
  if (self == aNoteAclTeamLinkDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNoteAclTeamLinkDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGNoteAclTeamLinkDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGNoteAclTeamLinkDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGNoteAclTeamLinkDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNoteShareReceiveDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGNoteShareReceiveDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGNoteShareReceiveDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGNoteShareReceiveDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNoteShareReceiveDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNoteShareReceiveDetails:other];
}

- (BOOL)isEqualToNoteShareReceiveDetails:(DBTEAMLOGNoteShareReceiveDetails *)aNoteShareReceiveDetails {
  if (self == aNoteShareReceiveDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNoteShareReceiveDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGNoteShareReceiveDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGNoteShareReceiveDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGNoteShareReceiveDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNoteSharedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGNoteSharedDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGNoteSharedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGNoteSharedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGNoteSharedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToNoteSharedDetails:other];
}

- (BOOL)isEqualToNoteSharedDetails:(DBTEAMLOGNoteSharedDetails *)aNoteSharedDetails {
  if (self == aNoteSharedDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGNoteSharedDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGNoteSharedDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGNoteSharedDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGNoteSharedDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGOpenNoteSharedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGOpenNoteSharedDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGOpenNoteSharedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGOpenNoteSharedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGOpenNoteSharedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToOpenNoteSharedDetails:other];
}

- (BOOL)isEqualToOpenNoteSharedDetails:(DBTEAMLOGOpenNoteSharedDetails *)anOpenNoteSharedDetails {
  if (self == anOpenNoteSharedDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGOpenNoteSharedDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGOpenNoteSharedDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGOpenNoteSharedDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGOpenNoteSharedDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGOptionalChangePolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGOptionalChangePolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGOptionalChangePolicyDisabled;
  }
  return self;
}

- (instancetype)initWithOptional {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGOptionalChangePolicyOptional;
  }
  return self;
}

- (instancetype)initWithRequired {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGOptionalChangePolicyRequired;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGOptionalChangePolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGOptionalChangePolicyDisabled;
}

- (BOOL)isOptional {
  return _tag == DBTEAMLOGOptionalChangePolicyOptional;
}

- (BOOL)isRequired {
  return _tag == DBTEAMLOGOptionalChangePolicyRequired;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGOptionalChangePolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGOptionalChangePolicyDisabled:
    return @"DBTEAMLOGOptionalChangePolicyDisabled";
  case DBTEAMLOGOptionalChangePolicyOptional:
    return @"DBTEAMLOGOptionalChangePolicyOptional";
  case DBTEAMLOGOptionalChangePolicyRequired:
    return @"DBTEAMLOGOptionalChangePolicyRequired";
  case DBTEAMLOGOptionalChangePolicyOther:
    return @"DBTEAMLOGOptionalChangePolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGOptionalChangePolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGOptionalChangePolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGOptionalChangePolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGOptionalChangePolicyDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGOptionalChangePolicyOptional:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGOptionalChangePolicyRequired:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGOptionalChangePolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToOptionalChangePolicy:other];
}

- (BOOL)isEqualToOptionalChangePolicy:(DBTEAMLOGOptionalChangePolicy *)anOptionalChangePolicy {
  if (self == anOptionalChangePolicy) {
    return YES;
  }
  if (self.tag != anOptionalChangePolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGOptionalChangePolicyDisabled:
    return [[self tagName] isEqual:[anOptionalChangePolicy tagName]];
  case DBTEAMLOGOptionalChangePolicyOptional:
    return [[self tagName] isEqual:[anOptionalChangePolicy tagName]];
  case DBTEAMLOGOptionalChangePolicyRequired:
    return [[self tagName] isEqual:[anOptionalChangePolicy tagName]];
  case DBTEAMLOGOptionalChangePolicyOther:
    return [[self tagName] isEqual:[anOptionalChangePolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGOptionalChangePolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGOptionalChangePolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isOptional]) {
    jsonDict[@".tag"] = @"optional";
  } else if ([valueObj isRequired]) {
    jsonDict[@".tag"] = @"required";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGOptionalChangePolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGOptionalChangePolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"optional"]) {
    return [[DBTEAMLOGOptionalChangePolicy alloc] initWithOptional];
  } else if ([tag isEqualToString:@"required"]) {
    return [[DBTEAMLOGOptionalChangePolicy alloc] initWithRequired];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGOptionalChangePolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGOptionalChangePolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccessMethodLogInfo.h"
#import "DBTEAMLOGGeoLocationLogInfo.h"
#import "DBTEAMLOGHostLogInfo.h"
#import "DBTEAMLOGOriginLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGOriginLogInfo

#pragma mark - Constructors

- (instancetype)initWithAccessMethod:(DBTEAMLOGAccessMethodLogInfo *)accessMethod
                         geoLocation:(DBTEAMLOGGeoLocationLogInfo *)geoLocation
                                host:(DBTEAMLOGHostLogInfo *)host {

  self = [super init];
  if (self) {
    _geoLocation = geoLocation;
    _host = host;
    _accessMethod = accessMethod;
  }
  return self;
}

- (instancetype)initWithAccessMethod:(DBTEAMLOGAccessMethodLogInfo *)accessMethod {
  return [self initWithAccessMethod:accessMethod geoLocation:nil host:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGOriginLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGOriginLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGOriginLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.accessMethod hash];
  if (self.geoLocation) {
    result = prime * result + [self.geoLocation hash];
  }
  if (self.host) {
    result = prime * result + [self.host hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToOriginLogInfo:other];
}

- (BOOL)isEqualToOriginLogInfo:(DBTEAMLOGOriginLogInfo *)anOriginLogInfo {
  if (self == anOriginLogInfo) {
    return YES;
  }
  if (![self.accessMethod isEqual:anOriginLogInfo.accessMethod]) {
    return NO;
  }
  if (self.geoLocation) {
    if (![self.geoLocation isEqual:anOriginLogInfo.geoLocation]) {
      return NO;
    }
  }
  if (self.host) {
    if (![self.host isEqual:anOriginLogInfo.host]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGOriginLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGOriginLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"access_method"] = [DBTEAMLOGAccessMethodLogInfoSerializer serialize:valueObj.accessMethod];
  if (valueObj.geoLocation) {
    jsonDict[@"geo_location"] = [DBTEAMLOGGeoLocationLogInfoSerializer serialize:valueObj.geoLocation];
  }
  if (valueObj.host) {
    jsonDict[@"host"] = [DBTEAMLOGHostLogInfoSerializer serialize:valueObj.host];
  }

  return jsonDict;
}

+ (DBTEAMLOGOriginLogInfo *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGAccessMethodLogInfo *accessMethod =
      [DBTEAMLOGAccessMethodLogInfoSerializer deserialize:valueDict[@"access_method"]];
  DBTEAMLOGGeoLocationLogInfo *geoLocation =
      valueDict[@"geo_location"] ? [DBTEAMLOGGeoLocationLogInfoSerializer deserialize:valueDict[@"geo_location"]] : nil;
  DBTEAMLOGHostLogInfo *host =
      valueDict[@"host"] ? [DBTEAMLOGHostLogInfoSerializer deserialize:valueDict[@"host"]] : nil;

  return [[DBTEAMLOGOriginLogInfo alloc] initWithAccessMethod:accessMethod geoLocation:geoLocation host:host];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperAccessType.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperAccessType

#pragma mark - Constructors

- (instancetype)initWithViewer {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperAccessTypeViewer;
  }
  return self;
}

- (instancetype)initWithCommenter {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperAccessTypeCommenter;
  }
  return self;
}

- (instancetype)initWithEditor {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperAccessTypeEditor;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperAccessTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isViewer {
  return _tag == DBTEAMLOGPaperAccessTypeViewer;
}

- (BOOL)isCommenter {
  return _tag == DBTEAMLOGPaperAccessTypeCommenter;
}

- (BOOL)isEditor {
  return _tag == DBTEAMLOGPaperAccessTypeEditor;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGPaperAccessTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGPaperAccessTypeViewer:
    return @"DBTEAMLOGPaperAccessTypeViewer";
  case DBTEAMLOGPaperAccessTypeCommenter:
    return @"DBTEAMLOGPaperAccessTypeCommenter";
  case DBTEAMLOGPaperAccessTypeEditor:
    return @"DBTEAMLOGPaperAccessTypeEditor";
  case DBTEAMLOGPaperAccessTypeOther:
    return @"DBTEAMLOGPaperAccessTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperAccessTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperAccessTypeSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperAccessTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGPaperAccessTypeViewer:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPaperAccessTypeCommenter:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPaperAccessTypeEditor:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPaperAccessTypeOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperAccessType:other];
}

- (BOOL)isEqualToPaperAccessType:(DBTEAMLOGPaperAccessType *)aPaperAccessType {
  if (self == aPaperAccessType) {
    return YES;
  }
  if (self.tag != aPaperAccessType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGPaperAccessTypeViewer:
    return [[self tagName] isEqual:[aPaperAccessType tagName]];
  case DBTEAMLOGPaperAccessTypeCommenter:
    return [[self tagName] isEqual:[aPaperAccessType tagName]];
  case DBTEAMLOGPaperAccessTypeEditor:
    return [[self tagName] isEqual:[aPaperAccessType tagName]];
  case DBTEAMLOGPaperAccessTypeOther:
    return [[self tagName] isEqual:[aPaperAccessType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperAccessTypeSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperAccessType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isViewer]) {
    jsonDict[@".tag"] = @"viewer";
  } else if ([valueObj isCommenter]) {
    jsonDict[@".tag"] = @"commenter";
  } else if ([valueObj isEditor]) {
    jsonDict[@".tag"] = @"editor";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGPaperAccessType *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"viewer"]) {
    return [[DBTEAMLOGPaperAccessType alloc] initWithViewer];
  } else if ([tag isEqualToString:@"commenter"]) {
    return [[DBTEAMLOGPaperAccessType alloc] initWithCommenter];
  } else if ([tag isEqualToString:@"editor"]) {
    return [[DBTEAMLOGPaperAccessType alloc] initWithEditor];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGPaperAccessType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGPaperAccessType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperChangeDeploymentPolicyDetails.h"
#import "DBTEAMLOGPaperDeploymentPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperChangeDeploymentPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGPaperDeploymentPolicy *)dNewValue
                    previousValue:(DBTEAMLOGPaperDeploymentPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGPaperDeploymentPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperChangeDeploymentPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperChangeDeploymentPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperChangeDeploymentPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperChangeDeploymentPolicyDetails:other];
}

- (BOOL)isEqualToPaperChangeDeploymentPolicyDetails:
    (DBTEAMLOGPaperChangeDeploymentPolicyDetails *)aPaperChangeDeploymentPolicyDetails {
  if (self == aPaperChangeDeploymentPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aPaperChangeDeploymentPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aPaperChangeDeploymentPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperChangeDeploymentPolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperChangeDeploymentPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGPaperDeploymentPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGPaperDeploymentPolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGPaperChangeDeploymentPolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGPaperDeploymentPolicy *dNewValue =
      [DBTEAMLOGPaperDeploymentPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGPaperDeploymentPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGPaperDeploymentPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGPaperChangeDeploymentPolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGExternalSharingAccessibilityPolicy.h"
#import "DBTEAMLOGPaperChangeMemberPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperChangeMemberPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGExternalSharingAccessibilityPolicy *)dNewValue
                    previousValue:(DBTEAMLOGExternalSharingAccessibilityPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGExternalSharingAccessibilityPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperChangeMemberPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperChangeMemberPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperChangeMemberPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperChangeMemberPolicyDetails:other];
}

- (BOOL)isEqualToPaperChangeMemberPolicyDetails:
    (DBTEAMLOGPaperChangeMemberPolicyDetails *)aPaperChangeMemberPolicyDetails {
  if (self == aPaperChangeMemberPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aPaperChangeMemberPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aPaperChangeMemberPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperChangeMemberPolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperChangeMemberPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGExternalSharingAccessibilityPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] =
        [DBTEAMLOGExternalSharingAccessibilityPolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGPaperChangeMemberPolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGExternalSharingAccessibilityPolicy *dNewValue =
      [DBTEAMLOGExternalSharingAccessibilityPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGExternalSharingAccessibilityPolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGExternalSharingAccessibilityPolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGPaperChangeMemberPolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnableDisableChangePolicy.h"
#import "DBTEAMLOGPaperChangePolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue
                    previousValue:(DBTEAMLOGEnableDisableChangePolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperChangePolicyDetails:other];
}

- (BOOL)isEqualToPaperChangePolicyDetails:(DBTEAMLOGPaperChangePolicyDetails *)aPaperChangePolicyDetails {
  if (self == aPaperChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aPaperChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aPaperChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGPaperChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGEnableDisableChangePolicy *dNewValue =
      [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGEnableDisableChangePolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGPaperChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentAddMemberDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentAddMemberDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentAddMemberDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperContentAddMemberDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentAddMemberDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentAddMemberDetails:other];
}

- (BOOL)isEqualToPaperContentAddMemberDetails:(DBTEAMLOGPaperContentAddMemberDetails *)aPaperContentAddMemberDetails {
  if (self == aPaperContentAddMemberDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentAddMemberDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentAddMemberDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperContentAddMemberDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperContentAddMemberDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperContentAddMemberDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentAddToFolderDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentAddToFolderDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
                      targetIndex:(NSNumber *)targetIndex
                      parentIndex:(NSNumber *)parentIndex {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _targetIndex = targetIndex;
    _parentIndex = parentIndex;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentAddToFolderDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperContentAddToFolderDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentAddToFolderDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.parentIndex hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentAddToFolderDetails:other];
}

- (BOOL)isEqualToPaperContentAddToFolderDetails:
    (DBTEAMLOGPaperContentAddToFolderDetails *)aPaperContentAddToFolderDetails {
  if (self == aPaperContentAddToFolderDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentAddToFolderDetails.eventUuid]) {
    return NO;
  }
  if (![self.targetIndex isEqual:aPaperContentAddToFolderDetails.targetIndex]) {
    return NO;
  }
  if (![self.parentIndex isEqual:aPaperContentAddToFolderDetails.parentIndex]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentAddToFolderDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperContentAddToFolderDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"parent_index"] = valueObj.parentIndex;

  return jsonDict;
}

+ (DBTEAMLOGPaperContentAddToFolderDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSNumber *parentIndex = valueDict[@"parent_index"];

  return [[DBTEAMLOGPaperContentAddToFolderDetails alloc] initWithEventUuid:eventUuid
                                                                targetIndex:targetIndex
                                                                parentIndex:parentIndex];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentArchiveDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentArchiveDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentArchiveDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperContentArchiveDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentArchiveDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentArchiveDetails:other];
}

- (BOOL)isEqualToPaperContentArchiveDetails:(DBTEAMLOGPaperContentArchiveDetails *)aPaperContentArchiveDetails {
  if (self == aPaperContentArchiveDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentArchiveDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentArchiveDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperContentArchiveDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperContentArchiveDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperContentArchiveDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentChangeSubscriptionDetails.h"
#import "DBTEAMLOGPaperTaggedValue.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentChangeSubscriptionDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
            dNewSubscriptionLevel:(DBTEAMLOGPaperTaggedValue *)dNewSubscriptionLevel
        previousSubscriptionLevel:(DBTEAMLOGPaperTaggedValue *)previousSubscriptionLevel {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _dNewSubscriptionLevel = dNewSubscriptionLevel;
    _previousSubscriptionLevel = previousSubscriptionLevel;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid
            dNewSubscriptionLevel:(DBTEAMLOGPaperTaggedValue *)dNewSubscriptionLevel {
  return [self initWithEventUuid:eventUuid dNewSubscriptionLevel:dNewSubscriptionLevel previousSubscriptionLevel:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentChangeSubscriptionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperContentChangeSubscriptionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentChangeSubscriptionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.dNewSubscriptionLevel hash];
  if (self.previousSubscriptionLevel) {
    result = prime * result + [self.previousSubscriptionLevel hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentChangeSubscriptionDetails:other];
}

- (BOOL)isEqualToPaperContentChangeSubscriptionDetails:
    (DBTEAMLOGPaperContentChangeSubscriptionDetails *)aPaperContentChangeSubscriptionDetails {
  if (self == aPaperContentChangeSubscriptionDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentChangeSubscriptionDetails.eventUuid]) {
    return NO;
  }
  if (![self.dNewSubscriptionLevel isEqual:aPaperContentChangeSubscriptionDetails.dNewSubscriptionLevel]) {
    return NO;
  }
  if (self.previousSubscriptionLevel) {
    if (![self.previousSubscriptionLevel isEqual:aPaperContentChangeSubscriptionDetails.previousSubscriptionLevel]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentChangeSubscriptionDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperContentChangeSubscriptionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"new_subscription_level"] = [DBTEAMLOGPaperTaggedValueSerializer serialize:valueObj.dNewSubscriptionLevel];
  if (valueObj.previousSubscriptionLevel) {
    jsonDict[@"previous_subscription_level"] =
        [DBTEAMLOGPaperTaggedValueSerializer serialize:valueObj.previousSubscriptionLevel];
  }

  return jsonDict;
}

+ (DBTEAMLOGPaperContentChangeSubscriptionDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  DBTEAMLOGPaperTaggedValue *dNewSubscriptionLevel =
      [DBTEAMLOGPaperTaggedValueSerializer deserialize:valueDict[@"new_subscription_level"]];
  DBTEAMLOGPaperTaggedValue *previousSubscriptionLevel =
      valueDict[@"previous_subscription_level"]
          ? [DBTEAMLOGPaperTaggedValueSerializer deserialize:valueDict[@"previous_subscription_level"]]
          : nil;

  return [[DBTEAMLOGPaperContentChangeSubscriptionDetails alloc] initWithEventUuid:eventUuid
                                                             dNewSubscriptionLevel:dNewSubscriptionLevel
                                                         previousSubscriptionLevel:previousSubscriptionLevel];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentCreateDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentCreateDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentCreateDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperContentCreateDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentCreateDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentCreateDetails:other];
}

- (BOOL)isEqualToPaperContentCreateDetails:(DBTEAMLOGPaperContentCreateDetails *)aPaperContentCreateDetails {
  if (self == aPaperContentCreateDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentCreateDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentCreateDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperContentCreateDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperContentCreateDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperContentCreateDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentPermanentlyDeleteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentPermanentlyDeleteDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentPermanentlyDeleteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperContentPermanentlyDeleteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentPermanentlyDeleteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentPermanentlyDeleteDetails:other];
}

- (BOOL)isEqualToPaperContentPermanentlyDeleteDetails:
    (DBTEAMLOGPaperContentPermanentlyDeleteDetails *)aPaperContentPermanentlyDeleteDetails {
  if (self == aPaperContentPermanentlyDeleteDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentPermanentlyDeleteDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentPermanentlyDeleteDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperContentPermanentlyDeleteDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperContentPermanentlyDeleteDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperContentPermanentlyDeleteDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentRemoveFromFolderDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentRemoveFromFolderDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentRemoveFromFolderDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperContentRemoveFromFolderDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentRemoveFromFolderDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentRemoveFromFolderDetails:other];
}

- (BOOL)isEqualToPaperContentRemoveFromFolderDetails:
    (DBTEAMLOGPaperContentRemoveFromFolderDetails *)aPaperContentRemoveFromFolderDetails {
  if (self == aPaperContentRemoveFromFolderDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentRemoveFromFolderDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentRemoveFromFolderDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperContentRemoveFromFolderDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperContentRemoveFromFolderDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperContentRemoveFromFolderDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentRemoveMemberDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentRemoveMemberDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentRemoveMemberDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperContentRemoveMemberDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentRemoveMemberDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentRemoveMemberDetails:other];
}

- (BOOL)isEqualToPaperContentRemoveMemberDetails:
    (DBTEAMLOGPaperContentRemoveMemberDetails *)aPaperContentRemoveMemberDetails {
  if (self == aPaperContentRemoveMemberDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentRemoveMemberDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentRemoveMemberDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperContentRemoveMemberDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperContentRemoveMemberDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperContentRemoveMemberDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentRenameDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentRenameDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentRenameDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperContentRenameDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentRenameDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentRenameDetails:other];
}

- (BOOL)isEqualToPaperContentRenameDetails:(DBTEAMLOGPaperContentRenameDetails *)aPaperContentRenameDetails {
  if (self == aPaperContentRenameDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentRenameDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentRenameDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperContentRenameDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperContentRenameDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperContentRenameDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperContentRestoreDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperContentRestoreDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperContentRestoreDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperContentRestoreDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperContentRestoreDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperContentRestoreDetails:other];
}

- (BOOL)isEqualToPaperContentRestoreDetails:(DBTEAMLOGPaperContentRestoreDetails *)aPaperContentRestoreDetails {
  if (self == aPaperContentRestoreDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperContentRestoreDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperContentRestoreDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperContentRestoreDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperContentRestoreDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperContentRestoreDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDeploymentPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDeploymentPolicy

#pragma mark - Constructors

- (instancetype)initWithPartial {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperDeploymentPolicyPartial;
  }
  return self;
}

- (instancetype)initWithFull {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperDeploymentPolicyFull;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperDeploymentPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isPartial {
  return _tag == DBTEAMLOGPaperDeploymentPolicyPartial;
}

- (BOOL)isFull {
  return _tag == DBTEAMLOGPaperDeploymentPolicyFull;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGPaperDeploymentPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGPaperDeploymentPolicyPartial:
    return @"DBTEAMLOGPaperDeploymentPolicyPartial";
  case DBTEAMLOGPaperDeploymentPolicyFull:
    return @"DBTEAMLOGPaperDeploymentPolicyFull";
  case DBTEAMLOGPaperDeploymentPolicyOther:
    return @"DBTEAMLOGPaperDeploymentPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDeploymentPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDeploymentPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDeploymentPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGPaperDeploymentPolicyPartial:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPaperDeploymentPolicyFull:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPaperDeploymentPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDeploymentPolicy:other];
}

- (BOOL)isEqualToPaperDeploymentPolicy:(DBTEAMLOGPaperDeploymentPolicy *)aPaperDeploymentPolicy {
  if (self == aPaperDeploymentPolicy) {
    return YES;
  }
  if (self.tag != aPaperDeploymentPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGPaperDeploymentPolicyPartial:
    return [[self tagName] isEqual:[aPaperDeploymentPolicy tagName]];
  case DBTEAMLOGPaperDeploymentPolicyFull:
    return [[self tagName] isEqual:[aPaperDeploymentPolicy tagName]];
  case DBTEAMLOGPaperDeploymentPolicyOther:
    return [[self tagName] isEqual:[aPaperDeploymentPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDeploymentPolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDeploymentPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isPartial]) {
    jsonDict[@".tag"] = @"partial";
  } else if ([valueObj isFull]) {
    jsonDict[@".tag"] = @"full";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGPaperDeploymentPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"partial"]) {
    return [[DBTEAMLOGPaperDeploymentPolicy alloc] initWithPartial];
  } else if ([tag isEqualToString:@"full"]) {
    return [[DBTEAMLOGPaperDeploymentPolicy alloc] initWithFull];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGPaperDeploymentPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGPaperDeploymentPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocAddCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocAddCommentDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid commentText:(NSString *)commentText {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  return [self initWithEventUuid:eventUuid commentText:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocAddCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocAddCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocAddCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  if (self.commentText) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocAddCommentDetails:other];
}

- (BOOL)isEqualToPaperDocAddCommentDetails:(DBTEAMLOGPaperDocAddCommentDetails *)aPaperDocAddCommentDetails {
  if (self == aPaperDocAddCommentDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocAddCommentDetails.eventUuid]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aPaperDocAddCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocAddCommentDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocAddCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return jsonDict;
}

+ (DBTEAMLOGPaperDocAddCommentDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGPaperDocAddCommentDetails alloc] initWithEventUuid:eventUuid commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperAccessType.h"
#import "DBTEAMLOGPaperDocChangeMemberRoleDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocChangeMemberRoleDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid accessType:(DBTEAMLOGPaperAccessType *)accessType {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _accessType = accessType;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocChangeMemberRoleDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocChangeMemberRoleDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocChangeMemberRoleDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.accessType hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocChangeMemberRoleDetails:other];
}

- (BOOL)isEqualToPaperDocChangeMemberRoleDetails:
    (DBTEAMLOGPaperDocChangeMemberRoleDetails *)aPaperDocChangeMemberRoleDetails {
  if (self == aPaperDocChangeMemberRoleDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocChangeMemberRoleDetails.eventUuid]) {
    return NO;
  }
  if (![self.accessType isEqual:aPaperDocChangeMemberRoleDetails.accessType]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocChangeMemberRoleDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocChangeMemberRoleDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"access_type"] = [DBTEAMLOGPaperAccessTypeSerializer serialize:valueObj.accessType];

  return jsonDict;
}

+ (DBTEAMLOGPaperDocChangeMemberRoleDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  DBTEAMLOGPaperAccessType *accessType = [DBTEAMLOGPaperAccessTypeSerializer deserialize:valueDict[@"access_type"]];

  return [[DBTEAMLOGPaperDocChangeMemberRoleDetails alloc] initWithEventUuid:eventUuid accessType:accessType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocChangeSharingPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocChangeSharingPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
              publicSharingPolicy:(NSString *)publicSharingPolicy
                teamSharingPolicy:(NSString *)teamSharingPolicy {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _publicSharingPolicy = publicSharingPolicy;
    _teamSharingPolicy = teamSharingPolicy;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  return [self initWithEventUuid:eventUuid publicSharingPolicy:nil teamSharingPolicy:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocChangeSharingPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocChangeSharingPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocChangeSharingPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  if (self.publicSharingPolicy) {
    result = prime * result + [self.publicSharingPolicy hash];
  }
  if (self.teamSharingPolicy) {
    result = prime * result + [self.teamSharingPolicy hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocChangeSharingPolicyDetails:other];
}

- (BOOL)isEqualToPaperDocChangeSharingPolicyDetails:
    (DBTEAMLOGPaperDocChangeSharingPolicyDetails *)aPaperDocChangeSharingPolicyDetails {
  if (self == aPaperDocChangeSharingPolicyDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocChangeSharingPolicyDetails.eventUuid]) {
    return NO;
  }
  if (self.publicSharingPolicy) {
    if (![self.publicSharingPolicy isEqual:aPaperDocChangeSharingPolicyDetails.publicSharingPolicy]) {
      return NO;
    }
  }
  if (self.teamSharingPolicy) {
    if (![self.teamSharingPolicy isEqual:aPaperDocChangeSharingPolicyDetails.teamSharingPolicy]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocChangeSharingPolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocChangeSharingPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  if (valueObj.publicSharingPolicy) {
    jsonDict[@"public_sharing_policy"] = valueObj.publicSharingPolicy;
  }
  if (valueObj.teamSharingPolicy) {
    jsonDict[@"team_sharing_policy"] = valueObj.teamSharingPolicy;
  }

  return jsonDict;
}

+ (DBTEAMLOGPaperDocChangeSharingPolicyDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *publicSharingPolicy = valueDict[@"public_sharing_policy"] ?: nil;
  NSString *teamSharingPolicy = valueDict[@"team_sharing_policy"] ?: nil;

  return [[DBTEAMLOGPaperDocChangeSharingPolicyDetails alloc] initWithEventUuid:eventUuid
                                                            publicSharingPolicy:publicSharingPolicy
                                                              teamSharingPolicy:teamSharingPolicy];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocDeleteCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocDeleteCommentDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid commentText:(NSString *)commentText {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  return [self initWithEventUuid:eventUuid commentText:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocDeleteCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocDeleteCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocDeleteCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  if (self.commentText) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocDeleteCommentDetails:other];
}

- (BOOL)isEqualToPaperDocDeleteCommentDetails:(DBTEAMLOGPaperDocDeleteCommentDetails *)aPaperDocDeleteCommentDetails {
  if (self == aPaperDocDeleteCommentDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocDeleteCommentDetails.eventUuid]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aPaperDocDeleteCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocDeleteCommentDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocDeleteCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return jsonDict;
}

+ (DBTEAMLOGPaperDocDeleteCommentDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGPaperDocDeleteCommentDetails alloc] initWithEventUuid:eventUuid commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocDeletedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocDeletedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocDeletedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocDeletedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocDeletedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocDeletedDetails:other];
}

- (BOOL)isEqualToPaperDocDeletedDetails:(DBTEAMLOGPaperDocDeletedDetails *)aPaperDocDeletedDetails {
  if (self == aPaperDocDeletedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocDeletedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocDeletedDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocDeletedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperDocDeletedDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocDeletedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocDownloadDetails.h"
#import "DBTEAMLOGPaperDownloadFormat.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocDownloadDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
                 exportFileFormat:(DBTEAMLOGPaperDownloadFormat *)exportFileFormat {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _exportFileFormat = exportFileFormat;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocDownloadDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocDownloadDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocDownloadDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.exportFileFormat hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocDownloadDetails:other];
}

- (BOOL)isEqualToPaperDocDownloadDetails:(DBTEAMLOGPaperDocDownloadDetails *)aPaperDocDownloadDetails {
  if (self == aPaperDocDownloadDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocDownloadDetails.eventUuid]) {
    return NO;
  }
  if (![self.exportFileFormat isEqual:aPaperDocDownloadDetails.exportFileFormat]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocDownloadDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocDownloadDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"export_file_format"] = [DBTEAMLOGPaperDownloadFormatSerializer serialize:valueObj.exportFileFormat];

  return jsonDict;
}

+ (DBTEAMLOGPaperDocDownloadDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  DBTEAMLOGPaperDownloadFormat *exportFileFormat =
      [DBTEAMLOGPaperDownloadFormatSerializer deserialize:valueDict[@"export_file_format"]];

  return [[DBTEAMLOGPaperDocDownloadDetails alloc] initWithEventUuid:eventUuid exportFileFormat:exportFileFormat];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocEditCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocEditCommentDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid commentText:(NSString *)commentText {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  return [self initWithEventUuid:eventUuid commentText:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocEditCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocEditCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocEditCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  if (self.commentText) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocEditCommentDetails:other];
}

- (BOOL)isEqualToPaperDocEditCommentDetails:(DBTEAMLOGPaperDocEditCommentDetails *)aPaperDocEditCommentDetails {
  if (self == aPaperDocEditCommentDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocEditCommentDetails.eventUuid]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aPaperDocEditCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocEditCommentDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocEditCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return jsonDict;
}

+ (DBTEAMLOGPaperDocEditCommentDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGPaperDocEditCommentDetails alloc] initWithEventUuid:eventUuid commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocEditDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocEditDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocEditDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocEditDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocEditDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocEditDetails:other];
}

- (BOOL)isEqualToPaperDocEditDetails:(DBTEAMLOGPaperDocEditDetails *)aPaperDocEditDetails {
  if (self == aPaperDocEditDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocEditDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocEditDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocEditDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperDocEditDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocEditDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocFollowedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocFollowedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocFollowedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocFollowedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocFollowedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocFollowedDetails:other];
}

- (BOOL)isEqualToPaperDocFollowedDetails:(DBTEAMLOGPaperDocFollowedDetails *)aPaperDocFollowedDetails {
  if (self == aPaperDocFollowedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocFollowedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocFollowedDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocFollowedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperDocFollowedDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocFollowedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocMentionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocMentionDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocMentionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocMentionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocMentionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocMentionDetails:other];
}

- (BOOL)isEqualToPaperDocMentionDetails:(DBTEAMLOGPaperDocMentionDetails *)aPaperDocMentionDetails {
  if (self == aPaperDocMentionDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocMentionDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocMentionDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocMentionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperDocMentionDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocMentionDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocRequestAccessDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocRequestAccessDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocRequestAccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocRequestAccessDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocRequestAccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocRequestAccessDetails:other];
}

- (BOOL)isEqualToPaperDocRequestAccessDetails:(DBTEAMLOGPaperDocRequestAccessDetails *)aPaperDocRequestAccessDetails {
  if (self == aPaperDocRequestAccessDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocRequestAccessDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocRequestAccessDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocRequestAccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperDocRequestAccessDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocRequestAccessDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocResolveCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocResolveCommentDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid commentText:(NSString *)commentText {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  return [self initWithEventUuid:eventUuid commentText:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocResolveCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocResolveCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocResolveCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  if (self.commentText) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocResolveCommentDetails:other];
}

- (BOOL)isEqualToPaperDocResolveCommentDetails:
    (DBTEAMLOGPaperDocResolveCommentDetails *)aPaperDocResolveCommentDetails {
  if (self == aPaperDocResolveCommentDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocResolveCommentDetails.eventUuid]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aPaperDocResolveCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocResolveCommentDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocResolveCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return jsonDict;
}

+ (DBTEAMLOGPaperDocResolveCommentDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGPaperDocResolveCommentDetails alloc] initWithEventUuid:eventUuid commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocRevertDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocRevertDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocRevertDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocRevertDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocRevertDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocRevertDetails:other];
}

- (BOOL)isEqualToPaperDocRevertDetails:(DBTEAMLOGPaperDocRevertDetails *)aPaperDocRevertDetails {
  if (self == aPaperDocRevertDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocRevertDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocRevertDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocRevertDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperDocRevertDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocRevertDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocSlackShareDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocSlackShareDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocSlackShareDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocSlackShareDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocSlackShareDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocSlackShareDetails:other];
}

- (BOOL)isEqualToPaperDocSlackShareDetails:(DBTEAMLOGPaperDocSlackShareDetails *)aPaperDocSlackShareDetails {
  if (self == aPaperDocSlackShareDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocSlackShareDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocSlackShareDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocSlackShareDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperDocSlackShareDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocSlackShareDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocTeamInviteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocTeamInviteDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocTeamInviteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocTeamInviteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocTeamInviteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocTeamInviteDetails:other];
}

- (BOOL)isEqualToPaperDocTeamInviteDetails:(DBTEAMLOGPaperDocTeamInviteDetails *)aPaperDocTeamInviteDetails {
  if (self == aPaperDocTeamInviteDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocTeamInviteDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocTeamInviteDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocTeamInviteDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperDocTeamInviteDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocTeamInviteDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocUnresolveCommentDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocUnresolveCommentDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid commentText:(NSString *)commentText {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _commentText = commentText;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid {
  return [self initWithEventUuid:eventUuid commentText:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocUnresolveCommentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocUnresolveCommentDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocUnresolveCommentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  if (self.commentText) {
    result = prime * result + [self.commentText hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocUnresolveCommentDetails:other];
}

- (BOOL)isEqualToPaperDocUnresolveCommentDetails:
    (DBTEAMLOGPaperDocUnresolveCommentDetails *)aPaperDocUnresolveCommentDetails {
  if (self == aPaperDocUnresolveCommentDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocUnresolveCommentDetails.eventUuid]) {
    return NO;
  }
  if (self.commentText) {
    if (![self.commentText isEqual:aPaperDocUnresolveCommentDetails.commentText]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocUnresolveCommentDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocUnresolveCommentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  if (valueObj.commentText) {
    jsonDict[@"comment_text"] = valueObj.commentText;
  }

  return jsonDict;
}

+ (DBTEAMLOGPaperDocUnresolveCommentDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *commentText = valueDict[@"comment_text"] ?: nil;

  return [[DBTEAMLOGPaperDocUnresolveCommentDetails alloc] initWithEventUuid:eventUuid commentText:commentText];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocViewDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocViewDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocViewDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocViewDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocViewDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocViewDetails:other];
}

- (BOOL)isEqualToPaperDocViewDetails:(DBTEAMLOGPaperDocViewDetails *)aPaperDocViewDetails {
  if (self == aPaperDocViewDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperDocViewDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocViewDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocViewDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperDocViewDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperDocViewDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDocumentLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDocumentLogInfo

#pragma mark - Constructors

- (instancetype)initWithDocId:(NSString *)docId docTitle:(NSString *)docTitle {

  self = [super init];
  if (self) {
    _docId = docId;
    _docTitle = docTitle;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDocumentLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDocumentLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDocumentLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.docId hash];
  result = prime * result + [self.docTitle hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDocumentLogInfo:other];
}

- (BOOL)isEqualToPaperDocumentLogInfo:(DBTEAMLOGPaperDocumentLogInfo *)aPaperDocumentLogInfo {
  if (self == aPaperDocumentLogInfo) {
    return YES;
  }
  if (![self.docId isEqual:aPaperDocumentLogInfo.docId]) {
    return NO;
  }
  if (![self.docTitle isEqual:aPaperDocumentLogInfo.docTitle]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDocumentLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDocumentLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"doc_id"] = valueObj.docId;
  jsonDict[@"doc_title"] = valueObj.docTitle;

  return jsonDict;
}

+ (DBTEAMLOGPaperDocumentLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *docId = valueDict[@"doc_id"];
  NSString *docTitle = valueDict[@"doc_title"];

  return [[DBTEAMLOGPaperDocumentLogInfo alloc] initWithDocId:docId docTitle:docTitle];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperDownloadFormat.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperDownloadFormat

#pragma mark - Constructors

- (instancetype)initWithDocx {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperDownloadFormatDocx;
  }
  return self;
}

- (instancetype)initWithHtml {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperDownloadFormatHtml;
  }
  return self;
}

- (instancetype)initWithMarkdown {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperDownloadFormatMarkdown;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPaperDownloadFormatOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDocx {
  return _tag == DBTEAMLOGPaperDownloadFormatDocx;
}

- (BOOL)isHtml {
  return _tag == DBTEAMLOGPaperDownloadFormatHtml;
}

- (BOOL)isMarkdown {
  return _tag == DBTEAMLOGPaperDownloadFormatMarkdown;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGPaperDownloadFormatOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGPaperDownloadFormatDocx:
    return @"DBTEAMLOGPaperDownloadFormatDocx";
  case DBTEAMLOGPaperDownloadFormatHtml:
    return @"DBTEAMLOGPaperDownloadFormatHtml";
  case DBTEAMLOGPaperDownloadFormatMarkdown:
    return @"DBTEAMLOGPaperDownloadFormatMarkdown";
  case DBTEAMLOGPaperDownloadFormatOther:
    return @"DBTEAMLOGPaperDownloadFormatOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperDownloadFormatSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperDownloadFormatSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperDownloadFormatSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGPaperDownloadFormatDocx:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPaperDownloadFormatHtml:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPaperDownloadFormatMarkdown:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPaperDownloadFormatOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperDownloadFormat:other];
}

- (BOOL)isEqualToPaperDownloadFormat:(DBTEAMLOGPaperDownloadFormat *)aPaperDownloadFormat {
  if (self == aPaperDownloadFormat) {
    return YES;
  }
  if (self.tag != aPaperDownloadFormat.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGPaperDownloadFormatDocx:
    return [[self tagName] isEqual:[aPaperDownloadFormat tagName]];
  case DBTEAMLOGPaperDownloadFormatHtml:
    return [[self tagName] isEqual:[aPaperDownloadFormat tagName]];
  case DBTEAMLOGPaperDownloadFormatMarkdown:
    return [[self tagName] isEqual:[aPaperDownloadFormat tagName]];
  case DBTEAMLOGPaperDownloadFormatOther:
    return [[self tagName] isEqual:[aPaperDownloadFormat tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperDownloadFormatSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperDownloadFormat *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDocx]) {
    jsonDict[@".tag"] = @"docx";
  } else if ([valueObj isHtml]) {
    jsonDict[@".tag"] = @"html";
  } else if ([valueObj isMarkdown]) {
    jsonDict[@".tag"] = @"markdown";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGPaperDownloadFormat *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"docx"]) {
    return [[DBTEAMLOGPaperDownloadFormat alloc] initWithDocx];
  } else if ([tag isEqualToString:@"html"]) {
    return [[DBTEAMLOGPaperDownloadFormat alloc] initWithHtml];
  } else if ([tag isEqualToString:@"markdown"]) {
    return [[DBTEAMLOGPaperDownloadFormat alloc] initWithMarkdown];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGPaperDownloadFormat alloc] initWithOther];
  } else {
    return [[DBTEAMLOGPaperDownloadFormat alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperEnabledUsersGroupAdditionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperEnabledUsersGroupAdditionDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperEnabledUsersGroupAdditionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperEnabledUsersGroupAdditionDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperEnabledUsersGroupAdditionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperEnabledUsersGroupAdditionDetails:other];
}

- (BOOL)isEqualToPaperEnabledUsersGroupAdditionDetails:
    (DBTEAMLOGPaperEnabledUsersGroupAdditionDetails *)aPaperEnabledUsersGroupAdditionDetails {
  if (self == aPaperEnabledUsersGroupAdditionDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperEnabledUsersGroupAdditionDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperEnabledUsersGroupAdditionDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGPaperEnabledUsersGroupAdditionDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGPaperEnabledUsersGroupAdditionDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperEnabledUsersGroupRemovalDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperEnabledUsersGroupRemovalDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperEnabledUsersGroupRemovalDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperEnabledUsersGroupRemovalDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperEnabledUsersGroupRemovalDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperEnabledUsersGroupRemovalDetails:other];
}

- (BOOL)isEqualToPaperEnabledUsersGroupRemovalDetails:
    (DBTEAMLOGPaperEnabledUsersGroupRemovalDetails *)aPaperEnabledUsersGroupRemovalDetails {
  if (self == aPaperEnabledUsersGroupRemovalDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperEnabledUsersGroupRemovalDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperEnabledUsersGroupRemovalDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGPaperEnabledUsersGroupRemovalDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGPaperEnabledUsersGroupRemovalDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperExternalViewAllowDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperExternalViewAllowDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperExternalViewAllowDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperExternalViewAllowDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperExternalViewAllowDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperExternalViewAllowDetails:other];
}

- (BOOL)isEqualToPaperExternalViewAllowDetails:
    (DBTEAMLOGPaperExternalViewAllowDetails *)aPaperExternalViewAllowDetails {
  if (self == aPaperExternalViewAllowDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperExternalViewAllowDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperExternalViewAllowDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGPaperExternalViewAllowDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGPaperExternalViewAllowDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperExternalViewDefaultTeamDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperExternalViewDefaultTeamDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperExternalViewDefaultTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperExternalViewDefaultTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperExternalViewDefaultTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperExternalViewDefaultTeamDetails:other];
}

- (BOOL)isEqualToPaperExternalViewDefaultTeamDetails:
    (DBTEAMLOGPaperExternalViewDefaultTeamDetails *)aPaperExternalViewDefaultTeamDetails {
  if (self == aPaperExternalViewDefaultTeamDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperExternalViewDefaultTeamDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperExternalViewDefaultTeamDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGPaperExternalViewDefaultTeamDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGPaperExternalViewDefaultTeamDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperExternalViewForbidDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperExternalViewForbidDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperExternalViewForbidDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperExternalViewForbidDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperExternalViewForbidDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperExternalViewForbidDetails:other];
}

- (BOOL)isEqualToPaperExternalViewForbidDetails:
    (DBTEAMLOGPaperExternalViewForbidDetails *)aPaperExternalViewForbidDetails {
  if (self == aPaperExternalViewForbidDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperExternalViewForbidDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperExternalViewForbidDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGPaperExternalViewForbidDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGPaperExternalViewForbidDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperFolderDeletedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperFolderDeletedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperFolderDeletedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperFolderDeletedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperFolderDeletedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperFolderDeletedDetails:other];
}

- (BOOL)isEqualToPaperFolderDeletedDetails:(DBTEAMLOGPaperFolderDeletedDetails *)aPaperFolderDeletedDetails {
  if (self == aPaperFolderDeletedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperFolderDeletedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperFolderDeletedDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperFolderDeletedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperFolderDeletedDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperFolderDeletedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperFolderFollowedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperFolderFollowedDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperFolderFollowedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperFolderFollowedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperFolderFollowedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperFolderFollowedDetails:other];
}

- (BOOL)isEqualToPaperFolderFollowedDetails:(DBTEAMLOGPaperFolderFollowedDetails *)aPaperFolderFollowedDetails {
  if (self == aPaperFolderFollowedDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperFolderFollowedDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperFolderFollowedDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperFolderFollowedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperFolderFollowedDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperFolderFollowedDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperFolderLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperFolderLogInfo

#pragma mark - Constructors

- (instancetype)initWithFolderId:(NSString *)folderId folderName:(NSString *)folderName {

  self = [super init];
  if (self) {
    _folderId = folderId;
    _folderName = folderName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperFolderLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperFolderLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperFolderLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.folderId hash];
  result = prime * result + [self.folderName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperFolderLogInfo:other];
}

- (BOOL)isEqualToPaperFolderLogInfo:(DBTEAMLOGPaperFolderLogInfo *)aPaperFolderLogInfo {
  if (self == aPaperFolderLogInfo) {
    return YES;
  }
  if (![self.folderId isEqual:aPaperFolderLogInfo.folderId]) {
    return NO;
  }
  if (![self.folderName isEqual:aPaperFolderLogInfo.folderName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperFolderLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperFolderLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"folder_id"] = valueObj.folderId;
  jsonDict[@"folder_name"] = valueObj.folderName;

  return jsonDict;
}

+ (DBTEAMLOGPaperFolderLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *folderId = valueDict[@"folder_id"];
  NSString *folderName = valueDict[@"folder_name"];

  return [[DBTEAMLOGPaperFolderLogInfo alloc] initWithFolderId:folderId folderName:folderName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperFolderTeamInviteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperFolderTeamInviteDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid {

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperFolderTeamInviteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperFolderTeamInviteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperFolderTeamInviteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperFolderTeamInviteDetails:other];
}

- (BOOL)isEqualToPaperFolderTeamInviteDetails:(DBTEAMLOGPaperFolderTeamInviteDetails *)aPaperFolderTeamInviteDetails {
  if (self == aPaperFolderTeamInviteDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aPaperFolderTeamInviteDetails.eventUuid]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperFolderTeamInviteDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperFolderTeamInviteDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;

  return jsonDict;
}

+ (DBTEAMLOGPaperFolderTeamInviteDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];

  return [[DBTEAMLOGPaperFolderTeamInviteDetails alloc] initWithEventUuid:eventUuid];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPaperTaggedValue.h"

#pragma mark - API Object

@implementation DBTEAMLOGPaperTaggedValue

#pragma mark - Constructors

- (instancetype)initWithTag:(NSString *)tag {

  self = [super init];
  if (self) {
    _tag = tag;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPaperTaggedValueSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPaperTaggedValueSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPaperTaggedValueSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.tag hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPaperTaggedValue:other];
}

- (BOOL)isEqualToPaperTaggedValue:(DBTEAMLOGPaperTaggedValue *)aPaperTaggedValue {
  if (self == aPaperTaggedValue) {
    return YES;
  }
  if (![self.tag isEqual:aPaperTaggedValue.tag]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPaperTaggedValueSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPaperTaggedValue *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"tag"] = valueObj.tag;

  return jsonDict;
}

+ (DBTEAMLOGPaperTaggedValue *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@"tag"];

  return [[DBTEAMLOGPaperTaggedValue alloc] initWithTag:tag];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGGroupLogInfo.h"
#import "DBTEAMLOGParticipantLogInfo.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGParticipantLogInfo

@synthesize user = _user;
@synthesize group = _group;

#pragma mark - Constructors

- (instancetype)initWithUser:(DBTEAMLOGUserLogInfo *)user {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGParticipantLogInfoUser;
    _user = user;
  }
  return self;
}

- (instancetype)initWithGroup:(DBTEAMLOGGroupLogInfo *)group {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGParticipantLogInfoGroup;
    _group = group;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGParticipantLogInfoOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGUserLogInfo *)user {
  if (![self isUser]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGParticipantLogInfoUser, but was %@.", [self tagName]];
  }
  return _user;
}

- (DBTEAMLOGGroupLogInfo *)group {
  if (![self isGroup]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGParticipantLogInfoGroup, but was %@.", [self tagName]];
  }
  return _group;
}

#pragma mark - Tag state methods

- (BOOL)isUser {
  return _tag == DBTEAMLOGParticipantLogInfoUser;
}

- (BOOL)isGroup {
  return _tag == DBTEAMLOGParticipantLogInfoGroup;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGParticipantLogInfoOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGParticipantLogInfoUser:
    return @"DBTEAMLOGParticipantLogInfoUser";
  case DBTEAMLOGParticipantLogInfoGroup:
    return @"DBTEAMLOGParticipantLogInfoGroup";
  case DBTEAMLOGParticipantLogInfoOther:
    return @"DBTEAMLOGParticipantLogInfoOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGParticipantLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGParticipantLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGParticipantLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGParticipantLogInfoUser:
    result = prime * result + [self.user hash];
  case DBTEAMLOGParticipantLogInfoGroup:
    result = prime * result + [self.group hash];
  case DBTEAMLOGParticipantLogInfoOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToParticipantLogInfo:other];
}

- (BOOL)isEqualToParticipantLogInfo:(DBTEAMLOGParticipantLogInfo *)aParticipantLogInfo {
  if (self == aParticipantLogInfo) {
    return YES;
  }
  if (self.tag != aParticipantLogInfo.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGParticipantLogInfoUser:
    return [self.user isEqual:aParticipantLogInfo.user];
  case DBTEAMLOGParticipantLogInfoGroup:
    return [self.group isEqual:aParticipantLogInfo.group];
  case DBTEAMLOGParticipantLogInfoOther:
    return [[self tagName] isEqual:[aParticipantLogInfo tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGParticipantLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGParticipantLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isUser]) {
    jsonDict[@"user"] = [[DBTEAMLOGUserLogInfoSerializer serialize:valueObj.user] mutableCopy];
    jsonDict[@".tag"] = @"user";
  } else if ([valueObj isGroup]) {
    jsonDict[@"group"] = [[DBTEAMLOGGroupLogInfoSerializer serialize:valueObj.group] mutableCopy];
    jsonDict[@".tag"] = @"group";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGParticipantLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"user"]) {
    DBTEAMLOGUserLogInfo *user = [DBTEAMLOGUserLogInfoSerializer deserialize:valueDict[@"user"]];
    return [[DBTEAMLOGParticipantLogInfo alloc] initWithUser:user];
  } else if ([tag isEqualToString:@"group"]) {
    DBTEAMLOGGroupLogInfo *group = [DBTEAMLOGGroupLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGParticipantLogInfo alloc] initWithGroup:group];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGParticipantLogInfo alloc] initWithOther];
  } else {
    return [[DBTEAMLOGParticipantLogInfo alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPasswordChangeDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPasswordChangeDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPasswordChangeDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPasswordChangeDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPasswordChangeDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPasswordChangeDetails:other];
}

- (BOOL)isEqualToPasswordChangeDetails:(DBTEAMLOGPasswordChangeDetails *)aPasswordChangeDetails {
  if (self == aPasswordChangeDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPasswordChangeDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPasswordChangeDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGPasswordChangeDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGPasswordChangeDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPasswordLoginFailDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPasswordLoginFailDetails

#pragma mark - Constructors

- (instancetype)initWithFailureReason:(NSString *)failureReason {

  self = [super init];
  if (self) {
    _failureReason = failureReason;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithFailureReason:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPasswordLoginFailDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPasswordLoginFailDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPasswordLoginFailDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.failureReason) {
    result = prime * result + [self.failureReason hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPasswordLoginFailDetails:other];
}

- (BOOL)isEqualToPasswordLoginFailDetails:(DBTEAMLOGPasswordLoginFailDetails *)aPasswordLoginFailDetails {
  if (self == aPasswordLoginFailDetails) {
    return YES;
  }
  if (self.failureReason) {
    if (![self.failureReason isEqual:aPasswordLoginFailDetails.failureReason]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPasswordLoginFailDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPasswordLoginFailDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.failureReason) {
    jsonDict[@"failure_reason"] = valueObj.failureReason;
  }

  return jsonDict;
}

+ (DBTEAMLOGPasswordLoginFailDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *failureReason = valueDict[@"failure_reason"] ?: nil;

  return [[DBTEAMLOGPasswordLoginFailDetails alloc] initWithFailureReason:failureReason];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPasswordLoginSuccessDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPasswordLoginSuccessDetails

#pragma mark - Constructors

- (instancetype)initWithIsEmmManaged:(NSNumber *)isEmmManaged {

  self = [super init];
  if (self) {
    _isEmmManaged = isEmmManaged;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPasswordLoginSuccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPasswordLoginSuccessDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPasswordLoginSuccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.isEmmManaged hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPasswordLoginSuccessDetails:other];
}

- (BOOL)isEqualToPasswordLoginSuccessDetails:(DBTEAMLOGPasswordLoginSuccessDetails *)aPasswordLoginSuccessDetails {
  if (self == aPasswordLoginSuccessDetails) {
    return YES;
  }
  if (![self.isEmmManaged isEqual:aPasswordLoginSuccessDetails.isEmmManaged]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPasswordLoginSuccessDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPasswordLoginSuccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"is_emm_managed"] = valueObj.isEmmManaged;

  return jsonDict;
}

+ (DBTEAMLOGPasswordLoginSuccessDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *isEmmManaged = valueDict[@"is_emm_managed"];

  return [[DBTEAMLOGPasswordLoginSuccessDetails alloc] initWithIsEmmManaged:isEmmManaged];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPasswordResetAllDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPasswordResetAllDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPasswordResetAllDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPasswordResetAllDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPasswordResetAllDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPasswordResetAllDetails:other];
}

- (BOOL)isEqualToPasswordResetAllDetails:(DBTEAMLOGPasswordResetAllDetails *)aPasswordResetAllDetails {
  if (self == aPasswordResetAllDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPasswordResetAllDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPasswordResetAllDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGPasswordResetAllDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGPasswordResetAllDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPasswordResetDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPasswordResetDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPasswordResetDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPasswordResetDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPasswordResetDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPasswordResetDetails:other];
}

- (BOOL)isEqualToPasswordResetDetails:(DBTEAMLOGPasswordResetDetails *)aPasswordResetDetails {
  if (self == aPasswordResetDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPasswordResetDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPasswordResetDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGPasswordResetDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGPasswordResetDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNamespaceRelativePathLogInfo.h"
#import "DBTEAMLOGPathLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGPathLogInfo

#pragma mark - Constructors

- (instancetype)initWithNamespaceRelative:(DBTEAMLOGNamespaceRelativePathLogInfo *)namespaceRelative
                               contextual:(NSString *)contextual {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"/(.|[\\r\\n])*"]](contextual);

  self = [super init];
  if (self) {
    _contextual = contextual;
    _namespaceRelative = namespaceRelative;
  }
  return self;
}

- (instancetype)initWithNamespaceRelative:(DBTEAMLOGNamespaceRelativePathLogInfo *)namespaceRelative {
  return [self initWithNamespaceRelative:namespaceRelative contextual:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPathLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPathLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPathLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.namespaceRelative hash];
  if (self.contextual) {
    result = prime * result + [self.contextual hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPathLogInfo:other];
}

- (BOOL)isEqualToPathLogInfo:(DBTEAMLOGPathLogInfo *)aPathLogInfo {
  if (self == aPathLogInfo) {
    return YES;
  }
  if (![self.namespaceRelative isEqual:aPathLogInfo.namespaceRelative]) {
    return NO;
  }
  if (self.contextual) {
    if (![self.contextual isEqual:aPathLogInfo.contextual]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPathLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPathLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"namespace_relative"] =
      [DBTEAMLOGNamespaceRelativePathLogInfoSerializer serialize:valueObj.namespaceRelative];
  if (valueObj.contextual) {
    jsonDict[@"contextual"] = valueObj.contextual;
  }

  return jsonDict;
}

+ (DBTEAMLOGPathLogInfo *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGNamespaceRelativePathLogInfo *namespaceRelative =
      [DBTEAMLOGNamespaceRelativePathLogInfoSerializer deserialize:valueDict[@"namespace_relative"]];
  NSString *contextual = valueDict[@"contextual"] ?: nil;

  return [[DBTEAMLOGPathLogInfo alloc] initWithNamespaceRelative:namespaceRelative contextual:contextual];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnableDisableChangePolicy.h"
#import "DBTEAMLOGPermanentDeleteChangePolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGPermanentDeleteChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue
                    previousValue:(DBTEAMLOGEnableDisableChangePolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPermanentDeleteChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPermanentDeleteChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPermanentDeleteChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPermanentDeleteChangePolicyDetails:other];
}

- (BOOL)isEqualToPermanentDeleteChangePolicyDetails:
    (DBTEAMLOGPermanentDeleteChangePolicyDetails *)aPermanentDeleteChangePolicyDetails {
  if (self == aPermanentDeleteChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aPermanentDeleteChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aPermanentDeleteChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPermanentDeleteChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPermanentDeleteChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGPermanentDeleteChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGEnableDisableChangePolicy *dNewValue =
      [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGEnableDisableChangePolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGPermanentDeleteChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGPlacementRestriction.h"

#pragma mark - API Object

@implementation DBTEAMLOGPlacementRestriction

#pragma mark - Constructors

- (instancetype)initWithEuropeOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPlacementRestrictionEuropeOnly;
  }
  return self;
}

- (instancetype)initWithNone {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPlacementRestrictionNone;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGPlacementRestrictionOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isEuropeOnly {
  return _tag == DBTEAMLOGPlacementRestrictionEuropeOnly;
}

- (BOOL)isNone {
  return _tag == DBTEAMLOGPlacementRestrictionNone;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGPlacementRestrictionOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGPlacementRestrictionEuropeOnly:
    return @"DBTEAMLOGPlacementRestrictionEuropeOnly";
  case DBTEAMLOGPlacementRestrictionNone:
    return @"DBTEAMLOGPlacementRestrictionNone";
  case DBTEAMLOGPlacementRestrictionOther:
    return @"DBTEAMLOGPlacementRestrictionOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGPlacementRestrictionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGPlacementRestrictionSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGPlacementRestrictionSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGPlacementRestrictionEuropeOnly:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPlacementRestrictionNone:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGPlacementRestrictionOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPlacementRestriction:other];
}

- (BOOL)isEqualToPlacementRestriction:(DBTEAMLOGPlacementRestriction *)aPlacementRestriction {
  if (self == aPlacementRestriction) {
    return YES;
  }
  if (self.tag != aPlacementRestriction.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGPlacementRestrictionEuropeOnly:
    return [[self tagName] isEqual:[aPlacementRestriction tagName]];
  case DBTEAMLOGPlacementRestrictionNone:
    return [[self tagName] isEqual:[aPlacementRestriction tagName]];
  case DBTEAMLOGPlacementRestrictionOther:
    return [[self tagName] isEqual:[aPlacementRestriction tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGPlacementRestrictionSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGPlacementRestriction *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isEuropeOnly]) {
    jsonDict[@".tag"] = @"europe_only";
  } else if ([valueObj isNone]) {
    jsonDict[@".tag"] = @"none";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGPlacementRestriction *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"europe_only"]) {
    return [[DBTEAMLOGPlacementRestriction alloc] initWithEuropeOnly];
  } else if ([tag isEqualToString:@"none"]) {
    return [[DBTEAMLOGPlacementRestriction alloc] initWithNone];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGPlacementRestriction alloc] initWithOther];
  } else {
    return [[DBTEAMLOGPlacementRestriction alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGRemoveLogoutUrlDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGRemoveLogoutUrlDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousSsoLogoutUrl:(NSString *)previousSsoLogoutUrl
                            dNewSsoLogoutUrl:(NSString *)dNewSsoLogoutUrl {

  self = [super init];
  if (self) {
    _previousSsoLogoutUrl = previousSsoLogoutUrl;
    _dNewSsoLogoutUrl = dNewSsoLogoutUrl;
  }
  return self;
}

- (instancetype)initWithPreviousSsoLogoutUrl:(NSString *)previousSsoLogoutUrl {
  return [self initWithPreviousSsoLogoutUrl:previousSsoLogoutUrl dNewSsoLogoutUrl:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGRemoveLogoutUrlDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGRemoveLogoutUrlDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGRemoveLogoutUrlDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousSsoLogoutUrl hash];
  if (self.dNewSsoLogoutUrl) {
    result = prime * result + [self.dNewSsoLogoutUrl hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRemoveLogoutUrlDetails:other];
}

- (BOOL)isEqualToRemoveLogoutUrlDetails:(DBTEAMLOGRemoveLogoutUrlDetails *)aRemoveLogoutUrlDetails {
  if (self == aRemoveLogoutUrlDetails) {
    return YES;
  }
  if (![self.previousSsoLogoutUrl isEqual:aRemoveLogoutUrlDetails.previousSsoLogoutUrl]) {
    return NO;
  }
  if (self.dNewSsoLogoutUrl) {
    if (![self.dNewSsoLogoutUrl isEqual:aRemoveLogoutUrlDetails.dNewSsoLogoutUrl]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGRemoveLogoutUrlDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGRemoveLogoutUrlDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_sso_logout_url"] = valueObj.previousSsoLogoutUrl;
  if (valueObj.dNewSsoLogoutUrl) {
    jsonDict[@"new_sso_logout_url"] = valueObj.dNewSsoLogoutUrl;
  }

  return jsonDict;
}

+ (DBTEAMLOGRemoveLogoutUrlDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *previousSsoLogoutUrl = valueDict[@"previous_sso_logout_url"];
  NSString *dNewSsoLogoutUrl = valueDict[@"new_sso_logout_url"] ?: nil;

  return [[DBTEAMLOGRemoveLogoutUrlDetails alloc] initWithPreviousSsoLogoutUrl:previousSsoLogoutUrl
                                                              dNewSsoLogoutUrl:dNewSsoLogoutUrl];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGRemoveSsoUrlDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGRemoveSsoUrlDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousSsoUrl:(NSString *)previousSsoUrl {

  self = [super init];
  if (self) {
    _previousSsoUrl = previousSsoUrl;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGRemoveSsoUrlDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGRemoveSsoUrlDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGRemoveSsoUrlDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousSsoUrl hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToRemoveSsoUrlDetails:other];
}

- (BOOL)isEqualToRemoveSsoUrlDetails:(DBTEAMLOGRemoveSsoUrlDetails *)aRemoveSsoUrlDetails {
  if (self == aRemoveSsoUrlDetails) {
    return YES;
  }
  if (![self.previousSsoUrl isEqual:aRemoveSsoUrlDetails.previousSsoUrl]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGRemoveSsoUrlDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGRemoveSsoUrlDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_sso_url"] = valueObj.previousSsoUrl;

  return jsonDict;
}

+ (DBTEAMLOGRemoveSsoUrlDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *previousSsoUrl = valueDict[@"previous_sso_url"];

  return [[DBTEAMLOGRemoveSsoUrlDetails alloc] initWithPreviousSsoUrl:previousSsoUrl];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGResellerLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGResellerLogInfo

#pragma mark - Constructors

- (instancetype)initWithResellerName:(NSString *)resellerName resellerId:(NSString *)resellerId {

  self = [super init];
  if (self) {
    _resellerName = resellerName;
    _resellerId = resellerId;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGResellerLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGResellerLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGResellerLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.resellerName hash];
  result = prime * result + [self.resellerId hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToResellerLogInfo:other];
}

- (BOOL)isEqualToResellerLogInfo:(DBTEAMLOGResellerLogInfo *)aResellerLogInfo {
  if (self == aResellerLogInfo) {
    return YES;
  }
  if (![self.resellerName isEqual:aResellerLogInfo.resellerName]) {
    return NO;
  }
  if (![self.resellerId isEqual:aResellerLogInfo.resellerId]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGResellerLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGResellerLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"reseller_name"] = valueObj.resellerName;
  jsonDict[@"reseller_id"] = valueObj.resellerId;

  return jsonDict;
}

+ (DBTEAMLOGResellerLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *resellerName = valueDict[@"reseller_name"];
  NSString *resellerId = valueDict[@"reseller_id"];

  return [[DBTEAMLOGResellerLogInfo alloc] initWithResellerName:resellerName resellerId:resellerId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGResellerSupportSessionEndDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGResellerSupportSessionEndDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGResellerSupportSessionEndDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGResellerSupportSessionEndDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGResellerSupportSessionEndDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToResellerSupportSessionEndDetails:other];
}

- (BOOL)isEqualToResellerSupportSessionEndDetails:
    (DBTEAMLOGResellerSupportSessionEndDetails *)aResellerSupportSessionEndDetails {
  if (self == aResellerSupportSessionEndDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGResellerSupportSessionEndDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGResellerSupportSessionEndDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGResellerSupportSessionEndDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGResellerSupportSessionEndDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGResellerSupportSessionStartDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGResellerSupportSessionStartDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGResellerSupportSessionStartDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGResellerSupportSessionStartDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGResellerSupportSessionStartDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToResellerSupportSessionStartDetails:other];
}

- (BOOL)isEqualToResellerSupportSessionStartDetails:
    (DBTEAMLOGResellerSupportSessionStartDetails *)aResellerSupportSessionStartDetails {
  if (self == aResellerSupportSessionStartDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGResellerSupportSessionStartDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGResellerSupportSessionStartDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGResellerSupportSessionStartDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGResellerSupportSessionStartDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSessionsManagementIdleLengthPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSessionsManagementIdleLengthPolicy

#pragma mark - Constructors

- (instancetype)initWithNone {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSessionsManagementIdleLengthPolicyNone;
  }
  return self;
}

- (instancetype)initWithMinute10 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSessionsManagementIdleLengthPolicyMinute10;
  }
  return self;
}

- (instancetype)initWithMinute30 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSessionsManagementIdleLengthPolicyMinute30;
  }
  return self;
}

- (instancetype)initWithHour1 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSessionsManagementIdleLengthPolicyHour1;
  }
  return self;
}

- (instancetype)initWithHour8 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSessionsManagementIdleLengthPolicyHour8;
  }
  return self;
}

- (instancetype)initWithHour24 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSessionsManagementIdleLengthPolicyHour24;
  }
  return self;
}

- (instancetype)initWithHour48 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSessionsManagementIdleLengthPolicyHour48;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSessionsManagementIdleLengthPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isNone {
  return _tag == DBTEAMLOGSessionsManagementIdleLengthPolicyNone;
}

- (BOOL)isMinute10 {
  return _tag == DBTEAMLOGSessionsManagementIdleLengthPolicyMinute10;
}

- (BOOL)isMinute30 {
  return _tag == DBTEAMLOGSessionsManagementIdleLengthPolicyMinute30;
}

- (BOOL)isHour1 {
  return _tag == DBTEAMLOGSessionsManagementIdleLengthPolicyHour1;
}

- (BOOL)isHour8 {
  return _tag == DBTEAMLOGSessionsManagementIdleLengthPolicyHour8;
}

- (BOOL)isHour24 {
  return _tag == DBTEAMLOGSessionsManagementIdleLengthPolicyHour24;
}

- (BOOL)isHour48 {
  return _tag == DBTEAMLOGSessionsManagementIdleLengthPolicyHour48;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGSessionsManagementIdleLengthPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGSessionsManagementIdleLengthPolicyNone:
    return @"DBTEAMLOGSessionsManagementIdleLengthPolicyNone";
  case DBTEAMLOGSessionsManagementIdleLengthPolicyMinute10:
    return @"DBTEAMLOGSessionsManagementIdleLengthPolicyMinute10";
  case DBTEAMLOGSessionsManagementIdleLengthPolicyMinute30:
    return @"DBTEAMLOGSessionsManagementIdleLengthPolicyMinute30";
  case DBTEAMLOGSessionsManagementIdleLengthPolicyHour1:
    return @"DBTEAMLOGSessionsManagementIdleLengthPolicyHour1";
  case DBTEAMLOGSessionsManagementIdleLengthPolicyHour8:
    return @"DBTEAMLOGSessionsManagementIdleLengthPolicyHour8";
  case DBTEAMLOGSessionsManagementIdleLengthPolicyHour24:
    return @"DBTEAMLOGSessionsManagementIdleLengthPolicyHour24";
  case DBTEAMLOGSessionsManagementIdleLengthPolicyHour48:
    return @"DBTEAMLOGSessionsManagementIdleLengthPolicyHour48";
  case DBTEAMLOGSessionsManagementIdleLengthPolicyOther:
    return @"DBTEAMLOGSessionsManagementIdleLengthPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSessionsManagementIdleLengthPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSessionsManagementIdleLengthPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSessionsManagementIdleLengthPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGSessionsManagementIdleLengthPolicyNone:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSessionsManagementIdleLengthPolicyMinute10:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSessionsManagementIdleLengthPolicyMinute30:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSessionsManagementIdleLengthPolicyHour1:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSessionsManagementIdleLengthPolicyHour8:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSessionsManagementIdleLengthPolicyHour24:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSessionsManagementIdleLengthPolicyHour48:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSessionsManagementIdleLengthPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSessionsManagementIdleLengthPolicy:other];
}

- (BOOL)isEqualToSessionsManagementIdleLengthPolicy:
    (DBTEAMLOGSessionsManagementIdleLengthPolicy *)aSessionsManagementIdleLengthPolicy {
  if (self == aSessionsManagementIdleLengthPolicy) {
    return YES;
  }
  if (self.tag != aSessionsManagementIdleLengthPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGSessionsManagementIdleLengthPolicyNone:
    return [[self tagName] isEqual:[aSessionsManagementIdleLengthPolicy tagName]];
  case DBTEAMLOGSessionsManagementIdleLengthPolicyMinute10:
    return [[self tagName] isEqual:[aSessionsManagementIdleLengthPolicy tagName]];
  case DBTEAMLOGSessionsManagementIdleLengthPolicyMinute30:
    return [[self tagName] isEqual:[aSessionsManagementIdleLengthPolicy tagName]];
  case DBTEAMLOGSessionsManagementIdleLengthPolicyHour1:
    return [[self tagName] isEqual:[aSessionsManagementIdleLengthPolicy tagName]];
  case DBTEAMLOGSessionsManagementIdleLengthPolicyHour8:
    return [[self tagName] isEqual:[aSessionsManagementIdleLengthPolicy tagName]];
  case DBTEAMLOGSessionsManagementIdleLengthPolicyHour24:
    return [[self tagName] isEqual:[aSessionsManagementIdleLengthPolicy tagName]];
  case DBTEAMLOGSessionsManagementIdleLengthPolicyHour48:
    return [[self tagName] isEqual:[aSessionsManagementIdleLengthPolicy tagName]];
  case DBTEAMLOGSessionsManagementIdleLengthPolicyOther:
    return [[self tagName] isEqual:[aSessionsManagementIdleLengthPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSessionsManagementIdleLengthPolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSessionsManagementIdleLengthPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isNone]) {
    jsonDict[@".tag"] = @"none";
  } else if ([valueObj isMinute10]) {
    jsonDict[@".tag"] = @"minute_10";
  } else if ([valueObj isMinute30]) {
    jsonDict[@".tag"] = @"minute_30";
  } else if ([valueObj isHour1]) {
    jsonDict[@".tag"] = @"hour_1";
  } else if ([valueObj isHour8]) {
    jsonDict[@".tag"] = @"hour_8";
  } else if ([valueObj isHour24]) {
    jsonDict[@".tag"] = @"hour_24";
  } else if ([valueObj isHour48]) {
    jsonDict[@".tag"] = @"hour_48";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGSessionsManagementIdleLengthPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"none"]) {
    return [[DBTEAMLOGSessionsManagementIdleLengthPolicy alloc] initWithNone];
  } else if ([tag isEqualToString:@"minute_10"]) {
    return [[DBTEAMLOGSessionsManagementIdleLengthPolicy alloc] initWithMinute10];
  } else if ([tag isEqualToString:@"minute_30"]) {
    return [[DBTEAMLOGSessionsManagementIdleLengthPolicy alloc] initWithMinute30];
  } else if ([tag isEqualToString:@"hour_1"]) {
    return [[DBTEAMLOGSessionsManagementIdleLengthPolicy alloc] initWithHour1];
  } else if ([tag isEqualToString:@"hour_8"]) {
    return [[DBTEAMLOGSessionsManagementIdleLengthPolicy alloc] initWithHour8];
  } else if ([tag isEqualToString:@"hour_24"]) {
    return [[DBTEAMLOGSessionsManagementIdleLengthPolicy alloc] initWithHour24];
  } else if ([tag isEqualToString:@"hour_48"]) {
    return [[DBTEAMLOGSessionsManagementIdleLengthPolicy alloc] initWithHour48];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGSessionsManagementIdleLengthPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGSessionsManagementIdleLengthPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSessionsManagementSessionLengthPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSessionsManagementSessionLengthPolicy

#pragma mark - Constructors

- (instancetype)initWithDay1 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSessionsManagementSessionLengthPolicyDay1;
  }
  return self;
}

- (instancetype)initWithDay7 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSessionsManagementSessionLengthPolicyDay7;
  }
  return self;
}

- (instancetype)initWithDay14 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSessionsManagementSessionLengthPolicyDay14;
  }
  return self;
}

- (instancetype)initWithMonth1 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSessionsManagementSessionLengthPolicyMonth1;
  }
  return self;
}

- (instancetype)initWithMonth3 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSessionsManagementSessionLengthPolicyMonth3;
  }
  return self;
}

- (instancetype)initWithMonth6 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSessionsManagementSessionLengthPolicyMonth6;
  }
  return self;
}

- (instancetype)initWithYear1 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSessionsManagementSessionLengthPolicyYear1;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSessionsManagementSessionLengthPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDay1 {
  return _tag == DBTEAMLOGSessionsManagementSessionLengthPolicyDay1;
}

- (BOOL)isDay7 {
  return _tag == DBTEAMLOGSessionsManagementSessionLengthPolicyDay7;
}

- (BOOL)isDay14 {
  return _tag == DBTEAMLOGSessionsManagementSessionLengthPolicyDay14;
}

- (BOOL)isMonth1 {
  return _tag == DBTEAMLOGSessionsManagementSessionLengthPolicyMonth1;
}

- (BOOL)isMonth3 {
  return _tag == DBTEAMLOGSessionsManagementSessionLengthPolicyMonth3;
}

- (BOOL)isMonth6 {
  return _tag == DBTEAMLOGSessionsManagementSessionLengthPolicyMonth6;
}

- (BOOL)isYear1 {
  return _tag == DBTEAMLOGSessionsManagementSessionLengthPolicyYear1;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGSessionsManagementSessionLengthPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGSessionsManagementSessionLengthPolicyDay1:
    return @"DBTEAMLOGSessionsManagementSessionLengthPolicyDay1";
  case DBTEAMLOGSessionsManagementSessionLengthPolicyDay7:
    return @"DBTEAMLOGSessionsManagementSessionLengthPolicyDay7";
  case DBTEAMLOGSessionsManagementSessionLengthPolicyDay14:
    return @"DBTEAMLOGSessionsManagementSessionLengthPolicyDay14";
  case DBTEAMLOGSessionsManagementSessionLengthPolicyMonth1:
    return @"DBTEAMLOGSessionsManagementSessionLengthPolicyMonth1";
  case DBTEAMLOGSessionsManagementSessionLengthPolicyMonth3:
    return @"DBTEAMLOGSessionsManagementSessionLengthPolicyMonth3";
  case DBTEAMLOGSessionsManagementSessionLengthPolicyMonth6:
    return @"DBTEAMLOGSessionsManagementSessionLengthPolicyMonth6";
  case DBTEAMLOGSessionsManagementSessionLengthPolicyYear1:
    return @"DBTEAMLOGSessionsManagementSessionLengthPolicyYear1";
  case DBTEAMLOGSessionsManagementSessionLengthPolicyOther:
    return @"DBTEAMLOGSessionsManagementSessionLengthPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSessionsManagementSessionLengthPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSessionsManagementSessionLengthPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSessionsManagementSessionLengthPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGSessionsManagementSessionLengthPolicyDay1:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSessionsManagementSessionLengthPolicyDay7:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSessionsManagementSessionLengthPolicyDay14:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSessionsManagementSessionLengthPolicyMonth1:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSessionsManagementSessionLengthPolicyMonth3:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSessionsManagementSessionLengthPolicyMonth6:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSessionsManagementSessionLengthPolicyYear1:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSessionsManagementSessionLengthPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSessionsManagementSessionLengthPolicy:other];
}

- (BOOL)isEqualToSessionsManagementSessionLengthPolicy:
    (DBTEAMLOGSessionsManagementSessionLengthPolicy *)aSessionsManagementSessionLengthPolicy {
  if (self == aSessionsManagementSessionLengthPolicy) {
    return YES;
  }
  if (self.tag != aSessionsManagementSessionLengthPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGSessionsManagementSessionLengthPolicyDay1:
    return [[self tagName] isEqual:[aSessionsManagementSessionLengthPolicy tagName]];
  case DBTEAMLOGSessionsManagementSessionLengthPolicyDay7:
    return [[self tagName] isEqual:[aSessionsManagementSessionLengthPolicy tagName]];
  case DBTEAMLOGSessionsManagementSessionLengthPolicyDay14:
    return [[self tagName] isEqual:[aSessionsManagementSessionLengthPolicy tagName]];
  case DBTEAMLOGSessionsManagementSessionLengthPolicyMonth1:
    return [[self tagName] isEqual:[aSessionsManagementSessionLengthPolicy tagName]];
  case DBTEAMLOGSessionsManagementSessionLengthPolicyMonth3:
    return [[self tagName] isEqual:[aSessionsManagementSessionLengthPolicy tagName]];
  case DBTEAMLOGSessionsManagementSessionLengthPolicyMonth6:
    return [[self tagName] isEqual:[aSessionsManagementSessionLengthPolicy tagName]];
  case DBTEAMLOGSessionsManagementSessionLengthPolicyYear1:
    return [[self tagName] isEqual:[aSessionsManagementSessionLengthPolicy tagName]];
  case DBTEAMLOGSessionsManagementSessionLengthPolicyOther:
    return [[self tagName] isEqual:[aSessionsManagementSessionLengthPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSessionsManagementSessionLengthPolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSessionsManagementSessionLengthPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDay1]) {
    jsonDict[@".tag"] = @"day_1";
  } else if ([valueObj isDay7]) {
    jsonDict[@".tag"] = @"day_7";
  } else if ([valueObj isDay14]) {
    jsonDict[@".tag"] = @"day_14";
  } else if ([valueObj isMonth1]) {
    jsonDict[@".tag"] = @"month_1";
  } else if ([valueObj isMonth3]) {
    jsonDict[@".tag"] = @"month_3";
  } else if ([valueObj isMonth6]) {
    jsonDict[@".tag"] = @"month_6";
  } else if ([valueObj isYear1]) {
    jsonDict[@".tag"] = @"year_1";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGSessionsManagementSessionLengthPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"day_1"]) {
    return [[DBTEAMLOGSessionsManagementSessionLengthPolicy alloc] initWithDay1];
  } else if ([tag isEqualToString:@"day_7"]) {
    return [[DBTEAMLOGSessionsManagementSessionLengthPolicy alloc] initWithDay7];
  } else if ([tag isEqualToString:@"day_14"]) {
    return [[DBTEAMLOGSessionsManagementSessionLengthPolicy alloc] initWithDay14];
  } else if ([tag isEqualToString:@"month_1"]) {
    return [[DBTEAMLOGSessionsManagementSessionLengthPolicy alloc] initWithMonth1];
  } else if ([tag isEqualToString:@"month_3"]) {
    return [[DBTEAMLOGSessionsManagementSessionLengthPolicy alloc] initWithMonth3];
  } else if ([tag isEqualToString:@"month_6"]) {
    return [[DBTEAMLOGSessionsManagementSessionLengthPolicy alloc] initWithMonth6];
  } else if ([tag isEqualToString:@"year_1"]) {
    return [[DBTEAMLOGSessionsManagementSessionLengthPolicy alloc] initWithYear1];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGSessionsManagementSessionLengthPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGSessionsManagementSessionLengthPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfAddGroupDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfAddGroupDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                           teamName:(NSString *)teamName
                  sharingPermission:(NSString *)sharingPermission {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharingPermission = sharingPermission;
    _teamName = teamName;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                           teamName:(NSString *)teamName {
  return [self initWithTargetIndex:targetIndex
                originalFolderName:originalFolderName
                          teamName:teamName
                 sharingPermission:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSfAddGroupDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSfAddGroupDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfAddGroupDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  result = prime * result + [self.teamName hash];
  if (self.sharingPermission) {
    result = prime * result + [self.sharingPermission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfAddGroupDetails:other];
}

- (BOOL)isEqualToSfAddGroupDetails:(DBTEAMLOGSfAddGroupDetails *)aSfAddGroupDetails {
  if (self == aSfAddGroupDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSfAddGroupDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfAddGroupDetails.originalFolderName]) {
    return NO;
  }
  if (![self.teamName isEqual:aSfAddGroupDetails.teamName]) {
    return NO;
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aSfAddGroupDetails.sharingPermission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfAddGroupDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSfAddGroupDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  jsonDict[@"team_name"] = valueObj.teamName;
  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }

  return jsonDict;
}

+ (DBTEAMLOGSfAddGroupDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  NSString *teamName = valueDict[@"team_name"];
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;

  return [[DBTEAMLOGSfAddGroupDetails alloc] initWithTargetIndex:targetIndex
                                              originalFolderName:originalFolderName
                                                        teamName:teamName
                                               sharingPermission:sharingPermission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                   sharedFolderType:(NSString *)sharedFolderType {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharedFolderType = sharedFolderType;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex originalFolderName:(NSString *)originalFolderName {
  return [self initWithTargetIndex:targetIndex originalFolderName:originalFolderName sharedFolderType:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  if (self.sharedFolderType) {
    result = prime * result + [self.sharedFolderType hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfAllowNonMembersToViewSharedLinksDetails:other];
}

- (BOOL)isEqualToSfAllowNonMembersToViewSharedLinksDetails:
    (DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails *)aSfAllowNonMembersToViewSharedLinksDetails {
  if (self == aSfAllowNonMembersToViewSharedLinksDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSfAllowNonMembersToViewSharedLinksDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfAllowNonMembersToViewSharedLinksDetails.originalFolderName]) {
    return NO;
  }
  if (self.sharedFolderType) {
    if (![self.sharedFolderType isEqual:aSfAllowNonMembersToViewSharedLinksDetails.sharedFolderType]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  if (valueObj.sharedFolderType) {
    jsonDict[@"shared_folder_type"] = valueObj.sharedFolderType;
  }

  return jsonDict;
}

+ (DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  NSString *sharedFolderType = valueDict[@"shared_folder_type"] ?: nil;

  return [[DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails alloc] initWithTargetIndex:targetIndex
                                                                      originalFolderName:originalFolderName
                                                                        sharedFolderType:sharedFolderType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfExternalInviteWarnDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfExternalInviteWarnDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSfExternalInviteWarnDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSfExternalInviteWarnDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfExternalInviteWarnDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfExternalInviteWarnDetails:other];
}

- (BOOL)isEqualToSfExternalInviteWarnDetails:(DBTEAMLOGSfExternalInviteWarnDetails *)aSfExternalInviteWarnDetails {
  if (self == aSfExternalInviteWarnDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfExternalInviteWarnDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSfExternalInviteWarnDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGSfExternalInviteWarnDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSfExternalInviteWarnDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfInviteGroupDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfInviteGroupDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSfInviteGroupDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSfInviteGroupDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfInviteGroupDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfInviteGroupDetails:other];
}

- (BOOL)isEqualToSfInviteGroupDetails:(DBTEAMLOGSfInviteGroupDetails *)aSfInviteGroupDetails {
  if (self == aSfInviteGroupDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSfInviteGroupDetails.targetIndex]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfInviteGroupDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSfInviteGroupDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;

  return jsonDict;
}

+ (DBTEAMLOGSfInviteGroupDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];

  return [[DBTEAMLOGSfInviteGroupDetails alloc] initWithTargetIndex:targetIndex];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfNestDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfNestDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                     prevParentNsId:(NSString *)prevParentNsId
                     dNewParentNsId:(NSString *)dNewParentNsId {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](prevParentNsId);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](dNewParentNsId);

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _prevParentNsId = prevParentNsId;
    _dNewParentNsId = dNewParentNsId;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex originalFolderName:(NSString *)originalFolderName {
  return [self initWithTargetIndex:targetIndex
                originalFolderName:originalFolderName
                    prevParentNsId:nil
                    dNewParentNsId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSfNestDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSfNestDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfNestDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  if (self.prevParentNsId) {
    result = prime * result + [self.prevParentNsId hash];
  }
  if (self.dNewParentNsId) {
    result = prime * result + [self.dNewParentNsId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfNestDetails:other];
}

- (BOOL)isEqualToSfNestDetails:(DBTEAMLOGSfNestDetails *)aSfNestDetails {
  if (self == aSfNestDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSfNestDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfNestDetails.originalFolderName]) {
    return NO;
  }
  if (self.prevParentNsId) {
    if (![self.prevParentNsId isEqual:aSfNestDetails.prevParentNsId]) {
      return NO;
    }
  }
  if (self.dNewParentNsId) {
    if (![self.dNewParentNsId isEqual:aSfNestDetails.dNewParentNsId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfNestDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSfNestDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  if (valueObj.prevParentNsId) {
    jsonDict[@"prev_parent_ns_id"] = valueObj.prevParentNsId;
  }
  if (valueObj.dNewParentNsId) {
    jsonDict[@"new_parent_ns_id"] = valueObj.dNewParentNsId;
  }

  return jsonDict;
}

+ (DBTEAMLOGSfNestDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  NSString *prevParentNsId = valueDict[@"prev_parent_ns_id"] ?: nil;
  NSString *dNewParentNsId = valueDict[@"new_parent_ns_id"] ?: nil;

  return [[DBTEAMLOGSfNestDetails alloc] initWithTargetIndex:targetIndex
                                          originalFolderName:originalFolderName
                                              prevParentNsId:prevParentNsId
                                              dNewParentNsId:dNewParentNsId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamDeclineDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamDeclineDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex originalFolderName:(NSString *)originalFolderName {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamDeclineDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSfTeamDeclineDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamDeclineDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamDeclineDetails:other];
}

- (BOOL)isEqualToSfTeamDeclineDetails:(DBTEAMLOGSfTeamDeclineDetails *)aSfTeamDeclineDetails {
  if (self == aSfTeamDeclineDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSfTeamDeclineDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfTeamDeclineDetails.originalFolderName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamDeclineDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSfTeamDeclineDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;

  return jsonDict;
}

+ (DBTEAMLOGSfTeamDeclineDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];

  return [[DBTEAMLOGSfTeamDeclineDetails alloc] initWithTargetIndex:targetIndex originalFolderName:originalFolderName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamGrantAccessDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamGrantAccessDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex originalFolderName:(NSString *)originalFolderName {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamGrantAccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSfTeamGrantAccessDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamGrantAccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamGrantAccessDetails:other];
}

- (BOOL)isEqualToSfTeamGrantAccessDetails:(DBTEAMLOGSfTeamGrantAccessDetails *)aSfTeamGrantAccessDetails {
  if (self == aSfTeamGrantAccessDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSfTeamGrantAccessDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfTeamGrantAccessDetails.originalFolderName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamGrantAccessDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSfTeamGrantAccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;

  return jsonDict;
}

+ (DBTEAMLOGSfTeamGrantAccessDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];

  return
      [[DBTEAMLOGSfTeamGrantAccessDetails alloc] initWithTargetIndex:targetIndex originalFolderName:originalFolderName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamInviteChangeRoleDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamInviteChangeRoleDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                  sharingPermission:(NSString *)sharingPermission
          previousSharingPermission:(NSString *)previousSharingPermission {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharingPermission = sharingPermission;
    _previousSharingPermission = previousSharingPermission;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex originalFolderName:(NSString *)originalFolderName {
  return [self initWithTargetIndex:targetIndex
                originalFolderName:originalFolderName
                 sharingPermission:nil
         previousSharingPermission:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamInviteChangeRoleDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSfTeamInviteChangeRoleDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamInviteChangeRoleDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  if (self.sharingPermission) {
    result = prime * result + [self.sharingPermission hash];
  }
  if (self.previousSharingPermission) {
    result = prime * result + [self.previousSharingPermission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamInviteChangeRoleDetails:other];
}

- (BOOL)isEqualToSfTeamInviteChangeRoleDetails:
    (DBTEAMLOGSfTeamInviteChangeRoleDetails *)aSfTeamInviteChangeRoleDetails {
  if (self == aSfTeamInviteChangeRoleDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSfTeamInviteChangeRoleDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfTeamInviteChangeRoleDetails.originalFolderName]) {
    return NO;
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aSfTeamInviteChangeRoleDetails.sharingPermission]) {
      return NO;
    }
  }
  if (self.previousSharingPermission) {
    if (![self.previousSharingPermission isEqual:aSfTeamInviteChangeRoleDetails.previousSharingPermission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamInviteChangeRoleDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSfTeamInviteChangeRoleDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }
  if (valueObj.previousSharingPermission) {
    jsonDict[@"previous_sharing_permission"] = valueObj.previousSharingPermission;
  }

  return jsonDict;
}

+ (DBTEAMLOGSfTeamInviteChangeRoleDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;
  NSString *previousSharingPermission = valueDict[@"previous_sharing_permission"] ?: nil;

  return [[DBTEAMLOGSfTeamInviteChangeRoleDetails alloc] initWithTargetIndex:targetIndex
                                                          originalFolderName:originalFolderName
                                                           sharingPermission:sharingPermission
                                                   previousSharingPermission:previousSharingPermission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamInviteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamInviteDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                  sharingPermission:(NSString *)sharingPermission {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharingPermission = sharingPermission;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex originalFolderName:(NSString *)originalFolderName {
  return [self initWithTargetIndex:targetIndex originalFolderName:originalFolderName sharingPermission:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamInviteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSfTeamInviteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamInviteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  if (self.sharingPermission) {
    result = prime * result + [self.sharingPermission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamInviteDetails:other];
}

- (BOOL)isEqualToSfTeamInviteDetails:(DBTEAMLOGSfTeamInviteDetails *)aSfTeamInviteDetails {
  if (self == aSfTeamInviteDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSfTeamInviteDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfTeamInviteDetails.originalFolderName]) {
    return NO;
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aSfTeamInviteDetails.sharingPermission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamInviteDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSfTeamInviteDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }

  return jsonDict;
}

+ (DBTEAMLOGSfTeamInviteDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;

  return [[DBTEAMLOGSfTeamInviteDetails alloc] initWithTargetIndex:targetIndex
                                                originalFolderName:originalFolderName
                                                 sharingPermission:sharingPermission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamJoinDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamJoinDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex originalFolderName:(NSString *)originalFolderName {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamJoinDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSfTeamJoinDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamJoinDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamJoinDetails:other];
}

- (BOOL)isEqualToSfTeamJoinDetails:(DBTEAMLOGSfTeamJoinDetails *)aSfTeamJoinDetails {
  if (self == aSfTeamJoinDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSfTeamJoinDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfTeamJoinDetails.originalFolderName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamJoinDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSfTeamJoinDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;

  return jsonDict;
}

+ (DBTEAMLOGSfTeamJoinDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];

  return [[DBTEAMLOGSfTeamJoinDetails alloc] initWithTargetIndex:targetIndex originalFolderName:originalFolderName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamJoinFromOobLinkDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamJoinFromOobLinkDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                           tokenKey:(NSString *)tokenKey
                  sharingPermission:(NSString *)sharingPermission {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _tokenKey = tokenKey;
    _sharingPermission = sharingPermission;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex originalFolderName:(NSString *)originalFolderName {
  return
      [self initWithTargetIndex:targetIndex originalFolderName:originalFolderName tokenKey:nil sharingPermission:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamJoinFromOobLinkDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSfTeamJoinFromOobLinkDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamJoinFromOobLinkDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  if (self.tokenKey) {
    result = prime * result + [self.tokenKey hash];
  }
  if (self.sharingPermission) {
    result = prime * result + [self.sharingPermission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamJoinFromOobLinkDetails:other];
}

- (BOOL)isEqualToSfTeamJoinFromOobLinkDetails:(DBTEAMLOGSfTeamJoinFromOobLinkDetails *)aSfTeamJoinFromOobLinkDetails {
  if (self == aSfTeamJoinFromOobLinkDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSfTeamJoinFromOobLinkDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfTeamJoinFromOobLinkDetails.originalFolderName]) {
    return NO;
  }
  if (self.tokenKey) {
    if (![self.tokenKey isEqual:aSfTeamJoinFromOobLinkDetails.tokenKey]) {
      return NO;
    }
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aSfTeamJoinFromOobLinkDetails.sharingPermission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamJoinFromOobLinkDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSfTeamJoinFromOobLinkDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  if (valueObj.tokenKey) {
    jsonDict[@"token_key"] = valueObj.tokenKey;
  }
  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }

  return jsonDict;
}

+ (DBTEAMLOGSfTeamJoinFromOobLinkDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  NSString *tokenKey = valueDict[@"token_key"] ?: nil;
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;

  return [[DBTEAMLOGSfTeamJoinFromOobLinkDetails alloc] initWithTargetIndex:targetIndex
                                                         originalFolderName:originalFolderName
                                                                   tokenKey:tokenKey
                                                          sharingPermission:sharingPermission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSfTeamUninviteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSfTeamUninviteDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex originalFolderName:(NSString *)originalFolderName {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSfTeamUninviteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSfTeamUninviteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSfTeamUninviteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSfTeamUninviteDetails:other];
}

- (BOOL)isEqualToSfTeamUninviteDetails:(DBTEAMLOGSfTeamUninviteDetails *)aSfTeamUninviteDetails {
  if (self == aSfTeamUninviteDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSfTeamUninviteDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSfTeamUninviteDetails.originalFolderName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSfTeamUninviteDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSfTeamUninviteDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;

  return jsonDict;
}

+ (DBTEAMLOGSfTeamUninviteDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];

  return [[DBTEAMLOGSfTeamUninviteDetails alloc] initWithTargetIndex:targetIndex originalFolderName:originalFolderName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentAddInviteesDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentAddInviteesDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                  sharingPermission:(NSString *)sharingPermission {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharingPermission = sharingPermission;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex {
  return [self initWithTargetIndex:targetIndex originalFolderName:nil sharingPermission:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentAddInviteesDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentAddInviteesDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentAddInviteesDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  if (self.originalFolderName) {
    result = prime * result + [self.originalFolderName hash];
  }
  if (self.sharingPermission) {
    result = prime * result + [self.sharingPermission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentAddInviteesDetails:other];
}

- (BOOL)isEqualToSharedContentAddInviteesDetails:
    (DBTEAMLOGSharedContentAddInviteesDetails *)aSharedContentAddInviteesDetails {
  if (self == aSharedContentAddInviteesDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentAddInviteesDetails.targetIndex]) {
    return NO;
  }
  if (self.originalFolderName) {
    if (![self.originalFolderName isEqual:aSharedContentAddInviteesDetails.originalFolderName]) {
      return NO;
    }
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aSharedContentAddInviteesDetails.sharingPermission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentAddInviteesDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentAddInviteesDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.originalFolderName) {
    jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  }
  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentAddInviteesDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"] ?: nil;
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;

  return [[DBTEAMLOGSharedContentAddInviteesDetails alloc] initWithTargetIndex:targetIndex
                                                            originalFolderName:originalFolderName
                                                             sharingPermission:sharingPermission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentAddLinkExpiryDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentAddLinkExpiryDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                expirationStartDate:(NSString *)expirationStartDate
                     expirationDays:(NSNumber *)expirationDays
                 originalFolderName:(NSString *)originalFolderName
                   sharedFolderType:(NSString *)sharedFolderType {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharedFolderType = sharedFolderType;
    _expirationStartDate = expirationStartDate;
    _expirationDays = expirationDays;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                expirationStartDate:(NSString *)expirationStartDate
                     expirationDays:(NSNumber *)expirationDays {
  return [self initWithTargetIndex:targetIndex
               expirationStartDate:expirationStartDate
                    expirationDays:expirationDays
                originalFolderName:nil
                  sharedFolderType:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentAddLinkExpiryDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentAddLinkExpiryDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentAddLinkExpiryDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.expirationStartDate hash];
  result = prime * result + [self.expirationDays hash];
  if (self.originalFolderName) {
    result = prime * result + [self.originalFolderName hash];
  }
  if (self.sharedFolderType) {
    result = prime * result + [self.sharedFolderType hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentAddLinkExpiryDetails:other];
}

- (BOOL)isEqualToSharedContentAddLinkExpiryDetails:
    (DBTEAMLOGSharedContentAddLinkExpiryDetails *)aSharedContentAddLinkExpiryDetails {
  if (self == aSharedContentAddLinkExpiryDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentAddLinkExpiryDetails.targetIndex]) {
    return NO;
  }
  if (![self.expirationStartDate isEqual:aSharedContentAddLinkExpiryDetails.expirationStartDate]) {
    return NO;
  }
  if (![self.expirationDays isEqual:aSharedContentAddLinkExpiryDetails.expirationDays]) {
    return NO;
  }
  if (self.originalFolderName) {
    if (![self.originalFolderName isEqual:aSharedContentAddLinkExpiryDetails.originalFolderName]) {
      return NO;
    }
  }
  if (self.sharedFolderType) {
    if (![self.sharedFolderType isEqual:aSharedContentAddLinkExpiryDetails.sharedFolderType]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentAddLinkExpiryDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentAddLinkExpiryDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"expiration_start_date"] = valueObj.expirationStartDate;
  jsonDict[@"expiration_days"] = valueObj.expirationDays;
  if (valueObj.originalFolderName) {
    jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  }
  if (valueObj.sharedFolderType) {
    jsonDict[@"shared_folder_type"] = valueObj.sharedFolderType;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentAddLinkExpiryDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *expirationStartDate = valueDict[@"expiration_start_date"];
  NSNumber *expirationDays = valueDict[@"expiration_days"];
  NSString *originalFolderName = valueDict[@"original_folder_name"] ?: nil;
  NSString *sharedFolderType = valueDict[@"shared_folder_type"] ?: nil;

  return [[DBTEAMLOGSharedContentAddLinkExpiryDetails alloc] initWithTargetIndex:targetIndex
                                                             expirationStartDate:expirationStartDate
                                                                  expirationDays:expirationDays
                                                              originalFolderName:originalFolderName
                                                                sharedFolderType:sharedFolderType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentAddLinkPasswordDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentAddLinkPasswordDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                   sharedFolderType:(NSString *)sharedFolderType {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharedFolderType = sharedFolderType;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex {
  return [self initWithTargetIndex:targetIndex originalFolderName:nil sharedFolderType:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentAddLinkPasswordDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentAddLinkPasswordDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentAddLinkPasswordDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  if (self.originalFolderName) {
    result = prime * result + [self.originalFolderName hash];
  }
  if (self.sharedFolderType) {
    result = prime * result + [self.sharedFolderType hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentAddLinkPasswordDetails:other];
}

- (BOOL)isEqualToSharedContentAddLinkPasswordDetails:
    (DBTEAMLOGSharedContentAddLinkPasswordDetails *)aSharedContentAddLinkPasswordDetails {
  if (self == aSharedContentAddLinkPasswordDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentAddLinkPasswordDetails.targetIndex]) {
    return NO;
  }
  if (self.originalFolderName) {
    if (![self.originalFolderName isEqual:aSharedContentAddLinkPasswordDetails.originalFolderName]) {
      return NO;
    }
  }
  if (self.sharedFolderType) {
    if (![self.sharedFolderType isEqual:aSharedContentAddLinkPasswordDetails.sharedFolderType]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentAddLinkPasswordDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentAddLinkPasswordDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.originalFolderName) {
    jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  }
  if (valueObj.sharedFolderType) {
    jsonDict[@"shared_folder_type"] = valueObj.sharedFolderType;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentAddLinkPasswordDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"] ?: nil;
  NSString *sharedFolderType = valueDict[@"shared_folder_type"] ?: nil;

  return [[DBTEAMLOGSharedContentAddLinkPasswordDetails alloc] initWithTargetIndex:targetIndex
                                                                originalFolderName:originalFolderName
                                                                  sharedFolderType:sharedFolderType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentAddMemberDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentAddMemberDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                  sharingPermission:(NSString *)sharingPermission
                   sharedFolderType:(NSString *)sharedFolderType {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharingPermission = sharingPermission;
    _sharedFolderType = sharedFolderType;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex {
  return [self initWithTargetIndex:targetIndex originalFolderName:nil sharingPermission:nil sharedFolderType:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentAddMemberDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentAddMemberDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentAddMemberDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  if (self.originalFolderName) {
    result = prime * result + [self.originalFolderName hash];
  }
  if (self.sharingPermission) {
    result = prime * result + [self.sharingPermission hash];
  }
  if (self.sharedFolderType) {
    result = prime * result + [self.sharedFolderType hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentAddMemberDetails:other];
}

- (BOOL)isEqualToSharedContentAddMemberDetails:
    (DBTEAMLOGSharedContentAddMemberDetails *)aSharedContentAddMemberDetails {
  if (self == aSharedContentAddMemberDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentAddMemberDetails.targetIndex]) {
    return NO;
  }
  if (self.originalFolderName) {
    if (![self.originalFolderName isEqual:aSharedContentAddMemberDetails.originalFolderName]) {
      return NO;
    }
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aSharedContentAddMemberDetails.sharingPermission]) {
      return NO;
    }
  }
  if (self.sharedFolderType) {
    if (![self.sharedFolderType isEqual:aSharedContentAddMemberDetails.sharedFolderType]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentAddMemberDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentAddMemberDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.originalFolderName) {
    jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  }
  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }
  if (valueObj.sharedFolderType) {
    jsonDict[@"shared_folder_type"] = valueObj.sharedFolderType;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentAddMemberDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"] ?: nil;
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;
  NSString *sharedFolderType = valueDict[@"shared_folder_type"] ?: nil;

  return [[DBTEAMLOGSharedContentAddMemberDetails alloc] initWithTargetIndex:targetIndex
                                                          originalFolderName:originalFolderName
                                                           sharingPermission:sharingPermission
                                                            sharedFolderType:sharedFolderType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnableDisableChangePolicy.h"
#import "DBTEAMLOGSharedContentChangeDownloadsPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeDownloadsPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                          dNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue
                 originalFolderName:(NSString *)originalFolderName
                   sharedFolderType:(NSString *)sharedFolderType
                      previousValue:(DBTEAMLOGEnableDisableChangePolicy *)previousValue {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharedFolderType = sharedFolderType;
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex dNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue {
  return [self initWithTargetIndex:targetIndex
                         dNewValue:dNewValue
                originalFolderName:nil
                  sharedFolderType:nil
                     previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeDownloadsPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentChangeDownloadsPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeDownloadsPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.dNewValue hash];
  if (self.originalFolderName) {
    result = prime * result + [self.originalFolderName hash];
  }
  if (self.sharedFolderType) {
    result = prime * result + [self.sharedFolderType hash];
  }
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeDownloadsPolicyDetails:other];
}

- (BOOL)isEqualToSharedContentChangeDownloadsPolicyDetails:
    (DBTEAMLOGSharedContentChangeDownloadsPolicyDetails *)aSharedContentChangeDownloadsPolicyDetails {
  if (self == aSharedContentChangeDownloadsPolicyDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentChangeDownloadsPolicyDetails.targetIndex]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aSharedContentChangeDownloadsPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.originalFolderName) {
    if (![self.originalFolderName isEqual:aSharedContentChangeDownloadsPolicyDetails.originalFolderName]) {
      return NO;
    }
  }
  if (self.sharedFolderType) {
    if (![self.sharedFolderType isEqual:aSharedContentChangeDownloadsPolicyDetails.sharedFolderType]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedContentChangeDownloadsPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeDownloadsPolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentChangeDownloadsPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"new_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.originalFolderName) {
    jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  }
  if (valueObj.sharedFolderType) {
    jsonDict[@"shared_folder_type"] = valueObj.sharedFolderType;
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentChangeDownloadsPolicyDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  DBTEAMLOGEnableDisableChangePolicy *dNewValue =
      [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"new_value"]];
  NSString *originalFolderName = valueDict[@"original_folder_name"] ?: nil;
  NSString *sharedFolderType = valueDict[@"shared_folder_type"] ?: nil;
  DBTEAMLOGEnableDisableChangePolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGSharedContentChangeDownloadsPolicyDetails alloc] initWithTargetIndex:targetIndex
                                                                               dNewValue:dNewValue
                                                                      originalFolderName:originalFolderName
                                                                        sharedFolderType:sharedFolderType
                                                                           previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentChangeInviteeRoleDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeInviteeRoleDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
          previousSharingPermission:(NSString *)previousSharingPermission
                  sharingPermission:(NSString *)sharingPermission {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _previousSharingPermission = previousSharingPermission;
    _sharingPermission = sharingPermission;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex originalFolderName:(NSString *)originalFolderName {
  return [self initWithTargetIndex:targetIndex
                originalFolderName:originalFolderName
         previousSharingPermission:nil
                 sharingPermission:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeInviteeRoleDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentChangeInviteeRoleDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeInviteeRoleDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  if (self.previousSharingPermission) {
    result = prime * result + [self.previousSharingPermission hash];
  }
  if (self.sharingPermission) {
    result = prime * result + [self.sharingPermission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeInviteeRoleDetails:other];
}

- (BOOL)isEqualToSharedContentChangeInviteeRoleDetails:
    (DBTEAMLOGSharedContentChangeInviteeRoleDetails *)aSharedContentChangeInviteeRoleDetails {
  if (self == aSharedContentChangeInviteeRoleDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentChangeInviteeRoleDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSharedContentChangeInviteeRoleDetails.originalFolderName]) {
    return NO;
  }
  if (self.previousSharingPermission) {
    if (![self.previousSharingPermission isEqual:aSharedContentChangeInviteeRoleDetails.previousSharingPermission]) {
      return NO;
    }
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aSharedContentChangeInviteeRoleDetails.sharingPermission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeInviteeRoleDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentChangeInviteeRoleDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  if (valueObj.previousSharingPermission) {
    jsonDict[@"previous_sharing_permission"] = valueObj.previousSharingPermission;
  }
  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentChangeInviteeRoleDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  NSString *previousSharingPermission = valueDict[@"previous_sharing_permission"] ?: nil;
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;

  return [[DBTEAMLOGSharedContentChangeInviteeRoleDetails alloc] initWithTargetIndex:targetIndex
                                                                  originalFolderName:originalFolderName
                                                           previousSharingPermission:previousSharingPermission
                                                                   sharingPermission:sharingPermission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGLinkAudience.h"
#import "DBTEAMLOGSharedContentChangeLinkAudienceDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeLinkAudienceDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                          dNewValue:(DBTEAMLOGLinkAudience *)dNewValue
                 originalFolderName:(NSString *)originalFolderName
                   sharedFolderType:(NSString *)sharedFolderType
                      previousValue:(DBTEAMLOGLinkAudience *)previousValue {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharedFolderType = sharedFolderType;
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex dNewValue:(DBTEAMLOGLinkAudience *)dNewValue {
  return [self initWithTargetIndex:targetIndex
                         dNewValue:dNewValue
                originalFolderName:nil
                  sharedFolderType:nil
                     previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeLinkAudienceDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentChangeLinkAudienceDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeLinkAudienceDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.dNewValue hash];
  if (self.originalFolderName) {
    result = prime * result + [self.originalFolderName hash];
  }
  if (self.sharedFolderType) {
    result = prime * result + [self.sharedFolderType hash];
  }
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeLinkAudienceDetails:other];
}

- (BOOL)isEqualToSharedContentChangeLinkAudienceDetails:
    (DBTEAMLOGSharedContentChangeLinkAudienceDetails *)aSharedContentChangeLinkAudienceDetails {
  if (self == aSharedContentChangeLinkAudienceDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentChangeLinkAudienceDetails.targetIndex]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aSharedContentChangeLinkAudienceDetails.dNewValue]) {
    return NO;
  }
  if (self.originalFolderName) {
    if (![self.originalFolderName isEqual:aSharedContentChangeLinkAudienceDetails.originalFolderName]) {
      return NO;
    }
  }
  if (self.sharedFolderType) {
    if (![self.sharedFolderType isEqual:aSharedContentChangeLinkAudienceDetails.sharedFolderType]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedContentChangeLinkAudienceDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeLinkAudienceDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentChangeLinkAudienceDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"new_value"] = [DBTEAMLOGLinkAudienceSerializer serialize:valueObj.dNewValue];
  if (valueObj.originalFolderName) {
    jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  }
  if (valueObj.sharedFolderType) {
    jsonDict[@"shared_folder_type"] = valueObj.sharedFolderType;
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGLinkAudienceSerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentChangeLinkAudienceDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  DBTEAMLOGLinkAudience *dNewValue = [DBTEAMLOGLinkAudienceSerializer deserialize:valueDict[@"new_value"]];
  NSString *originalFolderName = valueDict[@"original_folder_name"] ?: nil;
  NSString *sharedFolderType = valueDict[@"shared_folder_type"] ?: nil;
  DBTEAMLOGLinkAudience *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGLinkAudienceSerializer deserialize:valueDict[@"previous_value"]] : nil;

  return [[DBTEAMLOGSharedContentChangeLinkAudienceDetails alloc] initWithTargetIndex:targetIndex
                                                                            dNewValue:dNewValue
                                                                   originalFolderName:originalFolderName
                                                                     sharedFolderType:sharedFolderType
                                                                        previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentChangeLinkExpiryDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeLinkExpiryDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                expirationStartDate:(NSString *)expirationStartDate
                     expirationDays:(NSNumber *)expirationDays
                 originalFolderName:(NSString *)originalFolderName
                   sharedFolderType:(NSString *)sharedFolderType {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharedFolderType = sharedFolderType;
    _expirationStartDate = expirationStartDate;
    _expirationDays = expirationDays;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                expirationStartDate:(NSString *)expirationStartDate
                     expirationDays:(NSNumber *)expirationDays {
  return [self initWithTargetIndex:targetIndex
               expirationStartDate:expirationStartDate
                    expirationDays:expirationDays
                originalFolderName:nil
                  sharedFolderType:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeLinkExpiryDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentChangeLinkExpiryDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeLinkExpiryDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.expirationStartDate hash];
  result = prime * result + [self.expirationDays hash];
  if (self.originalFolderName) {
    result = prime * result + [self.originalFolderName hash];
  }
  if (self.sharedFolderType) {
    result = prime * result + [self.sharedFolderType hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeLinkExpiryDetails:other];
}

- (BOOL)isEqualToSharedContentChangeLinkExpiryDetails:
    (DBTEAMLOGSharedContentChangeLinkExpiryDetails *)aSharedContentChangeLinkExpiryDetails {
  if (self == aSharedContentChangeLinkExpiryDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentChangeLinkExpiryDetails.targetIndex]) {
    return NO;
  }
  if (![self.expirationStartDate isEqual:aSharedContentChangeLinkExpiryDetails.expirationStartDate]) {
    return NO;
  }
  if (![self.expirationDays isEqual:aSharedContentChangeLinkExpiryDetails.expirationDays]) {
    return NO;
  }
  if (self.originalFolderName) {
    if (![self.originalFolderName isEqual:aSharedContentChangeLinkExpiryDetails.originalFolderName]) {
      return NO;
    }
  }
  if (self.sharedFolderType) {
    if (![self.sharedFolderType isEqual:aSharedContentChangeLinkExpiryDetails.sharedFolderType]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeLinkExpiryDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentChangeLinkExpiryDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"expiration_start_date"] = valueObj.expirationStartDate;
  jsonDict[@"expiration_days"] = valueObj.expirationDays;
  if (valueObj.originalFolderName) {
    jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  }
  if (valueObj.sharedFolderType) {
    jsonDict[@"shared_folder_type"] = valueObj.sharedFolderType;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentChangeLinkExpiryDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *expirationStartDate = valueDict[@"expiration_start_date"];
  NSNumber *expirationDays = valueDict[@"expiration_days"];
  NSString *originalFolderName = valueDict[@"original_folder_name"] ?: nil;
  NSString *sharedFolderType = valueDict[@"shared_folder_type"] ?: nil;

  return [[DBTEAMLOGSharedContentChangeLinkExpiryDetails alloc] initWithTargetIndex:targetIndex
                                                                expirationStartDate:expirationStartDate
                                                                     expirationDays:expirationDays
                                                                 originalFolderName:originalFolderName
                                                                   sharedFolderType:sharedFolderType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentChangeLinkPasswordDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeLinkPasswordDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                   sharedFolderType:(NSString *)sharedFolderType {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharedFolderType = sharedFolderType;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex {
  return [self initWithTargetIndex:targetIndex originalFolderName:nil sharedFolderType:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeLinkPasswordDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentChangeLinkPasswordDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeLinkPasswordDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  if (self.originalFolderName) {
    result = prime * result + [self.originalFolderName hash];
  }
  if (self.sharedFolderType) {
    result = prime * result + [self.sharedFolderType hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeLinkPasswordDetails:other];
}

- (BOOL)isEqualToSharedContentChangeLinkPasswordDetails:
    (DBTEAMLOGSharedContentChangeLinkPasswordDetails *)aSharedContentChangeLinkPasswordDetails {
  if (self == aSharedContentChangeLinkPasswordDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentChangeLinkPasswordDetails.targetIndex]) {
    return NO;
  }
  if (self.originalFolderName) {
    if (![self.originalFolderName isEqual:aSharedContentChangeLinkPasswordDetails.originalFolderName]) {
      return NO;
    }
  }
  if (self.sharedFolderType) {
    if (![self.sharedFolderType isEqual:aSharedContentChangeLinkPasswordDetails.sharedFolderType]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeLinkPasswordDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentChangeLinkPasswordDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.originalFolderName) {
    jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  }
  if (valueObj.sharedFolderType) {
    jsonDict[@"shared_folder_type"] = valueObj.sharedFolderType;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentChangeLinkPasswordDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"] ?: nil;
  NSString *sharedFolderType = valueDict[@"shared_folder_type"] ?: nil;

  return [[DBTEAMLOGSharedContentChangeLinkPasswordDetails alloc] initWithTargetIndex:targetIndex
                                                                   originalFolderName:originalFolderName
                                                                     sharedFolderType:sharedFolderType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentChangeMemberRoleDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeMemberRoleDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                  sharingPermission:(NSString *)sharingPermission
                   sharedFolderType:(NSString *)sharedFolderType
          previousSharingPermission:(NSString *)previousSharingPermission {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharingPermission = sharingPermission;
    _sharedFolderType = sharedFolderType;
    _previousSharingPermission = previousSharingPermission;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex {
  return [self initWithTargetIndex:targetIndex
                originalFolderName:nil
                 sharingPermission:nil
                  sharedFolderType:nil
         previousSharingPermission:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeMemberRoleDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentChangeMemberRoleDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeMemberRoleDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  if (self.originalFolderName) {
    result = prime * result + [self.originalFolderName hash];
  }
  if (self.sharingPermission) {
    result = prime * result + [self.sharingPermission hash];
  }
  if (self.sharedFolderType) {
    result = prime * result + [self.sharedFolderType hash];
  }
  if (self.previousSharingPermission) {
    result = prime * result + [self.previousSharingPermission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeMemberRoleDetails:other];
}

- (BOOL)isEqualToSharedContentChangeMemberRoleDetails:
    (DBTEAMLOGSharedContentChangeMemberRoleDetails *)aSharedContentChangeMemberRoleDetails {
  if (self == aSharedContentChangeMemberRoleDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentChangeMemberRoleDetails.targetIndex]) {
    return NO;
  }
  if (self.originalFolderName) {
    if (![self.originalFolderName isEqual:aSharedContentChangeMemberRoleDetails.originalFolderName]) {
      return NO;
    }
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aSharedContentChangeMemberRoleDetails.sharingPermission]) {
      return NO;
    }
  }
  if (self.sharedFolderType) {
    if (![self.sharedFolderType isEqual:aSharedContentChangeMemberRoleDetails.sharedFolderType]) {
      return NO;
    }
  }
  if (self.previousSharingPermission) {
    if (![self.previousSharingPermission isEqual:aSharedContentChangeMemberRoleDetails.previousSharingPermission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeMemberRoleDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentChangeMemberRoleDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.originalFolderName) {
    jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  }
  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }
  if (valueObj.sharedFolderType) {
    jsonDict[@"shared_folder_type"] = valueObj.sharedFolderType;
  }
  if (valueObj.previousSharingPermission) {
    jsonDict[@"previous_sharing_permission"] = valueObj.previousSharingPermission;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentChangeMemberRoleDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"] ?: nil;
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;
  NSString *sharedFolderType = valueDict[@"shared_folder_type"] ?: nil;
  NSString *previousSharingPermission = valueDict[@"previous_sharing_permission"] ?: nil;

  return [[DBTEAMLOGSharedContentChangeMemberRoleDetails alloc] initWithTargetIndex:targetIndex
                                                                 originalFolderName:originalFolderName
                                                                  sharingPermission:sharingPermission
                                                                   sharedFolderType:sharedFolderType
                                                          previousSharingPermission:previousSharingPermission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnableDisableChangePolicy.h"
#import "DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                          dNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue
                 originalFolderName:(NSString *)originalFolderName
                   sharedFolderType:(NSString *)sharedFolderType
                      previousValue:(DBTEAMLOGEnableDisableChangePolicy *)previousValue {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharedFolderType = sharedFolderType;
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex dNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue {
  return [self initWithTargetIndex:targetIndex
                         dNewValue:dNewValue
                originalFolderName:nil
                  sharedFolderType:nil
                     previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.dNewValue hash];
  if (self.originalFolderName) {
    result = prime * result + [self.originalFolderName hash];
  }
  if (self.sharedFolderType) {
    result = prime * result + [self.sharedFolderType hash];
  }
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentChangeViewerInfoPolicyDetails:other];
}

- (BOOL)isEqualToSharedContentChangeViewerInfoPolicyDetails:
    (DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails *)aSharedContentChangeViewerInfoPolicyDetails {
  if (self == aSharedContentChangeViewerInfoPolicyDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentChangeViewerInfoPolicyDetails.targetIndex]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aSharedContentChangeViewerInfoPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.originalFolderName) {
    if (![self.originalFolderName isEqual:aSharedContentChangeViewerInfoPolicyDetails.originalFolderName]) {
      return NO;
    }
  }
  if (self.sharedFolderType) {
    if (![self.sharedFolderType isEqual:aSharedContentChangeViewerInfoPolicyDetails.sharedFolderType]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedContentChangeViewerInfoPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"new_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.originalFolderName) {
    jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  }
  if (valueObj.sharedFolderType) {
    jsonDict[@"shared_folder_type"] = valueObj.sharedFolderType;
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  DBTEAMLOGEnableDisableChangePolicy *dNewValue =
      [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"new_value"]];
  NSString *originalFolderName = valueDict[@"original_folder_name"] ?: nil;
  NSString *sharedFolderType = valueDict[@"shared_folder_type"] ?: nil;
  DBTEAMLOGEnableDisableChangePolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails alloc] initWithTargetIndex:targetIndex
                                                                                dNewValue:dNewValue
                                                                       originalFolderName:originalFolderName
                                                                         sharedFolderType:sharedFolderType
                                                                            previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentClaimInvitationDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentClaimInvitationDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                  sharedContentLink:(NSString *)sharedContentLink {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharedContentLink = sharedContentLink;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex {
  return [self initWithTargetIndex:targetIndex originalFolderName:nil sharedContentLink:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentClaimInvitationDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentClaimInvitationDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentClaimInvitationDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  if (self.originalFolderName) {
    result = prime * result + [self.originalFolderName hash];
  }
  if (self.sharedContentLink) {
    result = prime * result + [self.sharedContentLink hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentClaimInvitationDetails:other];
}

- (BOOL)isEqualToSharedContentClaimInvitationDetails:
    (DBTEAMLOGSharedContentClaimInvitationDetails *)aSharedContentClaimInvitationDetails {
  if (self == aSharedContentClaimInvitationDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentClaimInvitationDetails.targetIndex]) {
    return NO;
  }
  if (self.originalFolderName) {
    if (![self.originalFolderName isEqual:aSharedContentClaimInvitationDetails.originalFolderName]) {
      return NO;
    }
  }
  if (self.sharedContentLink) {
    if (![self.sharedContentLink isEqual:aSharedContentClaimInvitationDetails.sharedContentLink]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentClaimInvitationDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentClaimInvitationDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.originalFolderName) {
    jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  }
  if (valueObj.sharedContentLink) {
    jsonDict[@"shared_content_link"] = valueObj.sharedContentLink;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentClaimInvitationDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"] ?: nil;
  NSString *sharedContentLink = valueDict[@"shared_content_link"] ?: nil;

  return [[DBTEAMLOGSharedContentClaimInvitationDetails alloc] initWithTargetIndex:targetIndex
                                                                originalFolderName:originalFolderName
                                                                 sharedContentLink:sharedContentLink];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentCopyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentCopyDetails

#pragma mark - Constructors

- (instancetype)initWithSharedContentLink:(NSString *)sharedContentLink
                                 srcIndex:(NSNumber *)srcIndex
                                destIndex:(NSNumber *)destIndex
                              targetIndex:(NSNumber *)targetIndex
                        sharingPermission:(NSString *)sharingPermission {

  self = [super init];
  if (self) {
    _sharedContentLink = sharedContentLink;
    _sharingPermission = sharingPermission;
    _srcIndex = srcIndex;
    _destIndex = destIndex;
    _targetIndex = targetIndex;
  }
  return self;
}

- (instancetype)initWithSharedContentLink:(NSString *)sharedContentLink
                                 srcIndex:(NSNumber *)srcIndex
                                destIndex:(NSNumber *)destIndex
                              targetIndex:(NSNumber *)targetIndex {
  return [self initWithSharedContentLink:sharedContentLink
                                srcIndex:srcIndex
                               destIndex:destIndex
                             targetIndex:targetIndex
                       sharingPermission:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentCopyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentCopyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentCopyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.sharedContentLink hash];
  result = prime * result + [self.srcIndex hash];
  result = prime * result + [self.destIndex hash];
  result = prime * result + [self.targetIndex hash];
  if (self.sharingPermission) {
    result = prime * result + [self.sharingPermission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentCopyDetails:other];
}

- (BOOL)isEqualToSharedContentCopyDetails:(DBTEAMLOGSharedContentCopyDetails *)aSharedContentCopyDetails {
  if (self == aSharedContentCopyDetails) {
    return YES;
  }
  if (![self.sharedContentLink isEqual:aSharedContentCopyDetails.sharedContentLink]) {
    return NO;
  }
  if (![self.srcIndex isEqual:aSharedContentCopyDetails.srcIndex]) {
    return NO;
  }
  if (![self.destIndex isEqual:aSharedContentCopyDetails.destIndex]) {
    return NO;
  }
  if (![self.targetIndex isEqual:aSharedContentCopyDetails.targetIndex]) {
    return NO;
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aSharedContentCopyDetails.sharingPermission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentCopyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentCopyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_content_link"] = valueObj.sharedContentLink;
  jsonDict[@"src_index"] = valueObj.srcIndex;
  jsonDict[@"dest_index"] = valueObj.destIndex;
  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentCopyDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *sharedContentLink = valueDict[@"shared_content_link"];
  NSNumber *srcIndex = valueDict[@"src_index"];
  NSNumber *destIndex = valueDict[@"dest_index"];
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;

  return [[DBTEAMLOGSharedContentCopyDetails alloc] initWithSharedContentLink:sharedContentLink
                                                                     srcIndex:srcIndex
                                                                    destIndex:destIndex
                                                                  targetIndex:targetIndex
                                                            sharingPermission:sharingPermission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentDownloadDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentDownloadDetails

#pragma mark - Constructors

- (instancetype)initWithSharedContentLink:(NSString *)sharedContentLink
                              targetIndex:(NSNumber *)targetIndex
                        sharingPermission:(NSString *)sharingPermission {

  self = [super init];
  if (self) {
    _sharedContentLink = sharedContentLink;
    _sharingPermission = sharingPermission;
    _targetIndex = targetIndex;
  }
  return self;
}

- (instancetype)initWithSharedContentLink:(NSString *)sharedContentLink targetIndex:(NSNumber *)targetIndex {
  return [self initWithSharedContentLink:sharedContentLink targetIndex:targetIndex sharingPermission:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentDownloadDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentDownloadDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentDownloadDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.sharedContentLink hash];
  result = prime * result + [self.targetIndex hash];
  if (self.sharingPermission) {
    result = prime * result + [self.sharingPermission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentDownloadDetails:other];
}

- (BOOL)isEqualToSharedContentDownloadDetails:(DBTEAMLOGSharedContentDownloadDetails *)aSharedContentDownloadDetails {
  if (self == aSharedContentDownloadDetails) {
    return YES;
  }
  if (![self.sharedContentLink isEqual:aSharedContentDownloadDetails.sharedContentLink]) {
    return NO;
  }
  if (![self.targetIndex isEqual:aSharedContentDownloadDetails.targetIndex]) {
    return NO;
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aSharedContentDownloadDetails.sharingPermission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentDownloadDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentDownloadDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_content_link"] = valueObj.sharedContentLink;
  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentDownloadDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *sharedContentLink = valueDict[@"shared_content_link"];
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;

  return [[DBTEAMLOGSharedContentDownloadDetails alloc] initWithSharedContentLink:sharedContentLink
                                                                      targetIndex:targetIndex
                                                                sharingPermission:sharingPermission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRelinquishMembershipDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRelinquishMembershipDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex originalFolderName:(NSString *)originalFolderName {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRelinquishMembershipDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentRelinquishMembershipDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRelinquishMembershipDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRelinquishMembershipDetails:other];
}

- (BOOL)isEqualToSharedContentRelinquishMembershipDetails:
    (DBTEAMLOGSharedContentRelinquishMembershipDetails *)aSharedContentRelinquishMembershipDetails {
  if (self == aSharedContentRelinquishMembershipDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentRelinquishMembershipDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSharedContentRelinquishMembershipDetails.originalFolderName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRelinquishMembershipDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentRelinquishMembershipDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;

  return jsonDict;
}

+ (DBTEAMLOGSharedContentRelinquishMembershipDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];

  return [[DBTEAMLOGSharedContentRelinquishMembershipDetails alloc] initWithTargetIndex:targetIndex
                                                                     originalFolderName:originalFolderName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRemoveInviteeDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRemoveInviteeDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex originalFolderName:(NSString *)originalFolderName {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRemoveInviteeDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentRemoveInviteeDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRemoveInviteeDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRemoveInviteeDetails:other];
}

- (BOOL)isEqualToSharedContentRemoveInviteeDetails:
    (DBTEAMLOGSharedContentRemoveInviteeDetails *)aSharedContentRemoveInviteeDetails {
  if (self == aSharedContentRemoveInviteeDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentRemoveInviteeDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSharedContentRemoveInviteeDetails.originalFolderName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRemoveInviteeDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentRemoveInviteeDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;

  return jsonDict;
}

+ (DBTEAMLOGSharedContentRemoveInviteeDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];

  return [[DBTEAMLOGSharedContentRemoveInviteeDetails alloc] initWithTargetIndex:targetIndex
                                                              originalFolderName:originalFolderName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRemoveLinkExpiryDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRemoveLinkExpiryDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                   sharedFolderType:(NSString *)sharedFolderType {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharedFolderType = sharedFolderType;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex {
  return [self initWithTargetIndex:targetIndex originalFolderName:nil sharedFolderType:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRemoveLinkExpiryDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentRemoveLinkExpiryDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRemoveLinkExpiryDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  if (self.originalFolderName) {
    result = prime * result + [self.originalFolderName hash];
  }
  if (self.sharedFolderType) {
    result = prime * result + [self.sharedFolderType hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRemoveLinkExpiryDetails:other];
}

- (BOOL)isEqualToSharedContentRemoveLinkExpiryDetails:
    (DBTEAMLOGSharedContentRemoveLinkExpiryDetails *)aSharedContentRemoveLinkExpiryDetails {
  if (self == aSharedContentRemoveLinkExpiryDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentRemoveLinkExpiryDetails.targetIndex]) {
    return NO;
  }
  if (self.originalFolderName) {
    if (![self.originalFolderName isEqual:aSharedContentRemoveLinkExpiryDetails.originalFolderName]) {
      return NO;
    }
  }
  if (self.sharedFolderType) {
    if (![self.sharedFolderType isEqual:aSharedContentRemoveLinkExpiryDetails.sharedFolderType]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRemoveLinkExpiryDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentRemoveLinkExpiryDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.originalFolderName) {
    jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  }
  if (valueObj.sharedFolderType) {
    jsonDict[@"shared_folder_type"] = valueObj.sharedFolderType;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentRemoveLinkExpiryDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"] ?: nil;
  NSString *sharedFolderType = valueDict[@"shared_folder_type"] ?: nil;

  return [[DBTEAMLOGSharedContentRemoveLinkExpiryDetails alloc] initWithTargetIndex:targetIndex
                                                                 originalFolderName:originalFolderName
                                                                   sharedFolderType:sharedFolderType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRemoveLinkPasswordDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRemoveLinkPasswordDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                   sharedFolderType:(NSString *)sharedFolderType {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharedFolderType = sharedFolderType;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex {
  return [self initWithTargetIndex:targetIndex originalFolderName:nil sharedFolderType:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRemoveLinkPasswordDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentRemoveLinkPasswordDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRemoveLinkPasswordDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  if (self.originalFolderName) {
    result = prime * result + [self.originalFolderName hash];
  }
  if (self.sharedFolderType) {
    result = prime * result + [self.sharedFolderType hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRemoveLinkPasswordDetails:other];
}

- (BOOL)isEqualToSharedContentRemoveLinkPasswordDetails:
    (DBTEAMLOGSharedContentRemoveLinkPasswordDetails *)aSharedContentRemoveLinkPasswordDetails {
  if (self == aSharedContentRemoveLinkPasswordDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentRemoveLinkPasswordDetails.targetIndex]) {
    return NO;
  }
  if (self.originalFolderName) {
    if (![self.originalFolderName isEqual:aSharedContentRemoveLinkPasswordDetails.originalFolderName]) {
      return NO;
    }
  }
  if (self.sharedFolderType) {
    if (![self.sharedFolderType isEqual:aSharedContentRemoveLinkPasswordDetails.sharedFolderType]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRemoveLinkPasswordDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentRemoveLinkPasswordDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.originalFolderName) {
    jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  }
  if (valueObj.sharedFolderType) {
    jsonDict[@"shared_folder_type"] = valueObj.sharedFolderType;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentRemoveLinkPasswordDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"] ?: nil;
  NSString *sharedFolderType = valueDict[@"shared_folder_type"] ?: nil;

  return [[DBTEAMLOGSharedContentRemoveLinkPasswordDetails alloc] initWithTargetIndex:targetIndex
                                                                   originalFolderName:originalFolderName
                                                                     sharedFolderType:sharedFolderType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRemoveMemberDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRemoveMemberDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                  sharingPermission:(NSString *)sharingPermission
                   sharedFolderType:(NSString *)sharedFolderType {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharingPermission = sharingPermission;
    _sharedFolderType = sharedFolderType;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex {
  return [self initWithTargetIndex:targetIndex originalFolderName:nil sharingPermission:nil sharedFolderType:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRemoveMemberDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentRemoveMemberDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRemoveMemberDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  if (self.originalFolderName) {
    result = prime * result + [self.originalFolderName hash];
  }
  if (self.sharingPermission) {
    result = prime * result + [self.sharingPermission hash];
  }
  if (self.sharedFolderType) {
    result = prime * result + [self.sharedFolderType hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRemoveMemberDetails:other];
}

- (BOOL)isEqualToSharedContentRemoveMemberDetails:
    (DBTEAMLOGSharedContentRemoveMemberDetails *)aSharedContentRemoveMemberDetails {
  if (self == aSharedContentRemoveMemberDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentRemoveMemberDetails.targetIndex]) {
    return NO;
  }
  if (self.originalFolderName) {
    if (![self.originalFolderName isEqual:aSharedContentRemoveMemberDetails.originalFolderName]) {
      return NO;
    }
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aSharedContentRemoveMemberDetails.sharingPermission]) {
      return NO;
    }
  }
  if (self.sharedFolderType) {
    if (![self.sharedFolderType isEqual:aSharedContentRemoveMemberDetails.sharedFolderType]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRemoveMemberDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentRemoveMemberDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.originalFolderName) {
    jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  }
  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }
  if (valueObj.sharedFolderType) {
    jsonDict[@"shared_folder_type"] = valueObj.sharedFolderType;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentRemoveMemberDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"] ?: nil;
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;
  NSString *sharedFolderType = valueDict[@"shared_folder_type"] ?: nil;

  return [[DBTEAMLOGSharedContentRemoveMemberDetails alloc] initWithTargetIndex:targetIndex
                                                             originalFolderName:originalFolderName
                                                              sharingPermission:sharingPermission
                                                               sharedFolderType:sharedFolderType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentRequestAccessDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentRequestAccessDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                  sharedContentLink:(NSString *)sharedContentLink {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharedContentLink = sharedContentLink;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex {
  return [self initWithTargetIndex:targetIndex originalFolderName:nil sharedContentLink:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentRequestAccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentRequestAccessDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentRequestAccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  if (self.originalFolderName) {
    result = prime * result + [self.originalFolderName hash];
  }
  if (self.sharedContentLink) {
    result = prime * result + [self.sharedContentLink hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentRequestAccessDetails:other];
}

- (BOOL)isEqualToSharedContentRequestAccessDetails:
    (DBTEAMLOGSharedContentRequestAccessDetails *)aSharedContentRequestAccessDetails {
  if (self == aSharedContentRequestAccessDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentRequestAccessDetails.targetIndex]) {
    return NO;
  }
  if (self.originalFolderName) {
    if (![self.originalFolderName isEqual:aSharedContentRequestAccessDetails.originalFolderName]) {
      return NO;
    }
  }
  if (self.sharedContentLink) {
    if (![self.sharedContentLink isEqual:aSharedContentRequestAccessDetails.sharedContentLink]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentRequestAccessDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentRequestAccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.originalFolderName) {
    jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  }
  if (valueObj.sharedContentLink) {
    jsonDict[@"shared_content_link"] = valueObj.sharedContentLink;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentRequestAccessDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"] ?: nil;
  NSString *sharedContentLink = valueDict[@"shared_content_link"] ?: nil;

  return [[DBTEAMLOGSharedContentRequestAccessDetails alloc] initWithTargetIndex:targetIndex
                                                              originalFolderName:originalFolderName
                                                               sharedContentLink:sharedContentLink];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentUnshareDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentUnshareDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex originalFolderName:(NSString *)originalFolderName {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex {
  return [self initWithTargetIndex:targetIndex originalFolderName:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentUnshareDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentUnshareDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentUnshareDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  if (self.originalFolderName) {
    result = prime * result + [self.originalFolderName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentUnshareDetails:other];
}

- (BOOL)isEqualToSharedContentUnshareDetails:(DBTEAMLOGSharedContentUnshareDetails *)aSharedContentUnshareDetails {
  if (self == aSharedContentUnshareDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedContentUnshareDetails.targetIndex]) {
    return NO;
  }
  if (self.originalFolderName) {
    if (![self.originalFolderName isEqual:aSharedContentUnshareDetails.originalFolderName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentUnshareDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentUnshareDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.originalFolderName) {
    jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentUnshareDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"] ?: nil;

  return [[DBTEAMLOGSharedContentUnshareDetails alloc] initWithTargetIndex:targetIndex
                                                        originalFolderName:originalFolderName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedContentViewDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedContentViewDetails

#pragma mark - Constructors

- (instancetype)initWithSharedContentLink:(NSString *)sharedContentLink
                              targetIndex:(NSNumber *)targetIndex
                        sharingPermission:(NSString *)sharingPermission {

  self = [super init];
  if (self) {
    _sharedContentLink = sharedContentLink;
    _sharingPermission = sharingPermission;
    _targetIndex = targetIndex;
  }
  return self;
}

- (instancetype)initWithSharedContentLink:(NSString *)sharedContentLink targetIndex:(NSNumber *)targetIndex {
  return [self initWithSharedContentLink:sharedContentLink targetIndex:targetIndex sharingPermission:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedContentViewDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedContentViewDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedContentViewDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.sharedContentLink hash];
  result = prime * result + [self.targetIndex hash];
  if (self.sharingPermission) {
    result = prime * result + [self.sharingPermission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedContentViewDetails:other];
}

- (BOOL)isEqualToSharedContentViewDetails:(DBTEAMLOGSharedContentViewDetails *)aSharedContentViewDetails {
  if (self == aSharedContentViewDetails) {
    return YES;
  }
  if (![self.sharedContentLink isEqual:aSharedContentViewDetails.sharedContentLink]) {
    return NO;
  }
  if (![self.targetIndex isEqual:aSharedContentViewDetails.targetIndex]) {
    return NO;
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aSharedContentViewDetails.sharingPermission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedContentViewDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedContentViewDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_content_link"] = valueObj.sharedContentLink;
  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedContentViewDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *sharedContentLink = valueDict[@"shared_content_link"];
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;

  return [[DBTEAMLOGSharedContentViewDetails alloc] initWithSharedContentLink:sharedContentLink
                                                                  targetIndex:targetIndex
                                                            sharingPermission:sharingPermission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGConfidentiality.h"
#import "DBTEAMLOGSharedFolderChangeConfidentialityDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderChangeConfidentialityDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                          dNewValue:(DBTEAMLOGConfidentiality *)dNewValue
                      previousValue:(DBTEAMLOGConfidentiality *)previousValue {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                          dNewValue:(DBTEAMLOGConfidentiality *)dNewValue {
  return [self initWithTargetIndex:targetIndex
                originalFolderName:originalFolderName
                         dNewValue:dNewValue
                     previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderChangeConfidentialityDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedFolderChangeConfidentialityDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderChangeConfidentialityDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderChangeConfidentialityDetails:other];
}

- (BOOL)isEqualToSharedFolderChangeConfidentialityDetails:
    (DBTEAMLOGSharedFolderChangeConfidentialityDetails *)aSharedFolderChangeConfidentialityDetails {
  if (self == aSharedFolderChangeConfidentialityDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedFolderChangeConfidentialityDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSharedFolderChangeConfidentialityDetails.originalFolderName]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aSharedFolderChangeConfidentialityDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedFolderChangeConfidentialityDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderChangeConfidentialityDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedFolderChangeConfidentialityDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  jsonDict[@"new_value"] = [DBTEAMLOGConfidentialitySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGConfidentialitySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedFolderChangeConfidentialityDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  DBTEAMLOGConfidentiality *dNewValue = [DBTEAMLOGConfidentialitySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGConfidentiality *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGConfidentialitySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGSharedFolderChangeConfidentialityDetails alloc] initWithTargetIndex:targetIndex
                                                                     originalFolderName:originalFolderName
                                                                              dNewValue:dNewValue
                                                                          previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderChangeLinkPolicyDetails.h"
#import "DBTEAMLOGSharedFolderLinkPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderChangeLinkPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                          dNewValue:(DBTEAMLOGSharedFolderLinkPolicy *)dNewValue
                   sharedFolderType:(NSString *)sharedFolderType
                      previousValue:(DBTEAMLOGSharedFolderLinkPolicy *)previousValue {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharedFolderType = sharedFolderType;
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                          dNewValue:(DBTEAMLOGSharedFolderLinkPolicy *)dNewValue {
  return [self initWithTargetIndex:targetIndex
                originalFolderName:originalFolderName
                         dNewValue:dNewValue
                  sharedFolderType:nil
                     previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderChangeLinkPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedFolderChangeLinkPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderChangeLinkPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  result = prime * result + [self.dNewValue hash];
  if (self.sharedFolderType) {
    result = prime * result + [self.sharedFolderType hash];
  }
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderChangeLinkPolicyDetails:other];
}

- (BOOL)isEqualToSharedFolderChangeLinkPolicyDetails:
    (DBTEAMLOGSharedFolderChangeLinkPolicyDetails *)aSharedFolderChangeLinkPolicyDetails {
  if (self == aSharedFolderChangeLinkPolicyDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedFolderChangeLinkPolicyDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSharedFolderChangeLinkPolicyDetails.originalFolderName]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aSharedFolderChangeLinkPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.sharedFolderType) {
    if (![self.sharedFolderType isEqual:aSharedFolderChangeLinkPolicyDetails.sharedFolderType]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedFolderChangeLinkPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderChangeLinkPolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedFolderChangeLinkPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  jsonDict[@"new_value"] = [DBTEAMLOGSharedFolderLinkPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.sharedFolderType) {
    jsonDict[@"shared_folder_type"] = valueObj.sharedFolderType;
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGSharedFolderLinkPolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedFolderChangeLinkPolicyDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  DBTEAMLOGSharedFolderLinkPolicy *dNewValue =
      [DBTEAMLOGSharedFolderLinkPolicySerializer deserialize:valueDict[@"new_value"]];
  NSString *sharedFolderType = valueDict[@"shared_folder_type"] ?: nil;
  DBTEAMLOGSharedFolderLinkPolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGSharedFolderLinkPolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGSharedFolderChangeLinkPolicyDetails alloc] initWithTargetIndex:targetIndex
                                                                originalFolderName:originalFolderName
                                                                         dNewValue:dNewValue
                                                                  sharedFolderType:sharedFolderType
                                                                     previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderChangeMemberManagementPolicyDetails.h"
#import "DBTEAMLOGSharedFolderMembershipManagementPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderChangeMemberManagementPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                          dNewValue:(DBTEAMLOGSharedFolderMembershipManagementPolicy *)dNewValue
                   sharedFolderType:(NSString *)sharedFolderType
                      previousValue:(DBTEAMLOGSharedFolderMembershipManagementPolicy *)previousValue {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharedFolderType = sharedFolderType;
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                          dNewValue:(DBTEAMLOGSharedFolderMembershipManagementPolicy *)dNewValue {
  return [self initWithTargetIndex:targetIndex
                originalFolderName:originalFolderName
                         dNewValue:dNewValue
                  sharedFolderType:nil
                     previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderChangeMemberManagementPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedFolderChangeMemberManagementPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderChangeMemberManagementPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  result = prime * result + [self.dNewValue hash];
  if (self.sharedFolderType) {
    result = prime * result + [self.sharedFolderType hash];
  }
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderChangeMemberManagementPolicyDetails:other];
}

- (BOOL)isEqualToSharedFolderChangeMemberManagementPolicyDetails:
    (DBTEAMLOGSharedFolderChangeMemberManagementPolicyDetails *)aSharedFolderChangeMemberManagementPolicyDetails {
  if (self == aSharedFolderChangeMemberManagementPolicyDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedFolderChangeMemberManagementPolicyDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSharedFolderChangeMemberManagementPolicyDetails.originalFolderName]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aSharedFolderChangeMemberManagementPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.sharedFolderType) {
    if (![self.sharedFolderType isEqual:aSharedFolderChangeMemberManagementPolicyDetails.sharedFolderType]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedFolderChangeMemberManagementPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderChangeMemberManagementPolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedFolderChangeMemberManagementPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  jsonDict[@"new_value"] = [DBTEAMLOGSharedFolderMembershipManagementPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.sharedFolderType) {
    jsonDict[@"shared_folder_type"] = valueObj.sharedFolderType;
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] =
        [DBTEAMLOGSharedFolderMembershipManagementPolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedFolderChangeMemberManagementPolicyDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  DBTEAMLOGSharedFolderMembershipManagementPolicy *dNewValue =
      [DBTEAMLOGSharedFolderMembershipManagementPolicySerializer deserialize:valueDict[@"new_value"]];
  NSString *sharedFolderType = valueDict[@"shared_folder_type"] ?: nil;
  DBTEAMLOGSharedFolderMembershipManagementPolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGSharedFolderMembershipManagementPolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGSharedFolderChangeMemberManagementPolicyDetails alloc] initWithTargetIndex:targetIndex
                                                                            originalFolderName:originalFolderName
                                                                                     dNewValue:dNewValue
                                                                              sharedFolderType:sharedFolderType
                                                                                 previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGExternalSharingPolicy.h"
#import "DBTEAMLOGSharedFolderChangeMemberPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderChangeMemberPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                          dNewValue:(DBTEAMLOGExternalSharingPolicy *)dNewValue
                   sharedFolderType:(NSString *)sharedFolderType
                      previousValue:(DBTEAMLOGExternalSharingPolicy *)previousValue {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
    _sharedFolderType = sharedFolderType;
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex
                 originalFolderName:(NSString *)originalFolderName
                          dNewValue:(DBTEAMLOGExternalSharingPolicy *)dNewValue {
  return [self initWithTargetIndex:targetIndex
                originalFolderName:originalFolderName
                         dNewValue:dNewValue
                  sharedFolderType:nil
                     previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderChangeMemberPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedFolderChangeMemberPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderChangeMemberPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];
  result = prime * result + [self.dNewValue hash];
  if (self.sharedFolderType) {
    result = prime * result + [self.sharedFolderType hash];
  }
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderChangeMemberPolicyDetails:other];
}

- (BOOL)isEqualToSharedFolderChangeMemberPolicyDetails:
    (DBTEAMLOGSharedFolderChangeMemberPolicyDetails *)aSharedFolderChangeMemberPolicyDetails {
  if (self == aSharedFolderChangeMemberPolicyDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedFolderChangeMemberPolicyDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSharedFolderChangeMemberPolicyDetails.originalFolderName]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aSharedFolderChangeMemberPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.sharedFolderType) {
    if (![self.sharedFolderType isEqual:aSharedFolderChangeMemberPolicyDetails.sharedFolderType]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharedFolderChangeMemberPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderChangeMemberPolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedFolderChangeMemberPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;
  jsonDict[@"new_value"] = [DBTEAMLOGExternalSharingPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.sharedFolderType) {
    jsonDict[@"shared_folder_type"] = valueObj.sharedFolderType;
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGExternalSharingPolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedFolderChangeMemberPolicyDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];
  DBTEAMLOGExternalSharingPolicy *dNewValue =
      [DBTEAMLOGExternalSharingPolicySerializer deserialize:valueDict[@"new_value"]];
  NSString *sharedFolderType = valueDict[@"shared_folder_type"] ?: nil;
  DBTEAMLOGExternalSharingPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGExternalSharingPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGSharedFolderChangeMemberPolicyDetails alloc] initWithTargetIndex:targetIndex
                                                                  originalFolderName:originalFolderName
                                                                           dNewValue:dNewValue
                                                                    sharedFolderType:sharedFolderType
                                                                       previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderCreateDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderCreateDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex parentNsId:(NSString *)parentNsId {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](parentNsId);

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _parentNsId = parentNsId;
  }
  return self;
}

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex {
  return [self initWithTargetIndex:targetIndex parentNsId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderCreateDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedFolderCreateDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderCreateDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  if (self.parentNsId) {
    result = prime * result + [self.parentNsId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderCreateDetails:other];
}

- (BOOL)isEqualToSharedFolderCreateDetails:(DBTEAMLOGSharedFolderCreateDetails *)aSharedFolderCreateDetails {
  if (self == aSharedFolderCreateDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedFolderCreateDetails.targetIndex]) {
    return NO;
  }
  if (self.parentNsId) {
    if (![self.parentNsId isEqual:aSharedFolderCreateDetails.parentNsId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderCreateDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedFolderCreateDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  if (valueObj.parentNsId) {
    jsonDict[@"parent_ns_id"] = valueObj.parentNsId;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedFolderCreateDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *parentNsId = valueDict[@"parent_ns_id"] ?: nil;

  return [[DBTEAMLOGSharedFolderCreateDetails alloc] initWithTargetIndex:targetIndex parentNsId:parentNsId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderLinkPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderLinkPolicy

#pragma mark - Constructors

- (instancetype)initWithMembersOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedFolderLinkPolicyMembersOnly;
  }
  return self;
}

- (instancetype)initWithMembersAndTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedFolderLinkPolicyMembersAndTeam;
  }
  return self;
}

- (instancetype)initWithAnyone {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedFolderLinkPolicyAnyone;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedFolderLinkPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isMembersOnly {
  return _tag == DBTEAMLOGSharedFolderLinkPolicyMembersOnly;
}

- (BOOL)isMembersAndTeam {
  return _tag == DBTEAMLOGSharedFolderLinkPolicyMembersAndTeam;
}

- (BOOL)isAnyone {
  return _tag == DBTEAMLOGSharedFolderLinkPolicyAnyone;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGSharedFolderLinkPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGSharedFolderLinkPolicyMembersOnly:
    return @"DBTEAMLOGSharedFolderLinkPolicyMembersOnly";
  case DBTEAMLOGSharedFolderLinkPolicyMembersAndTeam:
    return @"DBTEAMLOGSharedFolderLinkPolicyMembersAndTeam";
  case DBTEAMLOGSharedFolderLinkPolicyAnyone:
    return @"DBTEAMLOGSharedFolderLinkPolicyAnyone";
  case DBTEAMLOGSharedFolderLinkPolicyOther:
    return @"DBTEAMLOGSharedFolderLinkPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderLinkPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedFolderLinkPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderLinkPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGSharedFolderLinkPolicyMembersOnly:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharedFolderLinkPolicyMembersAndTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharedFolderLinkPolicyAnyone:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharedFolderLinkPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderLinkPolicy:other];
}

- (BOOL)isEqualToSharedFolderLinkPolicy:(DBTEAMLOGSharedFolderLinkPolicy *)aSharedFolderLinkPolicy {
  if (self == aSharedFolderLinkPolicy) {
    return YES;
  }
  if (self.tag != aSharedFolderLinkPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGSharedFolderLinkPolicyMembersOnly:
    return [[self tagName] isEqual:[aSharedFolderLinkPolicy tagName]];
  case DBTEAMLOGSharedFolderLinkPolicyMembersAndTeam:
    return [[self tagName] isEqual:[aSharedFolderLinkPolicy tagName]];
  case DBTEAMLOGSharedFolderLinkPolicyAnyone:
    return [[self tagName] isEqual:[aSharedFolderLinkPolicy tagName]];
  case DBTEAMLOGSharedFolderLinkPolicyOther:
    return [[self tagName] isEqual:[aSharedFolderLinkPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderLinkPolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedFolderLinkPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isMembersOnly]) {
    jsonDict[@".tag"] = @"members_only";
  } else if ([valueObj isMembersAndTeam]) {
    jsonDict[@".tag"] = @"members_and_team";
  } else if ([valueObj isAnyone]) {
    jsonDict[@".tag"] = @"anyone";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedFolderLinkPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"members_only"]) {
    return [[DBTEAMLOGSharedFolderLinkPolicy alloc] initWithMembersOnly];
  } else if ([tag isEqualToString:@"members_and_team"]) {
    return [[DBTEAMLOGSharedFolderLinkPolicy alloc] initWithMembersAndTeam];
  } else if ([tag isEqualToString:@"anyone"]) {
    return [[DBTEAMLOGSharedFolderLinkPolicy alloc] initWithAnyone];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGSharedFolderLinkPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGSharedFolderLinkPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderLogInfo

#pragma mark - Constructors

- (instancetype)initWithDisplayName:(NSString *)displayName nsId:(NSString *)nsId {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](nsId);

  self = [super init];
  if (self) {
    _nsId = nsId;
    _displayName = displayName;
  }
  return self;
}

- (instancetype)initWithDisplayName:(NSString *)displayName {
  return [self initWithDisplayName:displayName nsId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedFolderLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.displayName hash];
  if (self.nsId) {
    result = prime * result + [self.nsId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderLogInfo:other];
}

- (BOOL)isEqualToSharedFolderLogInfo:(DBTEAMLOGSharedFolderLogInfo *)aSharedFolderLogInfo {
  if (self == aSharedFolderLogInfo) {
    return YES;
  }
  if (![self.displayName isEqual:aSharedFolderLogInfo.displayName]) {
    return NO;
  }
  if (self.nsId) {
    if (![self.nsId isEqual:aSharedFolderLogInfo.nsId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedFolderLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"display_name"] = valueObj.displayName;
  if (valueObj.nsId) {
    jsonDict[@"ns_id"] = valueObj.nsId;
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedFolderLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *displayName = valueDict[@"display_name"];
  NSString *nsId = valueDict[@"ns_id"] ?: nil;

  return [[DBTEAMLOGSharedFolderLogInfo alloc] initWithDisplayName:displayName nsId:nsId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderMembershipManagementPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderMembershipManagementPolicy

#pragma mark - Constructors

- (instancetype)initWithOwner {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedFolderMembershipManagementPolicyOwner;
  }
  return self;
}

- (instancetype)initWithEditors {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedFolderMembershipManagementPolicyEditors;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSharedFolderMembershipManagementPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isOwner {
  return _tag == DBTEAMLOGSharedFolderMembershipManagementPolicyOwner;
}

- (BOOL)isEditors {
  return _tag == DBTEAMLOGSharedFolderMembershipManagementPolicyEditors;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGSharedFolderMembershipManagementPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGSharedFolderMembershipManagementPolicyOwner:
    return @"DBTEAMLOGSharedFolderMembershipManagementPolicyOwner";
  case DBTEAMLOGSharedFolderMembershipManagementPolicyEditors:
    return @"DBTEAMLOGSharedFolderMembershipManagementPolicyEditors";
  case DBTEAMLOGSharedFolderMembershipManagementPolicyOther:
    return @"DBTEAMLOGSharedFolderMembershipManagementPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderMembershipManagementPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedFolderMembershipManagementPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderMembershipManagementPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGSharedFolderMembershipManagementPolicyOwner:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharedFolderMembershipManagementPolicyEditors:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSharedFolderMembershipManagementPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderMembershipManagementPolicy:other];
}

- (BOOL)isEqualToSharedFolderMembershipManagementPolicy:
    (DBTEAMLOGSharedFolderMembershipManagementPolicy *)aSharedFolderMembershipManagementPolicy {
  if (self == aSharedFolderMembershipManagementPolicy) {
    return YES;
  }
  if (self.tag != aSharedFolderMembershipManagementPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGSharedFolderMembershipManagementPolicyOwner:
    return [[self tagName] isEqual:[aSharedFolderMembershipManagementPolicy tagName]];
  case DBTEAMLOGSharedFolderMembershipManagementPolicyEditors:
    return [[self tagName] isEqual:[aSharedFolderMembershipManagementPolicy tagName]];
  case DBTEAMLOGSharedFolderMembershipManagementPolicyOther:
    return [[self tagName] isEqual:[aSharedFolderMembershipManagementPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderMembershipManagementPolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedFolderMembershipManagementPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isOwner]) {
    jsonDict[@".tag"] = @"owner";
  } else if ([valueObj isEditors]) {
    jsonDict[@".tag"] = @"editors";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGSharedFolderMembershipManagementPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"owner"]) {
    return [[DBTEAMLOGSharedFolderMembershipManagementPolicy alloc] initWithOwner];
  } else if ([tag isEqualToString:@"editors"]) {
    return [[DBTEAMLOGSharedFolderMembershipManagementPolicy alloc] initWithEditors];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGSharedFolderMembershipManagementPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGSharedFolderMembershipManagementPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderMountDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderMountDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex originalFolderName:(NSString *)originalFolderName {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderMountDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedFolderMountDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderMountDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderMountDetails:other];
}

- (BOOL)isEqualToSharedFolderMountDetails:(DBTEAMLOGSharedFolderMountDetails *)aSharedFolderMountDetails {
  if (self == aSharedFolderMountDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedFolderMountDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSharedFolderMountDetails.originalFolderName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderMountDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedFolderMountDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;

  return jsonDict;
}

+ (DBTEAMLOGSharedFolderMountDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];

  return
      [[DBTEAMLOGSharedFolderMountDetails alloc] initWithTargetIndex:targetIndex originalFolderName:originalFolderName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderTransferOwnershipDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderTransferOwnershipDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex originalFolderName:(NSString *)originalFolderName {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderTransferOwnershipDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedFolderTransferOwnershipDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderTransferOwnershipDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderTransferOwnershipDetails:other];
}

- (BOOL)isEqualToSharedFolderTransferOwnershipDetails:
    (DBTEAMLOGSharedFolderTransferOwnershipDetails *)aSharedFolderTransferOwnershipDetails {
  if (self == aSharedFolderTransferOwnershipDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedFolderTransferOwnershipDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSharedFolderTransferOwnershipDetails.originalFolderName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderTransferOwnershipDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedFolderTransferOwnershipDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;

  return jsonDict;
}

+ (DBTEAMLOGSharedFolderTransferOwnershipDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];

  return [[DBTEAMLOGSharedFolderTransferOwnershipDetails alloc] initWithTargetIndex:targetIndex
                                                                 originalFolderName:originalFolderName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedFolderUnmountDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedFolderUnmountDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex originalFolderName:(NSString *)originalFolderName {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
    _originalFolderName = originalFolderName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedFolderUnmountDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedFolderUnmountDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedFolderUnmountDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];
  result = prime * result + [self.originalFolderName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderUnmountDetails:other];
}

- (BOOL)isEqualToSharedFolderUnmountDetails:(DBTEAMLOGSharedFolderUnmountDetails *)aSharedFolderUnmountDetails {
  if (self == aSharedFolderUnmountDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aSharedFolderUnmountDetails.targetIndex]) {
    return NO;
  }
  if (![self.originalFolderName isEqual:aSharedFolderUnmountDetails.originalFolderName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedFolderUnmountDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedFolderUnmountDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;
  jsonDict[@"original_folder_name"] = valueObj.originalFolderName;

  return jsonDict;
}

+ (DBTEAMLOGSharedFolderUnmountDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];
  NSString *originalFolderName = valueDict[@"original_folder_name"];

  return [[DBTEAMLOGSharedFolderUnmountDetails alloc] initWithTargetIndex:targetIndex
                                                       originalFolderName:originalFolderName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSharedNoteOpenedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharedNoteOpenedDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharedNoteOpenedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharedNoteOpenedDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharedNoteOpenedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedNoteOpenedDetails:other];
}

- (BOOL)isEqualToSharedNoteOpenedDetails:(DBTEAMLOGSharedNoteOpenedDetails *)aSharedNoteOpenedDetails {
  if (self == aSharedNoteOpenedDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharedNoteOpenedDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharedNoteOpenedDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGSharedNoteOpenedDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSharedNoteOpenedDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGExternalSharingPolicy.h"
#import "DBTEAMLOGSharingChangeFolderJoinPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharingChangeFolderJoinPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGExternalSharingPolicy *)dNewValue
                    previousValue:(DBTEAMLOGExternalSharingPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGExternalSharingPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharingChangeFolderJoinPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharingChangeFolderJoinPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharingChangeFolderJoinPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharingChangeFolderJoinPolicyDetails:other];
}

- (BOOL)isEqualToSharingChangeFolderJoinPolicyDetails:
    (DBTEAMLOGSharingChangeFolderJoinPolicyDetails *)aSharingChangeFolderJoinPolicyDetails {
  if (self == aSharingChangeFolderJoinPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSharingChangeFolderJoinPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharingChangeFolderJoinPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharingChangeFolderJoinPolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharingChangeFolderJoinPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGExternalSharingPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGExternalSharingPolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGSharingChangeFolderJoinPolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGExternalSharingPolicy *dNewValue =
      [DBTEAMLOGExternalSharingPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGExternalSharingPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGExternalSharingPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return
      [[DBTEAMLOGSharingChangeFolderJoinPolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGExternalSharingAccessibilityPolicy.h"
#import "DBTEAMLOGSharingChangeLinkPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharingChangeLinkPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGExternalSharingAccessibilityPolicy *)dNewValue
                    previousValue:(DBTEAMLOGExternalSharingAccessibilityPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGExternalSharingAccessibilityPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharingChangeLinkPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharingChangeLinkPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharingChangeLinkPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharingChangeLinkPolicyDetails:other];
}

- (BOOL)isEqualToSharingChangeLinkPolicyDetails:
    (DBTEAMLOGSharingChangeLinkPolicyDetails *)aSharingChangeLinkPolicyDetails {
  if (self == aSharingChangeLinkPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSharingChangeLinkPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharingChangeLinkPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharingChangeLinkPolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharingChangeLinkPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGExternalSharingAccessibilityPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] =
        [DBTEAMLOGExternalSharingAccessibilityPolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGSharingChangeLinkPolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGExternalSharingAccessibilityPolicy *dNewValue =
      [DBTEAMLOGExternalSharingAccessibilityPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGExternalSharingAccessibilityPolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGExternalSharingAccessibilityPolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGSharingChangeLinkPolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGExternalSharingPolicy.h"
#import "DBTEAMLOGSharingChangeMemberPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSharingChangeMemberPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGExternalSharingPolicy *)dNewValue
                    previousValue:(DBTEAMLOGExternalSharingPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGExternalSharingPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSharingChangeMemberPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSharingChangeMemberPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSharingChangeMemberPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharingChangeMemberPolicyDetails:other];
}

- (BOOL)isEqualToSharingChangeMemberPolicyDetails:
    (DBTEAMLOGSharingChangeMemberPolicyDetails *)aSharingChangeMemberPolicyDetails {
  if (self == aSharingChangeMemberPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSharingChangeMemberPolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSharingChangeMemberPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSharingChangeMemberPolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSharingChangeMemberPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGExternalSharingPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGExternalSharingPolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGSharingChangeMemberPolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGExternalSharingPolicy *dNewValue =
      [DBTEAMLOGExternalSharingPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGExternalSharingPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGExternalSharingPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGSharingChangeMemberPolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShmodelAppCreateDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShmodelAppCreateDetails

#pragma mark - Constructors

- (instancetype)initWithSharingPermission:(NSString *)sharingPermission tokenKey:(NSString *)tokenKey {

  self = [super init];
  if (self) {
    _sharingPermission = sharingPermission;
    _tokenKey = tokenKey;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSharingPermission:nil tokenKey:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGShmodelAppCreateDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGShmodelAppCreateDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShmodelAppCreateDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sharingPermission) {
    result = prime * result + [self.sharingPermission hash];
  }
  if (self.tokenKey) {
    result = prime * result + [self.tokenKey hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShmodelAppCreateDetails:other];
}

- (BOOL)isEqualToShmodelAppCreateDetails:(DBTEAMLOGShmodelAppCreateDetails *)aShmodelAppCreateDetails {
  if (self == aShmodelAppCreateDetails) {
    return YES;
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aShmodelAppCreateDetails.sharingPermission]) {
      return NO;
    }
  }
  if (self.tokenKey) {
    if (![self.tokenKey isEqual:aShmodelAppCreateDetails.tokenKey]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShmodelAppCreateDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGShmodelAppCreateDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }
  if (valueObj.tokenKey) {
    jsonDict[@"token_key"] = valueObj.tokenKey;
  }

  return jsonDict;
}

+ (DBTEAMLOGShmodelAppCreateDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;
  NSString *tokenKey = valueDict[@"token_key"] ?: nil;

  return [[DBTEAMLOGShmodelAppCreateDetails alloc] initWithSharingPermission:sharingPermission tokenKey:tokenKey];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShmodelCreateDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShmodelCreateDetails

#pragma mark - Constructors

- (instancetype)initWithSharingPermission:(NSString *)sharingPermission tokenKey:(NSString *)tokenKey {

  self = [super init];
  if (self) {
    _sharingPermission = sharingPermission;
    _tokenKey = tokenKey;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSharingPermission:nil tokenKey:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGShmodelCreateDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGShmodelCreateDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShmodelCreateDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sharingPermission) {
    result = prime * result + [self.sharingPermission hash];
  }
  if (self.tokenKey) {
    result = prime * result + [self.tokenKey hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShmodelCreateDetails:other];
}

- (BOOL)isEqualToShmodelCreateDetails:(DBTEAMLOGShmodelCreateDetails *)aShmodelCreateDetails {
  if (self == aShmodelCreateDetails) {
    return YES;
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aShmodelCreateDetails.sharingPermission]) {
      return NO;
    }
  }
  if (self.tokenKey) {
    if (![self.tokenKey isEqual:aShmodelCreateDetails.tokenKey]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShmodelCreateDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGShmodelCreateDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }
  if (valueObj.tokenKey) {
    jsonDict[@"token_key"] = valueObj.tokenKey;
  }

  return jsonDict;
}

+ (DBTEAMLOGShmodelCreateDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;
  NSString *tokenKey = valueDict[@"token_key"] ?: nil;

  return [[DBTEAMLOGShmodelCreateDetails alloc] initWithSharingPermission:sharingPermission tokenKey:tokenKey];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShmodelDisableDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShmodelDisableDetails

#pragma mark - Constructors

- (instancetype)initWithSharingPermission:(NSString *)sharingPermission tokenKey:(NSString *)tokenKey {

  self = [super init];
  if (self) {
    _sharingPermission = sharingPermission;
    _tokenKey = tokenKey;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSharingPermission:nil tokenKey:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGShmodelDisableDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGShmodelDisableDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShmodelDisableDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sharingPermission) {
    result = prime * result + [self.sharingPermission hash];
  }
  if (self.tokenKey) {
    result = prime * result + [self.tokenKey hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShmodelDisableDetails:other];
}

- (BOOL)isEqualToShmodelDisableDetails:(DBTEAMLOGShmodelDisableDetails *)aShmodelDisableDetails {
  if (self == aShmodelDisableDetails) {
    return YES;
  }
  if (self.sharingPermission) {
    if (![self.sharingPermission isEqual:aShmodelDisableDetails.sharingPermission]) {
      return NO;
    }
  }
  if (self.tokenKey) {
    if (![self.tokenKey isEqual:aShmodelDisableDetails.tokenKey]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShmodelDisableDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGShmodelDisableDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sharingPermission) {
    jsonDict[@"sharing_permission"] = valueObj.sharingPermission;
  }
  if (valueObj.tokenKey) {
    jsonDict[@"token_key"] = valueObj.tokenKey;
  }

  return jsonDict;
}

+ (DBTEAMLOGShmodelDisableDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *sharingPermission = valueDict[@"sharing_permission"] ?: nil;
  NSString *tokenKey = valueDict[@"token_key"] ?: nil;

  return [[DBTEAMLOGShmodelDisableDetails alloc] initWithSharingPermission:sharingPermission tokenKey:tokenKey];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGNonTeamMemberLogInfo.h"
#import "DBTEAMLOGShmodelFbShareDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShmodelFbShareDetails

#pragma mark - Constructors

- (instancetype)initWithSharingNonMemberRecipients:
    (NSArray<DBTEAMLOGNonTeamMemberLogInfo *> *)sharingNonMemberRecipients {
  [DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil](sharingNonMemberRecipients);

  self = [super init];
  if (self) {
    _sharingNonMemberRecipients = sharingNonMemberRecipients;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGShmodelFbShareDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGShmodelFbShareDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShmodelFbShareDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.sharingNonMemberRecipients hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShmodelFbShareDetails:other];
}

- (BOOL)isEqualToShmodelFbShareDetails:(DBTEAMLOGShmodelFbShareDetails *)aShmodelFbShareDetails {
  if (self == aShmodelFbShareDetails) {
    return YES;
  }
  if (![self.sharingNonMemberRecipients isEqual:aShmodelFbShareDetails.sharingNonMemberRecipients]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShmodelFbShareDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGShmodelFbShareDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"sharing_non_member_recipients"] =
      [DBArraySerializer serialize:valueObj.sharingNonMemberRecipients
                         withBlock:^id(id elem0) {
                           return [DBTEAMLOGNonTeamMemberLogInfoSerializer serialize:elem0];
                         }];

  return jsonDict;
}

+ (DBTEAMLOGShmodelFbShareDetails *)deserialize:(NSDictionary *)valueDict {
  NSArray<DBTEAMLOGNonTeamMemberLogInfo *> *sharingNonMemberRecipients =
      [DBArraySerializer deserialize:valueDict[@"sharing_non_member_recipients"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMLOGNonTeamMemberLogInfoSerializer deserialize:elem0];
                           }];

  return [[DBTEAMLOGShmodelFbShareDetails alloc] initWithSharingNonMemberRecipients:sharingNonMemberRecipients];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShmodelGroupShareDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShmodelGroupShareDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGShmodelGroupShareDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGShmodelGroupShareDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShmodelGroupShareDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShmodelGroupShareDetails:other];
}

- (BOOL)isEqualToShmodelGroupShareDetails:(DBTEAMLOGShmodelGroupShareDetails *)aShmodelGroupShareDetails {
  if (self == aShmodelGroupShareDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShmodelGroupShareDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGShmodelGroupShareDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGShmodelGroupShareDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGShmodelGroupShareDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShmodelRemoveExpirationDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShmodelRemoveExpirationDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGShmodelRemoveExpirationDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGShmodelRemoveExpirationDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShmodelRemoveExpirationDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShmodelRemoveExpirationDetails:other];
}

- (BOOL)isEqualToShmodelRemoveExpirationDetails:
    (DBTEAMLOGShmodelRemoveExpirationDetails *)aShmodelRemoveExpirationDetails {
  if (self == aShmodelRemoveExpirationDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShmodelRemoveExpirationDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGShmodelRemoveExpirationDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGShmodelRemoveExpirationDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGShmodelRemoveExpirationDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShmodelSetExpirationDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShmodelSetExpirationDetails

#pragma mark - Constructors

- (instancetype)initWithExpirationStartDate:(NSString *)expirationStartDate expirationDays:(NSNumber *)expirationDays {

  self = [super init];
  if (self) {
    _expirationStartDate = expirationStartDate;
    _expirationDays = expirationDays;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGShmodelSetExpirationDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGShmodelSetExpirationDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShmodelSetExpirationDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.expirationStartDate hash];
  result = prime * result + [self.expirationDays hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShmodelSetExpirationDetails:other];
}

- (BOOL)isEqualToShmodelSetExpirationDetails:(DBTEAMLOGShmodelSetExpirationDetails *)aShmodelSetExpirationDetails {
  if (self == aShmodelSetExpirationDetails) {
    return YES;
  }
  if (![self.expirationStartDate isEqual:aShmodelSetExpirationDetails.expirationStartDate]) {
    return NO;
  }
  if (![self.expirationDays isEqual:aShmodelSetExpirationDetails.expirationDays]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShmodelSetExpirationDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGShmodelSetExpirationDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"expiration_start_date"] = valueObj.expirationStartDate;
  jsonDict[@"expiration_days"] = valueObj.expirationDays;

  return jsonDict;
}

+ (DBTEAMLOGShmodelSetExpirationDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *expirationStartDate = valueDict[@"expiration_start_date"];
  NSNumber *expirationDays = valueDict[@"expiration_days"];

  return [[DBTEAMLOGShmodelSetExpirationDetails alloc] initWithExpirationStartDate:expirationStartDate
                                                                    expirationDays:expirationDays];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShmodelTeamCopyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShmodelTeamCopyDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGShmodelTeamCopyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGShmodelTeamCopyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShmodelTeamCopyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShmodelTeamCopyDetails:other];
}

- (BOOL)isEqualToShmodelTeamCopyDetails:(DBTEAMLOGShmodelTeamCopyDetails *)aShmodelTeamCopyDetails {
  if (self == aShmodelTeamCopyDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShmodelTeamCopyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGShmodelTeamCopyDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGShmodelTeamCopyDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGShmodelTeamCopyDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShmodelTeamDownloadDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShmodelTeamDownloadDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGShmodelTeamDownloadDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGShmodelTeamDownloadDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShmodelTeamDownloadDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShmodelTeamDownloadDetails:other];
}

- (BOOL)isEqualToShmodelTeamDownloadDetails:(DBTEAMLOGShmodelTeamDownloadDetails *)aShmodelTeamDownloadDetails {
  if (self == aShmodelTeamDownloadDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShmodelTeamDownloadDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGShmodelTeamDownloadDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGShmodelTeamDownloadDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGShmodelTeamDownloadDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShmodelTeamShareDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShmodelTeamShareDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGShmodelTeamShareDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGShmodelTeamShareDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShmodelTeamShareDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShmodelTeamShareDetails:other];
}

- (BOOL)isEqualToShmodelTeamShareDetails:(DBTEAMLOGShmodelTeamShareDetails *)aShmodelTeamShareDetails {
  if (self == aShmodelTeamShareDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShmodelTeamShareDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGShmodelTeamShareDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGShmodelTeamShareDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGShmodelTeamShareDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShmodelTeamViewDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShmodelTeamViewDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGShmodelTeamViewDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGShmodelTeamViewDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShmodelTeamViewDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShmodelTeamViewDetails:other];
}

- (BOOL)isEqualToShmodelTeamViewDetails:(DBTEAMLOGShmodelTeamViewDetails *)aShmodelTeamViewDetails {
  if (self == aShmodelTeamViewDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShmodelTeamViewDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGShmodelTeamViewDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGShmodelTeamViewDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGShmodelTeamViewDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShmodelVisibilityPasswordDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShmodelVisibilityPasswordDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGShmodelVisibilityPasswordDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGShmodelVisibilityPasswordDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShmodelVisibilityPasswordDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShmodelVisibilityPasswordDetails:other];
}

- (BOOL)isEqualToShmodelVisibilityPasswordDetails:
    (DBTEAMLOGShmodelVisibilityPasswordDetails *)aShmodelVisibilityPasswordDetails {
  if (self == aShmodelVisibilityPasswordDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShmodelVisibilityPasswordDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGShmodelVisibilityPasswordDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGShmodelVisibilityPasswordDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGShmodelVisibilityPasswordDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShmodelVisibilityPublicDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShmodelVisibilityPublicDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGShmodelVisibilityPublicDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGShmodelVisibilityPublicDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShmodelVisibilityPublicDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShmodelVisibilityPublicDetails:other];
}

- (BOOL)isEqualToShmodelVisibilityPublicDetails:
    (DBTEAMLOGShmodelVisibilityPublicDetails *)aShmodelVisibilityPublicDetails {
  if (self == aShmodelVisibilityPublicDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShmodelVisibilityPublicDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGShmodelVisibilityPublicDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGShmodelVisibilityPublicDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGShmodelVisibilityPublicDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGShmodelVisibilityTeamOnlyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGShmodelVisibilityTeamOnlyDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGShmodelVisibilityTeamOnlyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGShmodelVisibilityTeamOnlyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGShmodelVisibilityTeamOnlyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToShmodelVisibilityTeamOnlyDetails:other];
}

- (BOOL)isEqualToShmodelVisibilityTeamOnlyDetails:
    (DBTEAMLOGShmodelVisibilityTeamOnlyDetails *)aShmodelVisibilityTeamOnlyDetails {
  if (self == aShmodelVisibilityTeamOnlyDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGShmodelVisibilityTeamOnlyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGShmodelVisibilityTeamOnlyDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGShmodelVisibilityTeamOnlyDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGShmodelVisibilityTeamOnlyDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSignInAsSessionEndDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSignInAsSessionEndDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSignInAsSessionEndDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSignInAsSessionEndDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSignInAsSessionEndDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSignInAsSessionEndDetails:other];
}

- (BOOL)isEqualToSignInAsSessionEndDetails:(DBTEAMLOGSignInAsSessionEndDetails *)aSignInAsSessionEndDetails {
  if (self == aSignInAsSessionEndDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSignInAsSessionEndDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSignInAsSessionEndDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGSignInAsSessionEndDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSignInAsSessionEndDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSignInAsSessionStartDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSignInAsSessionStartDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSignInAsSessionStartDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSignInAsSessionStartDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSignInAsSessionStartDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSignInAsSessionStartDetails:other];
}

- (BOOL)isEqualToSignInAsSessionStartDetails:(DBTEAMLOGSignInAsSessionStartDetails *)aSignInAsSessionStartDetails {
  if (self == aSignInAsSessionStartDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSignInAsSessionStartDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSignInAsSessionStartDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGSignInAsSessionStartDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSignInAsSessionStartDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSmartSyncChangePolicyDetails.h"
#import "DBTEAMLOGSmartSyncPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSmartSyncChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGSmartSyncPolicy *)dNewValue
                    previousValue:(DBTEAMLOGSmartSyncPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGSmartSyncPolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSmartSyncChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSmartSyncChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSmartSyncChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSmartSyncChangePolicyDetails:other];
}

- (BOOL)isEqualToSmartSyncChangePolicyDetails:(DBTEAMLOGSmartSyncChangePolicyDetails *)aSmartSyncChangePolicyDetails {
  if (self == aSmartSyncChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSmartSyncChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSmartSyncChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSmartSyncChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSmartSyncChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGSmartSyncPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGSmartSyncPolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGSmartSyncChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGSmartSyncPolicy *dNewValue = [DBTEAMLOGSmartSyncPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGSmartSyncPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGSmartSyncPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGSmartSyncChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSmartSyncCreateAdminPrivilegeReportDetails:other];
}

- (BOOL)isEqualToSmartSyncCreateAdminPrivilegeReportDetails:
    (DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails *)aSmartSyncCreateAdminPrivilegeReportDetails {
  if (self == aSmartSyncCreateAdminPrivilegeReportDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSmartSyncPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGSmartSyncPolicy

#pragma mark - Constructors

- (instancetype)initWithLocalOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSmartSyncPolicyLocalOnly;
  }
  return self;
}

- (instancetype)initWithSynced {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSmartSyncPolicySynced;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSmartSyncPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isLocalOnly {
  return _tag == DBTEAMLOGSmartSyncPolicyLocalOnly;
}

- (BOOL)isSynced {
  return _tag == DBTEAMLOGSmartSyncPolicySynced;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGSmartSyncPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGSmartSyncPolicyLocalOnly:
    return @"DBTEAMLOGSmartSyncPolicyLocalOnly";
  case DBTEAMLOGSmartSyncPolicySynced:
    return @"DBTEAMLOGSmartSyncPolicySynced";
  case DBTEAMLOGSmartSyncPolicyOther:
    return @"DBTEAMLOGSmartSyncPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSmartSyncPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSmartSyncPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSmartSyncPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGSmartSyncPolicyLocalOnly:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSmartSyncPolicySynced:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSmartSyncPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSmartSyncPolicy:other];
}

- (BOOL)isEqualToSmartSyncPolicy:(DBTEAMLOGSmartSyncPolicy *)aSmartSyncPolicy {
  if (self == aSmartSyncPolicy) {
    return YES;
  }
  if (self.tag != aSmartSyncPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGSmartSyncPolicyLocalOnly:
    return [[self tagName] isEqual:[aSmartSyncPolicy tagName]];
  case DBTEAMLOGSmartSyncPolicySynced:
    return [[self tagName] isEqual:[aSmartSyncPolicy tagName]];
  case DBTEAMLOGSmartSyncPolicyOther:
    return [[self tagName] isEqual:[aSmartSyncPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSmartSyncPolicySerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSmartSyncPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isLocalOnly]) {
    jsonDict[@".tag"] = @"local_only";
  } else if ([valueObj isSynced]) {
    jsonDict[@".tag"] = @"synced";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGSmartSyncPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"local_only"]) {
    return [[DBTEAMLOGSmartSyncPolicy alloc] initWithLocalOnly];
  } else if ([tag isEqualToString:@"synced"]) {
    return [[DBTEAMLOGSmartSyncPolicy alloc] initWithSynced];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGSmartSyncPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGSmartSyncPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSpaceLimitsLevel.h"

#pragma mark - API Object

@implementation DBTEAMLOGSpaceLimitsLevel

#pragma mark - Constructors

- (instancetype)initWithGenerous {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSpaceLimitsLevelGenerous;
  }
  return self;
}

- (instancetype)initWithModerate {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSpaceLimitsLevelModerate;
  }
  return self;
}

- (instancetype)initWithNoLimit {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSpaceLimitsLevelNoLimit;
  }
  return self;
}

- (instancetype)initWithStrict {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSpaceLimitsLevelStrict;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSpaceLimitsLevelOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isGenerous {
  return _tag == DBTEAMLOGSpaceLimitsLevelGenerous;
}

- (BOOL)isModerate {
  return _tag == DBTEAMLOGSpaceLimitsLevelModerate;
}

- (BOOL)isNoLimit {
  return _tag == DBTEAMLOGSpaceLimitsLevelNoLimit;
}

- (BOOL)isStrict {
  return _tag == DBTEAMLOGSpaceLimitsLevelStrict;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGSpaceLimitsLevelOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGSpaceLimitsLevelGenerous:
    return @"DBTEAMLOGSpaceLimitsLevelGenerous";
  case DBTEAMLOGSpaceLimitsLevelModerate:
    return @"DBTEAMLOGSpaceLimitsLevelModerate";
  case DBTEAMLOGSpaceLimitsLevelNoLimit:
    return @"DBTEAMLOGSpaceLimitsLevelNoLimit";
  case DBTEAMLOGSpaceLimitsLevelStrict:
    return @"DBTEAMLOGSpaceLimitsLevelStrict";
  case DBTEAMLOGSpaceLimitsLevelOther:
    return @"DBTEAMLOGSpaceLimitsLevelOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSpaceLimitsLevelSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSpaceLimitsLevelSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSpaceLimitsLevelSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGSpaceLimitsLevelGenerous:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSpaceLimitsLevelModerate:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSpaceLimitsLevelNoLimit:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSpaceLimitsLevelStrict:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSpaceLimitsLevelOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSpaceLimitsLevel:other];
}

- (BOOL)isEqualToSpaceLimitsLevel:(DBTEAMLOGSpaceLimitsLevel *)aSpaceLimitsLevel {
  if (self == aSpaceLimitsLevel) {
    return YES;
  }
  if (self.tag != aSpaceLimitsLevel.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGSpaceLimitsLevelGenerous:
    return [[self tagName] isEqual:[aSpaceLimitsLevel tagName]];
  case DBTEAMLOGSpaceLimitsLevelModerate:
    return [[self tagName] isEqual:[aSpaceLimitsLevel tagName]];
  case DBTEAMLOGSpaceLimitsLevelNoLimit:
    return [[self tagName] isEqual:[aSpaceLimitsLevel tagName]];
  case DBTEAMLOGSpaceLimitsLevelStrict:
    return [[self tagName] isEqual:[aSpaceLimitsLevel tagName]];
  case DBTEAMLOGSpaceLimitsLevelOther:
    return [[self tagName] isEqual:[aSpaceLimitsLevel tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSpaceLimitsLevelSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSpaceLimitsLevel *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isGenerous]) {
    jsonDict[@".tag"] = @"generous";
  } else if ([valueObj isModerate]) {
    jsonDict[@".tag"] = @"moderate";
  } else if ([valueObj isNoLimit]) {
    jsonDict[@".tag"] = @"no_limit";
  } else if ([valueObj isStrict]) {
    jsonDict[@".tag"] = @"strict";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGSpaceLimitsLevel *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"generous"]) {
    return [[DBTEAMLOGSpaceLimitsLevel alloc] initWithGenerous];
  } else if ([tag isEqualToString:@"moderate"]) {
    return [[DBTEAMLOGSpaceLimitsLevel alloc] initWithModerate];
  } else if ([tag isEqualToString:@"no_limit"]) {
    return [[DBTEAMLOGSpaceLimitsLevel alloc] initWithNoLimit];
  } else if ([tag isEqualToString:@"strict"]) {
    return [[DBTEAMLOGSpaceLimitsLevel alloc] initWithStrict];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGSpaceLimitsLevel alloc] initWithOther];
  } else {
    return [[DBTEAMLOGSpaceLimitsLevel alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSpaceLimitsStatus.h"

#pragma mark - API Object

@implementation DBTEAMLOGSpaceLimitsStatus

#pragma mark - Constructors

- (instancetype)initWithWithinQuota {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSpaceLimitsStatusWithinQuota;
  }
  return self;
}

- (instancetype)initWithNearQuota {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSpaceLimitsStatusNearQuota;
  }
  return self;
}

- (instancetype)initWithOverQuota {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSpaceLimitsStatusOverQuota;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGSpaceLimitsStatusOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isWithinQuota {
  return _tag == DBTEAMLOGSpaceLimitsStatusWithinQuota;
}

- (BOOL)isNearQuota {
  return _tag == DBTEAMLOGSpaceLimitsStatusNearQuota;
}

- (BOOL)isOverQuota {
  return _tag == DBTEAMLOGSpaceLimitsStatusOverQuota;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGSpaceLimitsStatusOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGSpaceLimitsStatusWithinQuota:
    return @"DBTEAMLOGSpaceLimitsStatusWithinQuota";
  case DBTEAMLOGSpaceLimitsStatusNearQuota:
    return @"DBTEAMLOGSpaceLimitsStatusNearQuota";
  case DBTEAMLOGSpaceLimitsStatusOverQuota:
    return @"DBTEAMLOGSpaceLimitsStatusOverQuota";
  case DBTEAMLOGSpaceLimitsStatusOther:
    return @"DBTEAMLOGSpaceLimitsStatusOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSpaceLimitsStatusSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSpaceLimitsStatusSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSpaceLimitsStatusSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGSpaceLimitsStatusWithinQuota:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSpaceLimitsStatusNearQuota:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSpaceLimitsStatusOverQuota:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGSpaceLimitsStatusOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSpaceLimitsStatus:other];
}

- (BOOL)isEqualToSpaceLimitsStatus:(DBTEAMLOGSpaceLimitsStatus *)aSpaceLimitsStatus {
  if (self == aSpaceLimitsStatus) {
    return YES;
  }
  if (self.tag != aSpaceLimitsStatus.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGSpaceLimitsStatusWithinQuota:
    return [[self tagName] isEqual:[aSpaceLimitsStatus tagName]];
  case DBTEAMLOGSpaceLimitsStatusNearQuota:
    return [[self tagName] isEqual:[aSpaceLimitsStatus tagName]];
  case DBTEAMLOGSpaceLimitsStatusOverQuota:
    return [[self tagName] isEqual:[aSpaceLimitsStatus tagName]];
  case DBTEAMLOGSpaceLimitsStatusOther:
    return [[self tagName] isEqual:[aSpaceLimitsStatus tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSpaceLimitsStatusSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSpaceLimitsStatus *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isWithinQuota]) {
    jsonDict[@".tag"] = @"within_quota";
  } else if ([valueObj isNearQuota]) {
    jsonDict[@".tag"] = @"near_quota";
  } else if ([valueObj isOverQuota]) {
    jsonDict[@".tag"] = @"over_quota";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGSpaceLimitsStatus *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"within_quota"]) {
    return [[DBTEAMLOGSpaceLimitsStatus alloc] initWithWithinQuota];
  } else if ([tag isEqualToString:@"near_quota"]) {
    return [[DBTEAMLOGSpaceLimitsStatus alloc] initWithNearQuota];
  } else if ([tag isEqualToString:@"over_quota"]) {
    return [[DBTEAMLOGSpaceLimitsStatus alloc] initWithOverQuota];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGSpaceLimitsStatus alloc] initWithOther];
  } else {
    return [[DBTEAMLOGSpaceLimitsStatus alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoChangeCertDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoChangeCertDetails

#pragma mark - Constructors

- (instancetype)initWithSubject:(NSString *)subject
                         issuer:(NSString *)issuer
                      issueDate:(NSString *)issueDate
                 expirationDate:(NSString *)expirationDate
                   serialNumber:(NSString *)serialNumber
                sha1Fingerprint:(NSString *)sha1Fingerprint
                     commonName:(NSString *)commonName {

  self = [super init];
  if (self) {
    _subject = subject;
    _issuer = issuer;
    _issueDate = issueDate;
    _expirationDate = expirationDate;
    _serialNumber = serialNumber;
    _sha1Fingerprint = sha1Fingerprint;
    _commonName = commonName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSsoChangeCertDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSsoChangeCertDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoChangeCertDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.subject hash];
  result = prime * result + [self.issuer hash];
  result = prime * result + [self.issueDate hash];
  result = prime * result + [self.expirationDate hash];
  result = prime * result + [self.serialNumber hash];
  result = prime * result + [self.sha1Fingerprint hash];
  result = prime * result + [self.commonName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoChangeCertDetails:other];
}

- (BOOL)isEqualToSsoChangeCertDetails:(DBTEAMLOGSsoChangeCertDetails *)aSsoChangeCertDetails {
  if (self == aSsoChangeCertDetails) {
    return YES;
  }
  if (![self.subject isEqual:aSsoChangeCertDetails.subject]) {
    return NO;
  }
  if (![self.issuer isEqual:aSsoChangeCertDetails.issuer]) {
    return NO;
  }
  if (![self.issueDate isEqual:aSsoChangeCertDetails.issueDate]) {
    return NO;
  }
  if (![self.expirationDate isEqual:aSsoChangeCertDetails.expirationDate]) {
    return NO;
  }
  if (![self.serialNumber isEqual:aSsoChangeCertDetails.serialNumber]) {
    return NO;
  }
  if (![self.sha1Fingerprint isEqual:aSsoChangeCertDetails.sha1Fingerprint]) {
    return NO;
  }
  if (![self.commonName isEqual:aSsoChangeCertDetails.commonName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoChangeCertDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSsoChangeCertDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"subject"] = valueObj.subject;
  jsonDict[@"issuer"] = valueObj.issuer;
  jsonDict[@"issue_date"] = valueObj.issueDate;
  jsonDict[@"expiration_date"] = valueObj.expirationDate;
  jsonDict[@"serial_number"] = valueObj.serialNumber;
  jsonDict[@"sha1_fingerprint"] = valueObj.sha1Fingerprint;
  jsonDict[@"common_name"] = valueObj.commonName;

  return jsonDict;
}

+ (DBTEAMLOGSsoChangeCertDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *subject = valueDict[@"subject"];
  NSString *issuer = valueDict[@"issuer"];
  NSString *issueDate = valueDict[@"issue_date"];
  NSString *expirationDate = valueDict[@"expiration_date"];
  NSString *serialNumber = valueDict[@"serial_number"];
  NSString *sha1Fingerprint = valueDict[@"sha1_fingerprint"];
  NSString *commonName = valueDict[@"common_name"];

  return [[DBTEAMLOGSsoChangeCertDetails alloc] initWithSubject:subject
                                                         issuer:issuer
                                                      issueDate:issueDate
                                                 expirationDate:expirationDate
                                                   serialNumber:serialNumber
                                                sha1Fingerprint:sha1Fingerprint
                                                     commonName:commonName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoChangeLoginUrlDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoChangeLoginUrlDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousSsoUrl:(NSString *)previousSsoUrl dNewSsoUrl:(NSString *)dNewSsoUrl {

  self = [super init];
  if (self) {
    _previousSsoUrl = previousSsoUrl;
    _dNewSsoUrl = dNewSsoUrl;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSsoChangeLoginUrlDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSsoChangeLoginUrlDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoChangeLoginUrlDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousSsoUrl hash];
  result = prime * result + [self.dNewSsoUrl hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoChangeLoginUrlDetails:other];
}

- (BOOL)isEqualToSsoChangeLoginUrlDetails:(DBTEAMLOGSsoChangeLoginUrlDetails *)aSsoChangeLoginUrlDetails {
  if (self == aSsoChangeLoginUrlDetails) {
    return YES;
  }
  if (![self.previousSsoUrl isEqual:aSsoChangeLoginUrlDetails.previousSsoUrl]) {
    return NO;
  }
  if (![self.dNewSsoUrl isEqual:aSsoChangeLoginUrlDetails.dNewSsoUrl]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoChangeLoginUrlDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSsoChangeLoginUrlDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_sso_url"] = valueObj.previousSsoUrl;
  jsonDict[@"new_sso_url"] = valueObj.dNewSsoUrl;

  return jsonDict;
}

+ (DBTEAMLOGSsoChangeLoginUrlDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *previousSsoUrl = valueDict[@"previous_sso_url"];
  NSString *dNewSsoUrl = valueDict[@"new_sso_url"];

  return [[DBTEAMLOGSsoChangeLoginUrlDetails alloc] initWithPreviousSsoUrl:previousSsoUrl dNewSsoUrl:dNewSsoUrl];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoChangeLogoutUrlDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoChangeLogoutUrlDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousSsoLogoutUrl:(NSString *)previousSsoLogoutUrl
                            dNewSsoLogoutUrl:(NSString *)dNewSsoLogoutUrl {

  self = [super init];
  if (self) {
    _previousSsoLogoutUrl = previousSsoLogoutUrl;
    _dNewSsoLogoutUrl = dNewSsoLogoutUrl;
  }
  return self;
}

- (instancetype)initWithPreviousSsoLogoutUrl:(NSString *)previousSsoLogoutUrl {
  return [self initWithPreviousSsoLogoutUrl:previousSsoLogoutUrl dNewSsoLogoutUrl:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSsoChangeLogoutUrlDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSsoChangeLogoutUrlDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoChangeLogoutUrlDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousSsoLogoutUrl hash];
  if (self.dNewSsoLogoutUrl) {
    result = prime * result + [self.dNewSsoLogoutUrl hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoChangeLogoutUrlDetails:other];
}

- (BOOL)isEqualToSsoChangeLogoutUrlDetails:(DBTEAMLOGSsoChangeLogoutUrlDetails *)aSsoChangeLogoutUrlDetails {
  if (self == aSsoChangeLogoutUrlDetails) {
    return YES;
  }
  if (![self.previousSsoLogoutUrl isEqual:aSsoChangeLogoutUrlDetails.previousSsoLogoutUrl]) {
    return NO;
  }
  if (self.dNewSsoLogoutUrl) {
    if (![self.dNewSsoLogoutUrl isEqual:aSsoChangeLogoutUrlDetails.dNewSsoLogoutUrl]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoChangeLogoutUrlDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSsoChangeLogoutUrlDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_sso_logout_url"] = valueObj.previousSsoLogoutUrl;
  if (valueObj.dNewSsoLogoutUrl) {
    jsonDict[@"new_sso_logout_url"] = valueObj.dNewSsoLogoutUrl;
  }

  return jsonDict;
}

+ (DBTEAMLOGSsoChangeLogoutUrlDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *previousSsoLogoutUrl = valueDict[@"previous_sso_logout_url"];
  NSString *dNewSsoLogoutUrl = valueDict[@"new_sso_logout_url"] ?: nil;

  return [[DBTEAMLOGSsoChangeLogoutUrlDetails alloc] initWithPreviousSsoLogoutUrl:previousSsoLogoutUrl
                                                                 dNewSsoLogoutUrl:dNewSsoLogoutUrl];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGOptionalChangePolicy.h"
#import "DBTEAMLOGSsoChangePolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGOptionalChangePolicy *)dNewValue
                    previousValue:(DBTEAMLOGOptionalChangePolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGOptionalChangePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSsoChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSsoChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoChangePolicyDetails:other];
}

- (BOOL)isEqualToSsoChangePolicyDetails:(DBTEAMLOGSsoChangePolicyDetails *)aSsoChangePolicyDetails {
  if (self == aSsoChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aSsoChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aSsoChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSsoChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGOptionalChangePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGOptionalChangePolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGSsoChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGOptionalChangePolicy *dNewValue =
      [DBTEAMLOGOptionalChangePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGOptionalChangePolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGOptionalChangePolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGSsoChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoChangeSamlIdentityModeDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoChangeSamlIdentityModeDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousSamlIdentityMode:(NSNumber *)previousSamlIdentityMode
                            dNewSamlIdentityMode:(NSNumber *)dNewSamlIdentityMode {

  self = [super init];
  if (self) {
    _previousSamlIdentityMode = previousSamlIdentityMode;
    _dNewSamlIdentityMode = dNewSamlIdentityMode;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSsoChangeSamlIdentityModeDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSsoChangeSamlIdentityModeDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoChangeSamlIdentityModeDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousSamlIdentityMode hash];
  result = prime * result + [self.dNewSamlIdentityMode hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoChangeSamlIdentityModeDetails:other];
}

- (BOOL)isEqualToSsoChangeSamlIdentityModeDetails:
    (DBTEAMLOGSsoChangeSamlIdentityModeDetails *)aSsoChangeSamlIdentityModeDetails {
  if (self == aSsoChangeSamlIdentityModeDetails) {
    return YES;
  }
  if (![self.previousSamlIdentityMode isEqual:aSsoChangeSamlIdentityModeDetails.previousSamlIdentityMode]) {
    return NO;
  }
  if (![self.dNewSamlIdentityMode isEqual:aSsoChangeSamlIdentityModeDetails.dNewSamlIdentityMode]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoChangeSamlIdentityModeDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSsoChangeSamlIdentityModeDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_saml_identity_mode"] = valueObj.previousSamlIdentityMode;
  jsonDict[@"new_saml_identity_mode"] = valueObj.dNewSamlIdentityMode;

  return jsonDict;
}

+ (DBTEAMLOGSsoChangeSamlIdentityModeDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *previousSamlIdentityMode = valueDict[@"previous_saml_identity_mode"];
  NSNumber *dNewSamlIdentityMode = valueDict[@"new_saml_identity_mode"];

  return [[DBTEAMLOGSsoChangeSamlIdentityModeDetails alloc] initWithPreviousSamlIdentityMode:previousSamlIdentityMode
                                                                        dNewSamlIdentityMode:dNewSamlIdentityMode];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSsoLoginFailDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGSsoLoginFailDetails

#pragma mark - Constructors

- (instancetype)initWithSystemMessage:(NSString *)systemMessage adminMessage:(NSString *)adminMessage {

  self = [super init];
  if (self) {
    _systemMessage = systemMessage;
    _adminMessage = adminMessage;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGSsoLoginFailDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGSsoLoginFailDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGSsoLoginFailDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.systemMessage hash];
  result = prime * result + [self.adminMessage hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSsoLoginFailDetails:other];
}

- (BOOL)isEqualToSsoLoginFailDetails:(DBTEAMLOGSsoLoginFailDetails *)aSsoLoginFailDetails {
  if (self == aSsoLoginFailDetails) {
    return YES;
  }
  if (![self.systemMessage isEqual:aSsoLoginFailDetails.systemMessage]) {
    return NO;
  }
  if (![self.adminMessage isEqual:aSsoLoginFailDetails.adminMessage]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSsoLoginFailDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGSsoLoginFailDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"system_message"] = valueObj.systemMessage;
  jsonDict[@"admin_message"] = valueObj.adminMessage;

  return jsonDict;
}

+ (DBTEAMLOGSsoLoginFailDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *systemMessage = valueDict[@"system_message"];
  NSString *adminMessage = valueDict[@"admin_message"];

  return [[DBTEAMLOGSsoLoginFailDetails alloc] initWithSystemMessage:systemMessage adminMessage:adminMessage];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamActivityCreateReportDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamActivityCreateReportDetails

#pragma mark - Constructors

- (instancetype)initWithStartDate:(NSString *)startDate endDate:(NSString *)endDate {

  self = [super init];
  if (self) {
    _startDate = startDate;
    _endDate = endDate;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTeamActivityCreateReportDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTeamActivityCreateReportDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamActivityCreateReportDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.startDate hash];
  result = prime * result + [self.endDate hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamActivityCreateReportDetails:other];
}

- (BOOL)isEqualToTeamActivityCreateReportDetails:
    (DBTEAMLOGTeamActivityCreateReportDetails *)aTeamActivityCreateReportDetails {
  if (self == aTeamActivityCreateReportDetails) {
    return YES;
  }
  if (![self.startDate isEqual:aTeamActivityCreateReportDetails.startDate]) {
    return NO;
  }
  if (![self.endDate isEqual:aTeamActivityCreateReportDetails.endDate]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamActivityCreateReportDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTeamActivityCreateReportDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"start_date"] = valueObj.startDate;
  jsonDict[@"end_date"] = valueObj.endDate;

  return jsonDict;
}

+ (DBTEAMLOGTeamActivityCreateReportDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *startDate = valueDict[@"start_date"];
  NSString *endDate = valueDict[@"end_date"];

  return [[DBTEAMLOGTeamActivityCreateReportDetails alloc] initWithStartDate:startDate endDate:endDate];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGActorLogInfo.h"
#import "DBTEAMLOGAssetLogInfo.h"
#import "DBTEAMLOGContextLogInfo.h"
#import "DBTEAMLOGEventCategory.h"
#import "DBTEAMLOGEventDetails.h"
#import "DBTEAMLOGEventType.h"
#import "DBTEAMLOGOriginLogInfo.h"
#import "DBTEAMLOGParticipantLogInfo.h"
#import "DBTEAMLOGTeamEvent.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamEvent

#pragma mark - Constructors

- (instancetype)initWithTimestamp:(NSDate *)timestamp
                  eventCategories:(NSArray<DBTEAMLOGEventCategory *> *)eventCategories
                            actor:(DBTEAMLOGActorLogInfo *)actor
             involveNonTeamMember:(NSNumber *)involveNonTeamMember
                          context:(DBTEAMLOGContextLogInfo *)context
                        eventType:(DBTEAMLOGEventType *)eventType
                          details:(DBTEAMLOGEventDetails *)details
                           origin:(DBTEAMLOGOriginLogInfo *)origin
                     participants:(NSArray<DBTEAMLOGParticipantLogInfo *> *)participants
                           assets:(NSArray<DBTEAMLOGAssetLogInfo *> *)assets {
  [DBStoneValidators arrayValidator:@(1) maxItems:nil itemValidator:nil](eventCategories);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](participants);
  [DBStoneValidators nullableValidator:[DBStoneValidators arrayValidator:nil maxItems:nil itemValidator:nil]](assets);

  self = [super init];
  if (self) {
    _timestamp = timestamp;
    _eventCategories = eventCategories;
    _actor = actor;
    _origin = origin;
    _participants = participants;
    _assets = assets;
    _involveNonTeamMember = involveNonTeamMember;
    _context = context;
    _eventType = eventType;
    _details = details;
  }
  return self;
}

- (instancetype)initWithTimestamp:(NSDate *)timestamp
                  eventCategories:(NSArray<DBTEAMLOGEventCategory *> *)eventCategories
                            actor:(DBTEAMLOGActorLogInfo *)actor
             involveNonTeamMember:(NSNumber *)involveNonTeamMember
                          context:(DBTEAMLOGContextLogInfo *)context
                        eventType:(DBTEAMLOGEventType *)eventType
                          details:(DBTEAMLOGEventDetails *)details {
  return [self initWithTimestamp:timestamp
                 eventCategories:eventCategories
                           actor:actor
            involveNonTeamMember:involveNonTeamMember
                         context:context
                       eventType:eventType
                         details:details
                          origin:nil
                    participants:nil
                          assets:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTeamEventSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTeamEventSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamEventSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.timestamp hash];
  result = prime * result + [self.eventCategories hash];
  result = prime * result + [self.actor hash];
  result = prime * result + [self.involveNonTeamMember hash];
  result = prime * result + [self.context hash];
  result = prime * result + [self.eventType hash];
  result = prime * result + [self.details hash];
  if (self.origin) {
    result = prime * result + [self.origin hash];
  }
  if (self.participants) {
    result = prime * result + [self.participants hash];
  }
  if (self.assets) {
    result = prime * result + [self.assets hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamEvent:other];
}

- (BOOL)isEqualToTeamEvent:(DBTEAMLOGTeamEvent *)aTeamEvent {
  if (self == aTeamEvent) {
    return YES;
  }
  if (![self.timestamp isEqual:aTeamEvent.timestamp]) {
    return NO;
  }
  if (![self.eventCategories isEqual:aTeamEvent.eventCategories]) {
    return NO;
  }
  if (![self.actor isEqual:aTeamEvent.actor]) {
    return NO;
  }
  if (![self.involveNonTeamMember isEqual:aTeamEvent.involveNonTeamMember]) {
    return NO;
  }
  if (![self.context isEqual:aTeamEvent.context]) {
    return NO;
  }
  if (![self.eventType isEqual:aTeamEvent.eventType]) {
    return NO;
  }
  if (![self.details isEqual:aTeamEvent.details]) {
    return NO;
  }
  if (self.origin) {
    if (![self.origin isEqual:aTeamEvent.origin]) {
      return NO;
    }
  }
  if (self.participants) {
    if (![self.participants isEqual:aTeamEvent.participants]) {
      return NO;
    }
  }
  if (self.assets) {
    if (![self.assets isEqual:aTeamEvent.assets]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamEventSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTeamEvent *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"timestamp"] = [DBNSDateSerializer serialize:valueObj.timestamp dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  jsonDict[@"event_categories"] = [DBArraySerializer serialize:valueObj.eventCategories
                                                     withBlock:^id(id elem0) {
                                                       return [DBTEAMLOGEventCategorySerializer serialize:elem0];
                                                     }];
  jsonDict[@"actor"] = [DBTEAMLOGActorLogInfoSerializer serialize:valueObj.actor];
  jsonDict[@"involve_non_team_member"] = valueObj.involveNonTeamMember;
  jsonDict[@"context"] = [DBTEAMLOGContextLogInfoSerializer serialize:valueObj.context];
  jsonDict[@"event_type"] = [DBTEAMLOGEventTypeSerializer serialize:valueObj.eventType];
  jsonDict[@"details"] = [DBTEAMLOGEventDetailsSerializer serialize:valueObj.details];
  if (valueObj.origin) {
    jsonDict[@"origin"] = [DBTEAMLOGOriginLogInfoSerializer serialize:valueObj.origin];
  }
  if (valueObj.participants) {
    jsonDict[@"participants"] = [DBArraySerializer serialize:valueObj.participants
                                                   withBlock:^id(id elem0) {
                                                     return [DBTEAMLOGParticipantLogInfoSerializer serialize:elem0];
                                                   }];
  }
  if (valueObj.assets) {
    jsonDict[@"assets"] = [DBArraySerializer serialize:valueObj.assets
                                             withBlock:^id(id elem0) {
                                               return [DBTEAMLOGAssetLogInfoSerializer serialize:elem0];
                                             }];
  }

  return jsonDict;
}

+ (DBTEAMLOGTeamEvent *)deserialize:(NSDictionary *)valueDict {
  NSDate *timestamp = [DBNSDateSerializer deserialize:valueDict[@"timestamp"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  NSArray<DBTEAMLOGEventCategory *> *eventCategories =
      [DBArraySerializer deserialize:valueDict[@"event_categories"]
                           withBlock:^id(id elem0) {
                             return [DBTEAMLOGEventCategorySerializer deserialize:elem0];
                           }];
  DBTEAMLOGActorLogInfo *actor = [DBTEAMLOGActorLogInfoSerializer deserialize:valueDict[@"actor"]];
  NSNumber *involveNonTeamMember = valueDict[@"involve_non_team_member"];
  DBTEAMLOGContextLogInfo *context = [DBTEAMLOGContextLogInfoSerializer deserialize:valueDict[@"context"]];
  DBTEAMLOGEventType *eventType = [DBTEAMLOGEventTypeSerializer deserialize:valueDict[@"event_type"]];
  DBTEAMLOGEventDetails *details = [DBTEAMLOGEventDetailsSerializer deserialize:valueDict[@"details"]];
  DBTEAMLOGOriginLogInfo *origin =
      valueDict[@"origin"] ? [DBTEAMLOGOriginLogInfoSerializer deserialize:valueDict[@"origin"]] : nil;
  NSArray<DBTEAMLOGParticipantLogInfo *> *participants =
      valueDict[@"participants"]
          ? [DBArraySerializer deserialize:valueDict[@"participants"]
                                 withBlock:^id(id elem0) {
                                   return [DBTEAMLOGParticipantLogInfoSerializer deserialize:elem0];
                                 }]
          : nil;
  NSArray<DBTEAMLOGAssetLogInfo *> *assets =
      valueDict[@"assets"] ? [DBArraySerializer deserialize:valueDict[@"assets"]
                                                  withBlock:^id(id elem0) {
                                                    return [DBTEAMLOGAssetLogInfoSerializer deserialize:elem0];
                                                  }]
                           : nil;

  return [[DBTEAMLOGTeamEvent alloc] initWithTimestamp:timestamp
                                       eventCategories:eventCategories
                                                 actor:actor
                                  involveNonTeamMember:involveNonTeamMember
                                               context:context
                                             eventType:eventType
                                               details:details
                                                origin:origin
                                          participants:participants
                                                assets:assets];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamFolderChangeStatusDetails.h"
#import "DBTEAMLOGTeamFolderStatus.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamFolderChangeStatusDetails

#pragma mark - Constructors

- (instancetype)initWithDNewStatus:(DBTEAMLOGTeamFolderStatus *)dNewStatus
                    previousStatus:(DBTEAMLOGTeamFolderStatus *)previousStatus {

  self = [super init];
  if (self) {
    _dNewStatus = dNewStatus;
    _previousStatus = previousStatus;
  }
  return self;
}

- (instancetype)initWithDNewStatus:(DBTEAMLOGTeamFolderStatus *)dNewStatus {
  return [self initWithDNewStatus:dNewStatus previousStatus:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTeamFolderChangeStatusDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTeamFolderChangeStatusDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamFolderChangeStatusDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewStatus hash];
  if (self.previousStatus) {
    result = prime * result + [self.previousStatus hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderChangeStatusDetails:other];
}

- (BOOL)isEqualToTeamFolderChangeStatusDetails:
    (DBTEAMLOGTeamFolderChangeStatusDetails *)aTeamFolderChangeStatusDetails {
  if (self == aTeamFolderChangeStatusDetails) {
    return YES;
  }
  if (![self.dNewStatus isEqual:aTeamFolderChangeStatusDetails.dNewStatus]) {
    return NO;
  }
  if (self.previousStatus) {
    if (![self.previousStatus isEqual:aTeamFolderChangeStatusDetails.previousStatus]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamFolderChangeStatusDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTeamFolderChangeStatusDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_status"] = [DBTEAMLOGTeamFolderStatusSerializer serialize:valueObj.dNewStatus];
  if (valueObj.previousStatus) {
    jsonDict[@"previous_status"] = [DBTEAMLOGTeamFolderStatusSerializer serialize:valueObj.previousStatus];
  }

  return jsonDict;
}

+ (DBTEAMLOGTeamFolderChangeStatusDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGTeamFolderStatus *dNewStatus = [DBTEAMLOGTeamFolderStatusSerializer deserialize:valueDict[@"new_status"]];
  DBTEAMLOGTeamFolderStatus *previousStatus =
      valueDict[@"previous_status"] ? [DBTEAMLOGTeamFolderStatusSerializer deserialize:valueDict[@"previous_status"]]
                                    : nil;

  return [[DBTEAMLOGTeamFolderChangeStatusDetails alloc] initWithDNewStatus:dNewStatus previousStatus:previousStatus];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamFolderCreateDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamFolderCreateDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTeamFolderCreateDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTeamFolderCreateDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamFolderCreateDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderCreateDetails:other];
}

- (BOOL)isEqualToTeamFolderCreateDetails:(DBTEAMLOGTeamFolderCreateDetails *)aTeamFolderCreateDetails {
  if (self == aTeamFolderCreateDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamFolderCreateDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTeamFolderCreateDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGTeamFolderCreateDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTeamFolderCreateDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamFolderDowngradeDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamFolderDowngradeDetails

#pragma mark - Constructors

- (instancetype)initWithTargetIndex:(NSNumber *)targetIndex {

  self = [super init];
  if (self) {
    _targetIndex = targetIndex;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTeamFolderDowngradeDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTeamFolderDowngradeDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamFolderDowngradeDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.targetIndex hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderDowngradeDetails:other];
}

- (BOOL)isEqualToTeamFolderDowngradeDetails:(DBTEAMLOGTeamFolderDowngradeDetails *)aTeamFolderDowngradeDetails {
  if (self == aTeamFolderDowngradeDetails) {
    return YES;
  }
  if (![self.targetIndex isEqual:aTeamFolderDowngradeDetails.targetIndex]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamFolderDowngradeDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTeamFolderDowngradeDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"target_index"] = valueObj.targetIndex;

  return jsonDict;
}

+ (DBTEAMLOGTeamFolderDowngradeDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *targetIndex = valueDict[@"target_index"];

  return [[DBTEAMLOGTeamFolderDowngradeDetails alloc] initWithTargetIndex:targetIndex];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamFolderPermanentlyDeleteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamFolderPermanentlyDeleteDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTeamFolderPermanentlyDeleteDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTeamFolderPermanentlyDeleteDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamFolderPermanentlyDeleteDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderPermanentlyDeleteDetails:other];
}

- (BOOL)isEqualToTeamFolderPermanentlyDeleteDetails:
    (DBTEAMLOGTeamFolderPermanentlyDeleteDetails *)aTeamFolderPermanentlyDeleteDetails {
  if (self == aTeamFolderPermanentlyDeleteDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamFolderPermanentlyDeleteDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTeamFolderPermanentlyDeleteDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGTeamFolderPermanentlyDeleteDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTeamFolderPermanentlyDeleteDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamFolderRenameDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamFolderRenameDetails

#pragma mark - Constructors

- (instancetype)initWithSrcIndex:(NSNumber *)srcIndex destIndex:(NSNumber *)destIndex {

  self = [super init];
  if (self) {
    _srcIndex = srcIndex;
    _destIndex = destIndex;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTeamFolderRenameDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTeamFolderRenameDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamFolderRenameDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.srcIndex hash];
  result = prime * result + [self.destIndex hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderRenameDetails:other];
}

- (BOOL)isEqualToTeamFolderRenameDetails:(DBTEAMLOGTeamFolderRenameDetails *)aTeamFolderRenameDetails {
  if (self == aTeamFolderRenameDetails) {
    return YES;
  }
  if (![self.srcIndex isEqual:aTeamFolderRenameDetails.srcIndex]) {
    return NO;
  }
  if (![self.destIndex isEqual:aTeamFolderRenameDetails.destIndex]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamFolderRenameDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTeamFolderRenameDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"src_index"] = valueObj.srcIndex;
  jsonDict[@"dest_index"] = valueObj.destIndex;

  return jsonDict;
}

+ (DBTEAMLOGTeamFolderRenameDetails *)deserialize:(NSDictionary *)valueDict {
  NSNumber *srcIndex = valueDict[@"src_index"];
  NSNumber *destIndex = valueDict[@"dest_index"];

  return [[DBTEAMLOGTeamFolderRenameDetails alloc] initWithSrcIndex:srcIndex destIndex:destIndex];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamFolderStatus.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamFolderStatus

#pragma mark - Constructors

- (instancetype)initWithArchive {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTeamFolderStatusArchive;
  }
  return self;
}

- (instancetype)initWithUnarchive {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTeamFolderStatusUnarchive;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTeamFolderStatusOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isArchive {
  return _tag == DBTEAMLOGTeamFolderStatusArchive;
}

- (BOOL)isUnarchive {
  return _tag == DBTEAMLOGTeamFolderStatusUnarchive;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGTeamFolderStatusOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGTeamFolderStatusArchive:
    return @"DBTEAMLOGTeamFolderStatusArchive";
  case DBTEAMLOGTeamFolderStatusUnarchive:
    return @"DBTEAMLOGTeamFolderStatusUnarchive";
  case DBTEAMLOGTeamFolderStatusOther:
    return @"DBTEAMLOGTeamFolderStatusOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTeamFolderStatusSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTeamFolderStatusSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamFolderStatusSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGTeamFolderStatusArchive:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTeamFolderStatusUnarchive:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTeamFolderStatusOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamFolderStatus:other];
}

- (BOOL)isEqualToTeamFolderStatus:(DBTEAMLOGTeamFolderStatus *)aTeamFolderStatus {
  if (self == aTeamFolderStatus) {
    return YES;
  }
  if (self.tag != aTeamFolderStatus.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGTeamFolderStatusArchive:
    return [[self tagName] isEqual:[aTeamFolderStatus tagName]];
  case DBTEAMLOGTeamFolderStatusUnarchive:
    return [[self tagName] isEqual:[aTeamFolderStatus tagName]];
  case DBTEAMLOGTeamFolderStatusOther:
    return [[self tagName] isEqual:[aTeamFolderStatus tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamFolderStatusSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTeamFolderStatus *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isArchive]) {
    jsonDict[@".tag"] = @"archive";
  } else if ([valueObj isUnarchive]) {
    jsonDict[@".tag"] = @"unarchive";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGTeamFolderStatus *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"archive"]) {
    return [[DBTEAMLOGTeamFolderStatus alloc] initWithArchive];
  } else if ([tag isEqualToString:@"unarchive"]) {
    return [[DBTEAMLOGTeamFolderStatus alloc] initWithUnarchive];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGTeamFolderStatus alloc] initWithOther];
  } else {
    return [[DBTEAMLOGTeamFolderStatus alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGTeamLinkedAppLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamLinkedAppLogInfo

#pragma mark - Constructors

- (instancetype)initWithAppId:(NSString *)appId displayName:(NSString *)displayName {

  self = [super initWithAppId:appId displayName:displayName];
  if (self) {
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithAppId:nil displayName:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTeamLinkedAppLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTeamLinkedAppLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamLinkedAppLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.appId) {
    result = prime * result + [self.appId hash];
  }
  if (self.displayName) {
    result = prime * result + [self.displayName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamLinkedAppLogInfo:other];
}

- (BOOL)isEqualToTeamLinkedAppLogInfo:(DBTEAMLOGTeamLinkedAppLogInfo *)aTeamLinkedAppLogInfo {
  if (self == aTeamLinkedAppLogInfo) {
    return YES;
  }
  if (self.appId) {
    if (![self.appId isEqual:aTeamLinkedAppLogInfo.appId]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aTeamLinkedAppLogInfo.displayName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamLinkedAppLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTeamLinkedAppLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.appId) {
    jsonDict[@"app_id"] = valueObj.appId;
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }

  return jsonDict;
}

+ (DBTEAMLOGTeamLinkedAppLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *appId = valueDict[@"app_id"] ?: nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;

  return [[DBTEAMLOGTeamLinkedAppLogInfo alloc] initWithAppId:appId displayName:displayName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamMemberLogInfo.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamMemberLogInfo

#pragma mark - Constructors

- (instancetype)initWithAccountId:(NSString *)accountId
                      displayName:(NSString *)displayName
                            email:(NSString *)email
                     teamMemberId:(NSString *)teamMemberId
                 memberExternalId:(NSString *)memberExternalId {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(40) maxLength:@(40) pattern:nil]](accountId);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:@(1) maxLength:nil pattern:@"[^/:?*<>\"|]*"]](displayName);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators
                         stringValidator:nil
                               maxLength:@(255)
                                 pattern:@"^['&A-Za-z0-9._%+-]+@[A-Za-z0-9-][A-Za-z0-9.-]*.[A-Za-z]{2,15}$"]](email);
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:@(64) pattern:nil]](memberExternalId);

  self = [super initWithAccountId:accountId displayName:displayName email:email];
  if (self) {
    _teamMemberId = teamMemberId;
    _memberExternalId = memberExternalId;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithAccountId:nil displayName:nil email:nil teamMemberId:nil memberExternalId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTeamMemberLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTeamMemberLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamMemberLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.accountId) {
    result = prime * result + [self.accountId hash];
  }
  if (self.displayName) {
    result = prime * result + [self.displayName hash];
  }
  if (self.email) {
    result = prime * result + [self.email hash];
  }
  if (self.teamMemberId) {
    result = prime * result + [self.teamMemberId hash];
  }
  if (self.memberExternalId) {
    result = prime * result + [self.memberExternalId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamMemberLogInfo:other];
}

- (BOOL)isEqualToTeamMemberLogInfo:(DBTEAMLOGTeamMemberLogInfo *)aTeamMemberLogInfo {
  if (self == aTeamMemberLogInfo) {
    return YES;
  }
  if (self.accountId) {
    if (![self.accountId isEqual:aTeamMemberLogInfo.accountId]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aTeamMemberLogInfo.displayName]) {
      return NO;
    }
  }
  if (self.email) {
    if (![self.email isEqual:aTeamMemberLogInfo.email]) {
      return NO;
    }
  }
  if (self.teamMemberId) {
    if (![self.teamMemberId isEqual:aTeamMemberLogInfo.teamMemberId]) {
      return NO;
    }
  }
  if (self.memberExternalId) {
    if (![self.memberExternalId isEqual:aTeamMemberLogInfo.memberExternalId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamMemberLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTeamMemberLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.accountId) {
    jsonDict[@"account_id"] = valueObj.accountId;
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }
  if (valueObj.email) {
    jsonDict[@"email"] = valueObj.email;
  }
  if (valueObj.teamMemberId) {
    jsonDict[@"team_member_id"] = valueObj.teamMemberId;
  }
  if (valueObj.memberExternalId) {
    jsonDict[@"member_external_id"] = valueObj.memberExternalId;
  }

  return jsonDict;
}

+ (DBTEAMLOGTeamMemberLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *accountId = valueDict[@"account_id"] ?: nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;
  NSString *email = valueDict[@"email"] ?: nil;
  NSString *teamMemberId = valueDict[@"team_member_id"] ?: nil;
  NSString *memberExternalId = valueDict[@"member_external_id"] ?: nil;

  return [[DBTEAMLOGTeamMemberLogInfo alloc] initWithAccountId:accountId
                                                   displayName:displayName
                                                         email:email
                                                  teamMemberId:teamMemberId
                                              memberExternalId:memberExternalId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamMergeDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamMergeDetails

#pragma mark - Constructors

- (instancetype)initWithMergedFromTeamName:(NSString *)mergedFromTeamName
                          mergedToTeamName:(NSString *)mergedToTeamName {

  self = [super init];
  if (self) {
    _mergedFromTeamName = mergedFromTeamName;
    _mergedToTeamName = mergedToTeamName;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithMergedFromTeamName:nil mergedToTeamName:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTeamMergeDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTeamMergeDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamMergeDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.mergedFromTeamName) {
    result = prime * result + [self.mergedFromTeamName hash];
  }
  if (self.mergedToTeamName) {
    result = prime * result + [self.mergedToTeamName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamMergeDetails:other];
}

- (BOOL)isEqualToTeamMergeDetails:(DBTEAMLOGTeamMergeDetails *)aTeamMergeDetails {
  if (self == aTeamMergeDetails) {
    return YES;
  }
  if (self.mergedFromTeamName) {
    if (![self.mergedFromTeamName isEqual:aTeamMergeDetails.mergedFromTeamName]) {
      return NO;
    }
  }
  if (self.mergedToTeamName) {
    if (![self.mergedToTeamName isEqual:aTeamMergeDetails.mergedToTeamName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamMergeDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTeamMergeDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.mergedFromTeamName) {
    jsonDict[@"merged_from_team_name"] = valueObj.mergedFromTeamName;
  }
  if (valueObj.mergedToTeamName) {
    jsonDict[@"merged_to_team_name"] = valueObj.mergedToTeamName;
  }

  return jsonDict;
}

+ (DBTEAMLOGTeamMergeDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *mergedFromTeamName = valueDict[@"merged_from_team_name"] ?: nil;
  NSString *mergedToTeamName = valueDict[@"merged_to_team_name"] ?: nil;

  return [[DBTEAMLOGTeamMergeDetails alloc] initWithMergedFromTeamName:mergedFromTeamName
                                                      mergedToTeamName:mergedToTeamName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamProfileAddLogoDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamProfileAddLogoDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTeamProfileAddLogoDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTeamProfileAddLogoDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamProfileAddLogoDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamProfileAddLogoDetails:other];
}

- (BOOL)isEqualToTeamProfileAddLogoDetails:(DBTEAMLOGTeamProfileAddLogoDetails *)aTeamProfileAddLogoDetails {
  if (self == aTeamProfileAddLogoDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamProfileAddLogoDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTeamProfileAddLogoDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGTeamProfileAddLogoDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTeamProfileAddLogoDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamProfileChangeLogoDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamProfileChangeLogoDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTeamProfileChangeLogoDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTeamProfileChangeLogoDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamProfileChangeLogoDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamProfileChangeLogoDetails:other];
}

- (BOOL)isEqualToTeamProfileChangeLogoDetails:(DBTEAMLOGTeamProfileChangeLogoDetails *)aTeamProfileChangeLogoDetails {
  if (self == aTeamProfileChangeLogoDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamProfileChangeLogoDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTeamProfileChangeLogoDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGTeamProfileChangeLogoDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTeamProfileChangeLogoDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamProfileChangeNameDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamProfileChangeNameDetails

#pragma mark - Constructors

- (instancetype)initWithTeamDisplayName:(NSString *)teamDisplayName teamLegalName:(NSString *)teamLegalName {

  self = [super init];
  if (self) {
    _teamDisplayName = teamDisplayName;
    _teamLegalName = teamLegalName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTeamProfileChangeNameDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTeamProfileChangeNameDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamProfileChangeNameDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamDisplayName hash];
  result = prime * result + [self.teamLegalName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamProfileChangeNameDetails:other];
}

- (BOOL)isEqualToTeamProfileChangeNameDetails:(DBTEAMLOGTeamProfileChangeNameDetails *)aTeamProfileChangeNameDetails {
  if (self == aTeamProfileChangeNameDetails) {
    return YES;
  }
  if (![self.teamDisplayName isEqual:aTeamProfileChangeNameDetails.teamDisplayName]) {
    return NO;
  }
  if (![self.teamLegalName isEqual:aTeamProfileChangeNameDetails.teamLegalName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamProfileChangeNameDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTeamProfileChangeNameDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_display_name"] = valueObj.teamDisplayName;
  jsonDict[@"team_legal_name"] = valueObj.teamLegalName;

  return jsonDict;
}

+ (DBTEAMLOGTeamProfileChangeNameDetails *)deserialize:(NSDictionary *)valueDict {
  NSString *teamDisplayName = valueDict[@"team_display_name"];
  NSString *teamLegalName = valueDict[@"team_legal_name"];

  return [[DBTEAMLOGTeamProfileChangeNameDetails alloc] initWithTeamDisplayName:teamDisplayName
                                                                  teamLegalName:teamLegalName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTeamProfileRemoveLogoDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTeamProfileRemoveLogoDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTeamProfileRemoveLogoDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTeamProfileRemoveLogoDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTeamProfileRemoveLogoDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamProfileRemoveLogoDetails:other];
}

- (BOOL)isEqualToTeamProfileRemoveLogoDetails:(DBTEAMLOGTeamProfileRemoveLogoDetails *)aTeamProfileRemoveLogoDetails {
  if (self == aTeamProfileRemoveLogoDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTeamProfileRemoveLogoDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTeamProfileRemoveLogoDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGTeamProfileRemoveLogoDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTeamProfileRemoveLogoDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaAddBackupPhoneDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaAddBackupPhoneDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTfaAddBackupPhoneDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTfaAddBackupPhoneDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaAddBackupPhoneDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaAddBackupPhoneDetails:other];
}

- (BOOL)isEqualToTfaAddBackupPhoneDetails:(DBTEAMLOGTfaAddBackupPhoneDetails *)aTfaAddBackupPhoneDetails {
  if (self == aTfaAddBackupPhoneDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaAddBackupPhoneDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTfaAddBackupPhoneDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGTfaAddBackupPhoneDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTfaAddBackupPhoneDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaAddSecurityKeyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaAddSecurityKeyDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTfaAddSecurityKeyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTfaAddSecurityKeyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaAddSecurityKeyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaAddSecurityKeyDetails:other];
}

- (BOOL)isEqualToTfaAddSecurityKeyDetails:(DBTEAMLOGTfaAddSecurityKeyDetails *)aTfaAddSecurityKeyDetails {
  if (self == aTfaAddSecurityKeyDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaAddSecurityKeyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTfaAddSecurityKeyDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGTfaAddSecurityKeyDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTfaAddSecurityKeyDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaChangeBackupPhoneDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaChangeBackupPhoneDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTfaChangeBackupPhoneDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTfaChangeBackupPhoneDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaChangeBackupPhoneDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaChangeBackupPhoneDetails:other];
}

- (BOOL)isEqualToTfaChangeBackupPhoneDetails:(DBTEAMLOGTfaChangeBackupPhoneDetails *)aTfaChangeBackupPhoneDetails {
  if (self == aTfaChangeBackupPhoneDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaChangeBackupPhoneDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTfaChangeBackupPhoneDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGTfaChangeBackupPhoneDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTfaChangeBackupPhoneDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGOptionalChangePolicy.h"
#import "DBTEAMLOGTfaChangePolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGOptionalChangePolicy *)dNewValue
                    previousValue:(DBTEAMLOGOptionalChangePolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGOptionalChangePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTfaChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTfaChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaChangePolicyDetails:other];
}

- (BOOL)isEqualToTfaChangePolicyDetails:(DBTEAMLOGTfaChangePolicyDetails *)aTfaChangePolicyDetails {
  if (self == aTfaChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aTfaChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aTfaChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTfaChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGOptionalChangePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGOptionalChangePolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGTfaChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGOptionalChangePolicy *dNewValue =
      [DBTEAMLOGOptionalChangePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGOptionalChangePolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGOptionalChangePolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGTfaChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaChangeStatusDetails.h"
#import "DBTEAMLOGTfaConfiguration.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaChangeStatusDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGTfaConfiguration *)dNewValue
                    previousValue:(DBTEAMLOGTfaConfiguration *)previousValue
                   usedRescueCode:(NSNumber *)usedRescueCode {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
    _usedRescueCode = usedRescueCode;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGTfaConfiguration *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil usedRescueCode:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTfaChangeStatusDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTfaChangeStatusDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaChangeStatusDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }
  if (self.usedRescueCode) {
    result = prime * result + [self.usedRescueCode hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaChangeStatusDetails:other];
}

- (BOOL)isEqualToTfaChangeStatusDetails:(DBTEAMLOGTfaChangeStatusDetails *)aTfaChangeStatusDetails {
  if (self == aTfaChangeStatusDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aTfaChangeStatusDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aTfaChangeStatusDetails.previousValue]) {
      return NO;
    }
  }
  if (self.usedRescueCode) {
    if (![self.usedRescueCode isEqual:aTfaChangeStatusDetails.usedRescueCode]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaChangeStatusDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTfaChangeStatusDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGTfaConfigurationSerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGTfaConfigurationSerializer serialize:valueObj.previousValue];
  }
  if (valueObj.usedRescueCode) {
    jsonDict[@"used_rescue_code"] = valueObj.usedRescueCode;
  }

  return jsonDict;
}

+ (DBTEAMLOGTfaChangeStatusDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGTfaConfiguration *dNewValue = [DBTEAMLOGTfaConfigurationSerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGTfaConfiguration *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGTfaConfigurationSerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;
  NSNumber *usedRescueCode = valueDict[@"used_rescue_code"] ?: nil;

  return [[DBTEAMLOGTfaChangeStatusDetails alloc] initWithDNewValue:dNewValue
                                                      previousValue:previousValue
                                                     usedRescueCode:usedRescueCode];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaConfiguration.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaConfiguration

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTfaConfigurationDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTfaConfigurationEnabled;
  }
  return self;
}

- (instancetype)initWithSms {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTfaConfigurationSms;
  }
  return self;
}

- (instancetype)initWithAuthenticator {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTfaConfigurationAuthenticator;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGTfaConfigurationOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGTfaConfigurationDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGTfaConfigurationEnabled;
}

- (BOOL)isSms {
  return _tag == DBTEAMLOGTfaConfigurationSms;
}

- (BOOL)isAuthenticator {
  return _tag == DBTEAMLOGTfaConfigurationAuthenticator;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGTfaConfigurationOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGTfaConfigurationDisabled:
    return @"DBTEAMLOGTfaConfigurationDisabled";
  case DBTEAMLOGTfaConfigurationEnabled:
    return @"DBTEAMLOGTfaConfigurationEnabled";
  case DBTEAMLOGTfaConfigurationSms:
    return @"DBTEAMLOGTfaConfigurationSms";
  case DBTEAMLOGTfaConfigurationAuthenticator:
    return @"DBTEAMLOGTfaConfigurationAuthenticator";
  case DBTEAMLOGTfaConfigurationOther:
    return @"DBTEAMLOGTfaConfigurationOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTfaConfigurationSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTfaConfigurationSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaConfigurationSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGTfaConfigurationDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTfaConfigurationEnabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTfaConfigurationSms:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTfaConfigurationAuthenticator:
    result = prime * result + [[self tagName] hash];
  case DBTEAMLOGTfaConfigurationOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaConfiguration:other];
}

- (BOOL)isEqualToTfaConfiguration:(DBTEAMLOGTfaConfiguration *)aTfaConfiguration {
  if (self == aTfaConfiguration) {
    return YES;
  }
  if (self.tag != aTfaConfiguration.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGTfaConfigurationDisabled:
    return [[self tagName] isEqual:[aTfaConfiguration tagName]];
  case DBTEAMLOGTfaConfigurationEnabled:
    return [[self tagName] isEqual:[aTfaConfiguration tagName]];
  case DBTEAMLOGTfaConfigurationSms:
    return [[self tagName] isEqual:[aTfaConfiguration tagName]];
  case DBTEAMLOGTfaConfigurationAuthenticator:
    return [[self tagName] isEqual:[aTfaConfiguration tagName]];
  case DBTEAMLOGTfaConfigurationOther:
    return [[self tagName] isEqual:[aTfaConfiguration tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaConfigurationSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTfaConfiguration *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isSms]) {
    jsonDict[@".tag"] = @"sms";
  } else if ([valueObj isAuthenticator]) {
    jsonDict[@".tag"] = @"authenticator";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMLOGTfaConfiguration *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGTfaConfiguration alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGTfaConfiguration alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"sms"]) {
    return [[DBTEAMLOGTfaConfiguration alloc] initWithSms];
  } else if ([tag isEqualToString:@"authenticator"]) {
    return [[DBTEAMLOGTfaConfiguration alloc] initWithAuthenticator];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGTfaConfiguration alloc] initWithOther];
  } else {
    return [[DBTEAMLOGTfaConfiguration alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaRemoveBackupPhoneDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaRemoveBackupPhoneDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTfaRemoveBackupPhoneDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTfaRemoveBackupPhoneDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaRemoveBackupPhoneDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaRemoveBackupPhoneDetails:other];
}

- (BOOL)isEqualToTfaRemoveBackupPhoneDetails:(DBTEAMLOGTfaRemoveBackupPhoneDetails *)aTfaRemoveBackupPhoneDetails {
  if (self == aTfaRemoveBackupPhoneDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaRemoveBackupPhoneDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTfaRemoveBackupPhoneDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGTfaRemoveBackupPhoneDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTfaRemoveBackupPhoneDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaRemoveSecurityKeyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaRemoveSecurityKeyDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTfaRemoveSecurityKeyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTfaRemoveSecurityKeyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaRemoveSecurityKeyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaRemoveSecurityKeyDetails:other];
}

- (BOOL)isEqualToTfaRemoveSecurityKeyDetails:(DBTEAMLOGTfaRemoveSecurityKeyDetails *)aTfaRemoveSecurityKeyDetails {
  if (self == aTfaRemoveSecurityKeyDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaRemoveSecurityKeyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTfaRemoveSecurityKeyDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGTfaRemoveSecurityKeyDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTfaRemoveSecurityKeyDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGTfaResetDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTfaResetDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTfaResetDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTfaResetDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTfaResetDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTfaResetDetails:other];
}

- (BOOL)isEqualToTfaResetDetails:(DBTEAMLOGTfaResetDetails *)aTfaResetDetails {
  if (self == aTfaResetDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTfaResetDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTfaResetDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return jsonDict;
}

+ (DBTEAMLOGTfaResetDetails *)deserialize:(NSDictionary *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGTfaResetDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnableDisableChangePolicy.h"
#import "DBTEAMLOGTwoAccountChangePolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGTwoAccountChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue
                    previousValue:(DBTEAMLOGEnableDisableChangePolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGEnableDisableChangePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGTwoAccountChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGTwoAccountChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGTwoAccountChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTwoAccountChangePolicyDetails:other];
}

- (BOOL)isEqualToTwoAccountChangePolicyDetails:
    (DBTEAMLOGTwoAccountChangePolicyDetails *)aTwoAccountChangePolicyDetails {
  if (self == aTwoAccountChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aTwoAccountChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aTwoAccountChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGTwoAccountChangePolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGTwoAccountChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGEnableDisableChangePolicySerializer serialize:valueObj.previousValue];
  }

  return jsonDict;
}

+ (DBTEAMLOGTwoAccountChangePolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGEnableDisableChangePolicy *dNewValue =
      [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGEnableDisableChangePolicy *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGEnableDisableChangePolicySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGTwoAccountChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGUserLinkedAppLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGUserLinkedAppLogInfo

#pragma mark - Constructors

- (instancetype)initWithAppId:(NSString *)appId displayName:(NSString *)displayName {

  self = [super initWithAppId:appId displayName:displayName];
  if (self) {
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithAppId:nil displayName:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGUserLinkedAppLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGUserLinkedAppLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGUserLinkedAppLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.appId) {
    result = prime * result + [self.appId hash];
  }
  if (self.displayName) {
    result = prime * result + [self.displayName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUserLinkedAppLogInfo:other];
}

- (BOOL)isEqualToUserLinkedAppLogInfo:(DBTEAMLOGUserLinkedAppLogInfo *)anUserLinkedAppLogInfo {
  if (self == anUserLinkedAppLogInfo) {
    return YES;
  }
  if (self.appId) {
    if (![self.appId isEqual:anUserLinkedAppLogInfo.appId]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:anUserLinkedAppLogInfo.displayName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGUserLinkedAppLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGUserLinkedAppLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.appId) {
    jsonDict[@"app_id"] = valueObj.appId;
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }

  return jsonDict;
}

+ (DBTEAMLOGUserLinkedAppLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *appId = valueDict[@"app_id"] ?: nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;

  return [[DBTEAMLOGUserLinkedAppLogInfo alloc] initWithAppId:appId displayName:displayName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGUserNameLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGUserNameLogInfo

#pragma mark - Constructors

- (instancetype)initWithGivenName:(NSString *)givenName surname:(NSString *)surname locale:(NSString *)locale {

  self = [super init];
  if (self) {
    _givenName = givenName;
    _surname = surname;
    _locale = locale;
  }
  return self;
}

- (instancetype)initWithGivenName:(NSString *)givenName surname:(NSString *)surname {
  return [self initWithGivenName:givenName surname:surname locale:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGUserNameLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGUserNameLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGUserNameLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.givenName hash];
  result = prime * result + [self.surname hash];
  if (self.locale) {
    result = prime * result + [self.locale hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUserNameLogInfo:other];
}

- (BOOL)isEqualToUserNameLogInfo:(DBTEAMLOGUserNameLogInfo *)anUserNameLogInfo {
  if (self == anUserNameLogInfo) {
    return YES;
  }
  if (![self.givenName isEqual:anUserNameLogInfo.givenName]) {
    return NO;
  }
  if (![self.surname isEqual:anUserNameLogInfo.surname]) {
    return NO;
  }
  if (self.locale) {
    if (![self.locale isEqual:anUserNameLogInfo.locale]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGUserNameLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGUserNameLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"given_name"] = valueObj.givenName;
  jsonDict[@"surname"] = valueObj.surname;
  if (valueObj.locale) {
    jsonDict[@"locale"] = valueObj.locale;
  }

  return jsonDict;
}

+ (DBTEAMLOGUserNameLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *givenName = valueDict[@"given_name"];
  NSString *surname = valueDict[@"surname"];
  NSString *locale = valueDict[@"locale"] ?: nil;

  return [[DBTEAMLOGUserNameLogInfo alloc] initWithGivenName:givenName surname:surname locale:locale];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGUserOrTeamLinkedAppLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGUserOrTeamLinkedAppLogInfo

#pragma mark - Constructors

- (instancetype)initWithAppId:(NSString *)appId displayName:(NSString *)displayName {

  self = [super initWithAppId:appId displayName:displayName];
  if (self) {
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithAppId:nil displayName:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGUserOrTeamLinkedAppLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGUserOrTeamLinkedAppLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGUserOrTeamLinkedAppLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.appId) {
    result = prime * result + [self.appId hash];
  }
  if (self.displayName) {
    result = prime * result + [self.displayName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToUserOrTeamLinkedAppLogInfo:other];
}

- (BOOL)isEqualToUserOrTeamLinkedAppLogInfo:(DBTEAMLOGUserOrTeamLinkedAppLogInfo *)anUserOrTeamLinkedAppLogInfo {
  if (self == anUserOrTeamLinkedAppLogInfo) {
    return YES;
  }
  if (self.appId) {
    if (![self.appId isEqual:anUserOrTeamLinkedAppLogInfo.appId]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:anUserOrTeamLinkedAppLogInfo.displayName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGUserOrTeamLinkedAppLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGUserOrTeamLinkedAppLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.appId) {
    jsonDict[@"app_id"] = valueObj.appId;
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }

  return jsonDict;
}

+ (DBTEAMLOGUserOrTeamLinkedAppLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *appId = valueDict[@"app_id"] ?: nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;

  return [[DBTEAMLOGUserOrTeamLinkedAppLogInfo alloc] initWithAppId:appId displayName:displayName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSessionLogInfo.h"
#import "DBTEAMLOGWebSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGWebSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithSessionId:(NSString *)sessionId {

  self = [super initWithSessionId:sessionId];
  if (self) {
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSessionId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGWebSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGWebSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGWebSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sessionId) {
    result = prime * result + [self.sessionId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToWebSessionLogInfo:other];
}

- (BOOL)isEqualToWebSessionLogInfo:(DBTEAMLOGWebSessionLogInfo *)aWebSessionLogInfo {
  if (self == aWebSessionLogInfo) {
    return YES;
  }
  if (self.sessionId) {
    if (![self.sessionId isEqual:aWebSessionLogInfo.sessionId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGWebSessionLogInfoSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGWebSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sessionId) {
    jsonDict[@"session_id"] = valueObj.sessionId;
  }

  return jsonDict;
}

+ (DBTEAMLOGWebSessionLogInfo *)deserialize:(NSDictionary *)valueDict {
  NSString *sessionId = valueDict[@"session_id"] ?: nil;

  return [[DBTEAMLOGWebSessionLogInfo alloc] initWithSessionId:sessionId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSessionsManagementSessionLengthPolicy.h"
#import "DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGSessionsManagementSessionLengthPolicy *)dNewValue
                    previousValue:(DBTEAMLOGSessionsManagementSessionLengthPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToWebSessionsChangeFixedLengthPolicyDetails:other];
}

- (BOOL)isEqualToWebSessionsChangeFixedLengthPolicyDetails:
    (DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails *)aWebSessionsChangeFixedLengthPolicyDetails {
  if (self == aWebSessionsChangeFixedLengthPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aWebSessionsChangeFixedLengthPolicyDetails.dNewValue]) {
    return NO;
  }
  if (![self.previousValue isEqual:aWebSessionsChangeFixedLengthPolicyDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGSessionsManagementSessionLengthPolicySerializer serialize:valueObj.dNewValue];
  jsonDict[@"previous_value"] =
      [DBTEAMLOGSessionsManagementSessionLengthPolicySerializer serialize:valueObj.previousValue];

  return jsonDict;
}

+ (DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGSessionsManagementSessionLengthPolicy *dNewValue =
      [DBTEAMLOGSessionsManagementSessionLengthPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGSessionsManagementSessionLengthPolicy *previousValue =
      [DBTEAMLOGSessionsManagementSessionLengthPolicySerializer deserialize:valueDict[@"previous_value"]];

  return [[DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails alloc] initWithDNewValue:dNewValue
                                                                         previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGSessionsManagementIdleLengthPolicy.h"
#import "DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGSessionsManagementIdleLengthPolicy *)dNewValue
                    previousValue:(DBTEAMLOGSessionsManagementIdleLengthPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToWebSessionsChangeIdleLengthPolicyDetails:other];
}

- (BOOL)isEqualToWebSessionsChangeIdleLengthPolicyDetails:
    (DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails *)aWebSessionsChangeIdleLengthPolicyDetails {
  if (self == aWebSessionsChangeIdleLengthPolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aWebSessionsChangeIdleLengthPolicyDetails.dNewValue]) {
    return NO;
  }
  if (![self.previousValue isEqual:aWebSessionsChangeIdleLengthPolicyDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsSerializer

+ (NSDictionary *)serialize:(DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGSessionsManagementIdleLengthPolicySerializer serialize:valueObj.dNewValue];
  jsonDict[@"previous_value"] =
      [DBTEAMLOGSessionsManagementIdleLengthPolicySerializer serialize:valueObj.previousValue];

  return jsonDict;
}

+ (DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails *)deserialize:(NSDictionary *)valueDict {
  DBTEAMLOGSessionsManagementIdleLengthPolicy *dNewValue =
      [DBTEAMLOGSessionsManagementIdleLengthPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGSessionsManagementIdleLengthPolicy *previousValue =
      [DBTEAMLOGSessionsManagementIdleLengthPolicySerializer deserialize:valueDict[@"previous_value"]];

  return [[DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails alloc] initWithDNewValue:dNewValue
                                                                        previousValue:previousValue];
}

@end
