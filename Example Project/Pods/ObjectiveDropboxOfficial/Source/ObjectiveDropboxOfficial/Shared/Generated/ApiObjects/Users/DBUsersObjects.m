///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

/// Arguments, results, and errors for the `Users` namespace.

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSAccount.h"
#import "DBUSERSName.h"

#pragma mark - API Object

@implementation DBUSERSAccount

#pragma mark - Constructors

- (instancetype)initWithAccountId:(NSString *)accountId
                             name:(DBUSERSName *)name
                            email:(NSString *)email
                    emailVerified:(NSNumber *)emailVerified
                         disabled:(NSNumber *)disabled
                  profilePhotoUrl:(NSString *)profilePhotoUrl {
  [DBStoneValidators stringValidator:@(40) maxLength:@(40) pattern:nil](accountId);

  self = [super init];
  if (self) {
    _accountId = accountId;
    _name = name;
    _email = email;
    _emailVerified = emailVerified;
    _profilePhotoUrl = profilePhotoUrl;
    _disabled = disabled;
  }
  return self;
}

- (instancetype)initWithAccountId:(NSString *)accountId
                             name:(DBUSERSName *)name
                            email:(NSString *)email
                    emailVerified:(NSNumber *)emailVerified
                         disabled:(NSNumber *)disabled {
  return [self initWithAccountId:accountId
                            name:name
                           email:email
                   emailVerified:emailVerified
                        disabled:disabled
                 profilePhotoUrl:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBUSERSAccountSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBUSERSAccountSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBUSERSAccountSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.accountId hash];
  result = prime * result + [self.name hash];
  result = prime * result + [self.email hash];
  result = prime * result + [self.emailVerified hash];
  result = prime * result + [self.disabled hash];
  if (self.profilePhotoUrl) {
    result = prime * result + [self.profilePhotoUrl hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccount:other];
}

- (BOOL)isEqualToAccount:(DBUSERSAccount *)anAccount {
  if (self == anAccount) {
    return YES;
  }
  if (![self.accountId isEqual:anAccount.accountId]) {
    return NO;
  }
  if (![self.name isEqual:anAccount.name]) {
    return NO;
  }
  if (![self.email isEqual:anAccount.email]) {
    return NO;
  }
  if (![self.emailVerified isEqual:anAccount.emailVerified]) {
    return NO;
  }
  if (![self.disabled isEqual:anAccount.disabled]) {
    return NO;
  }
  if (self.profilePhotoUrl) {
    if (![self.profilePhotoUrl isEqual:anAccount.profilePhotoUrl]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBUSERSAccountSerializer

+ (NSDictionary *)serialize:(DBUSERSAccount *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"account_id"] = valueObj.accountId;
  jsonDict[@"name"] = [DBUSERSNameSerializer serialize:valueObj.name];
  jsonDict[@"email"] = valueObj.email;
  jsonDict[@"email_verified"] = valueObj.emailVerified;
  jsonDict[@"disabled"] = valueObj.disabled;
  if (valueObj.profilePhotoUrl) {
    jsonDict[@"profile_photo_url"] = valueObj.profilePhotoUrl;
  }

  return jsonDict;
}

+ (DBUSERSAccount *)deserialize:(NSDictionary *)valueDict {
  NSString *accountId = valueDict[@"account_id"];
  DBUSERSName *name = [DBUSERSNameSerializer deserialize:valueDict[@"name"]];
  NSString *email = valueDict[@"email"];
  NSNumber *emailVerified = valueDict[@"email_verified"];
  NSNumber *disabled = valueDict[@"disabled"];
  NSString *profilePhotoUrl = valueDict[@"profile_photo_url"] ?: nil;

  return [[DBUSERSAccount alloc] initWithAccountId:accountId
                                              name:name
                                             email:email
                                     emailVerified:emailVerified
                                          disabled:disabled
                                   profilePhotoUrl:profilePhotoUrl];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSAccount.h"
#import "DBUSERSBasicAccount.h"
#import "DBUSERSName.h"

#pragma mark - API Object

@implementation DBUSERSBasicAccount

#pragma mark - Constructors

- (instancetype)initWithAccountId:(NSString *)accountId
                             name:(DBUSERSName *)name
                            email:(NSString *)email
                    emailVerified:(NSNumber *)emailVerified
                         disabled:(NSNumber *)disabled
                       isTeammate:(NSNumber *)isTeammate
                  profilePhotoUrl:(NSString *)profilePhotoUrl
                     teamMemberId:(NSString *)teamMemberId {
  [DBStoneValidators stringValidator:@(40) maxLength:@(40) pattern:nil](accountId);

  self = [super initWithAccountId:accountId
                             name:name
                            email:email
                    emailVerified:emailVerified
                         disabled:disabled
                  profilePhotoUrl:profilePhotoUrl];
  if (self) {
    _isTeammate = isTeammate;
    _teamMemberId = teamMemberId;
  }
  return self;
}

- (instancetype)initWithAccountId:(NSString *)accountId
                             name:(DBUSERSName *)name
                            email:(NSString *)email
                    emailVerified:(NSNumber *)emailVerified
                         disabled:(NSNumber *)disabled
                       isTeammate:(NSNumber *)isTeammate {
  return [self initWithAccountId:accountId
                            name:name
                           email:email
                   emailVerified:emailVerified
                        disabled:disabled
                      isTeammate:isTeammate
                 profilePhotoUrl:nil
                    teamMemberId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBUSERSBasicAccountSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBUSERSBasicAccountSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBUSERSBasicAccountSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.accountId hash];
  result = prime * result + [self.name hash];
  result = prime * result + [self.email hash];
  result = prime * result + [self.emailVerified hash];
  result = prime * result + [self.disabled hash];
  result = prime * result + [self.isTeammate hash];
  if (self.profilePhotoUrl) {
    result = prime * result + [self.profilePhotoUrl hash];
  }
  if (self.teamMemberId) {
    result = prime * result + [self.teamMemberId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBasicAccount:other];
}

- (BOOL)isEqualToBasicAccount:(DBUSERSBasicAccount *)aBasicAccount {
  if (self == aBasicAccount) {
    return YES;
  }
  if (![self.accountId isEqual:aBasicAccount.accountId]) {
    return NO;
  }
  if (![self.name isEqual:aBasicAccount.name]) {
    return NO;
  }
  if (![self.email isEqual:aBasicAccount.email]) {
    return NO;
  }
  if (![self.emailVerified isEqual:aBasicAccount.emailVerified]) {
    return NO;
  }
  if (![self.disabled isEqual:aBasicAccount.disabled]) {
    return NO;
  }
  if (![self.isTeammate isEqual:aBasicAccount.isTeammate]) {
    return NO;
  }
  if (self.profilePhotoUrl) {
    if (![self.profilePhotoUrl isEqual:aBasicAccount.profilePhotoUrl]) {
      return NO;
    }
  }
  if (self.teamMemberId) {
    if (![self.teamMemberId isEqual:aBasicAccount.teamMemberId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBUSERSBasicAccountSerializer

+ (NSDictionary *)serialize:(DBUSERSBasicAccount *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"account_id"] = valueObj.accountId;
  jsonDict[@"name"] = [DBUSERSNameSerializer serialize:valueObj.name];
  jsonDict[@"email"] = valueObj.email;
  jsonDict[@"email_verified"] = valueObj.emailVerified;
  jsonDict[@"disabled"] = valueObj.disabled;
  jsonDict[@"is_teammate"] = valueObj.isTeammate;
  if (valueObj.profilePhotoUrl) {
    jsonDict[@"profile_photo_url"] = valueObj.profilePhotoUrl;
  }
  if (valueObj.teamMemberId) {
    jsonDict[@"team_member_id"] = valueObj.teamMemberId;
  }

  return jsonDict;
}

+ (DBUSERSBasicAccount *)deserialize:(NSDictionary *)valueDict {
  NSString *accountId = valueDict[@"account_id"];
  DBUSERSName *name = [DBUSERSNameSerializer deserialize:valueDict[@"name"]];
  NSString *email = valueDict[@"email"];
  NSNumber *emailVerified = valueDict[@"email_verified"];
  NSNumber *disabled = valueDict[@"disabled"];
  NSNumber *isTeammate = valueDict[@"is_teammate"];
  NSString *profilePhotoUrl = valueDict[@"profile_photo_url"] ?: nil;
  NSString *teamMemberId = valueDict[@"team_member_id"] ?: nil;

  return [[DBUSERSBasicAccount alloc] initWithAccountId:accountId
                                                   name:name
                                                  email:email
                                          emailVerified:emailVerified
                                               disabled:disabled
                                             isTeammate:isTeammate
                                        profilePhotoUrl:profilePhotoUrl
                                           teamMemberId:teamMemberId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSAccount.h"
#import "DBUSERSCOMMONAccountType.h"
#import "DBUSERSFullAccount.h"
#import "DBUSERSFullTeam.h"
#import "DBUSERSName.h"

#pragma mark - API Object

@implementation DBUSERSFullAccount

#pragma mark - Constructors

- (instancetype)initWithAccountId:(NSString *)accountId
                             name:(DBUSERSName *)name
                            email:(NSString *)email
                    emailVerified:(NSNumber *)emailVerified
                         disabled:(NSNumber *)disabled
                           locale:(NSString *)locale
                     referralLink:(NSString *)referralLink
                         isPaired:(NSNumber *)isPaired
                      accountType:(DBUSERSCOMMONAccountType *)accountType
                  profilePhotoUrl:(NSString *)profilePhotoUrl
                          country:(NSString *)country
                             team:(DBUSERSFullTeam *)team
                     teamMemberId:(NSString *)teamMemberId {
  [DBStoneValidators stringValidator:@(40) maxLength:@(40) pattern:nil](accountId);
  [DBStoneValidators stringValidator:@(2) maxLength:nil pattern:nil](locale);
  [DBStoneValidators nullableValidator:[DBStoneValidators stringValidator:@(2) maxLength:@(2) pattern:nil]](country);

  self = [super initWithAccountId:accountId
                             name:name
                            email:email
                    emailVerified:emailVerified
                         disabled:disabled
                  profilePhotoUrl:profilePhotoUrl];
  if (self) {
    _country = country;
    _locale = locale;
    _referralLink = referralLink;
    _team = team;
    _teamMemberId = teamMemberId;
    _isPaired = isPaired;
    _accountType = accountType;
  }
  return self;
}

- (instancetype)initWithAccountId:(NSString *)accountId
                             name:(DBUSERSName *)name
                            email:(NSString *)email
                    emailVerified:(NSNumber *)emailVerified
                         disabled:(NSNumber *)disabled
                           locale:(NSString *)locale
                     referralLink:(NSString *)referralLink
                         isPaired:(NSNumber *)isPaired
                      accountType:(DBUSERSCOMMONAccountType *)accountType {
  return [self initWithAccountId:accountId
                            name:name
                           email:email
                   emailVerified:emailVerified
                        disabled:disabled
                          locale:locale
                    referralLink:referralLink
                        isPaired:isPaired
                     accountType:accountType
                 profilePhotoUrl:nil
                         country:nil
                            team:nil
                    teamMemberId:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBUSERSFullAccountSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBUSERSFullAccountSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBUSERSFullAccountSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.accountId hash];
  result = prime * result + [self.name hash];
  result = prime * result + [self.email hash];
  result = prime * result + [self.emailVerified hash];
  result = prime * result + [self.disabled hash];
  result = prime * result + [self.locale hash];
  result = prime * result + [self.referralLink hash];
  result = prime * result + [self.isPaired hash];
  result = prime * result + [self.accountType hash];
  if (self.profilePhotoUrl) {
    result = prime * result + [self.profilePhotoUrl hash];
  }
  if (self.country) {
    result = prime * result + [self.country hash];
  }
  if (self.team) {
    result = prime * result + [self.team hash];
  }
  if (self.teamMemberId) {
    result = prime * result + [self.teamMemberId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFullAccount:other];
}

- (BOOL)isEqualToFullAccount:(DBUSERSFullAccount *)aFullAccount {
  if (self == aFullAccount) {
    return YES;
  }
  if (![self.accountId isEqual:aFullAccount.accountId]) {
    return NO;
  }
  if (![self.name isEqual:aFullAccount.name]) {
    return NO;
  }
  if (![self.email isEqual:aFullAccount.email]) {
    return NO;
  }
  if (![self.emailVerified isEqual:aFullAccount.emailVerified]) {
    return NO;
  }
  if (![self.disabled isEqual:aFullAccount.disabled]) {
    return NO;
  }
  if (![self.locale isEqual:aFullAccount.locale]) {
    return NO;
  }
  if (![self.referralLink isEqual:aFullAccount.referralLink]) {
    return NO;
  }
  if (![self.isPaired isEqual:aFullAccount.isPaired]) {
    return NO;
  }
  if (![self.accountType isEqual:aFullAccount.accountType]) {
    return NO;
  }
  if (self.profilePhotoUrl) {
    if (![self.profilePhotoUrl isEqual:aFullAccount.profilePhotoUrl]) {
      return NO;
    }
  }
  if (self.country) {
    if (![self.country isEqual:aFullAccount.country]) {
      return NO;
    }
  }
  if (self.team) {
    if (![self.team isEqual:aFullAccount.team]) {
      return NO;
    }
  }
  if (self.teamMemberId) {
    if (![self.teamMemberId isEqual:aFullAccount.teamMemberId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBUSERSFullAccountSerializer

+ (NSDictionary *)serialize:(DBUSERSFullAccount *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"account_id"] = valueObj.accountId;
  jsonDict[@"name"] = [DBUSERSNameSerializer serialize:valueObj.name];
  jsonDict[@"email"] = valueObj.email;
  jsonDict[@"email_verified"] = valueObj.emailVerified;
  jsonDict[@"disabled"] = valueObj.disabled;
  jsonDict[@"locale"] = valueObj.locale;
  jsonDict[@"referral_link"] = valueObj.referralLink;
  jsonDict[@"is_paired"] = valueObj.isPaired;
  jsonDict[@"account_type"] = [DBUSERSCOMMONAccountTypeSerializer serialize:valueObj.accountType];
  if (valueObj.profilePhotoUrl) {
    jsonDict[@"profile_photo_url"] = valueObj.profilePhotoUrl;
  }
  if (valueObj.country) {
    jsonDict[@"country"] = valueObj.country;
  }
  if (valueObj.team) {
    jsonDict[@"team"] = [DBUSERSFullTeamSerializer serialize:valueObj.team];
  }
  if (valueObj.teamMemberId) {
    jsonDict[@"team_member_id"] = valueObj.teamMemberId;
  }

  return jsonDict;
}

+ (DBUSERSFullAccount *)deserialize:(NSDictionary *)valueDict {
  NSString *accountId = valueDict[@"account_id"];
  DBUSERSName *name = [DBUSERSNameSerializer deserialize:valueDict[@"name"]];
  NSString *email = valueDict[@"email"];
  NSNumber *emailVerified = valueDict[@"email_verified"];
  NSNumber *disabled = valueDict[@"disabled"];
  NSString *locale = valueDict[@"locale"];
  NSString *referralLink = valueDict[@"referral_link"];
  NSNumber *isPaired = valueDict[@"is_paired"];
  DBUSERSCOMMONAccountType *accountType = [DBUSERSCOMMONAccountTypeSerializer deserialize:valueDict[@"account_type"]];
  NSString *profilePhotoUrl = valueDict[@"profile_photo_url"] ?: nil;
  NSString *country = valueDict[@"country"] ?: nil;
  DBUSERSFullTeam *team = valueDict[@"team"] ? [DBUSERSFullTeamSerializer deserialize:valueDict[@"team"]] : nil;
  NSString *teamMemberId = valueDict[@"team_member_id"] ?: nil;

  return [[DBUSERSFullAccount alloc] initWithAccountId:accountId
                                                  name:name
                                                 email:email
                                         emailVerified:emailVerified
                                              disabled:disabled
                                                locale:locale
                                          referralLink:referralLink
                                              isPaired:isPaired
                                           accountType:accountType
                                       profilePhotoUrl:profilePhotoUrl
                                               country:country
                                                  team:team
                                          teamMemberId:teamMemberId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSTeam.h"

#pragma mark - API Object

@implementation DBUSERSTeam

#pragma mark - Constructors

- (instancetype)initWithId_:(NSString *)id_ name:(NSString *)name {

  self = [super init];
  if (self) {
    _id_ = id_;
    _name = name;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBUSERSTeamSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBUSERSTeamSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBUSERSTeamSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.id_ hash];
  result = prime * result + [self.name hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeam:other];
}

- (BOOL)isEqualToTeam:(DBUSERSTeam *)aTeam {
  if (self == aTeam) {
    return YES;
  }
  if (![self.id_ isEqual:aTeam.id_]) {
    return NO;
  }
  if (![self.name isEqual:aTeam.name]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBUSERSTeamSerializer

+ (NSDictionary *)serialize:(DBUSERSTeam *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"id"] = valueObj.id_;
  jsonDict[@"name"] = valueObj.name;

  return jsonDict;
}

+ (DBUSERSTeam *)deserialize:(NSDictionary *)valueDict {
  NSString *id_ = valueDict[@"id"];
  NSString *name = valueDict[@"name"];

  return [[DBUSERSTeam alloc] initWithId_:id_ name:name];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMPOLICIESTeamSharingPolicies.h"
#import "DBUSERSFullTeam.h"
#import "DBUSERSTeam.h"

#pragma mark - API Object

@implementation DBUSERSFullTeam

#pragma mark - Constructors

- (instancetype)initWithId_:(NSString *)id_
                       name:(NSString *)name
            sharingPolicies:(DBTEAMPOLICIESTeamSharingPolicies *)sharingPolicies {

  self = [super initWithId_:id_ name:name];
  if (self) {
    _sharingPolicies = sharingPolicies;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBUSERSFullTeamSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBUSERSFullTeamSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBUSERSFullTeamSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.id_ hash];
  result = prime * result + [self.name hash];
  result = prime * result + [self.sharingPolicies hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToFullTeam:other];
}

- (BOOL)isEqualToFullTeam:(DBUSERSFullTeam *)aFullTeam {
  if (self == aFullTeam) {
    return YES;
  }
  if (![self.id_ isEqual:aFullTeam.id_]) {
    return NO;
  }
  if (![self.name isEqual:aFullTeam.name]) {
    return NO;
  }
  if (![self.sharingPolicies isEqual:aFullTeam.sharingPolicies]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBUSERSFullTeamSerializer

+ (NSDictionary *)serialize:(DBUSERSFullTeam *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"id"] = valueObj.id_;
  jsonDict[@"name"] = valueObj.name;
  jsonDict[@"sharing_policies"] = [DBTEAMPOLICIESTeamSharingPoliciesSerializer serialize:valueObj.sharingPolicies];

  return jsonDict;
}

+ (DBUSERSFullTeam *)deserialize:(NSDictionary *)valueDict {
  NSString *id_ = valueDict[@"id"];
  NSString *name = valueDict[@"name"];
  DBTEAMPOLICIESTeamSharingPolicies *sharingPolicies =
      [DBTEAMPOLICIESTeamSharingPoliciesSerializer deserialize:valueDict[@"sharing_policies"]];

  return [[DBUSERSFullTeam alloc] initWithId_:id_ name:name sharingPolicies:sharingPolicies];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSGetAccountArg.h"

#pragma mark - API Object

@implementation DBUSERSGetAccountArg

#pragma mark - Constructors

- (instancetype)initWithAccountId:(NSString *)accountId {
  [DBStoneValidators stringValidator:@(40) maxLength:@(40) pattern:nil](accountId);

  self = [super init];
  if (self) {
    _accountId = accountId;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBUSERSGetAccountArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBUSERSGetAccountArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBUSERSGetAccountArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.accountId hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetAccountArg:other];
}

- (BOOL)isEqualToGetAccountArg:(DBUSERSGetAccountArg *)aGetAccountArg {
  if (self == aGetAccountArg) {
    return YES;
  }
  if (![self.accountId isEqual:aGetAccountArg.accountId]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBUSERSGetAccountArgSerializer

+ (NSDictionary *)serialize:(DBUSERSGetAccountArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"account_id"] = valueObj.accountId;

  return jsonDict;
}

+ (DBUSERSGetAccountArg *)deserialize:(NSDictionary *)valueDict {
  NSString *accountId = valueDict[@"account_id"];

  return [[DBUSERSGetAccountArg alloc] initWithAccountId:accountId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSGetAccountBatchArg.h"

#pragma mark - API Object

@implementation DBUSERSGetAccountBatchArg

#pragma mark - Constructors

- (instancetype)initWithAccountIds:(NSArray<NSString *> *)accountIds {
  [DBStoneValidators arrayValidator:@(1) maxItems:nil
                      itemValidator:[DBStoneValidators stringValidator:@(40) maxLength:@(40) pattern:nil]](accountIds);

  self = [super init];
  if (self) {
    _accountIds = accountIds;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBUSERSGetAccountBatchArgSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBUSERSGetAccountBatchArgSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBUSERSGetAccountBatchArgSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.accountIds hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetAccountBatchArg:other];
}

- (BOOL)isEqualToGetAccountBatchArg:(DBUSERSGetAccountBatchArg *)aGetAccountBatchArg {
  if (self == aGetAccountBatchArg) {
    return YES;
  }
  if (![self.accountIds isEqual:aGetAccountBatchArg.accountIds]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBUSERSGetAccountBatchArgSerializer

+ (NSDictionary *)serialize:(DBUSERSGetAccountBatchArg *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"account_ids"] = [DBArraySerializer serialize:valueObj.accountIds
                                                withBlock:^id(id elem0) {
                                                  return elem0;
                                                }];

  return jsonDict;
}

+ (DBUSERSGetAccountBatchArg *)deserialize:(NSDictionary *)valueDict {
  NSArray<NSString *> *accountIds = [DBArraySerializer deserialize:valueDict[@"account_ids"]
                                                         withBlock:^id(id elem0) {
                                                           return elem0;
                                                         }];

  return [[DBUSERSGetAccountBatchArg alloc] initWithAccountIds:accountIds];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSGetAccountBatchError.h"

#pragma mark - API Object

@implementation DBUSERSGetAccountBatchError

@synthesize noAccount = _noAccount;

#pragma mark - Constructors

- (instancetype)initWithNoAccount:(NSString *)noAccount {
  self = [super init];
  if (self) {
    _tag = DBUSERSGetAccountBatchErrorNoAccount;
    _noAccount = noAccount;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBUSERSGetAccountBatchErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)noAccount {
  if (![self isNoAccount]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBUSERSGetAccountBatchErrorNoAccount, but was %@.", [self tagName]];
  }
  return _noAccount;
}

#pragma mark - Tag state methods

- (BOOL)isNoAccount {
  return _tag == DBUSERSGetAccountBatchErrorNoAccount;
}

- (BOOL)isOther {
  return _tag == DBUSERSGetAccountBatchErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBUSERSGetAccountBatchErrorNoAccount:
    return @"DBUSERSGetAccountBatchErrorNoAccount";
  case DBUSERSGetAccountBatchErrorOther:
    return @"DBUSERSGetAccountBatchErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBUSERSGetAccountBatchErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBUSERSGetAccountBatchErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBUSERSGetAccountBatchErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBUSERSGetAccountBatchErrorNoAccount:
    result = prime * result + [self.noAccount hash];
  case DBUSERSGetAccountBatchErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetAccountBatchError:other];
}

- (BOOL)isEqualToGetAccountBatchError:(DBUSERSGetAccountBatchError *)aGetAccountBatchError {
  if (self == aGetAccountBatchError) {
    return YES;
  }
  if (self.tag != aGetAccountBatchError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBUSERSGetAccountBatchErrorNoAccount:
    return [self.noAccount isEqual:aGetAccountBatchError.noAccount];
  case DBUSERSGetAccountBatchErrorOther:
    return [[self tagName] isEqual:[aGetAccountBatchError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBUSERSGetAccountBatchErrorSerializer

+ (NSDictionary *)serialize:(DBUSERSGetAccountBatchError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isNoAccount]) {
    jsonDict[@"no_account"] = valueObj.noAccount;
    jsonDict[@".tag"] = @"no_account";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBUSERSGetAccountBatchError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"no_account"]) {
    NSString *noAccount = valueDict[@"no_account"];
    return [[DBUSERSGetAccountBatchError alloc] initWithNoAccount:noAccount];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBUSERSGetAccountBatchError alloc] initWithOther];
  } else {
    return [[DBUSERSGetAccountBatchError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSGetAccountError.h"

#pragma mark - API Object

@implementation DBUSERSGetAccountError

#pragma mark - Constructors

- (instancetype)initWithNoAccount {
  self = [super init];
  if (self) {
    _tag = DBUSERSGetAccountErrorNoAccount;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBUSERSGetAccountErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isNoAccount {
  return _tag == DBUSERSGetAccountErrorNoAccount;
}

- (BOOL)isOther {
  return _tag == DBUSERSGetAccountErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBUSERSGetAccountErrorNoAccount:
    return @"DBUSERSGetAccountErrorNoAccount";
  case DBUSERSGetAccountErrorOther:
    return @"DBUSERSGetAccountErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBUSERSGetAccountErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBUSERSGetAccountErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBUSERSGetAccountErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBUSERSGetAccountErrorNoAccount:
    result = prime * result + [[self tagName] hash];
  case DBUSERSGetAccountErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToGetAccountError:other];
}

- (BOOL)isEqualToGetAccountError:(DBUSERSGetAccountError *)aGetAccountError {
  if (self == aGetAccountError) {
    return YES;
  }
  if (self.tag != aGetAccountError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBUSERSGetAccountErrorNoAccount:
    return [[self tagName] isEqual:[aGetAccountError tagName]];
  case DBUSERSGetAccountErrorOther:
    return [[self tagName] isEqual:[aGetAccountError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBUSERSGetAccountErrorSerializer

+ (NSDictionary *)serialize:(DBUSERSGetAccountError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isNoAccount]) {
    jsonDict[@".tag"] = @"no_account";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBUSERSGetAccountError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"no_account"]) {
    return [[DBUSERSGetAccountError alloc] initWithNoAccount];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBUSERSGetAccountError alloc] initWithOther];
  } else {
    return [[DBUSERSGetAccountError alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSIndividualSpaceAllocation.h"

#pragma mark - API Object

@implementation DBUSERSIndividualSpaceAllocation

#pragma mark - Constructors

- (instancetype)initWithAllocated:(NSNumber *)allocated {

  self = [super init];
  if (self) {
    _allocated = allocated;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBUSERSIndividualSpaceAllocationSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBUSERSIndividualSpaceAllocationSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBUSERSIndividualSpaceAllocationSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.allocated hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToIndividualSpaceAllocation:other];
}

- (BOOL)isEqualToIndividualSpaceAllocation:(DBUSERSIndividualSpaceAllocation *)anIndividualSpaceAllocation {
  if (self == anIndividualSpaceAllocation) {
    return YES;
  }
  if (![self.allocated isEqual:anIndividualSpaceAllocation.allocated]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBUSERSIndividualSpaceAllocationSerializer

+ (NSDictionary *)serialize:(DBUSERSIndividualSpaceAllocation *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"allocated"] = valueObj.allocated;

  return jsonDict;
}

+ (DBUSERSIndividualSpaceAllocation *)deserialize:(NSDictionary *)valueDict {
  NSNumber *allocated = valueDict[@"allocated"];

  return [[DBUSERSIndividualSpaceAllocation alloc] initWithAllocated:allocated];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSName.h"

#pragma mark - API Object

@implementation DBUSERSName

#pragma mark - Constructors

- (instancetype)initWithGivenName:(NSString *)givenName
                          surname:(NSString *)surname
                     familiarName:(NSString *)familiarName
                      displayName:(NSString *)displayName
                  abbreviatedName:(NSString *)abbreviatedName {

  self = [super init];
  if (self) {
    _givenName = givenName;
    _surname = surname;
    _familiarName = familiarName;
    _displayName = displayName;
    _abbreviatedName = abbreviatedName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBUSERSNameSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBUSERSNameSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBUSERSNameSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.givenName hash];
  result = prime * result + [self.surname hash];
  result = prime * result + [self.familiarName hash];
  result = prime * result + [self.displayName hash];
  result = prime * result + [self.abbreviatedName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToName:other];
}

- (BOOL)isEqualToName:(DBUSERSName *)aName {
  if (self == aName) {
    return YES;
  }
  if (![self.givenName isEqual:aName.givenName]) {
    return NO;
  }
  if (![self.surname isEqual:aName.surname]) {
    return NO;
  }
  if (![self.familiarName isEqual:aName.familiarName]) {
    return NO;
  }
  if (![self.displayName isEqual:aName.displayName]) {
    return NO;
  }
  if (![self.abbreviatedName isEqual:aName.abbreviatedName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBUSERSNameSerializer

+ (NSDictionary *)serialize:(DBUSERSName *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"given_name"] = valueObj.givenName;
  jsonDict[@"surname"] = valueObj.surname;
  jsonDict[@"familiar_name"] = valueObj.familiarName;
  jsonDict[@"display_name"] = valueObj.displayName;
  jsonDict[@"abbreviated_name"] = valueObj.abbreviatedName;

  return jsonDict;
}

+ (DBUSERSName *)deserialize:(NSDictionary *)valueDict {
  NSString *givenName = valueDict[@"given_name"];
  NSString *surname = valueDict[@"surname"];
  NSString *familiarName = valueDict[@"familiar_name"];
  NSString *displayName = valueDict[@"display_name"];
  NSString *abbreviatedName = valueDict[@"abbreviated_name"];

  return [[DBUSERSName alloc] initWithGivenName:givenName
                                        surname:surname
                                   familiarName:familiarName
                                    displayName:displayName
                                abbreviatedName:abbreviatedName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSIndividualSpaceAllocation.h"
#import "DBUSERSSpaceAllocation.h"
#import "DBUSERSTeamSpaceAllocation.h"

#pragma mark - API Object

@implementation DBUSERSSpaceAllocation

@synthesize individual = _individual;
@synthesize team = _team;

#pragma mark - Constructors

- (instancetype)initWithIndividual:(DBUSERSIndividualSpaceAllocation *)individual {
  self = [super init];
  if (self) {
    _tag = DBUSERSSpaceAllocationIndividual;
    _individual = individual;
  }
  return self;
}

- (instancetype)initWithTeam:(DBUSERSTeamSpaceAllocation *)team {
  self = [super init];
  if (self) {
    _tag = DBUSERSSpaceAllocationTeam;
    _team = team;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBUSERSSpaceAllocationOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBUSERSIndividualSpaceAllocation *)individual {
  if (![self isIndividual]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBUSERSSpaceAllocationIndividual, but was %@.", [self tagName]];
  }
  return _individual;
}

- (DBUSERSTeamSpaceAllocation *)team {
  if (![self isTeam]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBUSERSSpaceAllocationTeam, but was %@.", [self tagName]];
  }
  return _team;
}

#pragma mark - Tag state methods

- (BOOL)isIndividual {
  return _tag == DBUSERSSpaceAllocationIndividual;
}

- (BOOL)isTeam {
  return _tag == DBUSERSSpaceAllocationTeam;
}

- (BOOL)isOther {
  return _tag == DBUSERSSpaceAllocationOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBUSERSSpaceAllocationIndividual:
    return @"DBUSERSSpaceAllocationIndividual";
  case DBUSERSSpaceAllocationTeam:
    return @"DBUSERSSpaceAllocationTeam";
  case DBUSERSSpaceAllocationOther:
    return @"DBUSERSSpaceAllocationOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBUSERSSpaceAllocationSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBUSERSSpaceAllocationSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBUSERSSpaceAllocationSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBUSERSSpaceAllocationIndividual:
    result = prime * result + [self.individual hash];
  case DBUSERSSpaceAllocationTeam:
    result = prime * result + [self.team hash];
  case DBUSERSSpaceAllocationOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSpaceAllocation:other];
}

- (BOOL)isEqualToSpaceAllocation:(DBUSERSSpaceAllocation *)aSpaceAllocation {
  if (self == aSpaceAllocation) {
    return YES;
  }
  if (self.tag != aSpaceAllocation.tag) {
    return NO;
  }
  switch (_tag) {
  case DBUSERSSpaceAllocationIndividual:
    return [self.individual isEqual:aSpaceAllocation.individual];
  case DBUSERSSpaceAllocationTeam:
    return [self.team isEqual:aSpaceAllocation.team];
  case DBUSERSSpaceAllocationOther:
    return [[self tagName] isEqual:[aSpaceAllocation tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBUSERSSpaceAllocationSerializer

+ (NSDictionary *)serialize:(DBUSERSSpaceAllocation *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isIndividual]) {
    jsonDict[@"individual"] = [[DBUSERSIndividualSpaceAllocationSerializer serialize:valueObj.individual] mutableCopy];
    jsonDict[@".tag"] = @"individual";
  } else if ([valueObj isTeam]) {
    jsonDict[@"team"] = [[DBUSERSTeamSpaceAllocationSerializer serialize:valueObj.team] mutableCopy];
    jsonDict[@".tag"] = @"team";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBUSERSSpaceAllocation *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"individual"]) {
    DBUSERSIndividualSpaceAllocation *individual = [DBUSERSIndividualSpaceAllocationSerializer deserialize:valueDict];
    return [[DBUSERSSpaceAllocation alloc] initWithIndividual:individual];
  } else if ([tag isEqualToString:@"team"]) {
    DBUSERSTeamSpaceAllocation *team = [DBUSERSTeamSpaceAllocationSerializer deserialize:valueDict];
    return [[DBUSERSSpaceAllocation alloc] initWithTeam:team];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBUSERSSpaceAllocation alloc] initWithOther];
  } else {
    return [[DBUSERSSpaceAllocation alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSSpaceAllocation.h"
#import "DBUSERSSpaceUsage.h"

#pragma mark - API Object

@implementation DBUSERSSpaceUsage

#pragma mark - Constructors

- (instancetype)initWithUsed:(NSNumber *)used allocation:(DBUSERSSpaceAllocation *)allocation {

  self = [super init];
  if (self) {
    _used = used;
    _allocation = allocation;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBUSERSSpaceUsageSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBUSERSSpaceUsageSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBUSERSSpaceUsageSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.used hash];
  result = prime * result + [self.allocation hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSpaceUsage:other];
}

- (BOOL)isEqualToSpaceUsage:(DBUSERSSpaceUsage *)aSpaceUsage {
  if (self == aSpaceUsage) {
    return YES;
  }
  if (![self.used isEqual:aSpaceUsage.used]) {
    return NO;
  }
  if (![self.allocation isEqual:aSpaceUsage.allocation]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBUSERSSpaceUsageSerializer

+ (NSDictionary *)serialize:(DBUSERSSpaceUsage *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"used"] = valueObj.used;
  jsonDict[@"allocation"] = [DBUSERSSpaceAllocationSerializer serialize:valueObj.allocation];

  return jsonDict;
}

+ (DBUSERSSpaceUsage *)deserialize:(NSDictionary *)valueDict {
  NSNumber *used = valueDict[@"used"];
  DBUSERSSpaceAllocation *allocation = [DBUSERSSpaceAllocationSerializer deserialize:valueDict[@"allocation"]];

  return [[DBUSERSSpaceUsage alloc] initWithUsed:used allocation:allocation];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBUSERSTeamSpaceAllocation.h"

#pragma mark - API Object

@implementation DBUSERSTeamSpaceAllocation

#pragma mark - Constructors

- (instancetype)initWithUsed:(NSNumber *)used allocated:(NSNumber *)allocated {

  self = [super init];
  if (self) {
    _used = used;
    _allocated = allocated;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBUSERSTeamSpaceAllocationSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBUSERSTeamSpaceAllocationSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBUSERSTeamSpaceAllocationSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.used hash];
  result = prime * result + [self.allocated hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamSpaceAllocation:other];
}

- (BOOL)isEqualToTeamSpaceAllocation:(DBUSERSTeamSpaceAllocation *)aTeamSpaceAllocation {
  if (self == aTeamSpaceAllocation) {
    return YES;
  }
  if (![self.used isEqual:aTeamSpaceAllocation.used]) {
    return NO;
  }
  if (![self.allocated isEqual:aTeamSpaceAllocation.allocated]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBUSERSTeamSpaceAllocationSerializer

+ (NSDictionary *)serialize:(DBUSERSTeamSpaceAllocation *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"used"] = valueObj.used;
  jsonDict[@"allocated"] = valueObj.allocated;

  return jsonDict;
}

+ (DBUSERSTeamSpaceAllocation *)deserialize:(NSDictionary *)valueDict {
  NSNumber *used = valueDict[@"used"];
  NSNumber *allocated = valueDict[@"allocated"];

  return [[DBUSERSTeamSpaceAllocation alloc] initWithUsed:used allocated:allocated];
}

@end
