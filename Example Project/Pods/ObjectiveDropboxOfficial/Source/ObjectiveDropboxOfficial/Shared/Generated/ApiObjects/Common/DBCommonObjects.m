///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

/// Arguments, results, and errors for the `Common` namespace.

#import "DBCOMMONInvalidPathRootError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCOMMONInvalidPathRootError

#pragma mark - Constructors

- (instancetype)initWithPathRoot:(NSString *)pathRoot {
  [DBStoneValidators
   nullableValidator:[DBStoneValidators stringValidator:nil maxLength:nil pattern:@"[-_0-9a-zA-Z:]+"]](pathRoot);

  self = [super init];
  if (self) {
    _pathRoot = pathRoot;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithPathRoot:nil];
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBCOMMONInvalidPathRootErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBCOMMONInvalidPathRootErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCOMMONInvalidPathRootErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.pathRoot) {
    result = prime * result + [self.pathRoot hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToInvalidPathRootError:other];
}

- (BOOL)isEqualToInvalidPathRootError:(DBCOMMONInvalidPathRootError *)anInvalidPathRootError {
  if (self == anInvalidPathRootError) {
    return YES;
  }
  if (self.pathRoot) {
    if (![self.pathRoot isEqual:anInvalidPathRootError.pathRoot]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCOMMONInvalidPathRootErrorSerializer

+ (NSDictionary *)serialize:(DBCOMMONInvalidPathRootError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.pathRoot) {
    jsonDict[@"path_root"] = valueObj.pathRoot;
  }

  return jsonDict;
}

+ (DBCOMMONInvalidPathRootError *)deserialize:(NSDictionary *)valueDict {
  NSString *pathRoot = valueDict[@"path_root"] ?: nil;

  return [[DBCOMMONInvalidPathRootError alloc] initWithPathRoot:pathRoot];
}

@end

#import "DBCOMMONPathRoot.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCOMMONPathRoot

@synthesize team = _team;
@synthesize sharedFolder = _sharedFolder;

#pragma mark - Constructors

- (instancetype)initWithHome {
  self = [super init];
  if (self) {
    _tag = DBCOMMONPathRootHome;
  }
  return self;
}

- (instancetype)initWithMemberHome {
  self = [super init];
  if (self) {
    _tag = DBCOMMONPathRootMemberHome;
  }
  return self;
}

- (instancetype)initWithTeam:(NSString *)team {
  self = [super init];
  if (self) {
    _tag = DBCOMMONPathRootTeam;
    _team = team;
  }
  return self;
}

- (instancetype)initWithUserHome {
  self = [super init];
  if (self) {
    _tag = DBCOMMONPathRootUserHome;
  }
  return self;
}

- (instancetype)initWithSharedFolder:(NSString *)sharedFolder {
  self = [super init];
  if (self) {
    _tag = DBCOMMONPathRootSharedFolder;
    _sharedFolder = sharedFolder;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBCOMMONPathRootOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (NSString *)team {
  if (![self isTeam]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBCOMMONPathRootTeam, but was %@.", [self tagName]];
  }
  return _team;
}

- (NSString *)sharedFolder {
  if (![self isSharedFolder]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBCOMMONPathRootSharedFolder, but was %@.", [self tagName]];
  }
  return _sharedFolder;
}

#pragma mark - Tag state methods

- (BOOL)isHome {
  return _tag == DBCOMMONPathRootHome;
}

- (BOOL)isMemberHome {
  return _tag == DBCOMMONPathRootMemberHome;
}

- (BOOL)isTeam {
  return _tag == DBCOMMONPathRootTeam;
}

- (BOOL)isUserHome {
  return _tag == DBCOMMONPathRootUserHome;
}

- (BOOL)isSharedFolder {
  return _tag == DBCOMMONPathRootSharedFolder;
}

- (BOOL)isOther {
  return _tag == DBCOMMONPathRootOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBCOMMONPathRootHome:
    return @"DBCOMMONPathRootHome";
  case DBCOMMONPathRootMemberHome:
    return @"DBCOMMONPathRootMemberHome";
  case DBCOMMONPathRootTeam:
    return @"DBCOMMONPathRootTeam";
  case DBCOMMONPathRootUserHome:
    return @"DBCOMMONPathRootUserHome";
  case DBCOMMONPathRootSharedFolder:
    return @"DBCOMMONPathRootSharedFolder";
  case DBCOMMONPathRootOther:
    return @"DBCOMMONPathRootOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBCOMMONPathRootSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBCOMMONPathRootSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCOMMONPathRootSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBCOMMONPathRootHome:
    result = prime * result + [[self tagName] hash];
  case DBCOMMONPathRootMemberHome:
    result = prime * result + [[self tagName] hash];
  case DBCOMMONPathRootTeam:
    result = prime * result + [self.team hash];
  case DBCOMMONPathRootUserHome:
    result = prime * result + [[self tagName] hash];
  case DBCOMMONPathRootSharedFolder:
    result = prime * result + [self.sharedFolder hash];
  case DBCOMMONPathRootOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPathRoot:other];
}

- (BOOL)isEqualToPathRoot:(DBCOMMONPathRoot *)aPathRoot {
  if (self == aPathRoot) {
    return YES;
  }
  if (self.tag != aPathRoot.tag) {
    return NO;
  }
  switch (_tag) {
  case DBCOMMONPathRootHome:
    return [[self tagName] isEqual:[aPathRoot tagName]];
  case DBCOMMONPathRootMemberHome:
    return [[self tagName] isEqual:[aPathRoot tagName]];
  case DBCOMMONPathRootTeam:
    return [self.team isEqual:aPathRoot.team];
  case DBCOMMONPathRootUserHome:
    return [[self tagName] isEqual:[aPathRoot tagName]];
  case DBCOMMONPathRootSharedFolder:
    return [self.sharedFolder isEqual:aPathRoot.sharedFolder];
  case DBCOMMONPathRootOther:
    return [[self tagName] isEqual:[aPathRoot tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCOMMONPathRootSerializer

+ (NSDictionary *)serialize:(DBCOMMONPathRoot *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isHome]) {
    jsonDict[@".tag"] = @"home";
  } else if ([valueObj isMemberHome]) {
    jsonDict[@".tag"] = @"member_home";
  } else if ([valueObj isTeam]) {
    jsonDict[@"team"] = valueObj.team;
    jsonDict[@".tag"] = @"team";
  } else if ([valueObj isUserHome]) {
    jsonDict[@".tag"] = @"user_home";
  } else if ([valueObj isSharedFolder]) {
    jsonDict[@"shared_folder"] = valueObj.sharedFolder;
    jsonDict[@".tag"] = @"shared_folder";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBCOMMONPathRoot *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"home"]) {
    return [[DBCOMMONPathRoot alloc] initWithHome];
  } else if ([tag isEqualToString:@"member_home"]) {
    return [[DBCOMMONPathRoot alloc] initWithMemberHome];
  } else if ([tag isEqualToString:@"team"]) {
    NSString *team = valueDict[@"team"];
    return [[DBCOMMONPathRoot alloc] initWithTeam:team];
  } else if ([tag isEqualToString:@"user_home"]) {
    return [[DBCOMMONPathRoot alloc] initWithUserHome];
  } else if ([tag isEqualToString:@"shared_folder"]) {
    NSString *sharedFolder = valueDict[@"shared_folder"];
    return [[DBCOMMONPathRoot alloc] initWithSharedFolder:sharedFolder];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBCOMMONPathRoot alloc] initWithOther];
  } else {
    return [[DBCOMMONPathRoot alloc] initWithOther];
  }
}

@end

#import "DBCOMMONInvalidPathRootError.h"
#import "DBCOMMONPathRootError.h"
#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"

#pragma mark - API Object

@implementation DBCOMMONPathRootError

@synthesize invalid = _invalid;

#pragma mark - Constructors

- (instancetype)initWithInvalid:(DBCOMMONInvalidPathRootError *)invalid {
  self = [super init];
  if (self) {
    _tag = DBCOMMONPathRootErrorInvalid;
    _invalid = invalid;
  }
  return self;
}

- (instancetype)initWithNoPermission {
  self = [super init];
  if (self) {
    _tag = DBCOMMONPathRootErrorNoPermission;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBCOMMONPathRootErrorOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBCOMMONInvalidPathRootError *)invalid {
  if (![self isInvalid]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBCOMMONPathRootErrorInvalid, but was %@.", [self tagName]];
  }
  return _invalid;
}

#pragma mark - Tag state methods

- (BOOL)isInvalid {
  return _tag == DBCOMMONPathRootErrorInvalid;
}

- (BOOL)isNoPermission {
  return _tag == DBCOMMONPathRootErrorNoPermission;
}

- (BOOL)isOther {
  return _tag == DBCOMMONPathRootErrorOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBCOMMONPathRootErrorInvalid:
    return @"DBCOMMONPathRootErrorInvalid";
  case DBCOMMONPathRootErrorNoPermission:
    return @"DBCOMMONPathRootErrorNoPermission";
  case DBCOMMONPathRootErrorOther:
    return @"DBCOMMONPathRootErrorOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBCOMMONPathRootErrorSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBCOMMONPathRootErrorSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBCOMMONPathRootErrorSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBCOMMONPathRootErrorInvalid:
    result = prime * result + [self.invalid hash];
  case DBCOMMONPathRootErrorNoPermission:
    result = prime * result + [[self tagName] hash];
  case DBCOMMONPathRootErrorOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToPathRootError:other];
}

- (BOOL)isEqualToPathRootError:(DBCOMMONPathRootError *)aPathRootError {
  if (self == aPathRootError) {
    return YES;
  }
  if (self.tag != aPathRootError.tag) {
    return NO;
  }
  switch (_tag) {
  case DBCOMMONPathRootErrorInvalid:
    return [self.invalid isEqual:aPathRootError.invalid];
  case DBCOMMONPathRootErrorNoPermission:
    return [[self tagName] isEqual:[aPathRootError tagName]];
  case DBCOMMONPathRootErrorOther:
    return [[self tagName] isEqual:[aPathRootError tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBCOMMONPathRootErrorSerializer

+ (NSDictionary *)serialize:(DBCOMMONPathRootError *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isInvalid]) {
    jsonDict[@"invalid"] = [[DBCOMMONInvalidPathRootErrorSerializer serialize:valueObj.invalid] mutableCopy];
    jsonDict[@".tag"] = @"invalid";
  } else if ([valueObj isNoPermission]) {
    jsonDict[@".tag"] = @"no_permission";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBCOMMONPathRootError *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"invalid"]) {
    DBCOMMONInvalidPathRootError *invalid = [DBCOMMONInvalidPathRootErrorSerializer deserialize:valueDict];
    return [[DBCOMMONPathRootError alloc] initWithInvalid:invalid];
  } else if ([tag isEqualToString:@"no_permission"]) {
    return [[DBCOMMONPathRootError alloc] initWithNoPermission];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBCOMMONPathRootError alloc] initWithOther];
  } else {
    return [[DBCOMMONPathRootError alloc] initWithOther];
  }
}

@end
