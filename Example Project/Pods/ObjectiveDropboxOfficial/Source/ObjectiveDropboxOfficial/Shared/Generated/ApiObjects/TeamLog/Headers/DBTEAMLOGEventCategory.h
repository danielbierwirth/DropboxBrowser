///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>

#import "DBSerializableProtocol.h"

@class DBTEAMLOGEventCategory;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - API Object

///
/// The `EventCategory` union.
///
/// Category of events in event audit log.
///
/// This class implements the `DBSerializable` protocol (serialize and
/// deserialize instance methods), which is required for all Obj-C SDK API route
/// objects.
///
@interface DBTEAMLOGEventCategory : NSObject <DBSerializable, NSCopying>

#pragma mark - Instance fields

/// The `DBTEAMLOGEventCategoryTag` enum type represents the possible tag states
/// with which the `DBTEAMLOGEventCategory` union can exist.
typedef NS_ENUM(NSInteger, DBTEAMLOGEventCategoryTag) {
  /// Events that have to do with account capture and invite enforcement on
  /// team-owned domains.
  DBTEAMLOGEventCategoryAccountCapture,

  /// Events that relate to team and team member account administration or
  /// team administration. Note that these actions are not necessarily
  /// performed by team admins. They might also be performed by Dropbox
  /// Support or System or by team members on their own accounts.
  DBTEAMLOGEventCategoryAdministration,

  /// Events that apply to management of linked apps.
  DBTEAMLOGEventCategoryApps,

  /// Events that apply to user authentication in some way.
  DBTEAMLOGEventCategoryAuthentication,

  /// Events that have to do with comments on files and Paper documents.
  DBTEAMLOGEventCategoryComments,

  /// Events that apply to changes how people can access content on Dropbox as
  /// well as actions that represent actually accessing content.
  DBTEAMLOGEventCategoryContentAccess,

  /// Events that apply to linked devices on mobile, desktop and Web
  /// platforms.
  DBTEAMLOGEventCategoryDevices,

  /// Events that concern device approvals and device management.
  DBTEAMLOGEventCategoryDeviceApprovals,

  /// Events that involve domain management feature: domain verification,
  /// invite enforcement and account capture.
  DBTEAMLOGEventCategoryDomains,

  /// Events that involve enterprise mobility management and the Dropbox EMM
  /// app.
  DBTEAMLOGEventCategoryEmm,

  /// Events that mark some type of unexpected outcome.
  DBTEAMLOGEventCategoryErrors,

  /// Events that mark a user's interaction with files and folders on Dropbox.
  DBTEAMLOGEventCategoryFiles,

  /// Events that have to do with filesystem operations on files and folders:
  /// copy, move, delete, etc.
  DBTEAMLOGEventCategoryFileOperations,

  /// Events that apply to the file requests feature.
  DBTEAMLOGEventCategoryFileRequests,

  /// Events that involve group management.
  DBTEAMLOGEventCategoryGroups,

  /// Events that involve users signing in to or out of Dropbox.
  DBTEAMLOGEventCategoryLogins,

  /// Events that involve team member management.
  DBTEAMLOGEventCategoryMembers,

  /// Events that apply to Dropbox Paper.
  DBTEAMLOGEventCategoryPaper,

  /// Events that involve using, changing or resetting passwords.
  DBTEAMLOGEventCategoryPasswords,

  /// Events that concern generation of admin reports, including team activity
  /// and device usage.
  DBTEAMLOGEventCategoryReports,

  /// Events that mark the beginning or end of sessions as well as those that
  /// apply to an ongoing session.
  DBTEAMLOGEventCategorySessions,

  /// Events that specifically apply to shared files.
  DBTEAMLOGEventCategorySharedFiles,

  /// Events that specifically apply to shared folders.
  DBTEAMLOGEventCategorySharedFolders,

  /// Events that specifically apply to link sharing.
  DBTEAMLOGEventCategorySharedLinks,

  /// Events that apply to all types of sharing and collaboration.
  DBTEAMLOGEventCategorySharing,

  /// Events that concern policies that affect sharing - both at the team
  /// level and at the folder level.
  DBTEAMLOGEventCategorySharingPolicies,

  /// Events that involve using or configuring single sign-on as well as
  /// administrative policies concerning single sign-on.
  DBTEAMLOGEventCategorySso,

  /// Events that involve team folder management.
  DBTEAMLOGEventCategoryTeamFolders,

  /// Events that involve a change in team-wide policies.
  DBTEAMLOGEventCategoryTeamPolicies,

  /// Events that involve a change in the team profile.
  DBTEAMLOGEventCategoryTeamProfile,

  /// Events that involve using or configuring two factor authentication as
  /// well as administrative policies concerning two factor authentication.
  DBTEAMLOGEventCategoryTfa,

  /// (no description).
  DBTEAMLOGEventCategoryOther,

};

/// Represents the union's current tag state.
@property (nonatomic, readonly) DBTEAMLOGEventCategoryTag tag;

#pragma mark - Constructors

///
/// Initializes union class with tag state of "account_capture".
///
/// Description of the "account_capture" tag state: Events that have to do with
/// account capture and invite enforcement on team-owned domains.
///
/// @return An initialized instance.
///
- (instancetype)initWithAccountCapture;

///
/// Initializes union class with tag state of "administration".
///
/// Description of the "administration" tag state: Events that relate to team
/// and team member account administration or team administration. Note that
/// these actions are not necessarily performed by team admins. They might also
/// be performed by Dropbox Support or System or by team members on their own
/// accounts.
///
/// @return An initialized instance.
///
- (instancetype)initWithAdministration;

///
/// Initializes union class with tag state of "apps".
///
/// Description of the "apps" tag state: Events that apply to management of
/// linked apps.
///
/// @return An initialized instance.
///
- (instancetype)initWithApps;

///
/// Initializes union class with tag state of "authentication".
///
/// Description of the "authentication" tag state: Events that apply to user
/// authentication in some way.
///
/// @return An initialized instance.
///
- (instancetype)initWithAuthentication;

///
/// Initializes union class with tag state of "comments".
///
/// Description of the "comments" tag state: Events that have to do with
/// comments on files and Paper documents.
///
/// @return An initialized instance.
///
- (instancetype)initWithComments;

///
/// Initializes union class with tag state of "content_access".
///
/// Description of the "content_access" tag state: Events that apply to changes
/// how people can access content on Dropbox as well as actions that represent
/// actually accessing content.
///
/// @return An initialized instance.
///
- (instancetype)initWithContentAccess;

///
/// Initializes union class with tag state of "devices".
///
/// Description of the "devices" tag state: Events that apply to linked devices
/// on mobile, desktop and Web platforms.
///
/// @return An initialized instance.
///
- (instancetype)initWithDevices;

///
/// Initializes union class with tag state of "device_approvals".
///
/// Description of the "device_approvals" tag state: Events that concern device
/// approvals and device management.
///
/// @return An initialized instance.
///
- (instancetype)initWithDeviceApprovals;

///
/// Initializes union class with tag state of "domains".
///
/// Description of the "domains" tag state: Events that involve domain
/// management feature: domain verification, invite enforcement and account
/// capture.
///
/// @return An initialized instance.
///
- (instancetype)initWithDomains;

///
/// Initializes union class with tag state of "emm".
///
/// Description of the "emm" tag state: Events that involve enterprise mobility
/// management and the Dropbox EMM app.
///
/// @return An initialized instance.
///
- (instancetype)initWithEmm;

///
/// Initializes union class with tag state of "errors".
///
/// Description of the "errors" tag state: Events that mark some type of
/// unexpected outcome.
///
/// @return An initialized instance.
///
- (instancetype)initWithErrors;

///
/// Initializes union class with tag state of "files".
///
/// Description of the "files" tag state: Events that mark a user's interaction
/// with files and folders on Dropbox.
///
/// @return An initialized instance.
///
- (instancetype)initWithFiles;

///
/// Initializes union class with tag state of "file_operations".
///
/// Description of the "file_operations" tag state: Events that have to do with
/// filesystem operations on files and folders: copy, move, delete, etc.
///
/// @return An initialized instance.
///
- (instancetype)initWithFileOperations;

///
/// Initializes union class with tag state of "file_requests".
///
/// Description of the "file_requests" tag state: Events that apply to the file
/// requests feature.
///
/// @return An initialized instance.
///
- (instancetype)initWithFileRequests;

///
/// Initializes union class with tag state of "groups".
///
/// Description of the "groups" tag state: Events that involve group management.
///
/// @return An initialized instance.
///
- (instancetype)initWithGroups;

///
/// Initializes union class with tag state of "logins".
///
/// Description of the "logins" tag state: Events that involve users signing in
/// to or out of Dropbox.
///
/// @return An initialized instance.
///
- (instancetype)initWithLogins;

///
/// Initializes union class with tag state of "members".
///
/// Description of the "members" tag state: Events that involve team member
/// management.
///
/// @return An initialized instance.
///
- (instancetype)initWithMembers;

///
/// Initializes union class with tag state of "paper".
///
/// Description of the "paper" tag state: Events that apply to Dropbox Paper.
///
/// @return An initialized instance.
///
- (instancetype)initWithPaper;

///
/// Initializes union class with tag state of "passwords".
///
/// Description of the "passwords" tag state: Events that involve using,
/// changing or resetting passwords.
///
/// @return An initialized instance.
///
- (instancetype)initWithPasswords;

///
/// Initializes union class with tag state of "reports".
///
/// Description of the "reports" tag state: Events that concern generation of
/// admin reports, including team activity and device usage.
///
/// @return An initialized instance.
///
- (instancetype)initWithReports;

///
/// Initializes union class with tag state of "sessions".
///
/// Description of the "sessions" tag state: Events that mark the beginning or
/// end of sessions as well as those that apply to an ongoing session.
///
/// @return An initialized instance.
///
- (instancetype)initWithSessions;

///
/// Initializes union class with tag state of "shared_files".
///
/// Description of the "shared_files" tag state: Events that specifically apply
/// to shared files.
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedFiles;

///
/// Initializes union class with tag state of "shared_folders".
///
/// Description of the "shared_folders" tag state: Events that specifically
/// apply to shared folders.
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedFolders;

///
/// Initializes union class with tag state of "shared_links".
///
/// Description of the "shared_links" tag state: Events that specifically apply
/// to link sharing.
///
/// @return An initialized instance.
///
- (instancetype)initWithSharedLinks;

///
/// Initializes union class with tag state of "sharing".
///
/// Description of the "sharing" tag state: Events that apply to all types of
/// sharing and collaboration.
///
/// @return An initialized instance.
///
- (instancetype)initWithSharing;

///
/// Initializes union class with tag state of "sharing_policies".
///
/// Description of the "sharing_policies" tag state: Events that concern
/// policies that affect sharing - both at the team level and at the folder
/// level.
///
/// @return An initialized instance.
///
- (instancetype)initWithSharingPolicies;

///
/// Initializes union class with tag state of "sso".
///
/// Description of the "sso" tag state: Events that involve using or configuring
/// single sign-on as well as administrative policies concerning single sign-on.
///
/// @return An initialized instance.
///
- (instancetype)initWithSso;

///
/// Initializes union class with tag state of "team_folders".
///
/// Description of the "team_folders" tag state: Events that involve team folder
/// management.
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamFolders;

///
/// Initializes union class with tag state of "team_policies".
///
/// Description of the "team_policies" tag state: Events that involve a change
/// in team-wide policies.
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamPolicies;

///
/// Initializes union class with tag state of "team_profile".
///
/// Description of the "team_profile" tag state: Events that involve a change in
/// the team profile.
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamProfile;

///
/// Initializes union class with tag state of "tfa".
///
/// Description of the "tfa" tag state: Events that involve using or configuring
/// two factor authentication as well as administrative policies concerning two
/// factor authentication.
///
/// @return An initialized instance.
///
- (instancetype)initWithTfa;

///
/// Initializes union class with tag state of "other".
///
/// @return An initialized instance.
///
- (instancetype)initWithOther;

- (instancetype)init NS_UNAVAILABLE;

#pragma mark - Tag state methods

///
/// Retrieves whether the union's current tag state has value "account_capture".
///
/// @return Whether the union's current tag state has value "account_capture".
///
- (BOOL)isAccountCapture;

///
/// Retrieves whether the union's current tag state has value "administration".
///
/// @return Whether the union's current tag state has value "administration".
///
- (BOOL)isAdministration;

///
/// Retrieves whether the union's current tag state has value "apps".
///
/// @return Whether the union's current tag state has value "apps".
///
- (BOOL)isApps;

///
/// Retrieves whether the union's current tag state has value "authentication".
///
/// @return Whether the union's current tag state has value "authentication".
///
- (BOOL)isAuthentication;

///
/// Retrieves whether the union's current tag state has value "comments".
///
/// @return Whether the union's current tag state has value "comments".
///
- (BOOL)isComments;

///
/// Retrieves whether the union's current tag state has value "content_access".
///
/// @return Whether the union's current tag state has value "content_access".
///
- (BOOL)isContentAccess;

///
/// Retrieves whether the union's current tag state has value "devices".
///
/// @return Whether the union's current tag state has value "devices".
///
- (BOOL)isDevices;

///
/// Retrieves whether the union's current tag state has value
/// "device_approvals".
///
/// @return Whether the union's current tag state has value "device_approvals".
///
- (BOOL)isDeviceApprovals;

///
/// Retrieves whether the union's current tag state has value "domains".
///
/// @return Whether the union's current tag state has value "domains".
///
- (BOOL)isDomains;

///
/// Retrieves whether the union's current tag state has value "emm".
///
/// @return Whether the union's current tag state has value "emm".
///
- (BOOL)isEmm;

///
/// Retrieves whether the union's current tag state has value "errors".
///
/// @return Whether the union's current tag state has value "errors".
///
- (BOOL)isErrors;

///
/// Retrieves whether the union's current tag state has value "files".
///
/// @return Whether the union's current tag state has value "files".
///
- (BOOL)isFiles;

///
/// Retrieves whether the union's current tag state has value "file_operations".
///
/// @return Whether the union's current tag state has value "file_operations".
///
- (BOOL)isFileOperations;

///
/// Retrieves whether the union's current tag state has value "file_requests".
///
/// @return Whether the union's current tag state has value "file_requests".
///
- (BOOL)isFileRequests;

///
/// Retrieves whether the union's current tag state has value "groups".
///
/// @return Whether the union's current tag state has value "groups".
///
- (BOOL)isGroups;

///
/// Retrieves whether the union's current tag state has value "logins".
///
/// @return Whether the union's current tag state has value "logins".
///
- (BOOL)isLogins;

///
/// Retrieves whether the union's current tag state has value "members".
///
/// @return Whether the union's current tag state has value "members".
///
- (BOOL)isMembers;

///
/// Retrieves whether the union's current tag state has value "paper".
///
/// @return Whether the union's current tag state has value "paper".
///
- (BOOL)isPaper;

///
/// Retrieves whether the union's current tag state has value "passwords".
///
/// @return Whether the union's current tag state has value "passwords".
///
- (BOOL)isPasswords;

///
/// Retrieves whether the union's current tag state has value "reports".
///
/// @return Whether the union's current tag state has value "reports".
///
- (BOOL)isReports;

///
/// Retrieves whether the union's current tag state has value "sessions".
///
/// @return Whether the union's current tag state has value "sessions".
///
- (BOOL)isSessions;

///
/// Retrieves whether the union's current tag state has value "shared_files".
///
/// @return Whether the union's current tag state has value "shared_files".
///
- (BOOL)isSharedFiles;

///
/// Retrieves whether the union's current tag state has value "shared_folders".
///
/// @return Whether the union's current tag state has value "shared_folders".
///
- (BOOL)isSharedFolders;

///
/// Retrieves whether the union's current tag state has value "shared_links".
///
/// @return Whether the union's current tag state has value "shared_links".
///
- (BOOL)isSharedLinks;

///
/// Retrieves whether the union's current tag state has value "sharing".
///
/// @return Whether the union's current tag state has value "sharing".
///
- (BOOL)isSharing;

///
/// Retrieves whether the union's current tag state has value
/// "sharing_policies".
///
/// @return Whether the union's current tag state has value "sharing_policies".
///
- (BOOL)isSharingPolicies;

///
/// Retrieves whether the union's current tag state has value "sso".
///
/// @return Whether the union's current tag state has value "sso".
///
- (BOOL)isSso;

///
/// Retrieves whether the union's current tag state has value "team_folders".
///
/// @return Whether the union's current tag state has value "team_folders".
///
- (BOOL)isTeamFolders;

///
/// Retrieves whether the union's current tag state has value "team_policies".
///
/// @return Whether the union's current tag state has value "team_policies".
///
- (BOOL)isTeamPolicies;

///
/// Retrieves whether the union's current tag state has value "team_profile".
///
/// @return Whether the union's current tag state has value "team_profile".
///
- (BOOL)isTeamProfile;

///
/// Retrieves whether the union's current tag state has value "tfa".
///
/// @return Whether the union's current tag state has value "tfa".
///
- (BOOL)isTfa;

///
/// Retrieves whether the union's current tag state has value "other".
///
/// @return Whether the union's current tag state has value "other".
///
- (BOOL)isOther;

///
/// Retrieves string value of union's current tag state.
///
/// @return A human-readable string representing the union's current tag state.
///
- (NSString *)tagName;

@end

#pragma mark - Serializer Object

///
/// The serialization class for the `DBTEAMLOGEventCategory` union.
///
@interface DBTEAMLOGEventCategorySerializer : NSObject

///
/// Serializes `DBTEAMLOGEventCategory` instances.
///
/// @param instance An instance of the `DBTEAMLOGEventCategory` API object.
///
/// @return A json-compatible dictionary representation of the
/// `DBTEAMLOGEventCategory` API object.
///
+ (NSDictionary *)serialize:(DBTEAMLOGEventCategory *)instance;

///
/// Deserializes `DBTEAMLOGEventCategory` instances.
///
/// @param dict A json-compatible dictionary representation of the
/// `DBTEAMLOGEventCategory` API object.
///
/// @return An instantiation of the `DBTEAMLOGEventCategory` object.
///
+ (DBTEAMLOGEventCategory *)deserialize:(NSDictionary *)dict;

@end

NS_ASSUME_NONNULL_END
