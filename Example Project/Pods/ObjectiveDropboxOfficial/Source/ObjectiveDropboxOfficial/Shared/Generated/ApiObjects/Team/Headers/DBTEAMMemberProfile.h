///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>

#import "DBSerializableProtocol.h"

@class DBTEAMMemberProfile;
@class DBTEAMTeamMemberStatus;
@class DBTEAMTeamMembershipType;
@class DBUSERSName;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - API Object

///
/// The `MemberProfile` struct.
///
/// Basic member profile.
///
/// This class implements the `DBSerializable` protocol (serialize and
/// deserialize instance methods), which is required for all Obj-C SDK API route
/// objects.
///
@interface DBTEAMMemberProfile : NSObject <DBSerializable, NSCopying>

#pragma mark - Instance fields

/// ID of user as a member of a team.
@property (nonatomic, readonly, copy) NSString *teamMemberId;

/// External ID that a team can attach to the user. An application using the API
/// may find it easier to use their own IDs instead of Dropbox IDs like
/// account_id or team_member_id.
@property (nonatomic, readonly, copy, nullable) NSString *externalId;

/// A user's account identifier.
@property (nonatomic, readonly, copy, nullable) NSString *accountId;

/// Email address of user.
@property (nonatomic, readonly, copy) NSString *email;

/// Is true if the user's email is verified to be owned by the user.
@property (nonatomic, readonly) NSNumber *emailVerified;

/// The user's status as a member of a specific team.
@property (nonatomic, readonly) DBTEAMTeamMemberStatus *status;

/// Representations for a person's name.
@property (nonatomic, readonly) DBUSERSName *name;

/// The user's membership type: full (normal team member) vs limited (does not
/// use a license; no access to the team's shared quota).
@property (nonatomic, readonly) DBTEAMTeamMembershipType *membershipType;

/// The date and time the user joined as a member of a specific team.
@property (nonatomic, readonly, nullable) NSDate *joinedOn;

/// Persistent ID that a team can attach to the user. The persistent ID is
/// unique ID to be used for SAML authentication.
@property (nonatomic, readonly, copy, nullable) NSString *persistentId;

#pragma mark - Constructors

///
/// Full constructor for the struct (exposes all instance variables).
///
/// @param teamMemberId ID of user as a member of a team.
/// @param email Email address of user.
/// @param emailVerified Is true if the user's email is verified to be owned by
/// the user.
/// @param status The user's status as a member of a specific team.
/// @param name Representations for a person's name.
/// @param membershipType The user's membership type: full (normal team member)
/// vs limited (does not use a license; no access to the team's shared quota).
/// @param externalId External ID that a team can attach to the user. An
/// application using the API may find it easier to use their own IDs instead of
/// Dropbox IDs like account_id or team_member_id.
/// @param accountId A user's account identifier.
/// @param joinedOn The date and time the user joined as a member of a specific
/// team.
/// @param persistentId Persistent ID that a team can attach to the user. The
/// persistent ID is unique ID to be used for SAML authentication.
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId
                               email:(NSString *)email
                       emailVerified:(NSNumber *)emailVerified
                              status:(DBTEAMTeamMemberStatus *)status
                                name:(DBUSERSName *)name
                      membershipType:(DBTEAMTeamMembershipType *)membershipType
                          externalId:(nullable NSString *)externalId
                           accountId:(nullable NSString *)accountId
                            joinedOn:(nullable NSDate *)joinedOn
                        persistentId:(nullable NSString *)persistentId;

///
/// Convenience constructor (exposes only non-nullable instance variables with
/// no default value).
///
/// @param teamMemberId ID of user as a member of a team.
/// @param email Email address of user.
/// @param emailVerified Is true if the user's email is verified to be owned by
/// the user.
/// @param status The user's status as a member of a specific team.
/// @param name Representations for a person's name.
/// @param membershipType The user's membership type: full (normal team member)
/// vs limited (does not use a license; no access to the team's shared quota).
///
/// @return An initialized instance.
///
- (instancetype)initWithTeamMemberId:(NSString *)teamMemberId
                               email:(NSString *)email
                       emailVerified:(NSNumber *)emailVerified
                              status:(DBTEAMTeamMemberStatus *)status
                                name:(DBUSERSName *)name
                      membershipType:(DBTEAMTeamMembershipType *)membershipType;

- (instancetype)init NS_UNAVAILABLE;

@end

#pragma mark - Serializer Object

///
/// The serialization class for the `MemberProfile` struct.
///
@interface DBTEAMMemberProfileSerializer : NSObject

///
/// Serializes `DBTEAMMemberProfile` instances.
///
/// @param instance An instance of the `DBTEAMMemberProfile` API object.
///
/// @return A json-compatible dictionary representation of the
/// `DBTEAMMemberProfile` API object.
///
+ (NSDictionary *)serialize:(DBTEAMMemberProfile *)instance;

///
/// Deserializes `DBTEAMMemberProfile` instances.
///
/// @param dict A json-compatible dictionary representation of the
/// `DBTEAMMemberProfile` API object.
///
/// @return An instantiation of the `DBTEAMMemberProfile` object.
///
+ (DBTEAMMemberProfile *)deserialize:(NSDictionary *)dict;

@end

NS_ASSUME_NONNULL_END
