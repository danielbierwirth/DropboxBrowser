///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

/// Arguments, results, and errors for the `TeamPolicies` namespace.

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMPOLICIESEmmState.h"

#pragma mark - API Object

@implementation DBTEAMPOLICIESEmmState

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMPOLICIESEmmStateDisabled;
  }
  return self;
}

- (instancetype)initWithOptional {
  self = [super init];
  if (self) {
    _tag = DBTEAMPOLICIESEmmStateOptional;
  }
  return self;
}

- (instancetype)initWithRequired {
  self = [super init];
  if (self) {
    _tag = DBTEAMPOLICIESEmmStateRequired;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMPOLICIESEmmStateOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMPOLICIESEmmStateDisabled;
}

- (BOOL)isOptional {
  return _tag == DBTEAMPOLICIESEmmStateOptional;
}

- (BOOL)isRequired {
  return _tag == DBTEAMPOLICIESEmmStateRequired;
}

- (BOOL)isOther {
  return _tag == DBTEAMPOLICIESEmmStateOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMPOLICIESEmmStateDisabled:
    return @"DBTEAMPOLICIESEmmStateDisabled";
  case DBTEAMPOLICIESEmmStateOptional:
    return @"DBTEAMPOLICIESEmmStateOptional";
  case DBTEAMPOLICIESEmmStateRequired:
    return @"DBTEAMPOLICIESEmmStateRequired";
  case DBTEAMPOLICIESEmmStateOther:
    return @"DBTEAMPOLICIESEmmStateOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMPOLICIESEmmStateSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMPOLICIESEmmStateSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMPOLICIESEmmStateSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMPOLICIESEmmStateDisabled:
    result = prime * result + [[self tagName] hash];
  case DBTEAMPOLICIESEmmStateOptional:
    result = prime * result + [[self tagName] hash];
  case DBTEAMPOLICIESEmmStateRequired:
    result = prime * result + [[self tagName] hash];
  case DBTEAMPOLICIESEmmStateOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmState:other];
}

- (BOOL)isEqualToEmmState:(DBTEAMPOLICIESEmmState *)anEmmState {
  if (self == anEmmState) {
    return YES;
  }
  if (self.tag != anEmmState.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMPOLICIESEmmStateDisabled:
    return [[self tagName] isEqual:[anEmmState tagName]];
  case DBTEAMPOLICIESEmmStateOptional:
    return [[self tagName] isEqual:[anEmmState tagName]];
  case DBTEAMPOLICIESEmmStateRequired:
    return [[self tagName] isEqual:[anEmmState tagName]];
  case DBTEAMPOLICIESEmmStateOther:
    return [[self tagName] isEqual:[anEmmState tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMPOLICIESEmmStateSerializer

+ (NSDictionary *)serialize:(DBTEAMPOLICIESEmmState *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isOptional]) {
    jsonDict[@".tag"] = @"optional";
  } else if ([valueObj isRequired]) {
    jsonDict[@".tag"] = @"required";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMPOLICIESEmmState *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMPOLICIESEmmState alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"optional"]) {
    return [[DBTEAMPOLICIESEmmState alloc] initWithOptional];
  } else if ([tag isEqualToString:@"required"]) {
    return [[DBTEAMPOLICIESEmmState alloc] initWithRequired];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMPOLICIESEmmState alloc] initWithOther];
  } else {
    return [[DBTEAMPOLICIESEmmState alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMPOLICIESSharedFolderJoinPolicy.h"

#pragma mark - API Object

@implementation DBTEAMPOLICIESSharedFolderJoinPolicy

#pragma mark - Constructors

- (instancetype)initWithFromTeamOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMPOLICIESSharedFolderJoinPolicyFromTeamOnly;
  }
  return self;
}

- (instancetype)initWithFromAnyone {
  self = [super init];
  if (self) {
    _tag = DBTEAMPOLICIESSharedFolderJoinPolicyFromAnyone;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMPOLICIESSharedFolderJoinPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isFromTeamOnly {
  return _tag == DBTEAMPOLICIESSharedFolderJoinPolicyFromTeamOnly;
}

- (BOOL)isFromAnyone {
  return _tag == DBTEAMPOLICIESSharedFolderJoinPolicyFromAnyone;
}

- (BOOL)isOther {
  return _tag == DBTEAMPOLICIESSharedFolderJoinPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMPOLICIESSharedFolderJoinPolicyFromTeamOnly:
    return @"DBTEAMPOLICIESSharedFolderJoinPolicyFromTeamOnly";
  case DBTEAMPOLICIESSharedFolderJoinPolicyFromAnyone:
    return @"DBTEAMPOLICIESSharedFolderJoinPolicyFromAnyone";
  case DBTEAMPOLICIESSharedFolderJoinPolicyOther:
    return @"DBTEAMPOLICIESSharedFolderJoinPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMPOLICIESSharedFolderJoinPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMPOLICIESSharedFolderJoinPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMPOLICIESSharedFolderJoinPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMPOLICIESSharedFolderJoinPolicyFromTeamOnly:
    result = prime * result + [[self tagName] hash];
  case DBTEAMPOLICIESSharedFolderJoinPolicyFromAnyone:
    result = prime * result + [[self tagName] hash];
  case DBTEAMPOLICIESSharedFolderJoinPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderJoinPolicy:other];
}

- (BOOL)isEqualToSharedFolderJoinPolicy:(DBTEAMPOLICIESSharedFolderJoinPolicy *)aSharedFolderJoinPolicy {
  if (self == aSharedFolderJoinPolicy) {
    return YES;
  }
  if (self.tag != aSharedFolderJoinPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMPOLICIESSharedFolderJoinPolicyFromTeamOnly:
    return [[self tagName] isEqual:[aSharedFolderJoinPolicy tagName]];
  case DBTEAMPOLICIESSharedFolderJoinPolicyFromAnyone:
    return [[self tagName] isEqual:[aSharedFolderJoinPolicy tagName]];
  case DBTEAMPOLICIESSharedFolderJoinPolicyOther:
    return [[self tagName] isEqual:[aSharedFolderJoinPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMPOLICIESSharedFolderJoinPolicySerializer

+ (NSDictionary *)serialize:(DBTEAMPOLICIESSharedFolderJoinPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isFromTeamOnly]) {
    jsonDict[@".tag"] = @"from_team_only";
  } else if ([valueObj isFromAnyone]) {
    jsonDict[@".tag"] = @"from_anyone";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMPOLICIESSharedFolderJoinPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"from_team_only"]) {
    return [[DBTEAMPOLICIESSharedFolderJoinPolicy alloc] initWithFromTeamOnly];
  } else if ([tag isEqualToString:@"from_anyone"]) {
    return [[DBTEAMPOLICIESSharedFolderJoinPolicy alloc] initWithFromAnyone];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMPOLICIESSharedFolderJoinPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMPOLICIESSharedFolderJoinPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMPOLICIESSharedFolderMemberPolicy.h"

#pragma mark - API Object

@implementation DBTEAMPOLICIESSharedFolderMemberPolicy

#pragma mark - Constructors

- (instancetype)initWithTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMPOLICIESSharedFolderMemberPolicyTeam;
  }
  return self;
}

- (instancetype)initWithAnyone {
  self = [super init];
  if (self) {
    _tag = DBTEAMPOLICIESSharedFolderMemberPolicyAnyone;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMPOLICIESSharedFolderMemberPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isTeam {
  return _tag == DBTEAMPOLICIESSharedFolderMemberPolicyTeam;
}

- (BOOL)isAnyone {
  return _tag == DBTEAMPOLICIESSharedFolderMemberPolicyAnyone;
}

- (BOOL)isOther {
  return _tag == DBTEAMPOLICIESSharedFolderMemberPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMPOLICIESSharedFolderMemberPolicyTeam:
    return @"DBTEAMPOLICIESSharedFolderMemberPolicyTeam";
  case DBTEAMPOLICIESSharedFolderMemberPolicyAnyone:
    return @"DBTEAMPOLICIESSharedFolderMemberPolicyAnyone";
  case DBTEAMPOLICIESSharedFolderMemberPolicyOther:
    return @"DBTEAMPOLICIESSharedFolderMemberPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMPOLICIESSharedFolderMemberPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMPOLICIESSharedFolderMemberPolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMPOLICIESSharedFolderMemberPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMPOLICIESSharedFolderMemberPolicyTeam:
    result = prime * result + [[self tagName] hash];
  case DBTEAMPOLICIESSharedFolderMemberPolicyAnyone:
    result = prime * result + [[self tagName] hash];
  case DBTEAMPOLICIESSharedFolderMemberPolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedFolderMemberPolicy:other];
}

- (BOOL)isEqualToSharedFolderMemberPolicy:(DBTEAMPOLICIESSharedFolderMemberPolicy *)aSharedFolderMemberPolicy {
  if (self == aSharedFolderMemberPolicy) {
    return YES;
  }
  if (self.tag != aSharedFolderMemberPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMPOLICIESSharedFolderMemberPolicyTeam:
    return [[self tagName] isEqual:[aSharedFolderMemberPolicy tagName]];
  case DBTEAMPOLICIESSharedFolderMemberPolicyAnyone:
    return [[self tagName] isEqual:[aSharedFolderMemberPolicy tagName]];
  case DBTEAMPOLICIESSharedFolderMemberPolicyOther:
    return [[self tagName] isEqual:[aSharedFolderMemberPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMPOLICIESSharedFolderMemberPolicySerializer

+ (NSDictionary *)serialize:(DBTEAMPOLICIESSharedFolderMemberPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isTeam]) {
    jsonDict[@".tag"] = @"team";
  } else if ([valueObj isAnyone]) {
    jsonDict[@".tag"] = @"anyone";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMPOLICIESSharedFolderMemberPolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"team"]) {
    return [[DBTEAMPOLICIESSharedFolderMemberPolicy alloc] initWithTeam];
  } else if ([tag isEqualToString:@"anyone"]) {
    return [[DBTEAMPOLICIESSharedFolderMemberPolicy alloc] initWithAnyone];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMPOLICIESSharedFolderMemberPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMPOLICIESSharedFolderMemberPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMPOLICIESSharedLinkCreatePolicy.h"

#pragma mark - API Object

@implementation DBTEAMPOLICIESSharedLinkCreatePolicy

#pragma mark - Constructors

- (instancetype)initWithDefaultPublic {
  self = [super init];
  if (self) {
    _tag = DBTEAMPOLICIESSharedLinkCreatePolicyDefaultPublic;
  }
  return self;
}

- (instancetype)initWithDefaultTeamOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMPOLICIESSharedLinkCreatePolicyDefaultTeamOnly;
  }
  return self;
}

- (instancetype)initWithTeamOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMPOLICIESSharedLinkCreatePolicyTeamOnly;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMPOLICIESSharedLinkCreatePolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDefaultPublic {
  return _tag == DBTEAMPOLICIESSharedLinkCreatePolicyDefaultPublic;
}

- (BOOL)isDefaultTeamOnly {
  return _tag == DBTEAMPOLICIESSharedLinkCreatePolicyDefaultTeamOnly;
}

- (BOOL)isTeamOnly {
  return _tag == DBTEAMPOLICIESSharedLinkCreatePolicyTeamOnly;
}

- (BOOL)isOther {
  return _tag == DBTEAMPOLICIESSharedLinkCreatePolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMPOLICIESSharedLinkCreatePolicyDefaultPublic:
    return @"DBTEAMPOLICIESSharedLinkCreatePolicyDefaultPublic";
  case DBTEAMPOLICIESSharedLinkCreatePolicyDefaultTeamOnly:
    return @"DBTEAMPOLICIESSharedLinkCreatePolicyDefaultTeamOnly";
  case DBTEAMPOLICIESSharedLinkCreatePolicyTeamOnly:
    return @"DBTEAMPOLICIESSharedLinkCreatePolicyTeamOnly";
  case DBTEAMPOLICIESSharedLinkCreatePolicyOther:
    return @"DBTEAMPOLICIESSharedLinkCreatePolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMPOLICIESSharedLinkCreatePolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMPOLICIESSharedLinkCreatePolicySerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMPOLICIESSharedLinkCreatePolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMPOLICIESSharedLinkCreatePolicyDefaultPublic:
    result = prime * result + [[self tagName] hash];
  case DBTEAMPOLICIESSharedLinkCreatePolicyDefaultTeamOnly:
    result = prime * result + [[self tagName] hash];
  case DBTEAMPOLICIESSharedLinkCreatePolicyTeamOnly:
    result = prime * result + [[self tagName] hash];
  case DBTEAMPOLICIESSharedLinkCreatePolicyOther:
    result = prime * result + [[self tagName] hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSharedLinkCreatePolicy:other];
}

- (BOOL)isEqualToSharedLinkCreatePolicy:(DBTEAMPOLICIESSharedLinkCreatePolicy *)aSharedLinkCreatePolicy {
  if (self == aSharedLinkCreatePolicy) {
    return YES;
  }
  if (self.tag != aSharedLinkCreatePolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMPOLICIESSharedLinkCreatePolicyDefaultPublic:
    return [[self tagName] isEqual:[aSharedLinkCreatePolicy tagName]];
  case DBTEAMPOLICIESSharedLinkCreatePolicyDefaultTeamOnly:
    return [[self tagName] isEqual:[aSharedLinkCreatePolicy tagName]];
  case DBTEAMPOLICIESSharedLinkCreatePolicyTeamOnly:
    return [[self tagName] isEqual:[aSharedLinkCreatePolicy tagName]];
  case DBTEAMPOLICIESSharedLinkCreatePolicyOther:
    return [[self tagName] isEqual:[aSharedLinkCreatePolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMPOLICIESSharedLinkCreatePolicySerializer

+ (NSDictionary *)serialize:(DBTEAMPOLICIESSharedLinkCreatePolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDefaultPublic]) {
    jsonDict[@".tag"] = @"default_public";
  } else if ([valueObj isDefaultTeamOnly]) {
    jsonDict[@".tag"] = @"default_team_only";
  } else if ([valueObj isTeamOnly]) {
    jsonDict[@".tag"] = @"team_only";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return jsonDict;
}

+ (DBTEAMPOLICIESSharedLinkCreatePolicy *)deserialize:(NSDictionary *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"default_public"]) {
    return [[DBTEAMPOLICIESSharedLinkCreatePolicy alloc] initWithDefaultPublic];
  } else if ([tag isEqualToString:@"default_team_only"]) {
    return [[DBTEAMPOLICIESSharedLinkCreatePolicy alloc] initWithDefaultTeamOnly];
  } else if ([tag isEqualToString:@"team_only"]) {
    return [[DBTEAMPOLICIESSharedLinkCreatePolicy alloc] initWithTeamOnly];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMPOLICIESSharedLinkCreatePolicy alloc] initWithOther];
  } else {
    return [[DBTEAMPOLICIESSharedLinkCreatePolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMPOLICIESEmmState.h"
#import "DBTEAMPOLICIESTeamMemberPolicies.h"
#import "DBTEAMPOLICIESTeamSharingPolicies.h"

#pragma mark - API Object

@implementation DBTEAMPOLICIESTeamMemberPolicies

#pragma mark - Constructors

- (instancetype)initWithSharing:(DBTEAMPOLICIESTeamSharingPolicies *)sharing
                       emmState:(DBTEAMPOLICIESEmmState *)emmState {

  self = [super init];
  if (self) {
    _sharing = sharing;
    _emmState = emmState;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMPOLICIESTeamMemberPoliciesSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMPOLICIESTeamMemberPoliciesSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMPOLICIESTeamMemberPoliciesSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.sharing hash];
  result = prime * result + [self.emmState hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamMemberPolicies:other];
}

- (BOOL)isEqualToTeamMemberPolicies:(DBTEAMPOLICIESTeamMemberPolicies *)aTeamMemberPolicies {
  if (self == aTeamMemberPolicies) {
    return YES;
  }
  if (![self.sharing isEqual:aTeamMemberPolicies.sharing]) {
    return NO;
  }
  if (![self.emmState isEqual:aTeamMemberPolicies.emmState]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMPOLICIESTeamMemberPoliciesSerializer

+ (NSDictionary *)serialize:(DBTEAMPOLICIESTeamMemberPolicies *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"sharing"] = [DBTEAMPOLICIESTeamSharingPoliciesSerializer serialize:valueObj.sharing];
  jsonDict[@"emm_state"] = [DBTEAMPOLICIESEmmStateSerializer serialize:valueObj.emmState];

  return jsonDict;
}

+ (DBTEAMPOLICIESTeamMemberPolicies *)deserialize:(NSDictionary *)valueDict {
  DBTEAMPOLICIESTeamSharingPolicies *sharing =
      [DBTEAMPOLICIESTeamSharingPoliciesSerializer deserialize:valueDict[@"sharing"]];
  DBTEAMPOLICIESEmmState *emmState = [DBTEAMPOLICIESEmmStateSerializer deserialize:valueDict[@"emm_state"]];

  return [[DBTEAMPOLICIESTeamMemberPolicies alloc] initWithSharing:sharing emmState:emmState];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMPOLICIESSharedFolderJoinPolicy.h"
#import "DBTEAMPOLICIESSharedFolderMemberPolicy.h"
#import "DBTEAMPOLICIESSharedLinkCreatePolicy.h"
#import "DBTEAMPOLICIESTeamSharingPolicies.h"

#pragma mark - API Object

@implementation DBTEAMPOLICIESTeamSharingPolicies

#pragma mark - Constructors

- (instancetype)initWithSharedFolderMemberPolicy:(DBTEAMPOLICIESSharedFolderMemberPolicy *)sharedFolderMemberPolicy
                          sharedFolderJoinPolicy:(DBTEAMPOLICIESSharedFolderJoinPolicy *)sharedFolderJoinPolicy
                          sharedLinkCreatePolicy:(DBTEAMPOLICIESSharedLinkCreatePolicy *)sharedLinkCreatePolicy {

  self = [super init];
  if (self) {
    _sharedFolderMemberPolicy = sharedFolderMemberPolicy;
    _sharedFolderJoinPolicy = sharedFolderJoinPolicy;
    _sharedLinkCreatePolicy = sharedLinkCreatePolicy;
  }
  return self;
}

#pragma mark - Serialization methods

+ (NSDictionary *)serialize:(id)instance {
  return [DBTEAMPOLICIESTeamSharingPoliciesSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary *)dict {
  return [DBTEAMPOLICIESTeamSharingPoliciesSerializer deserialize:dict];
}

#pragma mark - Description method

- (NSString *)description {
  return [[DBTEAMPOLICIESTeamSharingPoliciesSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.sharedFolderMemberPolicy hash];
  result = prime * result + [self.sharedFolderJoinPolicy hash];
  result = prime * result + [self.sharedLinkCreatePolicy hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToTeamSharingPolicies:other];
}

- (BOOL)isEqualToTeamSharingPolicies:(DBTEAMPOLICIESTeamSharingPolicies *)aTeamSharingPolicies {
  if (self == aTeamSharingPolicies) {
    return YES;
  }
  if (![self.sharedFolderMemberPolicy isEqual:aTeamSharingPolicies.sharedFolderMemberPolicy]) {
    return NO;
  }
  if (![self.sharedFolderJoinPolicy isEqual:aTeamSharingPolicies.sharedFolderJoinPolicy]) {
    return NO;
  }
  if (![self.sharedLinkCreatePolicy isEqual:aTeamSharingPolicies.sharedLinkCreatePolicy]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMPOLICIESTeamSharingPoliciesSerializer

+ (NSDictionary *)serialize:(DBTEAMPOLICIESTeamSharingPolicies *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"shared_folder_member_policy"] =
      [DBTEAMPOLICIESSharedFolderMemberPolicySerializer serialize:valueObj.sharedFolderMemberPolicy];
  jsonDict[@"shared_folder_join_policy"] =
      [DBTEAMPOLICIESSharedFolderJoinPolicySerializer serialize:valueObj.sharedFolderJoinPolicy];
  jsonDict[@"shared_link_create_policy"] =
      [DBTEAMPOLICIESSharedLinkCreatePolicySerializer serialize:valueObj.sharedLinkCreatePolicy];

  return jsonDict;
}

+ (DBTEAMPOLICIESTeamSharingPolicies *)deserialize:(NSDictionary *)valueDict {
  DBTEAMPOLICIESSharedFolderMemberPolicy *sharedFolderMemberPolicy =
      [DBTEAMPOLICIESSharedFolderMemberPolicySerializer deserialize:valueDict[@"shared_folder_member_policy"]];
  DBTEAMPOLICIESSharedFolderJoinPolicy *sharedFolderJoinPolicy =
      [DBTEAMPOLICIESSharedFolderJoinPolicySerializer deserialize:valueDict[@"shared_folder_join_policy"]];
  DBTEAMPOLICIESSharedLinkCreatePolicy *sharedLinkCreatePolicy =
      [DBTEAMPOLICIESSharedLinkCreatePolicySerializer deserialize:valueDict[@"shared_link_create_policy"]];

  return [[DBTEAMPOLICIESTeamSharingPolicies alloc] initWithSharedFolderMemberPolicy:sharedFolderMemberPolicy
                                                              sharedFolderJoinPolicy:sharedFolderJoinPolicy
                                                              sharedLinkCreatePolicy:sharedLinkCreatePolicy];
}

@end
