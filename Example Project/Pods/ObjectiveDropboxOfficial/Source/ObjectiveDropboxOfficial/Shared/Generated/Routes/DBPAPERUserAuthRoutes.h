///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>

#import "DBTasks.h"

@class DBNilObject;
@class DBPAPERAddMember;
@class DBPAPERAddPaperDocUserMemberResult;
@class DBPAPERAddPaperDocUserResult;
@class DBPAPERCursor;
@class DBPAPERDocLookupError;
@class DBPAPERExportFormat;
@class DBPAPERFolder;
@class DBPAPERFolderSharingPolicyType;
@class DBPAPERFoldersContainingPaperDoc;
@class DBPAPERInviteeInfoWithPermissionLevel;
@class DBPAPERListDocsCursorError;
@class DBPAPERListPaperDocsFilterBy;
@class DBPAPERListPaperDocsResponse;
@class DBPAPERListPaperDocsSortBy;
@class DBPAPERListPaperDocsSortOrder;
@class DBPAPERListUsersCursorError;
@class DBPAPERListUsersOnFolderResponse;
@class DBPAPERListUsersOnPaperDocResponse;
@class DBPAPERPaperApiCursorError;
@class DBPAPERPaperDocExportResult;
@class DBPAPERPaperDocPermissionLevel;
@class DBPAPERSharingPolicy;
@class DBPAPERSharingPublicPolicyType;
@class DBPAPERSharingTeamPolicyType;
@class DBPAPERUserInfoWithPermissionLevel;
@class DBPAPERUserOnPaperDocFilter;
@class DBSHARINGInviteeInfo;
@class DBSHARINGMemberSelector;
@class DBSHARINGUserInfo;

@protocol DBTransportClient;

///
/// Routes for the `Paper` namespace
///

NS_ASSUME_NONNULL_BEGIN

@interface DBPAPERUserAuthRoutes : NSObject

/// An instance of the networking client that each route will use to submit a
/// request.
@property (nonatomic, readonly) id<DBTransportClient> client;

/// Initializes the `DBPAPERUserAuthRoutes` namespace container object with a
/// networking client.
- (instancetype)init:(id<DBTransportClient>)client;

///
/// Marks the given Paper doc as archived. Note: This action can be performed or undone by anyone with edit permissions
/// to the doc.
///
/// @param docId The Paper doc ID.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBPAPERDocLookupError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBPAPERDocLookupError *> *)docsArchive:(NSString *)docId;

///
/// Exports and downloads Paper doc either as HTML or markdown.
///
/// @param overwrite A boolean to set behavior in the event of a naming conflict. `YES` will overwrite conflicting file
/// at destination. `NO` will take no action, resulting in an `NSError` returned to the response handler in the event of
/// a file conflict.
/// @param destination The file url of the desired download output location.
///
/// @return Through the response callback, the caller will receive a `DBPAPERPaperDocExportResult` object on success or
/// a `DBPAPERDocLookupError` object on failure.
///
- (DBDownloadUrlTask<DBPAPERPaperDocExportResult *, DBPAPERDocLookupError *> *)
docsDownloadUrl:(NSString *)docId
   exportFormat:(DBPAPERExportFormat *)exportFormat
      overwrite:(BOOL)overwrite
    destination:(NSURL *)destination;

///
/// Exports and downloads Paper doc either as HTML or markdown.
///
/// @param overwrite A boolean to set behavior in the event of a naming conflict. `YES` will overwrite conflicting file
/// at destination. `NO` will take no action, resulting in an `NSError` returned to the response handler in the event of
/// a file conflict.
/// @param destination The file url of the desired download output location.
/// @param byteOffsetStart For partial file download. Download file beginning from this starting byte position. Must
/// include valid end range value.
/// @param byteOffsetEnd For partial file download. Download file up until this ending byte position. Must include valid
/// start range value.
///
/// @return Through the response callback, the caller will receive a `DBPAPERPaperDocExportResult` object on success or
/// a `DBPAPERDocLookupError` object on failure.
///
- (DBDownloadUrlTask<DBPAPERPaperDocExportResult *, DBPAPERDocLookupError *> *)
docsDownloadUrl:(NSString *)docId
   exportFormat:(DBPAPERExportFormat *)exportFormat
      overwrite:(BOOL)overwrite
    destination:(NSURL *)destination
byteOffsetStart:(NSNumber *)byteOffsetStart
  byteOffsetEnd:(NSNumber *)byteOffsetEnd;

///
/// Exports and downloads Paper doc either as HTML or markdown.
///
///
/// @return Through the response callback, the caller will receive a `DBPAPERPaperDocExportResult` object on success or
/// a `DBPAPERDocLookupError` object on failure.
///
- (DBDownloadDataTask<DBPAPERPaperDocExportResult *, DBPAPERDocLookupError *> *)docsDownloadData:(NSString *)docId
                                                                                    exportFormat:(DBPAPERExportFormat *)
                                                                                                     exportFormat;

///
/// Exports and downloads Paper doc either as HTML or markdown.
///
/// @param byteOffsetStart For partial file download. Download file beginning from this starting byte position. Must
/// include valid end range value.
/// @param byteOffsetEnd For partial file download. Download file up until this ending byte position. Must include valid
/// start range value.
///
/// @return Through the response callback, the caller will receive a `DBPAPERPaperDocExportResult` object on success or
/// a `DBPAPERDocLookupError` object on failure.
///
- (DBDownloadDataTask<DBPAPERPaperDocExportResult *, DBPAPERDocLookupError *> *)
docsDownloadData:(NSString *)docId
    exportFormat:(DBPAPERExportFormat *)exportFormat
 byteOffsetStart:(NSNumber *)byteOffsetStart
   byteOffsetEnd:(NSNumber *)byteOffsetEnd;

///
/// Lists the users who are explicitly invited to the Paper folder in which the Paper doc is contained. For private
/// folders all users (including owner) shared on the folder are listed and for team folders all non-team users shared
/// on the folder are returned.
///
///
/// @return Through the response callback, the caller will receive a `DBPAPERListUsersOnFolderResponse` object on
/// success or a `DBPAPERDocLookupError` object on failure.
///
- (DBRpcTask<DBPAPERListUsersOnFolderResponse *, DBPAPERDocLookupError *> *)docsFolderUsersList:(NSString *)docId;

///
/// Lists the users who are explicitly invited to the Paper folder in which the Paper doc is contained. For private
/// folders all users (including owner) shared on the folder are listed and for team folders all non-team users shared
/// on the folder are returned.
///
/// @param limit Size limit per batch. The maximum number of users that can be retrieved per batch is 1000. Higher value
/// results in invalid arguments error.
///
/// @return Through the response callback, the caller will receive a `DBPAPERListUsersOnFolderResponse` object on
/// success or a `DBPAPERDocLookupError` object on failure.
///
- (DBRpcTask<DBPAPERListUsersOnFolderResponse *, DBPAPERDocLookupError *> *)docsFolderUsersList:(NSString *)docId
                                                                                          limit:(nullable NSNumber *)
                                                                                                    limit;

///
/// Once a cursor has been retrieved from `docsFolderUsersList`, use this to paginate through all users on the Paper
/// folder.
///
/// @param cursor The cursor obtained from `docsFolderUsersList` or `docsFolderUsersListContinue`. Allows for
/// pagination.
///
/// @return Through the response callback, the caller will receive a `DBPAPERListUsersOnFolderResponse` object on
/// success or a `DBPAPERListUsersCursorError` object on failure.
///
- (DBRpcTask<DBPAPERListUsersOnFolderResponse *, DBPAPERListUsersCursorError *> *)
docsFolderUsersListContinue:(NSString *)docId
                     cursor:(NSString *)cursor;

///
/// Retrieves folder information for the given Paper doc. This includes:   - folder sharing policy; permissions for
/// subfolders are set by the top-level folder.   - full 'filepath', i.e. the list of folders (both folderId and
/// folderName) from the root folder to the folder directly containing the Paper doc.  Note: If the Paper doc is not in
/// any folder (aka unfiled) the response will be empty.
///
/// @param docId The Paper doc ID.
///
/// @return Through the response callback, the caller will receive a `DBPAPERFoldersContainingPaperDoc` object on
/// success or a `DBPAPERDocLookupError` object on failure.
///
- (DBRpcTask<DBPAPERFoldersContainingPaperDoc *, DBPAPERDocLookupError *> *)docsGetFolderInfo:(NSString *)docId;

///
/// Return the list of all Paper docs according to the argument specifications. To iterate over through the full
/// pagination, pass the cursor to `docsListContinue`.
///
///
/// @return Through the response callback, the caller will receive a `DBPAPERListPaperDocsResponse` object on success or
/// a `void` object on failure.
///
- (DBRpcTask<DBPAPERListPaperDocsResponse *, DBNilObject *> *)docsList;

///
/// Return the list of all Paper docs according to the argument specifications. To iterate over through the full
/// pagination, pass the cursor to `docsListContinue`.
///
/// @param filterBy Allows user to specify how the Paper docs should be filtered.
/// @param sortBy Allows user to specify how the Paper docs should be sorted.
/// @param sortOrder Allows user to specify the sort order of the result.
/// @param limit Size limit per batch. The maximum number of docs that can be retrieved per batch is 1000. Higher value
/// results in invalid arguments error.
///
/// @return Through the response callback, the caller will receive a `DBPAPERListPaperDocsResponse` object on success or
/// a `void` object on failure.
///
- (DBRpcTask<DBPAPERListPaperDocsResponse *, DBNilObject *> *)docsList:(nullable DBPAPERListPaperDocsFilterBy *)filterBy
                                                                sortBy:(nullable DBPAPERListPaperDocsSortBy *)sortBy
                                                             sortOrder:
                                                                 (nullable DBPAPERListPaperDocsSortOrder *)sortOrder
                                                                 limit:(nullable NSNumber *)limit;

///
/// Once a cursor has been retrieved from `docsList`, use this to paginate through all Paper doc.
///
/// @param cursor The cursor obtained from `docsList` or `docsListContinue`. Allows for pagination.
///
/// @return Through the response callback, the caller will receive a `DBPAPERListPaperDocsResponse` object on success or
/// a `DBPAPERListDocsCursorError` object on failure.
///
- (DBRpcTask<DBPAPERListPaperDocsResponse *, DBPAPERListDocsCursorError *> *)docsListContinue:(NSString *)cursor;

///
/// Permanently deletes the given Paper doc. This operation is final as the doc cannot be recovered.  Note: This action
/// can be performed only by the doc owner.
///
/// @param docId The Paper doc ID.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBPAPERDocLookupError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBPAPERDocLookupError *> *)docsPermanentlyDelete:(NSString *)docId;

///
/// Gets the default sharing policy for the given Paper doc.
///
/// @param docId The Paper doc ID.
///
/// @return Through the response callback, the caller will receive a `DBPAPERSharingPolicy` object on success or a
/// `DBPAPERDocLookupError` object on failure.
///
- (DBRpcTask<DBPAPERSharingPolicy *, DBPAPERDocLookupError *> *)docsSharingPolicyGet:(NSString *)docId;

///
/// Sets the default sharing policy for the given Paper doc. The default 'team_sharing_policy' can be changed only by
/// teams, omit this field for personal accounts.  Note: 'public_sharing_policy' cannot be set to the value 'disabled'
/// because this setting can be changed only via the team admin console.
///
/// @param sharingPolicy The default sharing policy to be set for the Paper doc.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBPAPERDocLookupError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBPAPERDocLookupError *> *)docsSharingPolicySet:(NSString *)docId
                                                              sharingPolicy:(DBPAPERSharingPolicy *)sharingPolicy;

///
/// Allows an owner or editor to add users to a Paper doc or change their permissions using their email address or
/// Dropbox account ID.  Note: The Doc owner's permissions cannot be changed.
///
/// @param members User which should be added to the Paper doc. Specify only email address or Dropbox account ID.
///
/// @return Through the response callback, the caller will receive a `NSArray<DBPAPERAddPaperDocUserMemberResult *>`
/// object on success or a `DBPAPERDocLookupError` object on failure.
///
- (DBRpcTask<NSArray<DBPAPERAddPaperDocUserMemberResult *> *, DBPAPERDocLookupError *> *)
docsUsersAdd:(NSString *)docId
     members:(NSArray<DBPAPERAddMember *> *)members;

///
/// Allows an owner or editor to add users to a Paper doc or change their permissions using their email address or
/// Dropbox account ID.  Note: The Doc owner's permissions cannot be changed.
///
/// @param members User which should be added to the Paper doc. Specify only email address or Dropbox account ID.
/// @param customMessage A personal message that will be emailed to each successfully added member.
/// @param quiet Clients should set this to true if no email message shall be sent to added users.
///
/// @return Through the response callback, the caller will receive a `NSArray<DBPAPERAddPaperDocUserMemberResult *>`
/// object on success or a `DBPAPERDocLookupError` object on failure.
///
- (DBRpcTask<NSArray<DBPAPERAddPaperDocUserMemberResult *> *, DBPAPERDocLookupError *> *)
 docsUsersAdd:(NSString *)docId
      members:(NSArray<DBPAPERAddMember *> *)members
customMessage:(nullable NSString *)customMessage
        quiet:(nullable NSNumber *)quiet;

///
/// Lists all users who visited the Paper doc or users with explicit access. This call excludes users who have been
/// removed. The list is sorted by the date of the visit or the share date. The list will include both users, the
/// explicitly shared ones as well as those who came in using the Paper url link.
///
///
/// @return Through the response callback, the caller will receive a `DBPAPERListUsersOnPaperDocResponse` object on
/// success or a `DBPAPERDocLookupError` object on failure.
///
- (DBRpcTask<DBPAPERListUsersOnPaperDocResponse *, DBPAPERDocLookupError *> *)docsUsersList:(NSString *)docId;

///
/// Lists all users who visited the Paper doc or users with explicit access. This call excludes users who have been
/// removed. The list is sorted by the date of the visit or the share date. The list will include both users, the
/// explicitly shared ones as well as those who came in using the Paper url link.
///
/// @param limit Size limit per batch. The maximum number of users that can be retrieved per batch is 1000. Higher value
/// results in invalid arguments error.
/// @param filterBy Specify this attribute if you want to obtain users that have already accessed the Paper doc.
///
/// @return Through the response callback, the caller will receive a `DBPAPERListUsersOnPaperDocResponse` object on
/// success or a `DBPAPERDocLookupError` object on failure.
///
- (DBRpcTask<DBPAPERListUsersOnPaperDocResponse *, DBPAPERDocLookupError *> *)
docsUsersList:(NSString *)docId
        limit:(nullable NSNumber *)limit
     filterBy:(nullable DBPAPERUserOnPaperDocFilter *)filterBy;

///
/// Once a cursor has been retrieved from `docsUsersList`, use this to paginate through all users on the Paper doc.
///
/// @param cursor The cursor obtained from `docsUsersList` or `docsUsersListContinue`. Allows for pagination.
///
/// @return Through the response callback, the caller will receive a `DBPAPERListUsersOnPaperDocResponse` object on
/// success or a `DBPAPERListUsersCursorError` object on failure.
///
- (DBRpcTask<DBPAPERListUsersOnPaperDocResponse *, DBPAPERListUsersCursorError *> *)
docsUsersListContinue:(NSString *)docId
               cursor:(NSString *)cursor;

///
/// Allows an owner or editor to remove users from a Paper doc using their email address or Dropbox account ID.  Note:
/// Doc owner cannot be removed.
///
/// @param member User which should be removed from the Paper doc. Specify only email address or Dropbox account ID.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBPAPERDocLookupError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBPAPERDocLookupError *> *)docsUsersRemove:(NSString *)docId
                                                                member:(DBSHARINGMemberSelector *)member;

@end

NS_ASSUME_NONNULL_END
