///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import <Foundation/Foundation.h>

#import "DBTasks.h"

@class DBASYNCLaunchEmptyResult;
@class DBASYNCPollEmptyResult;
@class DBASYNCPollError;
@class DBNilObject;
@class DBPROPERTIESGetPropertyTemplateResult;
@class DBPROPERTIESListPropertyTemplateIds;
@class DBPROPERTIESModifyPropertyTemplateError;
@class DBPROPERTIESPropertyFieldTemplate;
@class DBPROPERTIESPropertyTemplateError;
@class DBPROPERTIESPropertyType;
@class DBTEAMActiveWebSession;
@class DBTEAMAddPropertyTemplateResult;
@class DBTEAMAdminTier;
@class DBTEAMApiApp;
@class DBTEAMCOMMONGroupManagementType;
@class DBTEAMCOMMONGroupSummary;
@class DBTEAMDateRangeError;
@class DBTEAMDesktopClientSession;
@class DBTEAMDeviceSessionArg;
@class DBTEAMDevicesActive;
@class DBTEAMFeature;
@class DBTEAMFeatureValue;
@class DBTEAMFeaturesGetValuesBatchError;
@class DBTEAMFeaturesGetValuesBatchResult;
@class DBTEAMGetActivityReport;
@class DBTEAMGetDevicesReport;
@class DBTEAMGetMembershipReport;
@class DBTEAMGetStorageReport;
@class DBTEAMGroupAccessType;
@class DBTEAMGroupCreateError;
@class DBTEAMGroupDeleteError;
@class DBTEAMGroupFullInfo;
@class DBTEAMGroupMemberInfo;
@class DBTEAMGroupMemberSetAccessTypeError;
@class DBTEAMGroupMembersAddError;
@class DBTEAMGroupMembersChangeResult;
@class DBTEAMGroupMembersRemoveError;
@class DBTEAMGroupSelector;
@class DBTEAMGroupSelectorError;
@class DBTEAMGroupUpdateError;
@class DBTEAMGroupsGetInfoError;
@class DBTEAMGroupsGetInfoItem;
@class DBTEAMGroupsListContinueError;
@class DBTEAMGroupsListResult;
@class DBTEAMGroupsMembersListContinueError;
@class DBTEAMGroupsMembersListResult;
@class DBTEAMGroupsPollError;
@class DBTEAMGroupsSelector;
@class DBTEAMListMemberAppsError;
@class DBTEAMListMemberAppsResult;
@class DBTEAMListMemberDevicesError;
@class DBTEAMListMemberDevicesResult;
@class DBTEAMListMembersAppsError;
@class DBTEAMListMembersAppsResult;
@class DBTEAMListMembersDevicesError;
@class DBTEAMListMembersDevicesResult;
@class DBTEAMListTeamAppsError;
@class DBTEAMListTeamAppsResult;
@class DBTEAMListTeamDevicesError;
@class DBTEAMListTeamDevicesResult;
@class DBTEAMMemberAccess;
@class DBTEAMMemberAddArg;
@class DBTEAMMemberAddResult;
@class DBTEAMMemberDevices;
@class DBTEAMMemberLinkedApps;
@class DBTEAMMembersAddJobStatus;
@class DBTEAMMembersAddLaunch;
@class DBTEAMMembersGetInfoError;
@class DBTEAMMembersGetInfoItem;
@class DBTEAMMembersListContinueError;
@class DBTEAMMembersListError;
@class DBTEAMMembersListResult;
@class DBTEAMMembersRecoverError;
@class DBTEAMMembersRemoveError;
@class DBTEAMMembersSendWelcomeError;
@class DBTEAMMembersSetPermissionsError;
@class DBTEAMMembersSetPermissionsResult;
@class DBTEAMMembersSetProfileError;
@class DBTEAMMembersSuspendError;
@class DBTEAMMembersUnsuspendError;
@class DBTEAMMobileClientSession;
@class DBTEAMPOLICIESTeamMemberPolicies;
@class DBTEAMRevokeDesktopClientArg;
@class DBTEAMRevokeDeviceSessionArg;
@class DBTEAMRevokeDeviceSessionBatchError;
@class DBTEAMRevokeDeviceSessionBatchResult;
@class DBTEAMRevokeDeviceSessionError;
@class DBTEAMRevokeDeviceSessionStatus;
@class DBTEAMRevokeLinkedApiAppArg;
@class DBTEAMRevokeLinkedAppBatchError;
@class DBTEAMRevokeLinkedAppBatchResult;
@class DBTEAMRevokeLinkedAppError;
@class DBTEAMRevokeLinkedAppStatus;
@class DBTEAMStorageBucket;
@class DBTEAMTeamFolderAccessError;
@class DBTEAMTeamFolderActivateError;
@class DBTEAMTeamFolderArchiveError;
@class DBTEAMTeamFolderArchiveJobStatus;
@class DBTEAMTeamFolderArchiveLaunch;
@class DBTEAMTeamFolderCreateError;
@class DBTEAMTeamFolderGetInfoItem;
@class DBTEAMTeamFolderInvalidStatusError;
@class DBTEAMTeamFolderListContinueError;
@class DBTEAMTeamFolderListError;
@class DBTEAMTeamFolderListResult;
@class DBTEAMTeamFolderMetadata;
@class DBTEAMTeamFolderPermanentlyDeleteError;
@class DBTEAMTeamFolderRenameError;
@class DBTEAMTeamFolderStatus;
@class DBTEAMTeamGetInfoResult;
@class DBTEAMTeamMemberInfo;
@class DBTEAMTeamMemberProfile;
@class DBTEAMTokenGetAuthenticatedAdminError;
@class DBTEAMTokenGetAuthenticatedAdminResult;
@class DBTEAMUpdatePropertyTemplateResult;
@class DBTEAMUserSelectorArg;

@protocol DBTransportClient;

///
/// Routes for the `Team` namespace
///

NS_ASSUME_NONNULL_BEGIN

@interface DBTEAMTeamAuthRoutes : NSObject

/// An instance of the networking client that each route will use to submit a
/// request.
@property (nonatomic, readonly) id<DBTransportClient> client;

/// Initializes the `DBTEAMTeamAuthRoutes` namespace container object with a
/// networking client.
- (instancetype)init:(id<DBTransportClient>)client;

///
/// List all device sessions of a team's member.
///
/// @param teamMemberId The team's member id
///
/// @return Through the response callback, the caller will receive a `DBTEAMListMemberDevicesResult` object on success
/// or a `DBTEAMListMemberDevicesError` object on failure.
///
- (DBRpcTask<DBTEAMListMemberDevicesResult *, DBTEAMListMemberDevicesError *> *)devicesListMemberDevices:
    (NSString *)teamMemberId;

///
/// List all device sessions of a team's member.
///
/// @param teamMemberId The team's member id
/// @param includeWebSessions Whether to list web sessions of the team's member
/// @param includeDesktopClients Whether to list linked desktop devices of the team's member
/// @param includeMobileClients Whether to list linked mobile devices of the team's member
///
/// @return Through the response callback, the caller will receive a `DBTEAMListMemberDevicesResult` object on success
/// or a `DBTEAMListMemberDevicesError` object on failure.
///
- (DBRpcTask<DBTEAMListMemberDevicesResult *, DBTEAMListMemberDevicesError *> *)
devicesListMemberDevices:(NSString *)teamMemberId
      includeWebSessions:(nullable NSNumber *)includeWebSessions
   includeDesktopClients:(nullable NSNumber *)includeDesktopClients
    includeMobileClients:(nullable NSNumber *)includeMobileClients;

///
/// List all device sessions of a team.
///
///
/// @return Through the response callback, the caller will receive a `DBTEAMListMembersDevicesResult` object on success
/// or a `DBTEAMListMembersDevicesError` object on failure.
///
- (DBRpcTask<DBTEAMListMembersDevicesResult *, DBTEAMListMembersDevicesError *> *)devicesListMembersDevices;

///
/// List all device sessions of a team.
///
/// @param cursor At the first call to the `devicesListMembersDevices` the cursor shouldn't be passed. Then, if the
/// result of the call includes a cursor, the following requests should include the received cursors in order to receive
/// the next sub list of team devices
/// @param includeWebSessions Whether to list web sessions of the team members
/// @param includeDesktopClients Whether to list desktop clients of the team members
/// @param includeMobileClients Whether to list mobile clients of the team members
///
/// @return Through the response callback, the caller will receive a `DBTEAMListMembersDevicesResult` object on success
/// or a `DBTEAMListMembersDevicesError` object on failure.
///
- (DBRpcTask<DBTEAMListMembersDevicesResult *, DBTEAMListMembersDevicesError *> *)
devicesListMembersDevices:(nullable NSString *)cursor
       includeWebSessions:(nullable NSNumber *)includeWebSessions
    includeDesktopClients:(nullable NSNumber *)includeDesktopClients
     includeMobileClients:(nullable NSNumber *)includeMobileClients;

///
/// DEPRECATED: List all device sessions of a team.
///
///
/// @return Through the response callback, the caller will receive a `DBTEAMListTeamDevicesResult` object on success or
/// a `DBTEAMListTeamDevicesError` object on failure.
///
- (DBRpcTask<DBTEAMListTeamDevicesResult *, DBTEAMListTeamDevicesError *> *)devicesListTeamDevices
    __deprecated_msg("devices/list_team_devices is deprecated. Use devices/list_members_devices.");

///
/// DEPRECATED: List all device sessions of a team.
///
/// @param cursor At the first call to the `devicesListTeamDevices` the cursor shouldn't be passed. Then, if the result
/// of the call includes a cursor, the following requests should include the received cursors in order to receive the
/// next sub list of team devices
/// @param includeWebSessions Whether to list web sessions of the team members
/// @param includeDesktopClients Whether to list desktop clients of the team members
/// @param includeMobileClients Whether to list mobile clients of the team members
///
/// @return Through the response callback, the caller will receive a `DBTEAMListTeamDevicesResult` object on success or
/// a `DBTEAMListTeamDevicesError` object on failure.
///
- (DBRpcTask<DBTEAMListTeamDevicesResult *, DBTEAMListTeamDevicesError *> *)
devicesListTeamDevices:(nullable NSString *)cursor
    includeWebSessions:(nullable NSNumber *)includeWebSessions
 includeDesktopClients:(nullable NSNumber *)includeDesktopClients
  includeMobileClients:(nullable NSNumber *)includeMobileClients
    __deprecated_msg("devices/list_team_devices is deprecated. Use devices/list_members_devices.");

///
/// Revoke a device session of a team's member
///
/// @param revokeDeviceSessionArg The RevokeDeviceSessionArg union
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBTEAMRevokeDeviceSessionError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBTEAMRevokeDeviceSessionError *> *)devicesRevokeDeviceSession:
    (DBTEAMRevokeDeviceSessionArg *)revokeDeviceSessionArg;

///
/// Revoke a list of device sessions of team members
///
///
/// @return Through the response callback, the caller will receive a `DBTEAMRevokeDeviceSessionBatchResult` object on
/// success or a `DBTEAMRevokeDeviceSessionBatchError` object on failure.
///
- (DBRpcTask<DBTEAMRevokeDeviceSessionBatchResult *, DBTEAMRevokeDeviceSessionBatchError *> *)
devicesRevokeDeviceSessionBatch:(NSArray<DBTEAMRevokeDeviceSessionArg *> *)revokeDevices;

///
/// Get the values for one or more featues. This route allows you to check your account's capability for what feature
/// you can access or what value you have for certain features. Permission : Team information.
///
/// @param features A list of features in Feature. If the list is empty, this route will return
/// FeaturesGetValuesBatchError.
///
/// @return Through the response callback, the caller will receive a `DBTEAMFeaturesGetValuesBatchResult` object on
/// success or a `DBTEAMFeaturesGetValuesBatchError` object on failure.
///
- (DBRpcTask<DBTEAMFeaturesGetValuesBatchResult *, DBTEAMFeaturesGetValuesBatchError *> *)featuresGetValues:
    (NSArray<DBTEAMFeature *> *)features;

///
/// Retrieves information about a team.
///
///
/// @return Through the response callback, the caller will receive a `DBTEAMTeamGetInfoResult` object on success or a
/// `void` object on failure.
///
- (DBRpcTask<DBTEAMTeamGetInfoResult *, DBNilObject *> *)getInfo;

///
/// Creates a new, empty group, with a requested name. Permission : Team member management.
///
/// @param groupName Group name.
///
/// @return Through the response callback, the caller will receive a `DBTEAMGroupFullInfo` object on success or a
/// `DBTEAMGroupCreateError` object on failure.
///
- (DBRpcTask<DBTEAMGroupFullInfo *, DBTEAMGroupCreateError *> *)groupsCreate:(NSString *)groupName;

///
/// Creates a new, empty group, with a requested name. Permission : Team member management.
///
/// @param groupName Group name.
/// @param groupExternalId The creator of a team can associate an arbitrary external ID to the group.
/// @param groupManagementType Whether the team can be managed by selected users, or only by team admins.
///
/// @return Through the response callback, the caller will receive a `DBTEAMGroupFullInfo` object on success or a
/// `DBTEAMGroupCreateError` object on failure.
///
- (DBRpcTask<DBTEAMGroupFullInfo *, DBTEAMGroupCreateError *> *)
       groupsCreate:(NSString *)groupName
    groupExternalId:(nullable NSString *)groupExternalId
groupManagementType:(nullable DBTEAMCOMMONGroupManagementType *)groupManagementType;

///
/// Deletes a group. The group is deleted immediately. However the revoking of group-owned resources may take additional
/// time. Use the `groupsJobStatusGet` to determine whether this process has completed. Permission : Team member
/// management.
///
/// @param groupSelector Argument for selecting a single group, either by group_id or by external group ID.
///
/// @return Through the response callback, the caller will receive a `DBASYNCLaunchEmptyResult` object on success or a
/// `DBTEAMGroupDeleteError` object on failure.
///
- (DBRpcTask<DBASYNCLaunchEmptyResult *, DBTEAMGroupDeleteError *> *)groupsDelete:(DBTEAMGroupSelector *)groupSelector;

///
/// Retrieves information about one or more groups. Note that the optional field  `members` in `DBTEAMGroupFullInfo` is
/// not returned for system-managed groups. Permission : Team Information.
///
/// @param groupsSelector Argument for selecting a list of groups, either by group_ids, or external group IDs.
///
/// @return Through the response callback, the caller will receive a `NSArray<DBTEAMGroupsGetInfoItem *>` object on
/// success or a `DBTEAMGroupsGetInfoError` object on failure.
///
- (DBRpcTask<NSArray<DBTEAMGroupsGetInfoItem *> *, DBTEAMGroupsGetInfoError *> *)groupsGetInfo:
    (DBTEAMGroupsSelector *)groupsSelector;

///
/// Once an async_job_id is returned from `groupsDelete`, `groupsMembersAdd` , or `groupsMembersRemove` use this method
/// to poll the status of granting/revoking group members' access to group-owned resources. Permission : Team member
/// management.
///
/// @param asyncJobId Id of the asynchronous job. This is the value of a response returned from the method that launched
/// the job.
///
/// @return Through the response callback, the caller will receive a `DBASYNCPollEmptyResult` object on success or a
/// `DBTEAMGroupsPollError` object on failure.
///
- (DBRpcTask<DBASYNCPollEmptyResult *, DBTEAMGroupsPollError *> *)groupsJobStatusGet:(NSString *)asyncJobId;

///
/// Lists groups on a team. Permission : Team Information.
///
///
/// @return Through the response callback, the caller will receive a `DBTEAMGroupsListResult` object on success or a
/// `void` object on failure.
///
- (DBRpcTask<DBTEAMGroupsListResult *, DBNilObject *> *)groupsList;

///
/// Lists groups on a team. Permission : Team Information.
///
/// @param limit Number of results to return per call.
///
/// @return Through the response callback, the caller will receive a `DBTEAMGroupsListResult` object on success or a
/// `void` object on failure.
///
- (DBRpcTask<DBTEAMGroupsListResult *, DBNilObject *> *)groupsList:(nullable NSNumber *)limit;

///
/// Once a cursor has been retrieved from `groupsList`, use this to paginate through all groups. Permission : Team
/// Information.
///
/// @param cursor Indicates from what point to get the next set of groups.
///
/// @return Through the response callback, the caller will receive a `DBTEAMGroupsListResult` object on success or a
/// `DBTEAMGroupsListContinueError` object on failure.
///
- (DBRpcTask<DBTEAMGroupsListResult *, DBTEAMGroupsListContinueError *> *)groupsListContinue:(NSString *)cursor;

///
/// Adds members to a group. The members are added immediately. However the granting of group-owned resources may take
/// additional time. Use the `groupsJobStatusGet` to determine whether this process has completed. Permission : Team
/// member management.
///
/// @param group Group to which users will be added.
/// @param members List of users to be added to the group.
///
/// @return Through the response callback, the caller will receive a `DBTEAMGroupMembersChangeResult` object on success
/// or a `DBTEAMGroupMembersAddError` object on failure.
///
- (DBRpcTask<DBTEAMGroupMembersChangeResult *, DBTEAMGroupMembersAddError *> *)
groupsMembersAdd:(DBTEAMGroupSelector *)group
         members:(NSArray<DBTEAMMemberAccess *> *)members;

///
/// Adds members to a group. The members are added immediately. However the granting of group-owned resources may take
/// additional time. Use the `groupsJobStatusGet` to determine whether this process has completed. Permission : Team
/// member management.
///
/// @param group Group to which users will be added.
/// @param members List of users to be added to the group.
///
/// @return Through the response callback, the caller will receive a `DBTEAMGroupMembersChangeResult` object on success
/// or a `DBTEAMGroupMembersAddError` object on failure.
///
- (DBRpcTask<DBTEAMGroupMembersChangeResult *, DBTEAMGroupMembersAddError *> *)
groupsMembersAdd:(DBTEAMGroupSelector *)group
         members:(NSArray<DBTEAMMemberAccess *> *)members
   returnMembers:(nullable NSNumber *)returnMembers;

///
/// Lists members of a group. Permission : Team Information.
///
/// @param group The group whose members are to be listed.
///
/// @return Through the response callback, the caller will receive a `DBTEAMGroupsMembersListResult` object on success
/// or a `DBTEAMGroupSelectorError` object on failure.
///
- (DBRpcTask<DBTEAMGroupsMembersListResult *, DBTEAMGroupSelectorError *> *)groupsMembersList:
    (DBTEAMGroupSelector *)group;

///
/// Lists members of a group. Permission : Team Information.
///
/// @param group The group whose members are to be listed.
/// @param limit Number of results to return per call.
///
/// @return Through the response callback, the caller will receive a `DBTEAMGroupsMembersListResult` object on success
/// or a `DBTEAMGroupSelectorError` object on failure.
///
- (DBRpcTask<DBTEAMGroupsMembersListResult *, DBTEAMGroupSelectorError *> *)
groupsMembersList:(DBTEAMGroupSelector *)group
            limit:(nullable NSNumber *)limit;

///
/// Once a cursor has been retrieved from `groupsMembersList`, use this to paginate through all members of the group.
/// Permission : Team information.
///
/// @param cursor Indicates from what point to get the next set of groups.
///
/// @return Through the response callback, the caller will receive a `DBTEAMGroupsMembersListResult` object on success
/// or a `DBTEAMGroupsMembersListContinueError` object on failure.
///
- (DBRpcTask<DBTEAMGroupsMembersListResult *, DBTEAMGroupsMembersListContinueError *> *)groupsMembersListContinue:
    (NSString *)cursor;

///
/// Removes members from a group. The members are removed immediately. However the revoking of group-owned resources may
/// take additional time. Use the `groupsJobStatusGet` to determine whether this process has completed. This method
/// permits removing the only owner of a group, even in cases where this is not possible via the web client. Permission
/// : Team member management.
///
/// @param group Group from which users will be removed.
/// @param users List of users to be removed from the group.
///
/// @return Through the response callback, the caller will receive a `DBTEAMGroupMembersChangeResult` object on success
/// or a `DBTEAMGroupMembersRemoveError` object on failure.
///
- (DBRpcTask<DBTEAMGroupMembersChangeResult *, DBTEAMGroupMembersRemoveError *> *)
groupsMembersRemove:(DBTEAMGroupSelector *)group
              users:(NSArray<DBTEAMUserSelectorArg *> *)users;

///
/// Removes members from a group. The members are removed immediately. However the revoking of group-owned resources may
/// take additional time. Use the `groupsJobStatusGet` to determine whether this process has completed. This method
/// permits removing the only owner of a group, even in cases where this is not possible via the web client. Permission
/// : Team member management.
///
/// @param group Group from which users will be removed.
/// @param users List of users to be removed from the group.
///
/// @return Through the response callback, the caller will receive a `DBTEAMGroupMembersChangeResult` object on success
/// or a `DBTEAMGroupMembersRemoveError` object on failure.
///
- (DBRpcTask<DBTEAMGroupMembersChangeResult *, DBTEAMGroupMembersRemoveError *> *)
groupsMembersRemove:(DBTEAMGroupSelector *)group
              users:(NSArray<DBTEAMUserSelectorArg *> *)users
      returnMembers:(nullable NSNumber *)returnMembers;

///
/// Sets a member's access type in a group. Permission : Team member management.
///
/// @param accessType New group access type the user will have.
///
/// @return Through the response callback, the caller will receive a `NSArray<DBTEAMGroupsGetInfoItem *>` object on
/// success or a `DBTEAMGroupMemberSetAccessTypeError` object on failure.
///
- (DBRpcTask<NSArray<DBTEAMGroupsGetInfoItem *> *, DBTEAMGroupMemberSetAccessTypeError *> *)
groupsMembersSetAccessType:(DBTEAMGroupSelector *)group
                      user:(DBTEAMUserSelectorArg *)user
                accessType:(DBTEAMGroupAccessType *)accessType;

///
/// Sets a member's access type in a group. Permission : Team member management.
///
/// @param accessType New group access type the user will have.
/// @param returnMembers Whether to return the list of members in the group.  Note that the default value will cause all
/// the group members  to be returned in the response. This may take a long time for large groups.
///
/// @return Through the response callback, the caller will receive a `NSArray<DBTEAMGroupsGetInfoItem *>` object on
/// success or a `DBTEAMGroupMemberSetAccessTypeError` object on failure.
///
- (DBRpcTask<NSArray<DBTEAMGroupsGetInfoItem *> *, DBTEAMGroupMemberSetAccessTypeError *> *)
groupsMembersSetAccessType:(DBTEAMGroupSelector *)group
                      user:(DBTEAMUserSelectorArg *)user
                accessType:(DBTEAMGroupAccessType *)accessType
             returnMembers:(nullable NSNumber *)returnMembers;

///
/// Updates a group's name and/or external ID. Permission : Team member management.
///
/// @param group Specify a group.
///
/// @return Through the response callback, the caller will receive a `DBTEAMGroupFullInfo` object on success or a
/// `DBTEAMGroupUpdateError` object on failure.
///
- (DBRpcTask<DBTEAMGroupFullInfo *, DBTEAMGroupUpdateError *> *)groupsUpdate:(DBTEAMGroupSelector *)group;

///
/// Updates a group's name and/or external ID. Permission : Team member management.
///
/// @param group Specify a group.
/// @param dNewGroupName Optional argument. Set group name to this if provided.
/// @param dNewGroupExternalId Optional argument. New group external ID. If the argument is None, the group's
/// external_id won't be updated. If the argument is empty string, the group's external id will be cleared.
/// @param dNewGroupManagementType Set new group management type, if provided.
///
/// @return Through the response callback, the caller will receive a `DBTEAMGroupFullInfo` object on success or a
/// `DBTEAMGroupUpdateError` object on failure.
///
- (DBRpcTask<DBTEAMGroupFullInfo *, DBTEAMGroupUpdateError *> *)
           groupsUpdate:(DBTEAMGroupSelector *)group
          returnMembers:(nullable NSNumber *)returnMembers
          dNewGroupName:(nullable NSString *)dNewGroupName
    dNewGroupExternalId:(nullable NSString *)dNewGroupExternalId
dNewGroupManagementType:(nullable DBTEAMCOMMONGroupManagementType *)dNewGroupManagementType;

///
/// List all linked applications of the team member. Note, this endpoint does not list any team-linked applications.
///
/// @param teamMemberId The team member id
///
/// @return Through the response callback, the caller will receive a `DBTEAMListMemberAppsResult` object on success or a
/// `DBTEAMListMemberAppsError` object on failure.
///
- (DBRpcTask<DBTEAMListMemberAppsResult *, DBTEAMListMemberAppsError *> *)linkedAppsListMemberLinkedApps:
    (NSString *)teamMemberId;

///
/// List all applications linked to the team members' accounts. Note, this endpoint does not list any team-linked
/// applications.
///
///
/// @return Through the response callback, the caller will receive a `DBTEAMListMembersAppsResult` object on success or
/// a `DBTEAMListMembersAppsError` object on failure.
///
- (DBRpcTask<DBTEAMListMembersAppsResult *, DBTEAMListMembersAppsError *> *)linkedAppsListMembersLinkedApps;

///
/// List all applications linked to the team members' accounts. Note, this endpoint does not list any team-linked
/// applications.
///
/// @param cursor At the first call to the `linkedAppsListMembersLinkedApps` the cursor shouldn't be passed. Then, if
/// the result of the call includes a cursor, the following requests should include the received cursors in order to
/// receive the next sub list of the team applications
///
/// @return Through the response callback, the caller will receive a `DBTEAMListMembersAppsResult` object on success or
/// a `DBTEAMListMembersAppsError` object on failure.
///
- (DBRpcTask<DBTEAMListMembersAppsResult *, DBTEAMListMembersAppsError *> *)linkedAppsListMembersLinkedApps:
    (nullable NSString *)cursor;

///
/// DEPRECATED: List all applications linked to the team members' accounts. Note, this endpoint doesn't list any
/// team-linked applications.
///
///
/// @return Through the response callback, the caller will receive a `DBTEAMListTeamAppsResult` object on success or a
/// `DBTEAMListTeamAppsError` object on failure.
///
- (DBRpcTask<DBTEAMListTeamAppsResult *, DBTEAMListTeamAppsError *> *)linkedAppsListTeamLinkedApps
    __deprecated_msg("linked_apps/list_team_linked_apps is deprecated. Use linked_apps/list_members_linked_apps.");

///
/// DEPRECATED: List all applications linked to the team members' accounts. Note, this endpoint doesn't list any
/// team-linked applications.
///
/// @param cursor At the first call to the `linkedAppsListTeamLinkedApps` the cursor shouldn't be passed. Then, if the
/// result of the call includes a cursor, the following requests should include the received cursors in order to receive
/// the next sub list of the team applications
///
/// @return Through the response callback, the caller will receive a `DBTEAMListTeamAppsResult` object on success or a
/// `DBTEAMListTeamAppsError` object on failure.
///
- (DBRpcTask<DBTEAMListTeamAppsResult *, DBTEAMListTeamAppsError *> *)linkedAppsListTeamLinkedApps:
    (nullable NSString *)cursor
    __deprecated_msg("linked_apps/list_team_linked_apps is deprecated. Use linked_apps/list_members_linked_apps.");

///
/// Revoke a linked application of the team member
///
/// @param appId The application's unique id
/// @param teamMemberId The unique id of the member owning the device
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBTEAMRevokeLinkedAppError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBTEAMRevokeLinkedAppError *> *)linkedAppsRevokeLinkedApp:(NSString *)appId
                                                                         teamMemberId:(NSString *)teamMemberId;

///
/// Revoke a linked application of the team member
///
/// @param appId The application's unique id
/// @param teamMemberId The unique id of the member owning the device
/// @param keepAppFolder Whether to keep the application dedicated folder (in case the application uses  one)
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBTEAMRevokeLinkedAppError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBTEAMRevokeLinkedAppError *> *)linkedAppsRevokeLinkedApp:(NSString *)appId
                                                                         teamMemberId:(NSString *)teamMemberId
                                                                        keepAppFolder:
                                                                            (nullable NSNumber *)keepAppFolder;

///
/// Revoke a list of linked applications of the team members
///
///
/// @return Through the response callback, the caller will receive a `DBTEAMRevokeLinkedAppBatchResult` object on
/// success or a `DBTEAMRevokeLinkedAppBatchError` object on failure.
///
- (DBRpcTask<DBTEAMRevokeLinkedAppBatchResult *, DBTEAMRevokeLinkedAppBatchError *> *)linkedAppsRevokeLinkedAppBatch:
    (NSArray<DBTEAMRevokeLinkedApiAppArg *> *)revokeLinkedApp;

///
/// Adds members to a team. Permission : Team member management A maximum of 20 members can be specified in a single
/// call. If no Dropbox account exists with the email address specified, a new Dropbox account will be created with the
/// given email address, and that account will be invited to the team. If a personal Dropbox account exists with the
/// email address specified in the call, this call will create a placeholder Dropbox account for the user on the team
/// and send an email inviting the user to migrate their existing personal account onto the team. Team member management
/// apps are required to set an initial given_name and surname for a user to use in the team invitation and for 'Perform
/// as team member' actions taken on the user before they become 'active'.
///
/// @param dNewMembers Details of new members to be added to the team.
///
/// @return Through the response callback, the caller will receive a `DBTEAMMembersAddLaunch` object on success or a
/// `void` object on failure.
///
- (DBRpcTask<DBTEAMMembersAddLaunch *, DBNilObject *> *)membersAdd:(NSArray<DBTEAMMemberAddArg *> *)dNewMembers;

///
/// Adds members to a team. Permission : Team member management A maximum of 20 members can be specified in a single
/// call. If no Dropbox account exists with the email address specified, a new Dropbox account will be created with the
/// given email address, and that account will be invited to the team. If a personal Dropbox account exists with the
/// email address specified in the call, this call will create a placeholder Dropbox account for the user on the team
/// and send an email inviting the user to migrate their existing personal account onto the team. Team member management
/// apps are required to set an initial given_name and surname for a user to use in the team invitation and for 'Perform
/// as team member' actions taken on the user before they become 'active'.
///
/// @param dNewMembers Details of new members to be added to the team.
/// @param forceAsync Whether to force the add to happen asynchronously.
///
/// @return Through the response callback, the caller will receive a `DBTEAMMembersAddLaunch` object on success or a
/// `void` object on failure.
///
- (DBRpcTask<DBTEAMMembersAddLaunch *, DBNilObject *> *)membersAdd:(NSArray<DBTEAMMemberAddArg *> *)dNewMembers
                                                        forceAsync:(nullable NSNumber *)forceAsync;

///
/// Once an async_job_id is returned from `membersAdd` , use this to poll the status of the asynchronous request.
/// Permission : Team member management
///
/// @param asyncJobId Id of the asynchronous job. This is the value of a response returned from the method that launched
/// the job.
///
/// @return Through the response callback, the caller will receive a `DBTEAMMembersAddJobStatus` object on success or a
/// `DBASYNCPollError` object on failure.
///
- (DBRpcTask<DBTEAMMembersAddJobStatus *, DBASYNCPollError *> *)membersAddJobStatusGet:(NSString *)asyncJobId;

///
/// Returns information about multiple team members. Permission : Team information This endpoint will return
/// `idNotFound` in `DBTEAMMembersGetInfoItem`, for IDs (or emails) that cannot be matched to a valid team member.
///
/// @param members List of team members.
///
/// @return Through the response callback, the caller will receive a `NSArray<DBTEAMMembersGetInfoItem *>` object on
/// success or a `DBTEAMMembersGetInfoError` object on failure.
///
- (DBRpcTask<NSArray<DBTEAMMembersGetInfoItem *> *, DBTEAMMembersGetInfoError *> *)membersGetInfo:
    (NSArray<DBTEAMUserSelectorArg *> *)members;

///
/// Lists members of a team. Permission : Team information
///
///
/// @return Through the response callback, the caller will receive a `DBTEAMMembersListResult` object on success or a
/// `DBTEAMMembersListError` object on failure.
///
- (DBRpcTask<DBTEAMMembersListResult *, DBTEAMMembersListError *> *)membersList;

///
/// Lists members of a team. Permission : Team information
///
/// @param limit Number of results to return per call.
/// @param includeRemoved Whether to return removed members.
///
/// @return Through the response callback, the caller will receive a `DBTEAMMembersListResult` object on success or a
/// `DBTEAMMembersListError` object on failure.
///
- (DBRpcTask<DBTEAMMembersListResult *, DBTEAMMembersListError *> *)membersList:(nullable NSNumber *)limit
                                                                 includeRemoved:(nullable NSNumber *)includeRemoved;

///
/// Once a cursor has been retrieved from `membersList`, use this to paginate through all team members. Permission :
/// Team information
///
/// @param cursor Indicates from what point to get the next set of members.
///
/// @return Through the response callback, the caller will receive a `DBTEAMMembersListResult` object on success or a
/// `DBTEAMMembersListContinueError` object on failure.
///
- (DBRpcTask<DBTEAMMembersListResult *, DBTEAMMembersListContinueError *> *)membersListContinue:(NSString *)cursor;

///
/// Recover a deleted member. Permission : Team member management Exactly one of team_member_id, email, or external_id
/// must be provided to identify the user account.
///
/// @param user Identity of user to recover.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBTEAMMembersRecoverError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBTEAMMembersRecoverError *> *)membersRecover:(DBTEAMUserSelectorArg *)user;

///
/// Removes a member from a team. Permission : Team member management Exactly one of team_member_id, email, or
/// external_id must be provided to identify the user account. Accounts can be recovered via `membersRecover` for a 7
/// day period or until the account has been permanently deleted or transferred to another account (whichever comes
/// first). Calling `membersAdd` while a user is still recoverable on your team will return with `userAlreadyOnTeam` in
/// `DBTEAMMemberAddResult`. This endpoint may initiate an asynchronous job. To obtain the final result of the job, the
/// client should periodically poll `membersRemoveJobStatusGet`.
///
///
/// @return Through the response callback, the caller will receive a `DBASYNCLaunchEmptyResult` object on success or a
/// `DBTEAMMembersRemoveError` object on failure.
///
- (DBRpcTask<DBASYNCLaunchEmptyResult *, DBTEAMMembersRemoveError *> *)membersRemove:(DBTEAMUserSelectorArg *)user;

///
/// Removes a member from a team. Permission : Team member management Exactly one of team_member_id, email, or
/// external_id must be provided to identify the user account. Accounts can be recovered via `membersRecover` for a 7
/// day period or until the account has been permanently deleted or transferred to another account (whichever comes
/// first). Calling `membersAdd` while a user is still recoverable on your team will return with `userAlreadyOnTeam` in
/// `DBTEAMMemberAddResult`. This endpoint may initiate an asynchronous job. To obtain the final result of the job, the
/// client should periodically poll `membersRemoveJobStatusGet`.
///
/// @param transferDestId If provided, files from the deleted member account will be transferred to this user.
/// @param transferAdminId If provided, errors during the transfer process will be sent via email to this user. If the
/// transfer_dest_id argument was provided, then this argument must be provided as well.
/// @param keepAccount Downgrade the member to a Basic account. The user will retain the email address associated with
/// their Dropbox  account and data in their account that is not restricted to team members. In order to keep the
/// account the argument wipe_data should be set to False.
///
/// @return Through the response callback, the caller will receive a `DBASYNCLaunchEmptyResult` object on success or a
/// `DBTEAMMembersRemoveError` object on failure.
///
- (DBRpcTask<DBASYNCLaunchEmptyResult *, DBTEAMMembersRemoveError *> *)
  membersRemove:(DBTEAMUserSelectorArg *)user
       wipeData:(nullable NSNumber *)wipeData
 transferDestId:(nullable DBTEAMUserSelectorArg *)transferDestId
transferAdminId:(nullable DBTEAMUserSelectorArg *)transferAdminId
    keepAccount:(nullable NSNumber *)keepAccount;

///
/// Once an async_job_id is returned from `membersRemove` , use this to poll the status of the asynchronous request.
/// Permission : Team member management
///
/// @param asyncJobId Id of the asynchronous job. This is the value of a response returned from the method that launched
/// the job.
///
/// @return Through the response callback, the caller will receive a `DBASYNCPollEmptyResult` object on success or a
/// `DBASYNCPollError` object on failure.
///
- (DBRpcTask<DBASYNCPollEmptyResult *, DBASYNCPollError *> *)membersRemoveJobStatusGet:(NSString *)asyncJobId;

///
/// Sends welcome email to pending team member. Permission : Team member management Exactly one of team_member_id,
/// email, or external_id must be provided to identify the user account. No-op if team member is not pending.
///
/// @param userSelectorArg Argument for selecting a single user, either by team_member_id, external_id or email.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBTEAMMembersSendWelcomeError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBTEAMMembersSendWelcomeError *> *)membersSendWelcomeEmail:
    (DBTEAMUserSelectorArg *)userSelectorArg;

///
/// Updates a team member's permissions. Permission : Team member management
///
/// @param user Identity of user whose role will be set.
/// @param dNewRole The new role of the member.
///
/// @return Through the response callback, the caller will receive a `DBTEAMMembersSetPermissionsResult` object on
/// success or a `DBTEAMMembersSetPermissionsError` object on failure.
///
- (DBRpcTask<DBTEAMMembersSetPermissionsResult *, DBTEAMMembersSetPermissionsError *> *)
membersSetAdminPermissions:(DBTEAMUserSelectorArg *)user
                  dNewRole:(DBTEAMAdminTier *)dNewRole;

///
/// Updates a team member's profile. Permission : Team member management
///
/// @param user Identity of user whose profile will be set.
///
/// @return Through the response callback, the caller will receive a `DBTEAMTeamMemberInfo` object on success or a
/// `DBTEAMMembersSetProfileError` object on failure.
///
- (DBRpcTask<DBTEAMTeamMemberInfo *, DBTEAMMembersSetProfileError *> *)membersSetProfile:(DBTEAMUserSelectorArg *)user;

///
/// Updates a team member's profile. Permission : Team member management
///
/// @param user Identity of user whose profile will be set.
/// @param dNewEmail New email for member.
/// @param dNewExternalId New external ID for member.
/// @param dNewGivenName New given name for member.
/// @param dNewSurname New surname for member.
/// @param dNewPersistentId New persistent ID. This field only available to teams using persistent ID SAML
/// configuration.
///
/// @return Through the response callback, the caller will receive a `DBTEAMTeamMemberInfo` object on success or a
/// `DBTEAMMembersSetProfileError` object on failure.
///
- (DBRpcTask<DBTEAMTeamMemberInfo *, DBTEAMMembersSetProfileError *> *)
membersSetProfile:(DBTEAMUserSelectorArg *)user
        dNewEmail:(nullable NSString *)dNewEmail
   dNewExternalId:(nullable NSString *)dNewExternalId
    dNewGivenName:(nullable NSString *)dNewGivenName
      dNewSurname:(nullable NSString *)dNewSurname
 dNewPersistentId:(nullable NSString *)dNewPersistentId;

///
/// Suspend a member from a team. Permission : Team member management Exactly one of team_member_id, email, or
/// external_id must be provided to identify the user account.
///
/// @param user Identity of user to remove/suspend.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBTEAMMembersSuspendError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBTEAMMembersSuspendError *> *)membersSuspend:(DBTEAMUserSelectorArg *)user;

///
/// Suspend a member from a team. Permission : Team member management Exactly one of team_member_id, email, or
/// external_id must be provided to identify the user account.
///
/// @param user Identity of user to remove/suspend.
/// @param wipeData If provided, controls if the user's data will be deleted on their linked devices.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBTEAMMembersSuspendError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBTEAMMembersSuspendError *> *)membersSuspend:(DBTEAMUserSelectorArg *)user
                                                                 wipeData:(nullable NSNumber *)wipeData;

///
/// Unsuspend a member from a team. Permission : Team member management Exactly one of team_member_id, email, or
/// external_id must be provided to identify the user account.
///
/// @param user Identity of user to unsuspend.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBTEAMMembersUnsuspendError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBTEAMMembersUnsuspendError *> *)membersUnsuspend:(DBTEAMUserSelectorArg *)user;

///
/// Add a property template. See route files/properties/add to add properties to a file.
///
///
/// @return Through the response callback, the caller will receive a `DBTEAMAddPropertyTemplateResult` object on success
/// or a `DBPROPERTIESModifyPropertyTemplateError` object on failure.
///
- (DBRpcTask<DBTEAMAddPropertyTemplateResult *, DBPROPERTIESModifyPropertyTemplateError *> *)
propertiesTemplateAdd:(NSString *)name
         description_:(NSString *)description_
               fields:(NSArray<DBPROPERTIESPropertyFieldTemplate *> *)fields;

///
/// Get the schema for a specified template.
///
/// @param templateId An identifier for property template added by route properties/template/add.
///
/// @return Through the response callback, the caller will receive a `DBPROPERTIESGetPropertyTemplateResult` object on
/// success or a `DBPROPERTIESPropertyTemplateError` object on failure.
///
- (DBRpcTask<DBPROPERTIESGetPropertyTemplateResult *, DBPROPERTIESPropertyTemplateError *> *)propertiesTemplateGet:
    (NSString *)templateId;

///
/// Get the property template identifiers for a team. To get the schema of each template use `propertiesTemplateGet`.
///
///
/// @return Through the response callback, the caller will receive a `DBPROPERTIESListPropertyTemplateIds` object on
/// success or a `DBPROPERTIESPropertyTemplateError` object on failure.
///
- (DBRpcTask<DBPROPERTIESListPropertyTemplateIds *, DBPROPERTIESPropertyTemplateError *> *)propertiesTemplateList;

///
/// Update a property template. This route can update the template name, the template description and add optional
/// properties to templates.
///
/// @param templateId An identifier for property template added by `propertiesTemplateAdd`.
///
/// @return Through the response callback, the caller will receive a `DBTEAMUpdatePropertyTemplateResult` object on
/// success or a `DBPROPERTIESModifyPropertyTemplateError` object on failure.
///
- (DBRpcTask<DBTEAMUpdatePropertyTemplateResult *, DBPROPERTIESModifyPropertyTemplateError *> *)
propertiesTemplateUpdate:(NSString *)templateId;

///
/// Update a property template. This route can update the template name, the template description and add optional
/// properties to templates.
///
/// @param templateId An identifier for property template added by `propertiesTemplateAdd`.
/// @param name A display name for the property template. Property template names can be up to 256 bytes.
/// @param description_ Description for new property template. Property template descriptions can be up to 1024 bytes.
/// @param addFields This is a list of custom properties to add to the property template. There can be up to 64
/// properties in a single property template.
///
/// @return Through the response callback, the caller will receive a `DBTEAMUpdatePropertyTemplateResult` object on
/// success or a `DBPROPERTIESModifyPropertyTemplateError` object on failure.
///
- (DBRpcTask<DBTEAMUpdatePropertyTemplateResult *, DBPROPERTIESModifyPropertyTemplateError *> *)
propertiesTemplateUpdate:(NSString *)templateId
                    name:(nullable NSString *)name
            description_:(nullable NSString *)description_
               addFields:(nullable NSArray<DBPROPERTIESPropertyFieldTemplate *> *)addFields;

///
/// Retrieves reporting data about a team's user activity.
///
///
/// @return Through the response callback, the caller will receive a `DBTEAMGetActivityReport` object on success or a
/// `DBTEAMDateRangeError` object on failure.
///
- (DBRpcTask<DBTEAMGetActivityReport *, DBTEAMDateRangeError *> *)reportsGetActivity;

///
/// Retrieves reporting data about a team's user activity.
///
/// @param startDate Optional starting date (inclusive)
/// @param endDate Optional ending date (exclusive)
///
/// @return Through the response callback, the caller will receive a `DBTEAMGetActivityReport` object on success or a
/// `DBTEAMDateRangeError` object on failure.
///
- (DBRpcTask<DBTEAMGetActivityReport *, DBTEAMDateRangeError *> *)reportsGetActivity:(nullable NSDate *)startDate
                                                                             endDate:(nullable NSDate *)endDate;

///
/// Retrieves reporting data about a team's linked devices.
///
///
/// @return Through the response callback, the caller will receive a `DBTEAMGetDevicesReport` object on success or a
/// `DBTEAMDateRangeError` object on failure.
///
- (DBRpcTask<DBTEAMGetDevicesReport *, DBTEAMDateRangeError *> *)reportsGetDevices;

///
/// Retrieves reporting data about a team's linked devices.
///
/// @param startDate Optional starting date (inclusive)
/// @param endDate Optional ending date (exclusive)
///
/// @return Through the response callback, the caller will receive a `DBTEAMGetDevicesReport` object on success or a
/// `DBTEAMDateRangeError` object on failure.
///
- (DBRpcTask<DBTEAMGetDevicesReport *, DBTEAMDateRangeError *> *)reportsGetDevices:(nullable NSDate *)startDate
                                                                           endDate:(nullable NSDate *)endDate;

///
/// Retrieves reporting data about a team's membership.
///
///
/// @return Through the response callback, the caller will receive a `DBTEAMGetMembershipReport` object on success or a
/// `DBTEAMDateRangeError` object on failure.
///
- (DBRpcTask<DBTEAMGetMembershipReport *, DBTEAMDateRangeError *> *)reportsGetMembership;

///
/// Retrieves reporting data about a team's membership.
///
/// @param startDate Optional starting date (inclusive)
/// @param endDate Optional ending date (exclusive)
///
/// @return Through the response callback, the caller will receive a `DBTEAMGetMembershipReport` object on success or a
/// `DBTEAMDateRangeError` object on failure.
///
- (DBRpcTask<DBTEAMGetMembershipReport *, DBTEAMDateRangeError *> *)reportsGetMembership:(nullable NSDate *)startDate
                                                                                 endDate:(nullable NSDate *)endDate;

///
/// Retrieves reporting data about a team's storage usage.
///
///
/// @return Through the response callback, the caller will receive a `DBTEAMGetStorageReport` object on success or a
/// `DBTEAMDateRangeError` object on failure.
///
- (DBRpcTask<DBTEAMGetStorageReport *, DBTEAMDateRangeError *> *)reportsGetStorage;

///
/// Retrieves reporting data about a team's storage usage.
///
/// @param startDate Optional starting date (inclusive)
/// @param endDate Optional ending date (exclusive)
///
/// @return Through the response callback, the caller will receive a `DBTEAMGetStorageReport` object on success or a
/// `DBTEAMDateRangeError` object on failure.
///
- (DBRpcTask<DBTEAMGetStorageReport *, DBTEAMDateRangeError *> *)reportsGetStorage:(nullable NSDate *)startDate
                                                                           endDate:(nullable NSDate *)endDate;

///
/// Sets an archived team folder's status to active. Permission : Team member file access.
///
/// @param teamFolderId The ID of the team folder.
///
/// @return Through the response callback, the caller will receive a `DBTEAMTeamFolderMetadata` object on success or a
/// `DBTEAMTeamFolderActivateError` object on failure.
///
- (DBRpcTask<DBTEAMTeamFolderMetadata *, DBTEAMTeamFolderActivateError *> *)teamFolderActivate:(NSString *)teamFolderId;

///
/// Sets an active team folder's status to archived and removes all folder and file members. Permission : Team member
/// file access.
///
///
/// @return Through the response callback, the caller will receive a `DBTEAMTeamFolderArchiveLaunch` object on success
/// or a `DBTEAMTeamFolderArchiveError` object on failure.
///
- (DBRpcTask<DBTEAMTeamFolderArchiveLaunch *, DBTEAMTeamFolderArchiveError *> *)teamFolderArchive:
    (NSString *)teamFolderId;

///
/// Sets an active team folder's status to archived and removes all folder and file members. Permission : Team member
/// file access.
///
/// @param forceAsyncOff Whether to force the archive to happen synchronously.
///
/// @return Through the response callback, the caller will receive a `DBTEAMTeamFolderArchiveLaunch` object on success
/// or a `DBTEAMTeamFolderArchiveError` object on failure.
///
- (DBRpcTask<DBTEAMTeamFolderArchiveLaunch *, DBTEAMTeamFolderArchiveError *> *)
teamFolderArchive:(NSString *)teamFolderId
    forceAsyncOff:(nullable NSNumber *)forceAsyncOff;

///
/// Returns the status of an asynchronous job for archiving a team folder. Permission : Team member file access.
///
/// @param asyncJobId Id of the asynchronous job. This is the value of a response returned from the method that launched
/// the job.
///
/// @return Through the response callback, the caller will receive a `DBTEAMTeamFolderArchiveJobStatus` object on
/// success or a `DBASYNCPollError` object on failure.
///
- (DBRpcTask<DBTEAMTeamFolderArchiveJobStatus *, DBASYNCPollError *> *)teamFolderArchiveCheck:(NSString *)asyncJobId;

///
/// Creates a new, active, team folder. Permission : Team member file access.
///
/// @param name Name for the new team folder.
///
/// @return Through the response callback, the caller will receive a `DBTEAMTeamFolderMetadata` object on success or a
/// `DBTEAMTeamFolderCreateError` object on failure.
///
- (DBRpcTask<DBTEAMTeamFolderMetadata *, DBTEAMTeamFolderCreateError *> *)teamFolderCreate:(NSString *)name;

///
/// Retrieves metadata for team folders. Permission : Team member file access.
///
/// @param teamFolderIds The list of team folder IDs.
///
/// @return Through the response callback, the caller will receive a `NSArray<DBTEAMTeamFolderGetInfoItem *>` object on
/// success or a `void` object on failure.
///
- (DBRpcTask<NSArray<DBTEAMTeamFolderGetInfoItem *> *, DBNilObject *> *)teamFolderGetInfo:
    (NSArray<NSString *> *)teamFolderIds;

///
/// Lists all team folders. Permission : Team member file access.
///
///
/// @return Through the response callback, the caller will receive a `DBTEAMTeamFolderListResult` object on success or a
/// `DBTEAMTeamFolderListError` object on failure.
///
- (DBRpcTask<DBTEAMTeamFolderListResult *, DBTEAMTeamFolderListError *> *)teamFolderList;

///
/// Lists all team folders. Permission : Team member file access.
///
/// @param limit The maximum number of results to return per request.
///
/// @return Through the response callback, the caller will receive a `DBTEAMTeamFolderListResult` object on success or a
/// `DBTEAMTeamFolderListError` object on failure.
///
- (DBRpcTask<DBTEAMTeamFolderListResult *, DBTEAMTeamFolderListError *> *)teamFolderList:(nullable NSNumber *)limit;

///
/// Once a cursor has been retrieved from `teamFolderList`, use this to paginate through all team folders. Permission :
/// Team member file access.
///
/// @param cursor Indicates from what point to get the next set of team folders.
///
/// @return Through the response callback, the caller will receive a `DBTEAMTeamFolderListResult` object on success or a
/// `DBTEAMTeamFolderListContinueError` object on failure.
///
- (DBRpcTask<DBTEAMTeamFolderListResult *, DBTEAMTeamFolderListContinueError *> *)teamFolderListContinue:
    (NSString *)cursor;

///
/// Permanently deletes an archived team folder. Permission : Team member file access.
///
/// @param teamFolderId The ID of the team folder.
///
/// @return Through the response callback, the caller will receive a `void` object on success or a
/// `DBTEAMTeamFolderPermanentlyDeleteError` object on failure.
///
- (DBRpcTask<DBNilObject *, DBTEAMTeamFolderPermanentlyDeleteError *> *)teamFolderPermanentlyDelete:
    (NSString *)teamFolderId;

///
/// Changes an active team folder's name. Permission : Team member file access.
///
/// @param name New team folder name.
///
/// @return Through the response callback, the caller will receive a `DBTEAMTeamFolderMetadata` object on success or a
/// `DBTEAMTeamFolderRenameError` object on failure.
///
- (DBRpcTask<DBTEAMTeamFolderMetadata *, DBTEAMTeamFolderRenameError *> *)teamFolderRename:(NSString *)teamFolderId
                                                                                      name:(NSString *)name;

///
/// Returns the member profile of the admin who generated the team access token used to make the call.
///
///
/// @return Through the response callback, the caller will receive a `DBTEAMTokenGetAuthenticatedAdminResult` object on
/// success or a `DBTEAMTokenGetAuthenticatedAdminError` object on failure.
///
- (DBRpcTask<DBTEAMTokenGetAuthenticatedAdminResult *, DBTEAMTokenGetAuthenticatedAdminError *> *)
    tokenGetAuthenticatedAdmin;

@end

NS_ASSUME_NONNULL_END
