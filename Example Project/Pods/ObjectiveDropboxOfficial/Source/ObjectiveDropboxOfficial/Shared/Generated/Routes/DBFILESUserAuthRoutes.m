///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

#import "DBFILESUserAuthRoutes.h"
#import "DBASYNCLaunchResultBase.h"
#import "DBASYNCPollArg.h"
#import "DBASYNCPollError.h"
#import "DBASYNCPollResultBase.h"
#import "DBFILESAddPropertiesError.h"
#import "DBFILESAlphaGetMetadataArg.h"
#import "DBFILESAlphaGetMetadataError.h"
#import "DBFILESCommitInfo.h"
#import "DBFILESCommitInfoWithProperties.h"
#import "DBFILESCreateFolderArg.h"
#import "DBFILESCreateFolderError.h"
#import "DBFILESDeleteArg.h"
#import "DBFILESDeleteBatchArg.h"
#import "DBFILESDeleteBatchError.h"
#import "DBFILESDeleteBatchJobStatus.h"
#import "DBFILESDeleteBatchLaunch.h"
#import "DBFILESDeleteBatchResult.h"
#import "DBFILESDeleteError.h"
#import "DBFILESDeletedMetadata.h"
#import "DBFILESDownloadArg.h"
#import "DBFILESDownloadError.h"
#import "DBFILESFileMetadata.h"
#import "DBFILESFileSharingInfo.h"
#import "DBFILESFolderMetadata.h"
#import "DBFILESFolderSharingInfo.h"
#import "DBFILESGetCopyReferenceArg.h"
#import "DBFILESGetCopyReferenceError.h"
#import "DBFILESGetCopyReferenceResult.h"
#import "DBFILESGetMetadataArg.h"
#import "DBFILESGetMetadataError.h"
#import "DBFILESGetTemporaryLinkArg.h"
#import "DBFILESGetTemporaryLinkError.h"
#import "DBFILESGetTemporaryLinkResult.h"
#import "DBFILESInvalidPropertyGroupError.h"
#import "DBFILESListFolderArg.h"
#import "DBFILESListFolderContinueArg.h"
#import "DBFILESListFolderContinueError.h"
#import "DBFILESListFolderError.h"
#import "DBFILESListFolderGetLatestCursorResult.h"
#import "DBFILESListFolderLongpollArg.h"
#import "DBFILESListFolderLongpollError.h"
#import "DBFILESListFolderLongpollResult.h"
#import "DBFILESListFolderResult.h"
#import "DBFILESListRevisionsArg.h"
#import "DBFILESListRevisionsError.h"
#import "DBFILESListRevisionsResult.h"
#import "DBFILESLookUpPropertiesError.h"
#import "DBFILESLookupError.h"
#import "DBFILESMediaInfo.h"
#import "DBFILESMetadata.h"
#import "DBFILESPreviewArg.h"
#import "DBFILESPreviewError.h"
#import "DBFILESPropertiesError.h"
#import "DBFILESPropertyGroupUpdate.h"
#import "DBFILESPropertyGroupWithPath.h"
#import "DBFILESRelocationArg.h"
#import "DBFILESRelocationBatchArg.h"
#import "DBFILESRelocationBatchError.h"
#import "DBFILESRelocationBatchJobStatus.h"
#import "DBFILESRelocationBatchLaunch.h"
#import "DBFILESRelocationBatchResult.h"
#import "DBFILESRelocationError.h"
#import "DBFILESRelocationPath.h"
#import "DBFILESRemovePropertiesArg.h"
#import "DBFILESRemovePropertiesError.h"
#import "DBFILESRestoreArg.h"
#import "DBFILESRestoreError.h"
#import "DBFILESRouteObjects.h"
#import "DBFILESSaveCopyReferenceArg.h"
#import "DBFILESSaveCopyReferenceError.h"
#import "DBFILESSaveCopyReferenceResult.h"
#import "DBFILESSaveUrlArg.h"
#import "DBFILESSaveUrlError.h"
#import "DBFILESSaveUrlJobStatus.h"
#import "DBFILESSaveUrlResult.h"
#import "DBFILESSearchArg.h"
#import "DBFILESSearchError.h"
#import "DBFILESSearchMatch.h"
#import "DBFILESSearchMode.h"
#import "DBFILESSearchResult.h"
#import "DBFILESThumbnailArg.h"
#import "DBFILESThumbnailError.h"
#import "DBFILESThumbnailFormat.h"
#import "DBFILESThumbnailSize.h"
#import "DBFILESUpdatePropertiesError.h"
#import "DBFILESUpdatePropertyGroupArg.h"
#import "DBFILESUploadError.h"
#import "DBFILESUploadErrorWithProperties.h"
#import "DBFILESUploadSessionAppendArg.h"
#import "DBFILESUploadSessionCursor.h"
#import "DBFILESUploadSessionFinishArg.h"
#import "DBFILESUploadSessionFinishBatchArg.h"
#import "DBFILESUploadSessionFinishBatchJobStatus.h"
#import "DBFILESUploadSessionFinishBatchLaunch.h"
#import "DBFILESUploadSessionFinishBatchResult.h"
#import "DBFILESUploadSessionFinishError.h"
#import "DBFILESUploadSessionLookupError.h"
#import "DBFILESUploadSessionOffsetError.h"
#import "DBFILESUploadSessionStartArg.h"
#import "DBFILESUploadSessionStartResult.h"
#import "DBFILESUploadWriteFailed.h"
#import "DBFILESWriteError.h"
#import "DBFILESWriteMode.h"
#import "DBPROPERTIESGetPropertyTemplateArg.h"
#import "DBPROPERTIESGetPropertyTemplateResult.h"
#import "DBPROPERTIESListPropertyTemplateIds.h"
#import "DBPROPERTIESPropertyFieldTemplate.h"
#import "DBPROPERTIESPropertyGroup.h"
#import "DBPROPERTIESPropertyGroupTemplate.h"
#import "DBPROPERTIESPropertyTemplateError.h"
#import "DBRequestErrors.h"
#import "DBStoneBase.h"
#import "DBTransportClientProtocol.h"

@implementation DBFILESUserAuthRoutes

- (instancetype)init:(id<DBTransportClient>)client {
  self = [super init];
  if (self) {
    _client = client;
  }
  return self;
}

- (DBRpcTask *)alphaGetMetadata:(NSString *)path {
  DBRoute *route = DBFILESRouteObjects.DBFILESAlphaGetMetadata;
  DBFILESAlphaGetMetadataArg *arg = [[DBFILESAlphaGetMetadataArg alloc] initWithPath:path];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)alphaGetMetadata:(NSString *)path
                   includeMediaInfo:(NSNumber *)includeMediaInfo
                     includeDeleted:(NSNumber *)includeDeleted
    includeHasExplicitSharedMembers:(NSNumber *)includeHasExplicitSharedMembers
           includePropertyTemplates:(NSArray<NSString *> *)includePropertyTemplates {
  DBRoute *route = DBFILESRouteObjects.DBFILESAlphaGetMetadata;
  DBFILESAlphaGetMetadataArg *arg = [[DBFILESAlphaGetMetadataArg alloc] initWithPath:path
                                                                    includeMediaInfo:includeMediaInfo
                                                                      includeDeleted:includeDeleted
                                                     includeHasExplicitSharedMembers:includeHasExplicitSharedMembers
                                                            includePropertyTemplates:includePropertyTemplates];
  return [self.client requestRpc:route arg:arg];
}

- (DBUploadTask *)alphaUploadUrl:(NSString *)path inputUrl:(NSString *)inputUrl {
  DBRoute *route = DBFILESRouteObjects.DBFILESAlphaUpload;
  DBFILESCommitInfoWithProperties *arg = [[DBFILESCommitInfoWithProperties alloc] initWithPath:path];
  return [self.client requestUpload:route arg:arg inputUrl:inputUrl];
}

- (DBUploadTask *)alphaUploadUrl:(NSString *)path
                            mode:(DBFILESWriteMode *)mode
                      autorename:(NSNumber *)autorename
                  clientModified:(NSDate *)clientModified
                            mute:(NSNumber *)mute
                  propertyGroups:(NSArray<DBPROPERTIESPropertyGroup *> *)propertyGroups
                        inputUrl:(NSString *)inputUrl {
  DBRoute *route = DBFILESRouteObjects.DBFILESAlphaUpload;
  DBFILESCommitInfoWithProperties *arg = [[DBFILESCommitInfoWithProperties alloc] initWithPath:path
                                                                                          mode:mode
                                                                                    autorename:autorename
                                                                                clientModified:clientModified
                                                                                          mute:mute
                                                                                propertyGroups:propertyGroups];
  return [self.client requestUpload:route arg:arg inputUrl:inputUrl];
}

- (DBUploadTask *)alphaUploadData:(NSString *)path inputData:(NSData *)inputData {
  DBRoute *route = DBFILESRouteObjects.DBFILESAlphaUpload;
  DBFILESCommitInfoWithProperties *arg = [[DBFILESCommitInfoWithProperties alloc] initWithPath:path];
  return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)alphaUploadData:(NSString *)path
                             mode:(DBFILESWriteMode *)mode
                       autorename:(NSNumber *)autorename
                   clientModified:(NSDate *)clientModified
                             mute:(NSNumber *)mute
                   propertyGroups:(NSArray<DBPROPERTIESPropertyGroup *> *)propertyGroups
                        inputData:(NSData *)inputData {
  DBRoute *route = DBFILESRouteObjects.DBFILESAlphaUpload;
  DBFILESCommitInfoWithProperties *arg = [[DBFILESCommitInfoWithProperties alloc] initWithPath:path
                                                                                          mode:mode
                                                                                    autorename:autorename
                                                                                clientModified:clientModified
                                                                                          mute:mute
                                                                                propertyGroups:propertyGroups];
  return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)alphaUploadStream:(NSString *)path inputStream:(NSInputStream *)inputStream {
  DBRoute *route = DBFILESRouteObjects.DBFILESAlphaUpload;
  DBFILESCommitInfoWithProperties *arg = [[DBFILESCommitInfoWithProperties alloc] initWithPath:path];
  return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBUploadTask *)alphaUploadStream:(NSString *)path
                               mode:(DBFILESWriteMode *)mode
                         autorename:(NSNumber *)autorename
                     clientModified:(NSDate *)clientModified
                               mute:(NSNumber *)mute
                     propertyGroups:(NSArray<DBPROPERTIESPropertyGroup *> *)propertyGroups
                        inputStream:(NSInputStream *)inputStream {
  DBRoute *route = DBFILESRouteObjects.DBFILESAlphaUpload;
  DBFILESCommitInfoWithProperties *arg = [[DBFILESCommitInfoWithProperties alloc] initWithPath:path
                                                                                          mode:mode
                                                                                    autorename:autorename
                                                                                clientModified:clientModified
                                                                                          mute:mute
                                                                                propertyGroups:propertyGroups];
  return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBRpcTask *)dCopy:(NSString *)fromPath toPath:(NSString *)toPath {
  DBRoute *route = DBFILESRouteObjects.DBFILESDCopy;
  DBFILESRelocationArg *arg = [[DBFILESRelocationArg alloc] initWithFromPath:fromPath toPath:toPath];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)dCopy:(NSString *)fromPath
               toPath:(NSString *)toPath
    allowSharedFolder:(NSNumber *)allowSharedFolder
           autorename:(NSNumber *)autorename {
  DBRoute *route = DBFILESRouteObjects.DBFILESDCopy;
  DBFILESRelocationArg *arg = [[DBFILESRelocationArg alloc] initWithFromPath:fromPath
                                                                      toPath:toPath
                                                           allowSharedFolder:allowSharedFolder
                                                                  autorename:autorename];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)dCopyBatch:(NSArray<DBFILESRelocationPath *> *)entries {
  DBRoute *route = DBFILESRouteObjects.DBFILESDCopyBatch;
  DBFILESRelocationBatchArg *arg = [[DBFILESRelocationBatchArg alloc] initWithEntries:entries];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)dCopyBatch:(NSArray<DBFILESRelocationPath *> *)entries
        allowSharedFolder:(NSNumber *)allowSharedFolder
               autorename:(NSNumber *)autorename {
  DBRoute *route = DBFILESRouteObjects.DBFILESDCopyBatch;
  DBFILESRelocationBatchArg *arg = [[DBFILESRelocationBatchArg alloc] initWithEntries:entries
                                                                    allowSharedFolder:allowSharedFolder
                                                                           autorename:autorename];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)dCopyBatchCheck:(NSString *)asyncJobId {
  DBRoute *route = DBFILESRouteObjects.DBFILESDCopyBatchCheck;
  DBASYNCPollArg *arg = [[DBASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)dCopyReferenceGet:(NSString *)path {
  DBRoute *route = DBFILESRouteObjects.DBFILESDCopyReferenceGet;
  DBFILESGetCopyReferenceArg *arg = [[DBFILESGetCopyReferenceArg alloc] initWithPath:path];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)dCopyReferenceSave:(NSString *)dCopyReference path:(NSString *)path {
  DBRoute *route = DBFILESRouteObjects.DBFILESDCopyReferenceSave;
  DBFILESSaveCopyReferenceArg *arg =
      [[DBFILESSaveCopyReferenceArg alloc] initWithDCopyReference:dCopyReference path:path];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)createFolder:(NSString *)path {
  DBRoute *route = DBFILESRouteObjects.DBFILESCreateFolder;
  DBFILESCreateFolderArg *arg = [[DBFILESCreateFolderArg alloc] initWithPath:path];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)createFolder:(NSString *)path autorename:(NSNumber *)autorename {
  DBRoute *route = DBFILESRouteObjects.DBFILESCreateFolder;
  DBFILESCreateFolderArg *arg = [[DBFILESCreateFolderArg alloc] initWithPath:path autorename:autorename];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)delete_:(NSString *)path {
  DBRoute *route = DBFILESRouteObjects.DBFILESDelete_;
  DBFILESDeleteArg *arg = [[DBFILESDeleteArg alloc] initWithPath:path];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)deleteBatch:(NSArray<DBFILESDeleteArg *> *)entries {
  DBRoute *route = DBFILESRouteObjects.DBFILESDeleteBatch;
  DBFILESDeleteBatchArg *arg = [[DBFILESDeleteBatchArg alloc] initWithEntries:entries];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)deleteBatchCheck:(NSString *)asyncJobId {
  DBRoute *route = DBFILESRouteObjects.DBFILESDeleteBatchCheck;
  DBASYNCPollArg *arg = [[DBASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
  return [self.client requestRpc:route arg:arg];
}

- (DBDownloadUrlTask *)downloadUrl:(NSString *)path overwrite:(BOOL)overwrite destination:(NSURL *)destination {
  DBRoute *route = DBFILESRouteObjects.DBFILESDownload;
  DBFILESDownloadArg *arg = [[DBFILESDownloadArg alloc] initWithPath:path];
  return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBDownloadUrlTask *)downloadUrl:(NSString *)path
                               rev:(NSString *)rev
                         overwrite:(BOOL)overwrite
                       destination:(NSURL *)destination {
  DBRoute *route = DBFILESRouteObjects.DBFILESDownload;
  DBFILESDownloadArg *arg = [[DBFILESDownloadArg alloc] initWithPath:path rev:rev];
  return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBDownloadUrlTask *)downloadUrl:(NSString *)path
                         overwrite:(BOOL)overwrite
                       destination:(NSURL *)destination
                   byteOffsetStart:(NSNumber *)byteOffsetStart
                     byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBFILESRouteObjects.DBFILESDownload;
  DBFILESDownloadArg *arg = [[DBFILESDownloadArg alloc] initWithPath:path];
  return [self.client requestDownload:route
                                  arg:arg
                            overwrite:overwrite
                          destination:destination
                      byteOffsetStart:byteOffsetStart
                        byteOffsetEnd:byteOffsetEnd];
}

- (DBDownloadUrlTask *)downloadUrl:(NSString *)path
                               rev:(NSString *)rev
                         overwrite:(BOOL)overwrite
                       destination:(NSURL *)destination
                   byteOffsetStart:(NSNumber *)byteOffsetStart
                     byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBFILESRouteObjects.DBFILESDownload;
  DBFILESDownloadArg *arg = [[DBFILESDownloadArg alloc] initWithPath:path rev:rev];
  return [self.client requestDownload:route
                                  arg:arg
                            overwrite:overwrite
                          destination:destination
                      byteOffsetStart:byteOffsetStart
                        byteOffsetEnd:byteOffsetEnd];
}

- (DBDownloadDataTask *)downloadData:(NSString *)path {
  DBRoute *route = DBFILESRouteObjects.DBFILESDownload;
  DBFILESDownloadArg *arg = [[DBFILESDownloadArg alloc] initWithPath:path];
  return [self.client requestDownload:route arg:arg];
}

- (DBDownloadDataTask *)downloadData:(NSString *)path rev:(NSString *)rev {
  DBRoute *route = DBFILESRouteObjects.DBFILESDownload;
  DBFILESDownloadArg *arg = [[DBFILESDownloadArg alloc] initWithPath:path rev:rev];
  return [self.client requestDownload:route arg:arg];
}

- (DBDownloadDataTask *)downloadData:(NSString *)path
                     byteOffsetStart:(NSNumber *)byteOffsetStart
                       byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBFILESRouteObjects.DBFILESDownload;
  DBFILESDownloadArg *arg = [[DBFILESDownloadArg alloc] initWithPath:path];
  return [self.client requestDownload:route arg:arg byteOffsetStart:byteOffsetStart byteOffsetEnd:byteOffsetEnd];
}

- (DBDownloadDataTask *)downloadData:(NSString *)path
                                 rev:(NSString *)rev
                     byteOffsetStart:(NSNumber *)byteOffsetStart
                       byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBFILESRouteObjects.DBFILESDownload;
  DBFILESDownloadArg *arg = [[DBFILESDownloadArg alloc] initWithPath:path rev:rev];
  return [self.client requestDownload:route arg:arg byteOffsetStart:byteOffsetStart byteOffsetEnd:byteOffsetEnd];
}

- (DBRpcTask *)getMetadata:(NSString *)path {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetMetadata;
  DBFILESGetMetadataArg *arg = [[DBFILESGetMetadataArg alloc] initWithPath:path];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)getMetadata:(NSString *)path
                   includeMediaInfo:(NSNumber *)includeMediaInfo
                     includeDeleted:(NSNumber *)includeDeleted
    includeHasExplicitSharedMembers:(NSNumber *)includeHasExplicitSharedMembers {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetMetadata;
  DBFILESGetMetadataArg *arg = [[DBFILESGetMetadataArg alloc] initWithPath:path
                                                          includeMediaInfo:includeMediaInfo
                                                            includeDeleted:includeDeleted
                                           includeHasExplicitSharedMembers:includeHasExplicitSharedMembers];
  return [self.client requestRpc:route arg:arg];
}

- (DBDownloadUrlTask *)getPreviewUrl:(NSString *)path overwrite:(BOOL)overwrite destination:(NSURL *)destination {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetPreview;
  DBFILESPreviewArg *arg = [[DBFILESPreviewArg alloc] initWithPath:path];
  return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBDownloadUrlTask *)getPreviewUrl:(NSString *)path
                                 rev:(NSString *)rev
                           overwrite:(BOOL)overwrite
                         destination:(NSURL *)destination {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetPreview;
  DBFILESPreviewArg *arg = [[DBFILESPreviewArg alloc] initWithPath:path rev:rev];
  return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBDownloadUrlTask *)getPreviewUrl:(NSString *)path
                           overwrite:(BOOL)overwrite
                         destination:(NSURL *)destination
                     byteOffsetStart:(NSNumber *)byteOffsetStart
                       byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetPreview;
  DBFILESPreviewArg *arg = [[DBFILESPreviewArg alloc] initWithPath:path];
  return [self.client requestDownload:route
                                  arg:arg
                            overwrite:overwrite
                          destination:destination
                      byteOffsetStart:byteOffsetStart
                        byteOffsetEnd:byteOffsetEnd];
}

- (DBDownloadUrlTask *)getPreviewUrl:(NSString *)path
                                 rev:(NSString *)rev
                           overwrite:(BOOL)overwrite
                         destination:(NSURL *)destination
                     byteOffsetStart:(NSNumber *)byteOffsetStart
                       byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetPreview;
  DBFILESPreviewArg *arg = [[DBFILESPreviewArg alloc] initWithPath:path rev:rev];
  return [self.client requestDownload:route
                                  arg:arg
                            overwrite:overwrite
                          destination:destination
                      byteOffsetStart:byteOffsetStart
                        byteOffsetEnd:byteOffsetEnd];
}

- (DBDownloadDataTask *)getPreviewData:(NSString *)path {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetPreview;
  DBFILESPreviewArg *arg = [[DBFILESPreviewArg alloc] initWithPath:path];
  return [self.client requestDownload:route arg:arg];
}

- (DBDownloadDataTask *)getPreviewData:(NSString *)path rev:(NSString *)rev {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetPreview;
  DBFILESPreviewArg *arg = [[DBFILESPreviewArg alloc] initWithPath:path rev:rev];
  return [self.client requestDownload:route arg:arg];
}

- (DBDownloadDataTask *)getPreviewData:(NSString *)path
                       byteOffsetStart:(NSNumber *)byteOffsetStart
                         byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetPreview;
  DBFILESPreviewArg *arg = [[DBFILESPreviewArg alloc] initWithPath:path];
  return [self.client requestDownload:route arg:arg byteOffsetStart:byteOffsetStart byteOffsetEnd:byteOffsetEnd];
}

- (DBDownloadDataTask *)getPreviewData:(NSString *)path
                                   rev:(NSString *)rev
                       byteOffsetStart:(NSNumber *)byteOffsetStart
                         byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetPreview;
  DBFILESPreviewArg *arg = [[DBFILESPreviewArg alloc] initWithPath:path rev:rev];
  return [self.client requestDownload:route arg:arg byteOffsetStart:byteOffsetStart byteOffsetEnd:byteOffsetEnd];
}

- (DBRpcTask *)getTemporaryLink:(NSString *)path {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetTemporaryLink;
  DBFILESGetTemporaryLinkArg *arg = [[DBFILESGetTemporaryLinkArg alloc] initWithPath:path];
  return [self.client requestRpc:route arg:arg];
}

- (DBDownloadUrlTask *)getThumbnailUrl:(NSString *)path overwrite:(BOOL)overwrite destination:(NSURL *)destination {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetThumbnail;
  DBFILESThumbnailArg *arg = [[DBFILESThumbnailArg alloc] initWithPath:path];
  return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBDownloadUrlTask *)getThumbnailUrl:(NSString *)path
                                format:(DBFILESThumbnailFormat *)format
                                  size:(DBFILESThumbnailSize *)size
                             overwrite:(BOOL)overwrite
                           destination:(NSURL *)destination {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetThumbnail;
  DBFILESThumbnailArg *arg = [[DBFILESThumbnailArg alloc] initWithPath:path format:format size:size];
  return [self.client requestDownload:route arg:arg overwrite:overwrite destination:destination];
}

- (DBDownloadUrlTask *)getThumbnailUrl:(NSString *)path
                             overwrite:(BOOL)overwrite
                           destination:(NSURL *)destination
                       byteOffsetStart:(NSNumber *)byteOffsetStart
                         byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetThumbnail;
  DBFILESThumbnailArg *arg = [[DBFILESThumbnailArg alloc] initWithPath:path];
  return [self.client requestDownload:route
                                  arg:arg
                            overwrite:overwrite
                          destination:destination
                      byteOffsetStart:byteOffsetStart
                        byteOffsetEnd:byteOffsetEnd];
}

- (DBDownloadUrlTask *)getThumbnailUrl:(NSString *)path
                                format:(DBFILESThumbnailFormat *)format
                                  size:(DBFILESThumbnailSize *)size
                             overwrite:(BOOL)overwrite
                           destination:(NSURL *)destination
                       byteOffsetStart:(NSNumber *)byteOffsetStart
                         byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetThumbnail;
  DBFILESThumbnailArg *arg = [[DBFILESThumbnailArg alloc] initWithPath:path format:format size:size];
  return [self.client requestDownload:route
                                  arg:arg
                            overwrite:overwrite
                          destination:destination
                      byteOffsetStart:byteOffsetStart
                        byteOffsetEnd:byteOffsetEnd];
}

- (DBDownloadDataTask *)getThumbnailData:(NSString *)path {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetThumbnail;
  DBFILESThumbnailArg *arg = [[DBFILESThumbnailArg alloc] initWithPath:path];
  return [self.client requestDownload:route arg:arg];
}

- (DBDownloadDataTask *)getThumbnailData:(NSString *)path
                                  format:(DBFILESThumbnailFormat *)format
                                    size:(DBFILESThumbnailSize *)size {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetThumbnail;
  DBFILESThumbnailArg *arg = [[DBFILESThumbnailArg alloc] initWithPath:path format:format size:size];
  return [self.client requestDownload:route arg:arg];
}

- (DBDownloadDataTask *)getThumbnailData:(NSString *)path
                         byteOffsetStart:(NSNumber *)byteOffsetStart
                           byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetThumbnail;
  DBFILESThumbnailArg *arg = [[DBFILESThumbnailArg alloc] initWithPath:path];
  return [self.client requestDownload:route arg:arg byteOffsetStart:byteOffsetStart byteOffsetEnd:byteOffsetEnd];
}

- (DBDownloadDataTask *)getThumbnailData:(NSString *)path
                                  format:(DBFILESThumbnailFormat *)format
                                    size:(DBFILESThumbnailSize *)size
                         byteOffsetStart:(NSNumber *)byteOffsetStart
                           byteOffsetEnd:(NSNumber *)byteOffsetEnd {
  DBRoute *route = DBFILESRouteObjects.DBFILESGetThumbnail;
  DBFILESThumbnailArg *arg = [[DBFILESThumbnailArg alloc] initWithPath:path format:format size:size];
  return [self.client requestDownload:route arg:arg byteOffsetStart:byteOffsetStart byteOffsetEnd:byteOffsetEnd];
}

- (DBRpcTask *)listFolder:(NSString *)path {
  DBRoute *route = DBFILESRouteObjects.DBFILESListFolder;
  DBFILESListFolderArg *arg = [[DBFILESListFolderArg alloc] initWithPath:path];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFolder:(NSString *)path
                          recursive:(NSNumber *)recursive
                   includeMediaInfo:(NSNumber *)includeMediaInfo
                     includeDeleted:(NSNumber *)includeDeleted
    includeHasExplicitSharedMembers:(NSNumber *)includeHasExplicitSharedMembers {
  DBRoute *route = DBFILESRouteObjects.DBFILESListFolder;
  DBFILESListFolderArg *arg = [[DBFILESListFolderArg alloc] initWithPath:path
                                                               recursive:recursive
                                                        includeMediaInfo:includeMediaInfo
                                                          includeDeleted:includeDeleted
                                         includeHasExplicitSharedMembers:includeHasExplicitSharedMembers];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFolderContinue:(NSString *)cursor {
  DBRoute *route = DBFILESRouteObjects.DBFILESListFolderContinue;
  DBFILESListFolderContinueArg *arg = [[DBFILESListFolderContinueArg alloc] initWithCursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFolderGetLatestCursor:(NSString *)path {
  DBRoute *route = DBFILESRouteObjects.DBFILESListFolderGetLatestCursor;
  DBFILESListFolderArg *arg = [[DBFILESListFolderArg alloc] initWithPath:path];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFolderGetLatestCursor:(NSString *)path
                               recursive:(NSNumber *)recursive
                        includeMediaInfo:(NSNumber *)includeMediaInfo
                          includeDeleted:(NSNumber *)includeDeleted
         includeHasExplicitSharedMembers:(NSNumber *)includeHasExplicitSharedMembers {
  DBRoute *route = DBFILESRouteObjects.DBFILESListFolderGetLatestCursor;
  DBFILESListFolderArg *arg = [[DBFILESListFolderArg alloc] initWithPath:path
                                                               recursive:recursive
                                                        includeMediaInfo:includeMediaInfo
                                                          includeDeleted:includeDeleted
                                         includeHasExplicitSharedMembers:includeHasExplicitSharedMembers];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFolderLongpoll:(NSString *)cursor {
  DBRoute *route = DBFILESRouteObjects.DBFILESListFolderLongpoll;
  DBFILESListFolderLongpollArg *arg = [[DBFILESListFolderLongpollArg alloc] initWithCursor:cursor];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listFolderLongpoll:(NSString *)cursor timeout:(NSNumber *)timeout {
  DBRoute *route = DBFILESRouteObjects.DBFILESListFolderLongpoll;
  DBFILESListFolderLongpollArg *arg = [[DBFILESListFolderLongpollArg alloc] initWithCursor:cursor timeout:timeout];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listRevisions:(NSString *)path {
  DBRoute *route = DBFILESRouteObjects.DBFILESListRevisions;
  DBFILESListRevisionsArg *arg = [[DBFILESListRevisionsArg alloc] initWithPath:path];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)listRevisions:(NSString *)path limit:(NSNumber *)limit {
  DBRoute *route = DBFILESRouteObjects.DBFILESListRevisions;
  DBFILESListRevisionsArg *arg = [[DBFILESListRevisionsArg alloc] initWithPath:path limit:limit];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)move:(NSString *)fromPath toPath:(NSString *)toPath {
  DBRoute *route = DBFILESRouteObjects.DBFILESMove;
  DBFILESRelocationArg *arg = [[DBFILESRelocationArg alloc] initWithFromPath:fromPath toPath:toPath];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)move:(NSString *)fromPath
               toPath:(NSString *)toPath
    allowSharedFolder:(NSNumber *)allowSharedFolder
           autorename:(NSNumber *)autorename {
  DBRoute *route = DBFILESRouteObjects.DBFILESMove;
  DBFILESRelocationArg *arg = [[DBFILESRelocationArg alloc] initWithFromPath:fromPath
                                                                      toPath:toPath
                                                           allowSharedFolder:allowSharedFolder
                                                                  autorename:autorename];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)moveBatch:(NSArray<DBFILESRelocationPath *> *)entries {
  DBRoute *route = DBFILESRouteObjects.DBFILESMoveBatch;
  DBFILESRelocationBatchArg *arg = [[DBFILESRelocationBatchArg alloc] initWithEntries:entries];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)moveBatch:(NSArray<DBFILESRelocationPath *> *)entries
       allowSharedFolder:(NSNumber *)allowSharedFolder
              autorename:(NSNumber *)autorename {
  DBRoute *route = DBFILESRouteObjects.DBFILESMoveBatch;
  DBFILESRelocationBatchArg *arg = [[DBFILESRelocationBatchArg alloc] initWithEntries:entries
                                                                    allowSharedFolder:allowSharedFolder
                                                                           autorename:autorename];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)moveBatchCheck:(NSString *)asyncJobId {
  DBRoute *route = DBFILESRouteObjects.DBFILESMoveBatchCheck;
  DBASYNCPollArg *arg = [[DBASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)permanentlyDelete:(NSString *)path {
  DBRoute *route = DBFILESRouteObjects.DBFILESPermanentlyDelete;
  DBFILESDeleteArg *arg = [[DBFILESDeleteArg alloc] initWithPath:path];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)propertiesAdd:(NSString *)path propertyGroups:(NSArray<DBPROPERTIESPropertyGroup *> *)propertyGroups {
  DBRoute *route = DBFILESRouteObjects.DBFILESPropertiesAdd;
  DBFILESPropertyGroupWithPath *arg =
      [[DBFILESPropertyGroupWithPath alloc] initWithPath:path propertyGroups:propertyGroups];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)propertiesOverwrite:(NSString *)path
                    propertyGroups:(NSArray<DBPROPERTIESPropertyGroup *> *)propertyGroups {
  DBRoute *route = DBFILESRouteObjects.DBFILESPropertiesOverwrite;
  DBFILESPropertyGroupWithPath *arg =
      [[DBFILESPropertyGroupWithPath alloc] initWithPath:path propertyGroups:propertyGroups];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)propertiesRemove:(NSString *)path propertyTemplateIds:(NSArray<NSString *> *)propertyTemplateIds {
  DBRoute *route = DBFILESRouteObjects.DBFILESPropertiesRemove;
  DBFILESRemovePropertiesArg *arg =
      [[DBFILESRemovePropertiesArg alloc] initWithPath:path propertyTemplateIds:propertyTemplateIds];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)propertiesTemplateGet:(NSString *)templateId {
  DBRoute *route = DBFILESRouteObjects.DBFILESPropertiesTemplateGet;
  DBPROPERTIESGetPropertyTemplateArg *arg = [[DBPROPERTIESGetPropertyTemplateArg alloc] initWithTemplateId:templateId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)propertiesTemplateList {
  DBRoute *route = DBFILESRouteObjects.DBFILESPropertiesTemplateList;
  return [self.client requestRpc:route arg:nil];
}

- (DBRpcTask *)propertiesUpdate:(NSString *)path
           updatePropertyGroups:(NSArray<DBFILESPropertyGroupUpdate *> *)updatePropertyGroups {
  DBRoute *route = DBFILESRouteObjects.DBFILESPropertiesUpdate;
  DBFILESUpdatePropertyGroupArg *arg =
      [[DBFILESUpdatePropertyGroupArg alloc] initWithPath:path updatePropertyGroups:updatePropertyGroups];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)restore:(NSString *)path rev:(NSString *)rev {
  DBRoute *route = DBFILESRouteObjects.DBFILESRestore;
  DBFILESRestoreArg *arg = [[DBFILESRestoreArg alloc] initWithPath:path rev:rev];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)saveUrl:(NSString *)path url:(NSString *)url {
  DBRoute *route = DBFILESRouteObjects.DBFILESSaveUrl;
  DBFILESSaveUrlArg *arg = [[DBFILESSaveUrlArg alloc] initWithPath:path url:url];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)saveUrlCheckJobStatus:(NSString *)asyncJobId {
  DBRoute *route = DBFILESRouteObjects.DBFILESSaveUrlCheckJobStatus;
  DBASYNCPollArg *arg = [[DBASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)search:(NSString *)path query:(NSString *)query {
  DBRoute *route = DBFILESRouteObjects.DBFILESSearch;
  DBFILESSearchArg *arg = [[DBFILESSearchArg alloc] initWithPath:path query:query];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)search:(NSString *)path
                query:(NSString *)query
                start:(NSNumber *)start
           maxResults:(NSNumber *)maxResults
                 mode:(DBFILESSearchMode *)mode {
  DBRoute *route = DBFILESRouteObjects.DBFILESSearch;
  DBFILESSearchArg *arg =
      [[DBFILESSearchArg alloc] initWithPath:path query:query start:start maxResults:maxResults mode:mode];
  return [self.client requestRpc:route arg:arg];
}

- (DBUploadTask *)uploadUrl:(NSString *)path inputUrl:(NSString *)inputUrl {
  DBRoute *route = DBFILESRouteObjects.DBFILESUpload;
  DBFILESCommitInfo *arg = [[DBFILESCommitInfo alloc] initWithPath:path];
  return [self.client requestUpload:route arg:arg inputUrl:inputUrl];
}

- (DBUploadTask *)uploadUrl:(NSString *)path
                       mode:(DBFILESWriteMode *)mode
                 autorename:(NSNumber *)autorename
             clientModified:(NSDate *)clientModified
                       mute:(NSNumber *)mute
                   inputUrl:(NSString *)inputUrl {
  DBRoute *route = DBFILESRouteObjects.DBFILESUpload;
  DBFILESCommitInfo *arg = [[DBFILESCommitInfo alloc] initWithPath:path
                                                              mode:mode
                                                        autorename:autorename
                                                    clientModified:clientModified
                                                              mute:mute];
  return [self.client requestUpload:route arg:arg inputUrl:inputUrl];
}

- (DBUploadTask *)uploadData:(NSString *)path inputData:(NSData *)inputData {
  DBRoute *route = DBFILESRouteObjects.DBFILESUpload;
  DBFILESCommitInfo *arg = [[DBFILESCommitInfo alloc] initWithPath:path];
  return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)uploadData:(NSString *)path
                        mode:(DBFILESWriteMode *)mode
                  autorename:(NSNumber *)autorename
              clientModified:(NSDate *)clientModified
                        mute:(NSNumber *)mute
                   inputData:(NSData *)inputData {
  DBRoute *route = DBFILESRouteObjects.DBFILESUpload;
  DBFILESCommitInfo *arg = [[DBFILESCommitInfo alloc] initWithPath:path
                                                              mode:mode
                                                        autorename:autorename
                                                    clientModified:clientModified
                                                              mute:mute];
  return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)uploadStream:(NSString *)path inputStream:(NSInputStream *)inputStream {
  DBRoute *route = DBFILESRouteObjects.DBFILESUpload;
  DBFILESCommitInfo *arg = [[DBFILESCommitInfo alloc] initWithPath:path];
  return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBUploadTask *)uploadStream:(NSString *)path
                          mode:(DBFILESWriteMode *)mode
                    autorename:(NSNumber *)autorename
                clientModified:(NSDate *)clientModified
                          mute:(NSNumber *)mute
                   inputStream:(NSInputStream *)inputStream {
  DBRoute *route = DBFILESRouteObjects.DBFILESUpload;
  DBFILESCommitInfo *arg = [[DBFILESCommitInfo alloc] initWithPath:path
                                                              mode:mode
                                                        autorename:autorename
                                                    clientModified:clientModified
                                                              mute:mute];
  return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBUploadTask *)uploadSessionAppendUrl:(NSString *)sessionId offset:(NSNumber *)offset inputUrl:(NSString *)inputUrl {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppend;
  DBFILESUploadSessionCursor *arg = [[DBFILESUploadSessionCursor alloc] initWithSessionId:sessionId offset:offset];
  return [self.client requestUpload:route arg:arg inputUrl:inputUrl];
}

- (DBUploadTask *)uploadSessionAppendData:(NSString *)sessionId
                                   offset:(NSNumber *)offset
                                inputData:(NSData *)inputData {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppend;
  DBFILESUploadSessionCursor *arg = [[DBFILESUploadSessionCursor alloc] initWithSessionId:sessionId offset:offset];
  return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)uploadSessionAppendStream:(NSString *)sessionId
                                     offset:(NSNumber *)offset
                                inputStream:(NSInputStream *)inputStream {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppend;
  DBFILESUploadSessionCursor *arg = [[DBFILESUploadSessionCursor alloc] initWithSessionId:sessionId offset:offset];
  return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBUploadTask *)uploadSessionAppendV2Url:(DBFILESUploadSessionCursor *)cursor inputUrl:(NSString *)inputUrl {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppendV2;
  DBFILESUploadSessionAppendArg *arg = [[DBFILESUploadSessionAppendArg alloc] initWithCursor:cursor];
  return [self.client requestUpload:route arg:arg inputUrl:inputUrl];
}

- (DBUploadTask *)uploadSessionAppendV2Url:(DBFILESUploadSessionCursor *)cursor
                                     close:(NSNumber *)close
                                  inputUrl:(NSString *)inputUrl {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppendV2;
  DBFILESUploadSessionAppendArg *arg = [[DBFILESUploadSessionAppendArg alloc] initWithCursor:cursor close:close];
  return [self.client requestUpload:route arg:arg inputUrl:inputUrl];
}

- (DBUploadTask *)uploadSessionAppendV2Data:(DBFILESUploadSessionCursor *)cursor inputData:(NSData *)inputData {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppendV2;
  DBFILESUploadSessionAppendArg *arg = [[DBFILESUploadSessionAppendArg alloc] initWithCursor:cursor];
  return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)uploadSessionAppendV2Data:(DBFILESUploadSessionCursor *)cursor
                                      close:(NSNumber *)close
                                  inputData:(NSData *)inputData {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppendV2;
  DBFILESUploadSessionAppendArg *arg = [[DBFILESUploadSessionAppendArg alloc] initWithCursor:cursor close:close];
  return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)uploadSessionAppendV2Stream:(DBFILESUploadSessionCursor *)cursor
                                  inputStream:(NSInputStream *)inputStream {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppendV2;
  DBFILESUploadSessionAppendArg *arg = [[DBFILESUploadSessionAppendArg alloc] initWithCursor:cursor];
  return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBUploadTask *)uploadSessionAppendV2Stream:(DBFILESUploadSessionCursor *)cursor
                                        close:(NSNumber *)close
                                  inputStream:(NSInputStream *)inputStream {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionAppendV2;
  DBFILESUploadSessionAppendArg *arg = [[DBFILESUploadSessionAppendArg alloc] initWithCursor:cursor close:close];
  return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBUploadTask *)uploadSessionFinishUrl:(DBFILESUploadSessionCursor *)cursor
                                  commit:(DBFILESCommitInfo *)commit
                                inputUrl:(NSString *)inputUrl {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionFinish;
  DBFILESUploadSessionFinishArg *arg = [[DBFILESUploadSessionFinishArg alloc] initWithCursor:cursor commit:commit];
  return [self.client requestUpload:route arg:arg inputUrl:inputUrl];
}

- (DBUploadTask *)uploadSessionFinishData:(DBFILESUploadSessionCursor *)cursor
                                   commit:(DBFILESCommitInfo *)commit
                                inputData:(NSData *)inputData {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionFinish;
  DBFILESUploadSessionFinishArg *arg = [[DBFILESUploadSessionFinishArg alloc] initWithCursor:cursor commit:commit];
  return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)uploadSessionFinishStream:(DBFILESUploadSessionCursor *)cursor
                                     commit:(DBFILESCommitInfo *)commit
                                inputStream:(NSInputStream *)inputStream {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionFinish;
  DBFILESUploadSessionFinishArg *arg = [[DBFILESUploadSessionFinishArg alloc] initWithCursor:cursor commit:commit];
  return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBRpcTask *)uploadSessionFinishBatch:(NSArray<DBFILESUploadSessionFinishArg *> *)entries {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionFinishBatch;
  DBFILESUploadSessionFinishBatchArg *arg = [[DBFILESUploadSessionFinishBatchArg alloc] initWithEntries:entries];
  return [self.client requestRpc:route arg:arg];
}

- (DBRpcTask *)uploadSessionFinishBatchCheck:(NSString *)asyncJobId {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionFinishBatchCheck;
  DBASYNCPollArg *arg = [[DBASYNCPollArg alloc] initWithAsyncJobId:asyncJobId];
  return [self.client requestRpc:route arg:arg];
}

- (DBUploadTask *)uploadSessionStartUrl:(NSString *)inputUrl {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionStart;
  DBFILESUploadSessionStartArg *arg = [[DBFILESUploadSessionStartArg alloc] initDefault];
  return [self.client requestUpload:route arg:arg inputUrl:inputUrl];
}

- (DBUploadTask *)uploadSessionStartUrl:(NSNumber *)close inputUrl:(NSString *)inputUrl {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionStart;
  DBFILESUploadSessionStartArg *arg = [[DBFILESUploadSessionStartArg alloc] initWithClose:close];
  return [self.client requestUpload:route arg:arg inputUrl:inputUrl];
}

- (DBUploadTask *)uploadSessionStartData:(NSData *)inputData {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionStart;
  DBFILESUploadSessionStartArg *arg = [[DBFILESUploadSessionStartArg alloc] initDefault];
  return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)uploadSessionStartData:(NSNumber *)close inputData:(NSData *)inputData {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionStart;
  DBFILESUploadSessionStartArg *arg = [[DBFILESUploadSessionStartArg alloc] initWithClose:close];
  return [self.client requestUpload:route arg:arg inputData:inputData];
}

- (DBUploadTask *)uploadSessionStartStream:(NSInputStream *)inputStream {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionStart;
  DBFILESUploadSessionStartArg *arg = [[DBFILESUploadSessionStartArg alloc] initDefault];
  return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

- (DBUploadTask *)uploadSessionStartStream:(NSNumber *)close inputStream:(NSInputStream *)inputStream {
  DBRoute *route = DBFILESRouteObjects.DBFILESUploadSessionStart;
  DBFILESUploadSessionStartArg *arg = [[DBFILESUploadSessionStartArg alloc] initWithClose:close];
  return [self.client requestUpload:route arg:arg inputStream:inputStream];
}

@end
